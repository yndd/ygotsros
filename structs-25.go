/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/lag YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag struct {
	LinkMapProfile *int32                                                                                  `path:"link-map-profile" module:"nokia-conf"`
	PerLinkHash    *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag_PerLinkHash `path:"per-link-hash" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag) IsYANGGoStruct() {}

// GetOrCreatePerLinkHash retrieves the value of the PerLinkHash field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag) GetOrCreatePerLinkHash() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag_PerLinkHash {
	if t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	t.PerLinkHash = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag_PerLinkHash{}
	return t.PerLinkHash
}

// GetPerLinkHash returns the value of the PerLinkHash struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag. If the receiver or the field PerLinkHash is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag) GetPerLinkHash() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag_PerLinkHash {
	if t != nil && t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	return nil
}

// GetLinkMapProfile retrieves the value of the leaf LinkMapProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkMapProfile is set, it can
// safely use t.GetLinkMapProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkMapProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag) GetLinkMapProfile() int32 {
	if t == nil || t.LinkMapProfile == nil {
		return 0
	}
	return *t.LinkMapProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PerLinkHash.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag_PerLinkHash represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/lag/per-link-hash YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag_PerLinkHash struct {
	Class  *int32 `path:"class" module:"nokia-conf"`
	Weight *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag_PerLinkHash implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag_PerLinkHash) IsYANGGoStruct() {
}

// GetClass retrieves the value of the leaf Class from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Class is set, it can
// safely use t.GetClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Class == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag_PerLinkHash) GetClass() int32 {
	if t == nil || t.Class == nil {
		return 1
	}
	return *t.Class
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag_PerLinkHash) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag_PerLinkHash
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag_PerLinkHash) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Class == nil {
		var v int32 = 1
		t.Class = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag_PerLinkHash) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag_PerLinkHash"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag_PerLinkHash) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag_PerLinkHash) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag_PerLinkHash.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag_PerLinkHash) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/static-host YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost struct {
	Ipv4        map[NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Key]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6        map[NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Key]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6 `path:"ipv6" module:"nokia-conf"`
	MacLearning *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_MacLearning                                                                                         `path:"mac-learning" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost) IsYANGGoStruct() {
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Key represents the key for list Ipv4 of element /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/static-host.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Key struct {
	Ip  string `path:"ip"`
	Mac string `path:"mac"`
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Key represents the key for list Ipv6 of element /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/static-host.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Key struct {
	Prefix string `path:"prefix"`
	Mac    string `path:"mac"`
}

// NewIpv4 creates a new entry in the Ipv4 list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost) NewIpv4(Ip string, Mac string) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Key]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4)
	}

	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Key{
		Ip:  Ip,
		Mac: Mac,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4", key)
	}

	t.Ipv4[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4{
		Ip:  &Ip,
		Mac: &Mac,
	}

	return t.Ipv4[key], nil
}

// RenameIpv4 renames an entry in the list Ipv4 within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost) RenameIpv4(oldK, newK NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Key) error {
	if _, ok := t.Ipv4[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv4", newK)
	}

	e, ok := t.Ipv4[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv4", oldK)
	}
	e.Ip = &newK.Ip
	e.Mac = &newK.Mac

	t.Ipv4[newK] = e
	delete(t.Ipv4, oldK)
	return nil
}

// GetOrCreateIpv4 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost) GetOrCreateIpv4(Ip string, Mac string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4 {

	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Key{
		Ip:  Ip,
		Mac: Mac,
	}

	if v, ok := t.Ipv4[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4(Ip, Mac)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4 got unexpected error: %v", err))
	}
	return v
}

// GetIpv4 retrieves the value with the specified key from
// the Ipv4 map field of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost) GetIpv4(Ip string, Mac string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4 {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Key{
		Ip:  Ip,
		Mac: Mac,
	}

	if lm, ok := t.Ipv4[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv4 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost) DeleteIpv4(Ip string, Mac string) {
	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Key{
		Ip:  Ip,
		Mac: Mac,
	}

	delete(t.Ipv4, key)
}

// AppendIpv4 appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4 struct to the
// list Ipv4 of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost) AppendIpv4(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key for Ip")
	}

	if v.Mac == nil {
		return fmt.Errorf("invalid nil key for Mac")
	}

	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Key{
		Ip:  *v.Ip,
		Mac: *v.Mac,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Key]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4)
	}

	if _, ok := t.Ipv4[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv4 %v", key)
	}

	t.Ipv4[key] = v
	return nil
}

// NewIpv6 creates a new entry in the Ipv6 list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost) NewIpv6(Prefix string, Mac string) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6 == nil {
		t.Ipv6 = make(map[NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Key]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6)
	}

	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Key{
		Prefix: Prefix,
		Mac:    Mac,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6", key)
	}

	t.Ipv6[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6{
		Prefix: &Prefix,
		Mac:    &Mac,
	}

	return t.Ipv6[key], nil
}

// RenameIpv6 renames an entry in the list Ipv6 within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost) RenameIpv6(oldK, newK NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Key) error {
	if _, ok := t.Ipv6[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6", newK)
	}

	e, ok := t.Ipv6[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6", oldK)
	}
	e.Prefix = &newK.Prefix
	e.Mac = &newK.Mac

	t.Ipv6[newK] = e
	delete(t.Ipv6, oldK)
	return nil
}

// GetOrCreateIpv6 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost) GetOrCreateIpv6(Prefix string, Mac string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6 {

	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Key{
		Prefix: Prefix,
		Mac:    Mac,
	}

	if v, ok := t.Ipv6[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6(Prefix, Mac)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6 got unexpected error: %v", err))
	}
	return v
}

// GetIpv6 retrieves the value with the specified key from
// the Ipv6 map field of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost) GetIpv6(Prefix string, Mac string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6 {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Key{
		Prefix: Prefix,
		Mac:    Mac,
	}

	if lm, ok := t.Ipv6[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost) DeleteIpv6(Prefix string, Mac string) {
	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Key{
		Prefix: Prefix,
		Mac:    Mac,
	}

	delete(t.Ipv6, key)
}

// AppendIpv6 appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6 struct to the
// list Ipv6 of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost) AppendIpv6(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.Mac == nil {
		return fmt.Errorf("invalid nil key for Mac")
	}

	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Key{
		Prefix: *v.Prefix,
		Mac:    *v.Mac,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6 == nil {
		t.Ipv6 = make(map[NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Key]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6)
	}

	if _, ok := t.Ipv6[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6 %v", key)
	}

	t.Ipv6[key] = v
	return nil
}

// GetOrCreateMacLearning retrieves the value of the MacLearning field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost) GetOrCreateMacLearning() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_MacLearning {
	if t.MacLearning != nil {
		return t.MacLearning
	}
	t.MacLearning = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_MacLearning{}
	return t.MacLearning
}

// GetMacLearning returns the value of the MacLearning struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost. If the receiver or the field MacLearning is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost) GetMacLearning() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_MacLearning {
	if t != nil && t.MacLearning != nil {
		return t.MacLearning
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MacLearning.PopulateDefaults()
	for _, e := range t.Ipv4 {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6 {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4 represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/static-host/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4 struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                     `path:"admin-state" module:"nokia-conf"`
	AncpString         *string                                                                                                         `path:"ancp-string" module:"nokia-conf"`
	AppProfile         *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_AppProfile              `path:"app-profile" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	IntDestId          *string                                                                                                         `path:"int-dest-id" module:"nokia-conf"`
	Ip                 *string                                                                                                         `path:"ip" module:"nokia-conf"`
	Mac                *string                                                                                                         `path:"mac" module:"nokia-conf"`
	ManagedRoute       map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute `path:"managed-route" module:"nokia-conf"`
	RipPolicy          *string                                                                                                         `path:"rip-policy" module:"nokia-conf"`
	Shcv               *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Shcv                    `path:"shcv" module:"nokia-conf"`
	SlaProfile         *string                                                                                                         `path:"sla-profile" module:"nokia-conf"`
	SubProfile         *string                                                                                                         `path:"sub-profile" module:"nokia-conf"`
	SubscriberId       *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_SubscriberId            `path:"subscriber-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) IsYANGGoStruct() {
}

// NewManagedRoute creates a new entry in the ManagedRoute list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) NewManagedRoute(Prefix string) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ManagedRoute == nil {
		t.ManagedRoute = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ManagedRoute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ManagedRoute", key)
	}

	t.ManagedRoute[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute{
		Prefix: &Prefix,
	}

	return t.ManagedRoute[key], nil
}

// RenameManagedRoute renames an entry in the list ManagedRoute within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) RenameManagedRoute(oldK, newK string) error {
	if _, ok := t.ManagedRoute[newK]; ok {
		return fmt.Errorf("key %v already exists in ManagedRoute", newK)
	}

	e, ok := t.ManagedRoute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ManagedRoute", oldK)
	}
	e.Prefix = &newK

	t.ManagedRoute[newK] = e
	delete(t.ManagedRoute, oldK)
	return nil
}

// GetOrCreateManagedRoute retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) GetOrCreateManagedRoute(Prefix string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute {

	key := Prefix

	if v, ok := t.ManagedRoute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewManagedRoute(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateManagedRoute got unexpected error: %v", err))
	}
	return v
}

// GetManagedRoute retrieves the value with the specified key from
// the ManagedRoute map field of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) GetManagedRoute(Prefix string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.ManagedRoute[key]; ok {
		return lm
	}
	return nil
}

// DeleteManagedRoute deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) DeleteManagedRoute(Prefix string) {
	key := Prefix

	delete(t.ManagedRoute, key)
}

// AppendManagedRoute appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute struct to the
// list ManagedRoute of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) AppendManagedRoute(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ManagedRoute == nil {
		t.ManagedRoute = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute)
	}

	if _, ok := t.ManagedRoute[key]; ok {
		return fmt.Errorf("duplicate key for list ManagedRoute %v", key)
	}

	t.ManagedRoute[key] = v
	return nil
}

// GetOrCreateAppProfile retrieves the value of the AppProfile field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) GetOrCreateAppProfile() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_AppProfile {
	if t.AppProfile != nil {
		return t.AppProfile
	}
	t.AppProfile = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_AppProfile{}
	return t.AppProfile
}

// GetOrCreateShcv retrieves the value of the Shcv field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) GetOrCreateShcv() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Shcv {
	if t.Shcv != nil {
		return t.Shcv
	}
	t.Shcv = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Shcv{}
	return t.Shcv
}

// GetOrCreateSubscriberId retrieves the value of the SubscriberId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) GetOrCreateSubscriberId() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_SubscriberId {
	if t.SubscriberId != nil {
		return t.SubscriberId
	}
	t.SubscriberId = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_SubscriberId{}
	return t.SubscriberId
}

// GetAppProfile returns the value of the AppProfile struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4. If the receiver or the field AppProfile is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) GetAppProfile() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_AppProfile {
	if t != nil && t.AppProfile != nil {
		return t.AppProfile
	}
	return nil
}

// GetShcv returns the value of the Shcv struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4. If the receiver or the field Shcv is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) GetShcv() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Shcv {
	if t != nil && t.Shcv != nil {
		return t.Shcv
	}
	return nil
}

// GetSubscriberId returns the value of the SubscriberId struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4. If the receiver or the field SubscriberId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) GetSubscriberId() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_SubscriberId {
	if t != nil && t.SubscriberId != nil {
		return t.SubscriberId
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAncpString retrieves the value of the leaf AncpString from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AncpString is set, it can
// safely use t.GetAncpString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AncpString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) GetAncpString() string {
	if t == nil || t.AncpString == nil {
		return ""
	}
	return *t.AncpString
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIntDestId retrieves the value of the leaf IntDestId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IntDestId is set, it can
// safely use t.GetIntDestId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IntDestId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) GetIntDestId() string {
	if t == nil || t.IntDestId == nil {
		return ""
	}
	return *t.IntDestId
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetRipPolicy retrieves the value of the leaf RipPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RipPolicy is set, it can
// safely use t.GetRipPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RipPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) GetRipPolicy() string {
	if t == nil || t.RipPolicy == nil {
		return ""
	}
	return *t.RipPolicy
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSubProfile retrieves the value of the leaf SubProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfile is set, it can
// safely use t.GetSubProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) GetSubProfile() string {
	if t == nil || t.SubProfile == nil {
		return ""
	}
	return *t.SubProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.AppProfile.PopulateDefaults()
	t.Shcv.PopulateDefaults()
	t.SubscriberId.PopulateDefaults()
	for _, e := range t.ManagedRoute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	if t.Mac == nil {
		return nil, fmt.Errorf("nil value for key Mac")
	}

	return map[string]interface{}{
		"ip":  *t.Ip,
		"mac": *t.Mac,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_AppProfile represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/static-host/ipv4/app-profile YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_AppProfile struct {
	Profile *string                               `path:"profile" module:"nokia-conf"`
	Scope   E_NokiaTypesSubscriberMgmt_AaSubScope `path:"scope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_AppProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_AppProfile) IsYANGGoStruct() {
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_AppProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_AppProfile) GetProfile() string {
	if t == nil || t.Profile == nil {
		return ""
	}
	return *t.Profile
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_AppProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_AppProfile) GetScope() E_NokiaTypesSubscriberMgmt_AaSubScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesSubscriberMgmt_AaSubScope_subscriber
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_AppProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_AppProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Scope == 0 {
		t.Scope = NokiaTypesSubscriberMgmt_AaSubScope_subscriber
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_AppProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_AppProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_AppProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_AppProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_AppProfile.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_AppProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/static-host/ipv4/managed-route YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Metric             *uint32  `path:"metric" module:"nokia-conf"`
	Preference         *uint32  `path:"preference" module:"nokia-conf"`
	Prefix             *string  `path:"prefix" module:"nokia-conf"`
	Tag                *uint32  `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Metric == nil {
		var v uint32 = 0
		t.Metric = &v
	}
	if t.Preference == nil {
		var v uint32 = 0
		t.Preference = &v
	}
	if t.Tag == nil {
		var v uint32 = 0
		t.Tag = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_ManagedRoute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Shcv represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/static-host/ipv4/shcv YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Shcv struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Shcv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Shcv) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Shcv
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Shcv) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Shcv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Shcv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Shcv) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Shcv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Shcv.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_Shcv) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_SubscriberId represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/static-host/ipv4/subscriber-id YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_SubscriberId struct {
	String   *string   `path:"string" module:"nokia-conf"`
	UseSapId YANGEmpty `path:"use-sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_SubscriberId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_SubscriberId) IsYANGGoStruct() {
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_SubscriberId) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetUseSapId retrieves the value of the leaf UseSapId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseSapId is set, it can
// safely use t.GetUseSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseSapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_SubscriberId) GetUseSapId() YANGEmpty {
	if t == nil || t.UseSapId == false {
		return false
	}
	return t.UseSapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_SubscriberId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_SubscriberId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_SubscriberId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_SubscriberId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_SubscriberId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_SubscriberId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_SubscriberId.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv4_SubscriberId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6 represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/static-host/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6 struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                     `path:"admin-state" module:"nokia-conf"`
	AncpString         *string                                                                                                         `path:"ancp-string" module:"nokia-conf"`
	AppProfile         *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_AppProfile              `path:"app-profile" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	IntDestId          *string                                                                                                         `path:"int-dest-id" module:"nokia-conf"`
	Mac                *string                                                                                                         `path:"mac" module:"nokia-conf"`
	MacLinking         *string                                                                                                         `path:"mac-linking" module:"nokia-conf"`
	ManagedRoute       map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute `path:"managed-route" module:"nokia-conf"`
	Prefix             *string                                                                                                         `path:"prefix" module:"nokia-conf"`
	RetailSvcId        *uint32                                                                                                         `path:"retail-svc-id" module:"nokia-conf"`
	Shcv               *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Shcv                    `path:"shcv" module:"nokia-conf"`
	SlaProfile         *string                                                                                                         `path:"sla-profile" module:"nokia-conf"`
	SubProfile         *string                                                                                                         `path:"sub-profile" module:"nokia-conf"`
	SubscriberId       *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_SubscriberId            `path:"subscriber-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) IsYANGGoStruct() {
}

// NewManagedRoute creates a new entry in the ManagedRoute list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) NewManagedRoute(Ipv6Prefix string) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ManagedRoute == nil {
		t.ManagedRoute = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ManagedRoute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ManagedRoute", key)
	}

	t.ManagedRoute[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.ManagedRoute[key], nil
}

// RenameManagedRoute renames an entry in the list ManagedRoute within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) RenameManagedRoute(oldK, newK string) error {
	if _, ok := t.ManagedRoute[newK]; ok {
		return fmt.Errorf("key %v already exists in ManagedRoute", newK)
	}

	e, ok := t.ManagedRoute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ManagedRoute", oldK)
	}
	e.Ipv6Prefix = &newK

	t.ManagedRoute[newK] = e
	delete(t.ManagedRoute, oldK)
	return nil
}

// GetOrCreateManagedRoute retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) GetOrCreateManagedRoute(Ipv6Prefix string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute {

	key := Ipv6Prefix

	if v, ok := t.ManagedRoute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewManagedRoute(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateManagedRoute got unexpected error: %v", err))
	}
	return v
}

// GetManagedRoute retrieves the value with the specified key from
// the ManagedRoute map field of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) GetManagedRoute(Ipv6Prefix string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.ManagedRoute[key]; ok {
		return lm
	}
	return nil
}

// DeleteManagedRoute deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) DeleteManagedRoute(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.ManagedRoute, key)
}

// AppendManagedRoute appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute struct to the
// list ManagedRoute of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) AppendManagedRoute(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ManagedRoute == nil {
		t.ManagedRoute = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute)
	}

	if _, ok := t.ManagedRoute[key]; ok {
		return fmt.Errorf("duplicate key for list ManagedRoute %v", key)
	}

	t.ManagedRoute[key] = v
	return nil
}

// GetOrCreateAppProfile retrieves the value of the AppProfile field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) GetOrCreateAppProfile() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_AppProfile {
	if t.AppProfile != nil {
		return t.AppProfile
	}
	t.AppProfile = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_AppProfile{}
	return t.AppProfile
}

// GetOrCreateShcv retrieves the value of the Shcv field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) GetOrCreateShcv() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Shcv {
	if t.Shcv != nil {
		return t.Shcv
	}
	t.Shcv = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Shcv{}
	return t.Shcv
}

// GetOrCreateSubscriberId retrieves the value of the SubscriberId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) GetOrCreateSubscriberId() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_SubscriberId {
	if t.SubscriberId != nil {
		return t.SubscriberId
	}
	t.SubscriberId = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_SubscriberId{}
	return t.SubscriberId
}

// GetAppProfile returns the value of the AppProfile struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6. If the receiver or the field AppProfile is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) GetAppProfile() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_AppProfile {
	if t != nil && t.AppProfile != nil {
		return t.AppProfile
	}
	return nil
}

// GetShcv returns the value of the Shcv struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6. If the receiver or the field Shcv is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) GetShcv() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Shcv {
	if t != nil && t.Shcv != nil {
		return t.Shcv
	}
	return nil
}

// GetSubscriberId returns the value of the SubscriberId struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6. If the receiver or the field SubscriberId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) GetSubscriberId() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_SubscriberId {
	if t != nil && t.SubscriberId != nil {
		return t.SubscriberId
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAncpString retrieves the value of the leaf AncpString from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AncpString is set, it can
// safely use t.GetAncpString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AncpString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) GetAncpString() string {
	if t == nil || t.AncpString == nil {
		return ""
	}
	return *t.AncpString
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIntDestId retrieves the value of the leaf IntDestId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IntDestId is set, it can
// safely use t.GetIntDestId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IntDestId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) GetIntDestId() string {
	if t == nil || t.IntDestId == nil {
		return ""
	}
	return *t.IntDestId
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetMacLinking retrieves the value of the leaf MacLinking from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacLinking is set, it can
// safely use t.GetMacLinking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacLinking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) GetMacLinking() string {
	if t == nil || t.MacLinking == nil {
		return ""
	}
	return *t.MacLinking
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetRetailSvcId retrieves the value of the leaf RetailSvcId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetailSvcId is set, it can
// safely use t.GetRetailSvcId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetailSvcId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) GetRetailSvcId() uint32 {
	if t == nil || t.RetailSvcId == nil {
		return 0
	}
	return *t.RetailSvcId
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSubProfile retrieves the value of the leaf SubProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfile is set, it can
// safely use t.GetSubProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) GetSubProfile() string {
	if t == nil || t.SubProfile == nil {
		return ""
	}
	return *t.SubProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.AppProfile.PopulateDefaults()
	t.Shcv.PopulateDefaults()
	t.SubscriberId.PopulateDefaults()
	for _, e := range t.ManagedRoute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Mac == nil {
		return nil, fmt.Errorf("nil value for key Mac")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"mac":    *t.Mac,
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_AppProfile represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/static-host/ipv6/app-profile YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_AppProfile struct {
	Profile *string                               `path:"profile" module:"nokia-conf"`
	Scope   E_NokiaTypesSubscriberMgmt_AaSubScope `path:"scope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_AppProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_AppProfile) IsYANGGoStruct() {
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_AppProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_AppProfile) GetProfile() string {
	if t == nil || t.Profile == nil {
		return ""
	}
	return *t.Profile
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_AppProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_AppProfile) GetScope() E_NokiaTypesSubscriberMgmt_AaSubScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesSubscriberMgmt_AaSubScope_subscriber
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_AppProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_AppProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Scope == 0 {
		t.Scope = NokiaTypesSubscriberMgmt_AaSubScope_subscriber
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_AppProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_AppProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_AppProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_AppProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_AppProfile.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_AppProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/static-host/ipv6/managed-route YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv6Prefix         *string  `path:"ipv6-prefix" module:"nokia-conf"`
	Metric             *uint32  `path:"metric" module:"nokia-conf"`
	Preference         *uint32  `path:"preference" module:"nokia-conf"`
	Tag                *uint32  `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Metric == nil {
		var v uint32 = 0
		t.Metric = &v
	}
	if t.Preference == nil {
		var v uint32 = 0
		t.Preference = &v
	}
	if t.Tag == nil {
		var v uint32 = 0
		t.Tag = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_ManagedRoute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Shcv represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/static-host/ipv6/shcv YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Shcv struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Shcv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Shcv) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Shcv
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Shcv) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Shcv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Shcv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Shcv) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Shcv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Shcv.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_Shcv) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_SubscriberId represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/static-host/ipv6/subscriber-id YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_SubscriberId struct {
	String   *string   `path:"string" module:"nokia-conf"`
	UseSapId YANGEmpty `path:"use-sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_SubscriberId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_SubscriberId) IsYANGGoStruct() {
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_SubscriberId) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetUseSapId retrieves the value of the leaf UseSapId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseSapId is set, it can
// safely use t.GetUseSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseSapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_SubscriberId) GetUseSapId() YANGEmpty {
	if t == nil || t.UseSapId == false {
		return false
	}
	return t.UseSapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_SubscriberId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_SubscriberId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_SubscriberId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_SubscriberId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_SubscriberId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_SubscriberId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_SubscriberId.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_Ipv6_SubscriberId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_MacLearning represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/static-host/mac-learning YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_MacLearning struct {
	DataTriggered *bool `path:"data-triggered" module:"nokia-conf"`
	SingleMac     *bool `path:"single-mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_MacLearning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_MacLearning) IsYANGGoStruct() {
}

// GetDataTriggered retrieves the value of the leaf DataTriggered from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DataTriggered is set, it can
// safely use t.GetDataTriggered() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DataTriggered == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_MacLearning) GetDataTriggered() bool {
	if t == nil || t.DataTriggered == nil {
		return false
	}
	return *t.DataTriggered
}

// GetSingleMac retrieves the value of the leaf SingleMac from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SingleMac is set, it can
// safely use t.GetSingleMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SingleMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_MacLearning) GetSingleMac() bool {
	if t == nil || t.SingleMac == nil {
		return false
	}
	return *t.SingleMac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_MacLearning
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_MacLearning) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DataTriggered == nil {
		var v bool = false
		t.DataTriggered = &v
	}
	if t.SingleMac == nil {
		var v bool = false
		t.SingleMac = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_MacLearning) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_MacLearning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_MacLearning) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_MacLearning) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_MacLearning.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost_MacLearning) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/sub-sla-mgmt YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt struct {
	AdminState          E_NokiaTypesSros_AdminState                                                                             `path:"admin-state" module:"nokia-conf"`
	Defaults            *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults             `path:"defaults" module:"nokia-conf"`
	SingleSubParameters *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters  `path:"single-sub-parameters" module:"nokia-conf"`
	SubIdentPolicy      *string                                                                                                 `path:"sub-ident-policy" module:"nokia-conf"`
	SubscriberLimit     NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SubscriberLimit_Union `path:"subscriber-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt) IsYANGGoStruct() {
}

// GetOrCreateDefaults retrieves the value of the Defaults field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt) GetOrCreateDefaults() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults {
	if t.Defaults != nil {
		return t.Defaults
	}
	t.Defaults = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults{}
	return t.Defaults
}

// GetOrCreateSingleSubParameters retrieves the value of the SingleSubParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt) GetOrCreateSingleSubParameters() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters {
	if t.SingleSubParameters != nil {
		return t.SingleSubParameters
	}
	t.SingleSubParameters = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters{}
	return t.SingleSubParameters
}

// GetDefaults returns the value of the Defaults struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt. If the receiver or the field Defaults is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt) GetDefaults() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults {
	if t != nil && t.Defaults != nil {
		return t.Defaults
	}
	return nil
}

// GetSingleSubParameters returns the value of the SingleSubParameters struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt. If the receiver or the field SingleSubParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt) GetSingleSubParameters() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters {
	if t != nil && t.SingleSubParameters != nil {
		return t.SingleSubParameters
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetSubIdentPolicy retrieves the value of the leaf SubIdentPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubIdentPolicy is set, it can
// safely use t.GetSubIdentPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubIdentPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt) GetSubIdentPolicy() string {
	if t == nil || t.SubIdentPolicy == nil {
		return ""
	}
	return *t.SubIdentPolicy
}

// GetSubscriberLimit retrieves the value of the leaf SubscriberLimit from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberLimit is set, it can
// safely use t.GetSubscriberLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt) GetSubscriberLimit() NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SubscriberLimit_Union {
	if t == nil || t.SubscriberLimit == nil {
		return UnionUint32(1)
	}
	return t.SubscriberLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.SubscriberLimit == nil {
		t.SubscriberLimit = UnionUint32(1)
	}
	t.Defaults.PopulateDefaults()
	t.SingleSubParameters.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/sub-sla-mgmt/defaults YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults struct {
	AppProfile   *string                                                                                                  `path:"app-profile" module:"nokia-conf"`
	IntDestId    *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_IntDestId    `path:"int-dest-id" module:"nokia-conf"`
	SlaProfile   *string                                                                                                  `path:"sla-profile" module:"nokia-conf"`
	SubProfile   *string                                                                                                  `path:"sub-profile" module:"nokia-conf"`
	SubscriberId *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId `path:"subscriber-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults) IsYANGGoStruct() {
}

// GetOrCreateIntDestId retrieves the value of the IntDestId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults) GetOrCreateIntDestId() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_IntDestId {
	if t.IntDestId != nil {
		return t.IntDestId
	}
	t.IntDestId = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_IntDestId{}
	return t.IntDestId
}

// GetOrCreateSubscriberId retrieves the value of the SubscriberId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults) GetOrCreateSubscriberId() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId {
	if t.SubscriberId != nil {
		return t.SubscriberId
	}
	t.SubscriberId = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId{}
	return t.SubscriberId
}

// GetIntDestId returns the value of the IntDestId struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults. If the receiver or the field IntDestId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults) GetIntDestId() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_IntDestId {
	if t != nil && t.IntDestId != nil {
		return t.IntDestId
	}
	return nil
}

// GetSubscriberId returns the value of the SubscriberId struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults. If the receiver or the field SubscriberId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults) GetSubscriberId() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId {
	if t != nil && t.SubscriberId != nil {
		return t.SubscriberId
	}
	return nil
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSubProfile retrieves the value of the leaf SubProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfile is set, it can
// safely use t.GetSubProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults) GetSubProfile() string {
	if t == nil || t.SubProfile == nil {
		return ""
	}
	return *t.SubProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IntDestId.PopulateDefaults()
	t.SubscriberId.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_IntDestId represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/sub-sla-mgmt/defaults/int-dest-id YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_IntDestId struct {
	String  *string   `path:"string" module:"nokia-conf"`
	TopQTag YANGEmpty `path:"top-q-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_IntDestId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_IntDestId) IsYANGGoStruct() {
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_IntDestId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_IntDestId) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetTopQTag retrieves the value of the leaf TopQTag from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_IntDestId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TopQTag is set, it can
// safely use t.GetTopQTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TopQTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_IntDestId) GetTopQTag() YANGEmpty {
	if t == nil || t.TopQTag == false {
		return false
	}
	return t.TopQTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_IntDestId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_IntDestId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_IntDestId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_IntDestId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_IntDestId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_IntDestId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_IntDestId.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_IntDestId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/sub-sla-mgmt/defaults/subscriber-id YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId struct {
	AutoId YANGEmpty `path:"auto-id" module:"nokia-conf"`
	SapId  YANGEmpty `path:"sap-id" module:"nokia-conf"`
	String *string   `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId) IsYANGGoStruct() {
}

// GetAutoId retrieves the value of the leaf AutoId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoId is set, it can
// safely use t.GetAutoId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId) GetAutoId() YANGEmpty {
	if t == nil || t.AutoId == false {
		return false
	}
	return t.AutoId
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId) GetSapId() YANGEmpty {
	if t == nil || t.SapId == false {
		return false
	}
	return t.SapId
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_Defaults_SubscriberId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/sub-sla-mgmt/single-sub-parameters YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters struct {
	NonSubTraffic       *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic `path:"non-sub-traffic" module:"nokia-conf" yangPresence:"true"`
	ProfiledTrafficOnly *bool                                                                                                                `path:"profiled-traffic-only" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters) IsYANGGoStruct() {
}

// GetOrCreateNonSubTraffic retrieves the value of the NonSubTraffic field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters) GetOrCreateNonSubTraffic() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic {
	if t.NonSubTraffic != nil {
		return t.NonSubTraffic
	}
	t.NonSubTraffic = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic{}
	return t.NonSubTraffic
}

// GetNonSubTraffic returns the value of the NonSubTraffic struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters. If the receiver or the field NonSubTraffic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters) GetNonSubTraffic() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic {
	if t != nil && t.NonSubTraffic != nil {
		return t.NonSubTraffic
	}
	return nil
}

// GetProfiledTrafficOnly retrieves the value of the leaf ProfiledTrafficOnly from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfiledTrafficOnly is set, it can
// safely use t.GetProfiledTrafficOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfiledTrafficOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters) GetProfiledTrafficOnly() bool {
	if t == nil || t.ProfiledTrafficOnly == nil {
		return false
	}
	return *t.ProfiledTrafficOnly
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ProfiledTrafficOnly == nil {
		var v bool = false
		t.ProfiledTrafficOnly = &v
	}
	t.NonSubTraffic.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/sub-sla-mgmt/single-sub-parameters/non-sub-traffic YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic struct {
	AppProfile   *string `path:"app-profile" module:"nokia-conf"`
	SlaProfile   *string `path:"sla-profile" module:"nokia-conf"`
	SubProfile   *string `path:"sub-profile" module:"nokia-conf"`
	SubscriberId *string `path:"subscriber-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) IsYANGGoStruct() {
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSubProfile retrieves the value of the leaf SubProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfile is set, it can
// safely use t.GetSubProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) GetSubProfile() string {
	if t == nil || t.SubProfile == nil {
		return ""
	}
	return *t.SubProfile
}

// GetSubscriberId retrieves the value of the leaf SubscriberId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberId is set, it can
// safely use t.GetSubscriberId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) GetSubscriberId() string {
	if t == nil || t.SubscriberId == nil {
		return ""
	}
	return *t.SubscriberId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/srrp YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp struct {
	AdminState               E_NokiaTypesSros_AdminState                                                                        `path:"admin-state" module:"nokia-conf"`
	ApplyGroups              []string                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude       []string                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	BfdLiveness              *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness               `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	Description              *string                                                                                            `path:"description" module:"nokia-conf"`
	GwMac                    *string                                                                                            `path:"gw-mac" module:"nokia-conf"`
	KeepAliveInterval        *uint32                                                                                            `path:"keep-alive-interval" module:"nokia-conf"`
	MessagePath              *string                                                                                            `path:"message-path" module:"nokia-conf"`
	MonitorOperGroup         *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup          `path:"monitor-oper-group" module:"nokia-conf"`
	OneGarpPerSap            *bool                                                                                              `path:"one-garp-per-sap" module:"nokia-conf"`
	Policy                   []uint32                                                                                           `path:"policy" module:"nokia-conf"`
	Preempt                  *bool                                                                                              `path:"preempt" module:"nokia-conf"`
	Priority                 *uint32                                                                                            `path:"priority" module:"nokia-conf"`
	SendFibPopulationPackets E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_SendFibPopulationPackets `path:"send-fib-population-packets" module:"nokia-conf"`
	SrrpId                   *uint32                                                                                            `path:"srrp-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateMonitorOperGroup retrieves the value of the MonitorOperGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) GetOrCreateMonitorOperGroup() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup {
	if t.MonitorOperGroup != nil {
		return t.MonitorOperGroup
	}
	t.MonitorOperGroup = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup{}
	return t.MonitorOperGroup
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) GetBfdLiveness() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetMonitorOperGroup returns the value of the MonitorOperGroup struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp. If the receiver or the field MonitorOperGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) GetMonitorOperGroup() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup {
	if t != nil && t.MonitorOperGroup != nil {
		return t.MonitorOperGroup
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGwMac retrieves the value of the leaf GwMac from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GwMac is set, it can
// safely use t.GetGwMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GwMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) GetGwMac() string {
	if t == nil || t.GwMac == nil {
		return ""
	}
	return *t.GwMac
}

// GetKeepAliveInterval retrieves the value of the leaf KeepAliveInterval from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepAliveInterval is set, it can
// safely use t.GetKeepAliveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepAliveInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) GetKeepAliveInterval() uint32 {
	if t == nil || t.KeepAliveInterval == nil {
		return 10
	}
	return *t.KeepAliveInterval
}

// GetMessagePath retrieves the value of the leaf MessagePath from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessagePath is set, it can
// safely use t.GetMessagePath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessagePath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) GetMessagePath() string {
	if t == nil || t.MessagePath == nil {
		return ""
	}
	return *t.MessagePath
}

// GetOneGarpPerSap retrieves the value of the leaf OneGarpPerSap from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneGarpPerSap is set, it can
// safely use t.GetOneGarpPerSap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneGarpPerSap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) GetOneGarpPerSap() bool {
	if t == nil || t.OneGarpPerSap == nil {
		return false
	}
	return *t.OneGarpPerSap
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) GetPolicy() []uint32 {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// GetPreempt retrieves the value of the leaf Preempt from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preempt is set, it can
// safely use t.GetPreempt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preempt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// GetSendFibPopulationPackets retrieves the value of the leaf SendFibPopulationPackets from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendFibPopulationPackets is set, it can
// safely use t.GetSendFibPopulationPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendFibPopulationPackets == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) GetSendFibPopulationPackets() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_SendFibPopulationPackets {
	if t == nil || t.SendFibPopulationPackets == 0 {
		return NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_SendFibPopulationPackets_all
	}
	return t.SendFibPopulationPackets
}

// GetSrrpId retrieves the value of the leaf SrrpId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrrpId is set, it can
// safely use t.GetSrrpId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrrpId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) GetSrrpId() uint32 {
	if t == nil || t.SrrpId == nil {
		return 0
	}
	return *t.SrrpId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.KeepAliveInterval == nil {
		var v uint32 = 10
		t.KeepAliveInterval = &v
	}
	if t.OneGarpPerSap == nil {
		var v bool = false
		t.OneGarpPerSap = &v
	}
	if t.Preempt == nil {
		var v bool = true
		t.Preempt = &v
	}
	if t.Priority == nil {
		var v uint32 = 100
		t.Priority = &v
	}
	if t.SendFibPopulationPackets == 0 {
		t.SendFibPopulationPackets = NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_SendFibPopulationPackets_all
	}
	t.BfdLiveness.PopulateDefaults()
	t.MonitorOperGroup.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SrrpId == nil {
		return nil, fmt.Errorf("nil value for key SrrpId")
	}

	return map[string]interface{}{
		"srrp-id": *t.SrrpId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/srrp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DestIp             *string  `path:"dest-ip" module:"nokia-conf"`
	InterfaceName      *string  `path:"interface-name" module:"nokia-conf"`
	ServiceName        *string  `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDestIp retrieves the value of the leaf DestIp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestIp is set, it can
// safely use t.GetDestIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness) GetDestIp() string {
	if t == nil || t.DestIp == nil {
		return ""
	}
	return *t.DestIp
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/srrp/monitor-oper-group YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup struct {
	GroupName    *string `path:"group-name" module:"nokia-conf"`
	PriorityStep *uint8  `path:"priority-step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetPriorityStep retrieves the value of the leaf PriorityStep from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityStep is set, it can
// safely use t.GetPriorityStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityStep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup) GetPriorityStep() uint8 {
	if t == nil || t.PriorityStep == nil {
		return 0
	}
	return *t.PriorityStep
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw struct {
	AdminState             E_NokiaTypesSros_AdminState                                                                          `path:"admin-state" module:"nokia-conf"`
	ApplyGroups            []string                                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	GatewayAddress         map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress `path:"gateway-address" module:"nokia-conf"`
	GatewayRouter          *string                                                                                              `path:"gateway-router" module:"nokia-conf"`
	GroupEncryption        *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption           `path:"group-encryption" module:"nokia-conf"`
	L2Ap                   *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap                      `path:"l2-ap" module:"nokia-conf"`
	Lanext                 *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Lanext                    `path:"lanext" module:"nokia-conf" yangPresence:"true"`
	LearnApMac             *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_LearnApMac                `path:"learn-ap-mac" module:"nokia-conf" yangPresence:"true"`
	Mobility               *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility                  `path:"mobility" module:"nokia-conf"`
	OperDownOnGroupDegrade *bool                                                                                                `path:"oper-down-on-group-degrade" module:"nokia-conf"`
	TcpMssAdjust           *uint32                                                                                              `path:"tcp-mss-adjust" module:"nokia-conf"`
	TunnelEgressQos        *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos           `path:"tunnel-egress-qos" module:"nokia-conf"`
	TunnelEncaps           *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps              `path:"tunnel-encaps" module:"nokia-conf"`
	VlanRange              map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange      `path:"vlan-range" module:"nokia-conf"`
	WlanGwGroup            *uint32                                                                                              `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) IsYANGGoStruct() {}

// NewGatewayAddress creates a new entry in the GatewayAddress list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) NewGatewayAddress(Address string) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GatewayAddress == nil {
		t.GatewayAddress = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GatewayAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GatewayAddress", key)
	}

	t.GatewayAddress[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress{
		Address: &Address,
	}

	return t.GatewayAddress[key], nil
}

// RenameGatewayAddress renames an entry in the list GatewayAddress within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) RenameGatewayAddress(oldK, newK string) error {
	if _, ok := t.GatewayAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in GatewayAddress", newK)
	}

	e, ok := t.GatewayAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GatewayAddress", oldK)
	}
	e.Address = &newK

	t.GatewayAddress[newK] = e
	delete(t.GatewayAddress, oldK)
	return nil
}

// GetOrCreateGatewayAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetOrCreateGatewayAddress(Address string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress {

	key := Address

	if v, ok := t.GatewayAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGatewayAddress(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGatewayAddress got unexpected error: %v", err))
	}
	return v
}

// GetGatewayAddress retrieves the value with the specified key from
// the GatewayAddress map field of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetGatewayAddress(Address string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.GatewayAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteGatewayAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) DeleteGatewayAddress(Address string) {
	key := Address

	delete(t.GatewayAddress, key)
}

// AppendGatewayAddress appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress struct to the
// list GatewayAddress of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) AppendGatewayAddress(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GatewayAddress == nil {
		t.GatewayAddress = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress)
	}

	if _, ok := t.GatewayAddress[key]; ok {
		return fmt.Errorf("duplicate key for list GatewayAddress %v", key)
	}

	t.GatewayAddress[key] = v
	return nil
}

// NewVlanRange creates a new entry in the VlanRange list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) NewVlanRange(Range string) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VlanRange == nil {
		t.VlanRange = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange)
	}

	key := Range

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VlanRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VlanRange", key)
	}

	t.VlanRange[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange{
		Range: &Range,
	}

	return t.VlanRange[key], nil
}

// RenameVlanRange renames an entry in the list VlanRange within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) RenameVlanRange(oldK, newK string) error {
	if _, ok := t.VlanRange[newK]; ok {
		return fmt.Errorf("key %v already exists in VlanRange", newK)
	}

	e, ok := t.VlanRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VlanRange", oldK)
	}
	e.Range = &newK

	t.VlanRange[newK] = e
	delete(t.VlanRange, oldK)
	return nil
}

// GetOrCreateVlanRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetOrCreateVlanRange(Range string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange {

	key := Range

	if v, ok := t.VlanRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVlanRange(Range)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVlanRange got unexpected error: %v", err))
	}
	return v
}

// GetVlanRange retrieves the value with the specified key from
// the VlanRange map field of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetVlanRange(Range string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange {

	if t == nil {
		return nil
	}

	key := Range

	if lm, ok := t.VlanRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteVlanRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) DeleteVlanRange(Range string) {
	key := Range

	delete(t.VlanRange, key)
}

// AppendVlanRange appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange struct to the
// list VlanRange of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) AppendVlanRange(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) error {
	if v.Range == nil {
		return fmt.Errorf("invalid nil key received for Range")
	}

	key := *v.Range

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VlanRange == nil {
		t.VlanRange = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange)
	}

	if _, ok := t.VlanRange[key]; ok {
		return fmt.Errorf("duplicate key for list VlanRange %v", key)
	}

	t.VlanRange[key] = v
	return nil
}

// GetOrCreateGroupEncryption retrieves the value of the GroupEncryption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetOrCreateGroupEncryption() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption {
	if t.GroupEncryption != nil {
		return t.GroupEncryption
	}
	t.GroupEncryption = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption{}
	return t.GroupEncryption
}

// GetOrCreateL2Ap retrieves the value of the L2Ap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetOrCreateL2Ap() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap {
	if t.L2Ap != nil {
		return t.L2Ap
	}
	t.L2Ap = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap{}
	return t.L2Ap
}

// GetOrCreateLanext retrieves the value of the Lanext field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetOrCreateLanext() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Lanext {
	if t.Lanext != nil {
		return t.Lanext
	}
	t.Lanext = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Lanext{}
	return t.Lanext
}

// GetOrCreateLearnApMac retrieves the value of the LearnApMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetOrCreateLearnApMac() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_LearnApMac {
	if t.LearnApMac != nil {
		return t.LearnApMac
	}
	t.LearnApMac = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_LearnApMac{}
	return t.LearnApMac
}

// GetOrCreateMobility retrieves the value of the Mobility field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetOrCreateMobility() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility {
	if t.Mobility != nil {
		return t.Mobility
	}
	t.Mobility = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility{}
	return t.Mobility
}

// GetOrCreateTunnelEgressQos retrieves the value of the TunnelEgressQos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetOrCreateTunnelEgressQos() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos {
	if t.TunnelEgressQos != nil {
		return t.TunnelEgressQos
	}
	t.TunnelEgressQos = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos{}
	return t.TunnelEgressQos
}

// GetOrCreateTunnelEncaps retrieves the value of the TunnelEncaps field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetOrCreateTunnelEncaps() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps {
	if t.TunnelEncaps != nil {
		return t.TunnelEncaps
	}
	t.TunnelEncaps = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps{}
	return t.TunnelEncaps
}

// GetGroupEncryption returns the value of the GroupEncryption struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw. If the receiver or the field GroupEncryption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetGroupEncryption() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption {
	if t != nil && t.GroupEncryption != nil {
		return t.GroupEncryption
	}
	return nil
}

// GetL2Ap returns the value of the L2Ap struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw. If the receiver or the field L2Ap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetL2Ap() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap {
	if t != nil && t.L2Ap != nil {
		return t.L2Ap
	}
	return nil
}

// GetLanext returns the value of the Lanext struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw. If the receiver or the field Lanext is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetLanext() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Lanext {
	if t != nil && t.Lanext != nil {
		return t.Lanext
	}
	return nil
}

// GetLearnApMac returns the value of the LearnApMac struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw. If the receiver or the field LearnApMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetLearnApMac() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_LearnApMac {
	if t != nil && t.LearnApMac != nil {
		return t.LearnApMac
	}
	return nil
}

// GetMobility returns the value of the Mobility struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw. If the receiver or the field Mobility is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetMobility() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility {
	if t != nil && t.Mobility != nil {
		return t.Mobility
	}
	return nil
}

// GetTunnelEgressQos returns the value of the TunnelEgressQos struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw. If the receiver or the field TunnelEgressQos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetTunnelEgressQos() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos {
	if t != nil && t.TunnelEgressQos != nil {
		return t.TunnelEgressQos
	}
	return nil
}

// GetTunnelEncaps returns the value of the TunnelEncaps struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw. If the receiver or the field TunnelEncaps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetTunnelEncaps() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps {
	if t != nil && t.TunnelEncaps != nil {
		return t.TunnelEncaps
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGatewayRouter retrieves the value of the leaf GatewayRouter from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GatewayRouter is set, it can
// safely use t.GetGatewayRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GatewayRouter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetGatewayRouter() string {
	if t == nil || t.GatewayRouter == nil {
		return ""
	}
	return *t.GatewayRouter
}

// GetOperDownOnGroupDegrade retrieves the value of the leaf OperDownOnGroupDegrade from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperDownOnGroupDegrade is set, it can
// safely use t.GetOperDownOnGroupDegrade() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperDownOnGroupDegrade == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetOperDownOnGroupDegrade() bool {
	if t == nil || t.OperDownOnGroupDegrade == nil {
		return false
	}
	return *t.OperDownOnGroupDegrade
}

// GetTcpMssAdjust retrieves the value of the leaf TcpMssAdjust from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMssAdjust is set, it can
// safely use t.GetTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetTcpMssAdjust() uint32 {
	if t == nil || t.TcpMssAdjust == nil {
		return 0
	}
	return *t.TcpMssAdjust
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.OperDownOnGroupDegrade == nil {
		var v bool = false
		t.OperDownOnGroupDegrade = &v
	}
	t.GroupEncryption.PopulateDefaults()
	t.L2Ap.PopulateDefaults()
	t.Lanext.PopulateDefaults()
	t.LearnApMac.PopulateDefaults()
	t.Mobility.PopulateDefaults()
	t.TunnelEgressQos.PopulateDefaults()
	t.TunnelEncaps.PopulateDefaults()
	for _, e := range t.GatewayAddress {
		e.PopulateDefaults()
	}
	for _, e := range t.VlanRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/gateway-address YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress struct {
	Address            *string                                                                                           `path:"address" module:"nokia-conf"`
	ApplyGroups        []string                                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Purpose            *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose `path:"purpose" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) IsYANGGoStruct() {
}

// GetOrCreatePurpose retrieves the value of the Purpose field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) GetOrCreatePurpose() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose {
	if t.Purpose != nil {
		return t.Purpose
	}
	t.Purpose = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose{}
	return t.Purpose
}

// GetPurpose returns the value of the Purpose struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress. If the receiver or the field Purpose is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) GetPurpose() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose {
	if t != nil && t.Purpose != nil {
		return t.Purpose
	}
	return nil
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Purpose.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/gateway-address/purpose YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose struct {
	Xconnect *bool `path:"xconnect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose) IsYANGGoStruct() {
}

// GetXconnect retrieves the value of the leaf Xconnect from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Xconnect is set, it can
// safely use t.GetXconnect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Xconnect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose) GetXconnect() bool {
	if t == nil || t.Xconnect == nil {
		return false
	}
	return *t.Xconnect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Xconnect == nil {
		var v bool = false
		t.Xconnect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/group-encryption YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption struct {
	EncryptionKeygroupInbound  *uint32 `path:"encryption-keygroup-inbound" module:"nokia-conf"`
	EncryptionKeygroupOutbound *uint32 `path:"encryption-keygroup-outbound" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption) IsYANGGoStruct() {
}

// GetEncryptionKeygroupInbound retrieves the value of the leaf EncryptionKeygroupInbound from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncryptionKeygroupInbound is set, it can
// safely use t.GetEncryptionKeygroupInbound() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncryptionKeygroupInbound == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption) GetEncryptionKeygroupInbound() uint32 {
	if t == nil || t.EncryptionKeygroupInbound == nil {
		return 0
	}
	return *t.EncryptionKeygroupInbound
}

// GetEncryptionKeygroupOutbound retrieves the value of the leaf EncryptionKeygroupOutbound from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncryptionKeygroupOutbound is set, it can
// safely use t.GetEncryptionKeygroupOutbound() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncryptionKeygroupOutbound == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption) GetEncryptionKeygroupOutbound() uint32 {
	if t == nil || t.EncryptionKeygroupOutbound == nil {
		return 0
	}
	return *t.EncryptionKeygroupOutbound
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/l2-ap YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap struct {
	AccessPoint      map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint `path:"access-point" module:"nokia-conf"`
	AutoSubIdFmt     E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AutoSubIdFmt          `path:"auto-sub-id-fmt" module:"nokia-conf"`
	DefaultEncapType E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_DefaultEncapType      `path:"default-encap-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap) IsYANGGoStruct() {
}

// NewAccessPoint creates a new entry in the AccessPoint list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap) NewAccessPoint(SapId string) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AccessPoint == nil {
		t.AccessPoint = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AccessPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AccessPoint", key)
	}

	t.AccessPoint[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint{
		SapId: &SapId,
	}

	return t.AccessPoint[key], nil
}

// RenameAccessPoint renames an entry in the list AccessPoint within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap) RenameAccessPoint(oldK, newK string) error {
	if _, ok := t.AccessPoint[newK]; ok {
		return fmt.Errorf("key %v already exists in AccessPoint", newK)
	}

	e, ok := t.AccessPoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AccessPoint", oldK)
	}
	e.SapId = &newK

	t.AccessPoint[newK] = e
	delete(t.AccessPoint, oldK)
	return nil
}

// GetOrCreateAccessPoint retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap) GetOrCreateAccessPoint(SapId string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint {

	key := SapId

	if v, ok := t.AccessPoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAccessPoint(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAccessPoint got unexpected error: %v", err))
	}
	return v
}

// GetAccessPoint retrieves the value with the specified key from
// the AccessPoint map field of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap) GetAccessPoint(SapId string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.AccessPoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteAccessPoint deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap) DeleteAccessPoint(SapId string) {
	key := SapId

	delete(t.AccessPoint, key)
}

// AppendAccessPoint appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint struct to the
// list AccessPoint of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap) AppendAccessPoint(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AccessPoint == nil {
		t.AccessPoint = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint)
	}

	if _, ok := t.AccessPoint[key]; ok {
		return fmt.Errorf("duplicate key for list AccessPoint %v", key)
	}

	t.AccessPoint[key] = v
	return nil
}

// GetAutoSubIdFmt retrieves the value of the leaf AutoSubIdFmt from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoSubIdFmt is set, it can
// safely use t.GetAutoSubIdFmt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoSubIdFmt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap) GetAutoSubIdFmt() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AutoSubIdFmt {
	if t == nil || t.AutoSubIdFmt == 0 {
		return NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AutoSubIdFmt_include_ap_tags
	}
	return t.AutoSubIdFmt
}

// GetDefaultEncapType retrieves the value of the leaf DefaultEncapType from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultEncapType is set, it can
// safely use t.GetDefaultEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultEncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap) GetDefaultEncapType() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_DefaultEncapType {
	if t == nil || t.DefaultEncapType == 0 {
		return NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_DefaultEncapType_null
	}
	return t.DefaultEncapType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoSubIdFmt == 0 {
		t.AutoSubIdFmt = NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AutoSubIdFmt_include_ap_tags
	}
	if t.DefaultEncapType == 0 {
		t.DefaultEncapType = NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_DefaultEncapType_null
	}
	for _, e := range t.AccessPoint {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/l2-ap/access-point YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	EncapType          E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint_EncapType `path:"encap-type" module:"nokia-conf"`
	EpipeSapTemplate   *string                                                                                                `path:"epipe-sap-template" module:"nokia-conf"`
	SapId              *string                                                                                                `path:"sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEncapType retrieves the value of the leaf EncapType from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapType is set, it can
// safely use t.GetEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) GetEncapType() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint_EncapType {
	if t == nil || t.EncapType == 0 {
		return 0
	}
	return t.EncapType
}

// GetEpipeSapTemplate retrieves the value of the leaf EpipeSapTemplate from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EpipeSapTemplate is set, it can
// safely use t.GetEpipeSapTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EpipeSapTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) GetEpipeSapTemplate() string {
	if t == nil || t.EpipeSapTemplate == nil {
		return ""
	}
	return *t.EpipeSapTemplate
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Lanext represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/lanext YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Lanext struct {
	MaxBd *uint32 `path:"max-bd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Lanext implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Lanext) IsYANGGoStruct() {
}

// GetMaxBd retrieves the value of the leaf MaxBd from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxBd is set, it can
// safely use t.GetMaxBd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxBd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Lanext) GetMaxBd() uint32 {
	if t == nil || t.MaxBd == nil {
		return 131071
	}
	return *t.MaxBd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Lanext
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Lanext) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxBd == nil {
		var v uint32 = 131071
		t.MaxBd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Lanext) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Lanext"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Lanext) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Lanext) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Lanext.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Lanext) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_LearnApMac represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/learn-ap-mac YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_LearnApMac struct {
	DelayAuth *bool `path:"delay-auth" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_LearnApMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_LearnApMac) IsYANGGoStruct() {
}

// GetDelayAuth retrieves the value of the leaf DelayAuth from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_LearnApMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelayAuth is set, it can
// safely use t.GetDelayAuth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelayAuth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_LearnApMac) GetDelayAuth() bool {
	if t == nil || t.DelayAuth == nil {
		return false
	}
	return *t.DelayAuth
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_LearnApMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_LearnApMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DelayAuth == nil {
		var v bool = false
		t.DelayAuth = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_LearnApMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_LearnApMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_LearnApMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_LearnApMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_LearnApMac.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_LearnApMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/mobility YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility struct {
	HoldTime        *uint32                                                                                     `path:"hold-time" module:"nokia-conf"`
	InterTunnelType *bool                                                                                       `path:"inter-tunnel-type" module:"nokia-conf"`
	InterVlan       *bool                                                                                       `path:"inter-vlan" module:"nokia-conf"`
	Trigger         *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger `path:"trigger" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility) IsYANGGoStruct() {
}

// GetOrCreateTrigger retrieves the value of the Trigger field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility) GetOrCreateTrigger() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger {
	if t.Trigger != nil {
		return t.Trigger
	}
	t.Trigger = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger{}
	return t.Trigger
}

// GetTrigger returns the value of the Trigger struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility. If the receiver or the field Trigger is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility) GetTrigger() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger {
	if t != nil && t.Trigger != nil {
		return t.Trigger
	}
	return nil
}

// GetHoldTime retrieves the value of the leaf HoldTime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility) GetHoldTime() uint32 {
	if t == nil || t.HoldTime == nil {
		return 5
	}
	return *t.HoldTime
}

// GetInterTunnelType retrieves the value of the leaf InterTunnelType from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterTunnelType is set, it can
// safely use t.GetInterTunnelType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterTunnelType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility) GetInterTunnelType() bool {
	if t == nil || t.InterTunnelType == nil {
		return false
	}
	return *t.InterTunnelType
}

// GetInterVlan retrieves the value of the leaf InterVlan from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterVlan is set, it can
// safely use t.GetInterVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility) GetInterVlan() bool {
	if t == nil || t.InterVlan == nil {
		return false
	}
	return *t.InterVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldTime == nil {
		var v uint32 = 5
		t.HoldTime = &v
	}
	if t.InterTunnelType == nil {
		var v bool = false
		t.InterTunnelType = &v
	}
	if t.InterVlan == nil {
		var v bool = false
		t.InterVlan = &v
	}
	t.Trigger.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/mobility/trigger YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger struct {
	Control *bool `path:"control" module:"nokia-conf"`
	Data    *bool `path:"data" module:"nokia-conf"`
	Iapp    *bool `path:"iapp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger) IsYANGGoStruct() {
}

// GetControl retrieves the value of the leaf Control from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Control is set, it can
// safely use t.GetControl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Control == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger) GetControl() bool {
	if t == nil || t.Control == nil {
		return false
	}
	return *t.Control
}

// GetData retrieves the value of the leaf Data from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Data is set, it can
// safely use t.GetData() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Data == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger) GetData() bool {
	if t == nil || t.Data == nil {
		return false
	}
	return *t.Data
}

// GetIapp retrieves the value of the leaf Iapp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Iapp is set, it can
// safely use t.GetIapp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Iapp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger) GetIapp() bool {
	if t == nil || t.Iapp == nil {
		return false
	}
	return *t.Iapp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Control == nil {
		var v bool = false
		t.Control = &v
	}
	if t.Data == nil {
		var v bool = false
		t.Data = &v
	}
	if t.Iapp == nil {
		var v bool = false
		t.Iapp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/tunnel-egress-qos YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos struct {
	AdminState      E_NokiaTypesSros_AdminState                                                                                  `path:"admin-state" module:"nokia-conf"`
	AggRateLimit    NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos_AggRateLimit_Union `path:"agg-rate-limit" module:"nokia-conf"`
	Granularity     E_NokiaTypesWlangw_ShapingGranularity                                                                        `path:"granularity" module:"nokia-conf"`
	HoldTime        NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos_HoldTime_Union     `path:"hold-time" module:"nokia-conf"`
	MultiClientOnly *bool                                                                                                        `path:"multi-client-only" module:"nokia-conf"`
	Qos             *string                                                                                                      `path:"qos" module:"nokia-conf"`
	SchedulerPolicy *string                                                                                                      `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAggRateLimit retrieves the value of the leaf AggRateLimit from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggRateLimit is set, it can
// safely use t.GetAggRateLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggRateLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) GetAggRateLimit() NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos_AggRateLimit_Union {
	if t == nil || t.AggRateLimit == nil {
		return NokiaTypesQos_PirRateOverride_Enum_max
	}
	return t.AggRateLimit
}

// GetGranularity retrieves the value of the leaf Granularity from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Granularity is set, it can
// safely use t.GetGranularity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Granularity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) GetGranularity() E_NokiaTypesWlangw_ShapingGranularity {
	if t == nil || t.Granularity == 0 {
		return NokiaTypesWlangw_ShapingGranularity_per_tunnel
	}
	return t.Granularity
}

// GetHoldTime retrieves the value of the leaf HoldTime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) GetHoldTime() NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos_HoldTime_Union {
	if t == nil || t.HoldTime == nil {
		return nil
	}
	return t.HoldTime
}

// GetMultiClientOnly retrieves the value of the leaf MultiClientOnly from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiClientOnly is set, it can
// safely use t.GetMultiClientOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiClientOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) GetMultiClientOnly() bool {
	if t == nil || t.MultiClientOnly == nil {
		return false
	}
	return *t.MultiClientOnly
}

// GetQos retrieves the value of the leaf Qos from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qos is set, it can
// safely use t.GetQos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qos == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) GetQos() string {
	if t == nil || t.Qos == nil {
		return ""
	}
	return *t.Qos
}

// GetSchedulerPolicy retrieves the value of the leaf SchedulerPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerPolicy is set, it can
// safely use t.GetSchedulerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) GetSchedulerPolicy() string {
	if t == nil || t.SchedulerPolicy == nil {
		return ""
	}
	return *t.SchedulerPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AggRateLimit == nil {
		t.AggRateLimit = NokiaTypesQos_PirRateOverride_Enum_max
	}
	if t.Granularity == 0 {
		t.Granularity = NokiaTypesWlangw_ShapingGranularity_per_tunnel
	}
	if t.MultiClientOnly == nil {
		var v bool = false
		t.MultiClientOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/tunnel-encaps YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps struct {
	LearnL2TpCookie NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps_LearnL2TpCookie_Union `path:"learn-l2tp-cookie" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps) IsYANGGoStruct() {
}

// GetLearnL2TpCookie retrieves the value of the leaf LearnL2TpCookie from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LearnL2TpCookie is set, it can
// safely use t.GetLearnL2TpCookie() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LearnL2TpCookie == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps) GetLearnL2TpCookie() NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps_LearnL2TpCookie_Union {
	if t == nil || t.LearnL2TpCookie == nil {
		return NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps_LearnL2TpCookie_Enum_never
	}
	return t.LearnL2TpCookie
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LearnL2TpCookie == nil {
		t.LearnL2TpCookie = NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps_LearnL2TpCookie_Enum_never
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange struct {
	ApplyGroups             []string                                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Authentication          *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication          `path:"authentication" module:"nokia-conf"`
	DataTriggeredUeCreation *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation `path:"data-triggered-ue-creation" module:"nokia-conf"`
	Dhcp4                   *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4                   `path:"dhcp4" module:"nokia-conf"`
	Dhcp6                   *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6                   `path:"dhcp6" module:"nokia-conf"`
	Dsm                     *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm                     `path:"dsm" module:"nokia-conf"`
	Extension               map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension    `path:"extension" module:"nokia-conf"`
	HttpRedirectPolicy      *string                                                                                                      `path:"http-redirect-policy" module:"nokia-conf"`
	IdleTimeoutAction       E_NokiaTypesWlangw_IdleTimeoutAction                                                                         `path:"idle-timeout-action" module:"nokia-conf"`
	L2Service               *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service               `path:"l2-service" module:"nokia-conf" yangPresence:"true"`
	NatPolicy               *string                                                                                                      `path:"nat-policy" module:"nokia-conf"`
	Range                   *string                                                                                                      `path:"range" module:"nokia-conf"`
	RetailService           *string                                                                                                      `path:"retail-service" module:"nokia-conf"`
	Slaac                   *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac                   `path:"slaac" module:"nokia-conf"`
	Vrgw                    *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw                    `path:"vrgw" module:"nokia-conf"`
	Xconnect                *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect                `path:"xconnect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) IsYANGGoStruct() {
}

// NewExtension creates a new entry in the Extension list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) NewExtension(ExtensionRange string) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Extension == nil {
		t.Extension = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension)
	}

	key := ExtensionRange

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Extension[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Extension", key)
	}

	t.Extension[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension{
		ExtensionRange: &ExtensionRange,
	}

	return t.Extension[key], nil
}

// RenameExtension renames an entry in the list Extension within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) RenameExtension(oldK, newK string) error {
	if _, ok := t.Extension[newK]; ok {
		return fmt.Errorf("key %v already exists in Extension", newK)
	}

	e, ok := t.Extension[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Extension", oldK)
	}
	e.ExtensionRange = &newK

	t.Extension[newK] = e
	delete(t.Extension, oldK)
	return nil
}

// GetOrCreateExtension retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetOrCreateExtension(ExtensionRange string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension {

	key := ExtensionRange

	if v, ok := t.Extension[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExtension(ExtensionRange)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExtension got unexpected error: %v", err))
	}
	return v
}

// GetExtension retrieves the value with the specified key from
// the Extension map field of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetExtension(ExtensionRange string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension {

	if t == nil {
		return nil
	}

	key := ExtensionRange

	if lm, ok := t.Extension[key]; ok {
		return lm
	}
	return nil
}

// DeleteExtension deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) DeleteExtension(ExtensionRange string) {
	key := ExtensionRange

	delete(t.Extension, key)
}

// AppendExtension appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension struct to the
// list Extension of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) AppendExtension(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension) error {
	if v.ExtensionRange == nil {
		return fmt.Errorf("invalid nil key received for ExtensionRange")
	}

	key := *v.ExtensionRange

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Extension == nil {
		t.Extension = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension)
	}

	if _, ok := t.Extension[key]; ok {
		return fmt.Errorf("duplicate key for list Extension %v", key)
	}

	t.Extension[key] = v
	return nil
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetOrCreateAuthentication() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication{}
	return t.Authentication
}

// GetOrCreateDataTriggeredUeCreation retrieves the value of the DataTriggeredUeCreation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetOrCreateDataTriggeredUeCreation() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation {
	if t.DataTriggeredUeCreation != nil {
		return t.DataTriggeredUeCreation
	}
	t.DataTriggeredUeCreation = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation{}
	return t.DataTriggeredUeCreation
}

// GetOrCreateDhcp4 retrieves the value of the Dhcp4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetOrCreateDhcp4() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4 {
	if t.Dhcp4 != nil {
		return t.Dhcp4
	}
	t.Dhcp4 = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4{}
	return t.Dhcp4
}

// GetOrCreateDhcp6 retrieves the value of the Dhcp6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetOrCreateDhcp6() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6 {
	if t.Dhcp6 != nil {
		return t.Dhcp6
	}
	t.Dhcp6 = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6{}
	return t.Dhcp6
}

// GetOrCreateDsm retrieves the value of the Dsm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetOrCreateDsm() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm {
	if t.Dsm != nil {
		return t.Dsm
	}
	t.Dsm = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm{}
	return t.Dsm
}

// GetOrCreateL2Service retrieves the value of the L2Service field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetOrCreateL2Service() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service {
	if t.L2Service != nil {
		return t.L2Service
	}
	t.L2Service = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service{}
	return t.L2Service
}

// GetOrCreateSlaac retrieves the value of the Slaac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetOrCreateSlaac() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac {
	if t.Slaac != nil {
		return t.Slaac
	}
	t.Slaac = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac{}
	return t.Slaac
}

// GetOrCreateVrgw retrieves the value of the Vrgw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetOrCreateVrgw() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw {
	if t.Vrgw != nil {
		return t.Vrgw
	}
	t.Vrgw = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw{}
	return t.Vrgw
}

// GetOrCreateXconnect retrieves the value of the Xconnect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetOrCreateXconnect() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect {
	if t.Xconnect != nil {
		return t.Xconnect
	}
	t.Xconnect = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect{}
	return t.Xconnect
}

// GetAuthentication returns the value of the Authentication struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetAuthentication() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetDataTriggeredUeCreation returns the value of the DataTriggeredUeCreation struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the receiver or the field DataTriggeredUeCreation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetDataTriggeredUeCreation() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation {
	if t != nil && t.DataTriggeredUeCreation != nil {
		return t.DataTriggeredUeCreation
	}
	return nil
}

// GetDhcp4 returns the value of the Dhcp4 struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the receiver or the field Dhcp4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetDhcp4() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4 {
	if t != nil && t.Dhcp4 != nil {
		return t.Dhcp4
	}
	return nil
}

// GetDhcp6 returns the value of the Dhcp6 struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the receiver or the field Dhcp6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetDhcp6() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6 {
	if t != nil && t.Dhcp6 != nil {
		return t.Dhcp6
	}
	return nil
}

// GetDsm returns the value of the Dsm struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the receiver or the field Dsm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetDsm() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm {
	if t != nil && t.Dsm != nil {
		return t.Dsm
	}
	return nil
}

// GetL2Service returns the value of the L2Service struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the receiver or the field L2Service is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetL2Service() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service {
	if t != nil && t.L2Service != nil {
		return t.L2Service
	}
	return nil
}

// GetSlaac returns the value of the Slaac struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the receiver or the field Slaac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetSlaac() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac {
	if t != nil && t.Slaac != nil {
		return t.Slaac
	}
	return nil
}

// GetVrgw returns the value of the Vrgw struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the receiver or the field Vrgw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetVrgw() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw {
	if t != nil && t.Vrgw != nil {
		return t.Vrgw
	}
	return nil
}

// GetXconnect returns the value of the Xconnect struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the receiver or the field Xconnect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetXconnect() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect {
	if t != nil && t.Xconnect != nil {
		return t.Xconnect
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHttpRedirectPolicy retrieves the value of the leaf HttpRedirectPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpRedirectPolicy is set, it can
// safely use t.GetHttpRedirectPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpRedirectPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetHttpRedirectPolicy() string {
	if t == nil || t.HttpRedirectPolicy == nil {
		return ""
	}
	return *t.HttpRedirectPolicy
}

// GetIdleTimeoutAction retrieves the value of the leaf IdleTimeoutAction from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeoutAction is set, it can
// safely use t.GetIdleTimeoutAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeoutAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetIdleTimeoutAction() E_NokiaTypesWlangw_IdleTimeoutAction {
	if t == nil || t.IdleTimeoutAction == 0 {
		return NokiaTypesWlangw_IdleTimeoutAction_remove
	}
	return t.IdleTimeoutAction
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// GetRange retrieves the value of the leaf Range from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Range is set, it can
// safely use t.GetRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Range == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetRange() string {
	if t == nil || t.Range == nil {
		return ""
	}
	return *t.Range
}

// GetRetailService retrieves the value of the leaf RetailService from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetailService is set, it can
// safely use t.GetRetailService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetailService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetRetailService() string {
	if t == nil || t.RetailService == nil {
		return ""
	}
	return *t.RetailService
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IdleTimeoutAction == 0 {
		t.IdleTimeoutAction = NokiaTypesWlangw_IdleTimeoutAction_remove
	}
	t.Authentication.PopulateDefaults()
	t.DataTriggeredUeCreation.PopulateDefaults()
	t.Dhcp4.PopulateDefaults()
	t.Dhcp6.PopulateDefaults()
	t.Dsm.PopulateDefaults()
	t.L2Service.PopulateDefaults()
	t.Slaac.PopulateDefaults()
	t.Vrgw.PopulateDefaults()
	t.Xconnect.PopulateDefaults()
	for _, e := range t.Extension {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Range == nil {
		return nil, fmt.Errorf("nil value for key Range")
	}

	return map[string]interface{}{
		"range": *t.Range,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/authentication YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication struct {
	HoldTime            *uint32                                                                                                   `path:"hold-time" module:"nokia-conf"`
	Local               *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local `path:"local" module:"nokia-conf" yangPresence:"true"`
	OnControlPlane      *bool                                                                                                     `path:"on-control-plane" module:"nokia-conf"`
	Policy              *string                                                                                                   `path:"policy" module:"nokia-conf"`
	VlanMismatchTimeout *uint32                                                                                                   `path:"vlan-mismatch-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) IsYANGGoStruct() {
}

// GetOrCreateLocal retrieves the value of the Local field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) GetOrCreateLocal() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local {
	if t.Local != nil {
		return t.Local
	}
	t.Local = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local{}
	return t.Local
}

// GetLocal returns the value of the Local struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication. If the receiver or the field Local is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) GetLocal() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local {
	if t != nil && t.Local != nil {
		return t.Local
	}
	return nil
}

// GetHoldTime retrieves the value of the leaf HoldTime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) GetHoldTime() uint32 {
	if t == nil || t.HoldTime == nil {
		return 5
	}
	return *t.HoldTime
}

// GetOnControlPlane retrieves the value of the leaf OnControlPlane from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OnControlPlane is set, it can
// safely use t.GetOnControlPlane() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OnControlPlane == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) GetOnControlPlane() bool {
	if t == nil || t.OnControlPlane == nil {
		return false
	}
	return *t.OnControlPlane
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetVlanMismatchTimeout retrieves the value of the leaf VlanMismatchTimeout from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanMismatchTimeout is set, it can
// safely use t.GetVlanMismatchTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanMismatchTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) GetVlanMismatchTimeout() uint32 {
	if t == nil || t.VlanMismatchTimeout == nil {
		return 0
	}
	return *t.VlanMismatchTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldTime == nil {
		var v uint32 = 5
		t.HoldTime = &v
	}
	if t.OnControlPlane == nil {
		var v bool = false
		t.OnControlPlane = &v
	}
	t.Local.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/authentication/local YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local struct {
	CoaPolicy      *string                                                                                                                   `path:"coa-policy" module:"nokia-conf"`
	DefaultUeState E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local_DefaultUeState `path:"default-ue-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local) IsYANGGoStruct() {
}

// GetCoaPolicy retrieves the value of the leaf CoaPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CoaPolicy is set, it can
// safely use t.GetCoaPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CoaPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local) GetCoaPolicy() string {
	if t == nil || t.CoaPolicy == nil {
		return ""
	}
	return *t.CoaPolicy
}

// GetDefaultUeState retrieves the value of the leaf DefaultUeState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultUeState is set, it can
// safely use t.GetDefaultUeState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultUeState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local) GetDefaultUeState() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local_DefaultUeState {
	if t == nil || t.DefaultUeState == 0 {
		return 0
	}
	return t.DefaultUeState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/data-triggered-ue-creation YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation struct {
	AdminState            E_NokiaTypesSros_AdminState                                                                                                        `path:"admin-state" module:"nokia-conf"`
	CreateProxyCacheEntry *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry `path:"create-proxy-cache-entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation) IsYANGGoStruct() {
}

// GetOrCreateCreateProxyCacheEntry retrieves the value of the CreateProxyCacheEntry field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation) GetOrCreateCreateProxyCacheEntry() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry {
	if t.CreateProxyCacheEntry != nil {
		return t.CreateProxyCacheEntry
	}
	t.CreateProxyCacheEntry = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry{}
	return t.CreateProxyCacheEntry
}

// GetCreateProxyCacheEntry returns the value of the CreateProxyCacheEntry struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation. If the receiver or the field CreateProxyCacheEntry is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation) GetCreateProxyCacheEntry() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry {
	if t != nil && t.CreateProxyCacheEntry != nil {
		return t.CreateProxyCacheEntry
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.CreateProxyCacheEntry.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/data-triggered-ue-creation/create-proxy-cache-entry YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry struct {
	MacFormat   *string                                                                                                                                        `path:"mac-format" module:"nokia-conf"`
	ProxyServer *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer `path:"proxy-server" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry) IsYANGGoStruct() {
}

// GetOrCreateProxyServer retrieves the value of the ProxyServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry) GetOrCreateProxyServer() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer {
	if t.ProxyServer != nil {
		return t.ProxyServer
	}
	t.ProxyServer = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer{}
	return t.ProxyServer
}

// GetProxyServer returns the value of the ProxyServer struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry. If the receiver or the field ProxyServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry) GetProxyServer() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer {
	if t != nil && t.ProxyServer != nil {
		return t.ProxyServer
	}
	return nil
}

// GetMacFormat retrieves the value of the leaf MacFormat from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacFormat is set, it can
// safely use t.GetMacFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry) GetMacFormat() string {
	if t == nil || t.MacFormat == nil {
		return "aa:"
	}
	return *t.MacFormat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MacFormat == nil {
		var v string = "aa:"
		t.MacFormat = &v
	}
	t.ProxyServer.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/data-triggered-ue-creation/create-proxy-cache-entry/proxy-server YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer struct {
	Name           *string `path:"name" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4 represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/dhcp4 YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4 struct {
	AdminState       E_NokiaTypesSros_AdminState                                                                                      `path:"admin-state" module:"nokia-conf"`
	Dns              []string                                                                                                         `path:"dns" module:"nokia-conf"`
	L2AwareIpAddress NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_L2AwareIpAddress_Union `path:"l2-aware-ip-address" module:"nokia-conf"`
	LeaseTime        *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime             `path:"lease-time" module:"nokia-conf"`
	Nbns             []string                                                                                                         `path:"nbns" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) IsYANGGoStruct() {
}

// GetOrCreateLeaseTime retrieves the value of the LeaseTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) GetOrCreateLeaseTime() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime {
	if t.LeaseTime != nil {
		return t.LeaseTime
	}
	t.LeaseTime = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime{}
	return t.LeaseTime
}

// GetLeaseTime returns the value of the LeaseTime struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4. If the receiver or the field LeaseTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) GetLeaseTime() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime {
	if t != nil && t.LeaseTime != nil {
		return t.LeaseTime
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDns retrieves the value of the leaf Dns from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dns is set, it can
// safely use t.GetDns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) GetDns() []string {
	if t == nil || t.Dns == nil {
		return nil
	}
	return t.Dns
}

// GetL2AwareIpAddress retrieves the value of the leaf L2AwareIpAddress from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2AwareIpAddress is set, it can
// safely use t.GetL2AwareIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2AwareIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) GetL2AwareIpAddress() NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_L2AwareIpAddress_Union {
	if t == nil || t.L2AwareIpAddress == nil {
		return nil
	}
	return t.L2AwareIpAddress
}

// GetNbns retrieves the value of the leaf Nbns from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Nbns is set, it can
// safely use t.GetNbns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Nbns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) GetNbns() []string {
	if t == nil || t.Nbns == nil {
		return nil
	}
	return t.Nbns
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.LeaseTime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/dhcp4/lease-time YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime struct {
	Active  *uint32 `path:"active" module:"nokia-conf"`
	Initial *uint32 `path:"initial" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime) IsYANGGoStruct() {
}

// GetActive retrieves the value of the leaf Active from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime) GetActive() uint32 {
	if t == nil || t.Active == nil {
		return 600
	}
	return *t.Active
}

// GetInitial retrieves the value of the leaf Initial from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Initial is set, it can
// safely use t.GetInitial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Initial == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime) GetInitial() uint32 {
	if t == nil || t.Initial == nil {
		return 600
	}
	return *t.Initial
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Active == nil {
		var v uint32 = 600
		t.Active = &v
	}
	if t.Initial == nil {
		var v uint32 = 600
		t.Initial = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6 represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/dhcp6 YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6 struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	PreferredLifetime  *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime `path:"preferred-lifetime" module:"nokia-conf"`
	ValidLifetime      *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) IsYANGGoStruct() {
}

// GetOrCreatePreferredLifetime retrieves the value of the PreferredLifetime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) GetOrCreatePreferredLifetime() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime {
	if t.PreferredLifetime != nil {
		return t.PreferredLifetime
	}
	t.PreferredLifetime = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime{}
	return t.PreferredLifetime
}

// GetOrCreateValidLifetime retrieves the value of the ValidLifetime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) GetOrCreateValidLifetime() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime {
	if t.ValidLifetime != nil {
		return t.ValidLifetime
	}
	t.ValidLifetime = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime{}
	return t.ValidLifetime
}

// GetPreferredLifetime returns the value of the PreferredLifetime struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6. If the receiver or the field PreferredLifetime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) GetPreferredLifetime() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime {
	if t != nil && t.PreferredLifetime != nil {
		return t.PreferredLifetime
	}
	return nil
}

// GetValidLifetime returns the value of the ValidLifetime struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6. If the receiver or the field ValidLifetime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) GetValidLifetime() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime {
	if t != nil && t.ValidLifetime != nil {
		return t.ValidLifetime
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.PreferredLifetime.PopulateDefaults()
	t.ValidLifetime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/dhcp6/preferred-lifetime YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime struct {
	Active  *uint32 `path:"active" module:"nokia-conf"`
	Initial *uint32 `path:"initial" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime) IsYANGGoStruct() {
}

// GetActive retrieves the value of the leaf Active from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime) GetActive() uint32 {
	if t == nil || t.Active == nil {
		return 600
	}
	return *t.Active
}

// GetInitial retrieves the value of the leaf Initial from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Initial is set, it can
// safely use t.GetInitial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Initial == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime) GetInitial() uint32 {
	if t == nil || t.Initial == nil {
		return 300
	}
	return *t.Initial
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Active == nil {
		var v uint32 = 600
		t.Active = &v
	}
	if t.Initial == nil {
		var v uint32 = 300
		t.Initial = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/dhcp6/valid-lifetime YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime struct {
	Active  *uint32 `path:"active" module:"nokia-conf"`
	Initial *uint32 `path:"initial" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime) IsYANGGoStruct() {
}

// GetActive retrieves the value of the leaf Active from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime) GetActive() uint32 {
	if t == nil || t.Active == nil {
		return 600
	}
	return *t.Active
}

// GetInitial retrieves the value of the leaf Initial from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Initial is set, it can
// safely use t.GetInitial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Initial == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime) GetInitial() uint32 {
	if t == nil || t.Initial == nil {
		return 300
	}
	return *t.Initial
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Active == nil {
		var v uint32 = 600
		t.Active = &v
	}
	if t.Initial == nil {
		var v uint32 = 300
		t.Initial = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/dsm YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm struct {
	AccountingPolicy     *string                                                                                                        `path:"accounting-policy" module:"nokia-conf"`
	AccountingUpdate     *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate      `path:"accounting-update" module:"nokia-conf" yangPresence:"true"`
	AdminState           E_NokiaTypesSros_AdminState                                                                                    `path:"admin-state" module:"nokia-conf"`
	ApplicationAssurance *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance  `path:"application-assurance" module:"nokia-conf"`
	ApplyGroups          []string                                                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Egress               *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress                `path:"egress" module:"nokia-conf"`
	Ingress              *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress               `path:"ingress" module:"nokia-conf"`
	OneTimeRedirect      *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect       `path:"one-time-redirect" module:"nokia-conf"`
	VolumeQuotaDirection E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_VolumeQuotaDirection `path:"volume-quota-direction" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) IsYANGGoStruct() {
}

// GetOrCreateAccountingUpdate retrieves the value of the AccountingUpdate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetOrCreateAccountingUpdate() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate {
	if t.AccountingUpdate != nil {
		return t.AccountingUpdate
	}
	t.AccountingUpdate = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate{}
	return t.AccountingUpdate
}

// GetOrCreateApplicationAssurance retrieves the value of the ApplicationAssurance field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetOrCreateApplicationAssurance() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance {
	if t.ApplicationAssurance != nil {
		return t.ApplicationAssurance
	}
	t.ApplicationAssurance = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance{}
	return t.ApplicationAssurance
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetOrCreateEgress() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetOrCreateIngress() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress{}
	return t.Ingress
}

// GetOrCreateOneTimeRedirect retrieves the value of the OneTimeRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetOrCreateOneTimeRedirect() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect {
	if t.OneTimeRedirect != nil {
		return t.OneTimeRedirect
	}
	t.OneTimeRedirect = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect{}
	return t.OneTimeRedirect
}

// GetAccountingUpdate returns the value of the AccountingUpdate struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm. If the receiver or the field AccountingUpdate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetAccountingUpdate() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate {
	if t != nil && t.AccountingUpdate != nil {
		return t.AccountingUpdate
	}
	return nil
}

// GetApplicationAssurance returns the value of the ApplicationAssurance struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm. If the receiver or the field ApplicationAssurance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetApplicationAssurance() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance {
	if t != nil && t.ApplicationAssurance != nil {
		return t.ApplicationAssurance
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetEgress() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetIngress() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetOneTimeRedirect returns the value of the OneTimeRedirect struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm. If the receiver or the field OneTimeRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetOneTimeRedirect() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect {
	if t != nil && t.OneTimeRedirect != nil {
		return t.OneTimeRedirect
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetAccountingPolicy() string {
	if t == nil || t.AccountingPolicy == nil {
		return ""
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetVolumeQuotaDirection retrieves the value of the leaf VolumeQuotaDirection from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VolumeQuotaDirection is set, it can
// safely use t.GetVolumeQuotaDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VolumeQuotaDirection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetVolumeQuotaDirection() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_VolumeQuotaDirection {
	if t == nil || t.VolumeQuotaDirection == 0 {
		return NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_VolumeQuotaDirection_both
	}
	return t.VolumeQuotaDirection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.VolumeQuotaDirection == 0 {
		t.VolumeQuotaDirection = NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_VolumeQuotaDirection_both
	}
	t.AccountingUpdate.PopulateDefaults()
	t.ApplicationAssurance.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.OneTimeRedirect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/dsm/accounting-update YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate struct {
	Interval *uint32 `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate) IsYANGGoStruct() {
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/dsm/application-assurance YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance struct {
	AccountingStatistics *bool   `path:"accounting-statistics" module:"nokia-conf"`
	Profile              *string `path:"profile" module:"nokia-conf"`
	UrlParameter         *string `path:"url-parameter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance) IsYANGGoStruct() {
}

// GetAccountingStatistics retrieves the value of the leaf AccountingStatistics from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingStatistics is set, it can
// safely use t.GetAccountingStatistics() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingStatistics == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance) GetAccountingStatistics() bool {
	if t == nil || t.AccountingStatistics == nil {
		return false
	}
	return *t.AccountingStatistics
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance) GetProfile() string {
	if t == nil || t.Profile == nil {
		return ""
	}
	return *t.Profile
}

// GetUrlParameter retrieves the value of the leaf UrlParameter from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UrlParameter is set, it can
// safely use t.GetUrlParameter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UrlParameter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance) GetUrlParameter() string {
	if t == nil || t.UrlParameter == nil {
		return ""
	}
	return *t.UrlParameter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AccountingStatistics == nil {
		var v bool = false
		t.AccountingStatistics = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/dsm/egress YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress struct {
	Policer *string `path:"policer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress) IsYANGGoStruct() {
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress) GetPolicer() string {
	if t == nil || t.Policer == nil {
		return ""
	}
	return *t.Policer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/dsm/ingress YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress struct {
	IpFilter                 *string `path:"ip-filter" module:"nokia-conf"`
	Policer                  *string `path:"policer" module:"nokia-conf"`
	SoftQuotaExhaustedFilter *string `path:"soft-quota-exhausted-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress) IsYANGGoStruct() {
}

// GetIpFilter retrieves the value of the leaf IpFilter from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilter is set, it can
// safely use t.GetIpFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress) GetIpFilter() string {
	if t == nil || t.IpFilter == nil {
		return ""
	}
	return *t.IpFilter
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress) GetPolicer() string {
	if t == nil || t.Policer == nil {
		return ""
	}
	return *t.Policer
}

// GetSoftQuotaExhaustedFilter retrieves the value of the leaf SoftQuotaExhaustedFilter from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SoftQuotaExhaustedFilter is set, it can
// safely use t.GetSoftQuotaExhaustedFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SoftQuotaExhaustedFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress) GetSoftQuotaExhaustedFilter() string {
	if t == nil || t.SoftQuotaExhaustedFilter == nil {
		return ""
	}
	return *t.SoftQuotaExhaustedFilter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/dsm/one-time-redirect YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect struct {
	Port *uint32 `path:"port" module:"nokia-conf"`
	Url  *string `path:"url" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect) IsYANGGoStruct() {
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect) GetPort() uint32 {
	if t == nil || t.Port == nil {
		return 80
	}
	return *t.Port
}

// GetUrl retrieves the value of the leaf Url from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Url is set, it can
// safely use t.GetUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Url == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect) GetUrl() string {
	if t == nil || t.Url == nil {
		return ""
	}
	return *t.Url
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v uint32 = 80
		t.Port = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/extension YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension struct {
	ExtensionRange *string `path:"extension-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension) IsYANGGoStruct() {
}

// GetExtensionRange retrieves the value of the leaf ExtensionRange from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtensionRange is set, it can
// safely use t.GetExtensionRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtensionRange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension) GetExtensionRange() string {
	if t == nil || t.ExtensionRange == nil {
		return ""
	}
	return *t.ExtensionRange
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ExtensionRange == nil {
		return nil, fmt.Errorf("nil value for key ExtensionRange")
	}

	return map[string]interface{}{
		"extension-range": *t.ExtensionRange,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/l2-service YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Description *string                     `path:"description" module:"nokia-conf"`
	Service     *string                     `path:"service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetService retrieves the value of the leaf Service from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service) GetService() string {
	if t == nil || t.Service == nil {
		return ""
	}
	return *t.Service
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/slaac YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	PreferredLifetime  *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime `path:"preferred-lifetime" module:"nokia-conf"`
	ValidLifetime      *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) IsYANGGoStruct() {
}

// GetOrCreatePreferredLifetime retrieves the value of the PreferredLifetime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) GetOrCreatePreferredLifetime() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime {
	if t.PreferredLifetime != nil {
		return t.PreferredLifetime
	}
	t.PreferredLifetime = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime{}
	return t.PreferredLifetime
}

// GetOrCreateValidLifetime retrieves the value of the ValidLifetime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) GetOrCreateValidLifetime() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime {
	if t.ValidLifetime != nil {
		return t.ValidLifetime
	}
	t.ValidLifetime = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime{}
	return t.ValidLifetime
}

// GetPreferredLifetime returns the value of the PreferredLifetime struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac. If the receiver or the field PreferredLifetime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) GetPreferredLifetime() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime {
	if t != nil && t.PreferredLifetime != nil {
		return t.PreferredLifetime
	}
	return nil
}

// GetValidLifetime returns the value of the ValidLifetime struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac. If the receiver or the field ValidLifetime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) GetValidLifetime() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime {
	if t != nil && t.ValidLifetime != nil {
		return t.ValidLifetime
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.PreferredLifetime.PopulateDefaults()
	t.ValidLifetime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/slaac/preferred-lifetime YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime struct {
	Active  *uint32 `path:"active" module:"nokia-conf"`
	Initial *uint32 `path:"initial" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime) IsYANGGoStruct() {
}

// GetActive retrieves the value of the leaf Active from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime) GetActive() uint32 {
	if t == nil || t.Active == nil {
		return 600
	}
	return *t.Active
}

// GetInitial retrieves the value of the leaf Initial from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Initial is set, it can
// safely use t.GetInitial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Initial == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime) GetInitial() uint32 {
	if t == nil || t.Initial == nil {
		return 300
	}
	return *t.Initial
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Active == nil {
		var v uint32 = 600
		t.Active = &v
	}
	if t.Initial == nil {
		var v uint32 = 300
		t.Initial = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/slaac/valid-lifetime YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime struct {
	Active  *uint32 `path:"active" module:"nokia-conf"`
	Initial *uint32 `path:"initial" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime) IsYANGGoStruct() {
}

// GetActive retrieves the value of the leaf Active from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime) GetActive() uint32 {
	if t == nil || t.Active == nil {
		return 600
	}
	return *t.Active
}

// GetInitial retrieves the value of the leaf Initial from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Initial is set, it can
// safely use t.GetInitial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Initial == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime) GetInitial() uint32 {
	if t == nil || t.Initial == nil {
		return 300
	}
	return *t.Initial
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Active == nil {
		var v uint32 = 600
		t.Active = &v
	}
	if t.Initial == nil {
		var v uint32 = 300
		t.Initial = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/vrgw YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                      `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Brg                *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg    `path:"brg" module:"nokia-conf"`
	Lanext             *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext `path:"lanext" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) IsYANGGoStruct() {
}

// GetOrCreateBrg retrieves the value of the Brg field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) GetOrCreateBrg() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg {
	if t.Brg != nil {
		return t.Brg
	}
	t.Brg = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg{}
	return t.Brg
}

// GetOrCreateLanext retrieves the value of the Lanext field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) GetOrCreateLanext() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext {
	if t.Lanext != nil {
		return t.Lanext
	}
	t.Lanext = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext{}
	return t.Lanext
}

// GetBrg returns the value of the Brg struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw. If the receiver or the field Brg is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) GetBrg() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg {
	if t != nil && t.Brg != nil {
		return t.Brg
	}
	return nil
}

// GetLanext returns the value of the Lanext struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw. If the receiver or the field Lanext is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) GetLanext() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext {
	if t != nil && t.Lanext != nil {
		return t.Lanext
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Brg.PopulateDefaults()
	t.Lanext.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/vrgw/brg YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg struct {
	AuthenticatedBrgOnly *bool   `path:"authenticated-brg-only" module:"nokia-conf"`
	DefaultBrgProfile    *string `path:"default-brg-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg) IsYANGGoStruct() {
}

// GetAuthenticatedBrgOnly retrieves the value of the leaf AuthenticatedBrgOnly from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticatedBrgOnly is set, it can
// safely use t.GetAuthenticatedBrgOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticatedBrgOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg) GetAuthenticatedBrgOnly() bool {
	if t == nil || t.AuthenticatedBrgOnly == nil {
		return false
	}
	return *t.AuthenticatedBrgOnly
}

// GetDefaultBrgProfile retrieves the value of the leaf DefaultBrgProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultBrgProfile is set, it can
// safely use t.GetDefaultBrgProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultBrgProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg) GetDefaultBrgProfile() string {
	if t == nil || t.DefaultBrgProfile == nil {
		return ""
	}
	return *t.DefaultBrgProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AuthenticatedBrgOnly == nil {
		var v bool = false
		t.AuthenticatedBrgOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/vrgw/lanext YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext struct {
	Access                     *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access  `path:"access" module:"nokia-conf"`
	AdminState                 E_NokiaTypesSros_AdminState                                                                              `path:"admin-state" module:"nokia-conf"`
	ApplyGroups                []string                                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude         []string                                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	AssistiveAddressResolution *bool                                                                                                    `path:"assistive-address-resolution" module:"nokia-conf"`
	BdMacPrefix                *string                                                                                                  `path:"bd-mac-prefix" module:"nokia-conf"`
	MacTranslation             *bool                                                                                                    `path:"mac-translation" module:"nokia-conf"`
	Network                    *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) IsYANGGoStruct() {
}

// GetOrCreateAccess retrieves the value of the Access field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) GetOrCreateAccess() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access {
	if t.Access != nil {
		return t.Access
	}
	t.Access = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access{}
	return t.Access
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) GetOrCreateNetwork() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network{}
	return t.Network
}

// GetAccess returns the value of the Access struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext. If the receiver or the field Access is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) GetAccess() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access {
	if t != nil && t.Access != nil {
		return t.Access
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) GetNetwork() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAssistiveAddressResolution retrieves the value of the leaf AssistiveAddressResolution from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssistiveAddressResolution is set, it can
// safely use t.GetAssistiveAddressResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssistiveAddressResolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) GetAssistiveAddressResolution() bool {
	if t == nil || t.AssistiveAddressResolution == nil {
		return false
	}
	return *t.AssistiveAddressResolution
}

// GetBdMacPrefix retrieves the value of the leaf BdMacPrefix from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BdMacPrefix is set, it can
// safely use t.GetBdMacPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BdMacPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) GetBdMacPrefix() string {
	if t == nil || t.BdMacPrefix == nil {
		return ""
	}
	return *t.BdMacPrefix
}

// GetMacTranslation retrieves the value of the leaf MacTranslation from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacTranslation is set, it can
// safely use t.GetMacTranslation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacTranslation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) GetMacTranslation() bool {
	if t == nil || t.MacTranslation == nil {
		return false
	}
	return *t.MacTranslation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AssistiveAddressResolution == nil {
		var v bool = false
		t.AssistiveAddressResolution = &v
	}
	if t.MacTranslation == nil {
		var v bool = false
		t.MacTranslation = &v
	}
	t.Access.PopulateDefaults()
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/vrgw/lanext/access YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access struct {
	MaxMac      *uint32 `path:"max-mac" module:"nokia-conf"`
	MultiAccess *bool   `path:"multi-access" module:"nokia-conf"`
	Policer     *string `path:"policer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access) IsYANGGoStruct() {
}

// GetMaxMac retrieves the value of the leaf MaxMac from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxMac is set, it can
// safely use t.GetMaxMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access) GetMaxMac() uint32 {
	if t == nil || t.MaxMac == nil {
		return 20
	}
	return *t.MaxMac
}

// GetMultiAccess retrieves the value of the leaf MultiAccess from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiAccess is set, it can
// safely use t.GetMultiAccess() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiAccess == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access) GetMultiAccess() bool {
	if t == nil || t.MultiAccess == nil {
		return false
	}
	return *t.MultiAccess
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access) GetPolicer() string {
	if t == nil || t.Policer == nil {
		return ""
	}
	return *t.Policer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxMac == nil {
		var v uint32 = 20
		t.MaxMac = &v
	}
	if t.MultiAccess == nil {
		var v bool = false
		t.MultiAccess = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/vrgw/lanext/network YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxMac     *uint32                     `path:"max-mac" module:"nokia-conf"`
	Policer    *string                     `path:"policer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetMaxMac retrieves the value of the leaf MaxMac from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxMac is set, it can
// safely use t.GetMaxMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network) GetMaxMac() uint32 {
	if t == nil || t.MaxMac == nil {
		return 20
	}
	return *t.MaxMac
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network) GetPolicer() string {
	if t == nil || t.Policer == nil {
		return ""
	}
	return *t.Policer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MaxMac == nil {
		var v uint32 = 20
		t.MaxMac = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/xconnect YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect struct {
	Accounting         *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting `path:"accounting" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                                                              `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect) IsYANGGoStruct() {
}

// GetOrCreateAccounting retrieves the value of the Accounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect) GetOrCreateAccounting() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting {
	if t.Accounting != nil {
		return t.Accounting
	}
	t.Accounting = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting{}
	return t.Accounting
}

// GetAccounting returns the value of the Accounting struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect. If the receiver or the field Accounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect) GetAccounting() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting {
	if t != nil && t.Accounting != nil {
		return t.Accounting
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Accounting.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wlan-gw/vlan-range/xconnect/accounting YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting struct {
	MobilityUpdates *bool   `path:"mobility-updates" module:"nokia-conf"`
	Policy          *string `path:"policy" module:"nokia-conf"`
	UpdateInterval  *uint32 `path:"update-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting) IsYANGGoStruct() {
}

// GetMobilityUpdates retrieves the value of the leaf MobilityUpdates from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MobilityUpdates is set, it can
// safely use t.GetMobilityUpdates() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MobilityUpdates == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting) GetMobilityUpdates() bool {
	if t == nil || t.MobilityUpdates == nil {
		return false
	}
	return *t.MobilityUpdates
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetUpdateInterval retrieves the value of the leaf UpdateInterval from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpdateInterval is set, it can
// safely use t.GetUpdateInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpdateInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting) GetUpdateInterval() uint32 {
	if t == nil || t.UpdateInterval == nil {
		return 0
	}
	return *t.UpdateInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MobilityUpdates == nil {
		var v bool = false
		t.MobilityUpdates = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wpp YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp struct {
	AdminState                   E_NokiaTypesSros_AdminState                                                     `path:"admin-state" module:"nokia-conf"`
	ApplyGroups                  []string                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude           []string                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Initial                      *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial `path:"initial" module:"nokia-conf"`
	LeaseTime                    *uint32                                                                         `path:"lease-time" module:"nokia-conf"`
	Portal                       *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal  `path:"portal" module:"nokia-conf"`
	RestoreToInitialOnDisconnect *bool                                                                           `path:"restore-to-initial-on-disconnect" module:"nokia-conf"`
	TriggeredHosts               *bool                                                                           `path:"triggered-hosts" module:"nokia-conf"`
	UserDb                       *string                                                                         `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp) IsYANGGoStruct() {}

// GetOrCreateInitial retrieves the value of the Initial field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp) GetOrCreateInitial() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial {
	if t.Initial != nil {
		return t.Initial
	}
	t.Initial = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial{}
	return t.Initial
}

// GetOrCreatePortal retrieves the value of the Portal field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp) GetOrCreatePortal() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal {
	if t.Portal != nil {
		return t.Portal
	}
	t.Portal = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal{}
	return t.Portal
}

// GetInitial returns the value of the Initial struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp. If the receiver or the field Initial is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp) GetInitial() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial {
	if t != nil && t.Initial != nil {
		return t.Initial
	}
	return nil
}

// GetPortal returns the value of the Portal struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp. If the receiver or the field Portal is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp) GetPortal() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal {
	if t != nil && t.Portal != nil {
		return t.Portal
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLeaseTime retrieves the value of the leaf LeaseTime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeaseTime is set, it can
// safely use t.GetLeaseTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeaseTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp) GetLeaseTime() uint32 {
	if t == nil || t.LeaseTime == nil {
		return 600
	}
	return *t.LeaseTime
}

// GetRestoreToInitialOnDisconnect retrieves the value of the leaf RestoreToInitialOnDisconnect from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestoreToInitialOnDisconnect is set, it can
// safely use t.GetRestoreToInitialOnDisconnect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestoreToInitialOnDisconnect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp) GetRestoreToInitialOnDisconnect() bool {
	if t == nil || t.RestoreToInitialOnDisconnect == nil {
		return true
	}
	return *t.RestoreToInitialOnDisconnect
}

// GetTriggeredHosts retrieves the value of the leaf TriggeredHosts from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TriggeredHosts is set, it can
// safely use t.GetTriggeredHosts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TriggeredHosts == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp) GetTriggeredHosts() bool {
	if t == nil || t.TriggeredHosts == nil {
		return false
	}
	return *t.TriggeredHosts
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.LeaseTime == nil {
		var v uint32 = 600
		t.LeaseTime = &v
	}
	if t.RestoreToInitialOnDisconnect == nil {
		var v bool = true
		t.RestoreToInitialOnDisconnect = &v
	}
	if t.TriggeredHosts == nil {
		var v bool = false
		t.TriggeredHosts = &v
	}
	t.Initial.PopulateDefaults()
	t.Portal.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wpp/initial YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial struct {
	AppProfile *string `path:"app-profile" module:"nokia-conf"`
	SlaProfile *string `path:"sla-profile" module:"nokia-conf"`
	SubProfile *string `path:"sub-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial) IsYANGGoStruct() {
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSubProfile retrieves the value of the leaf SubProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfile is set, it can
// safely use t.GetSubProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial) GetSubProfile() string {
	if t == nil || t.SubProfile == nil {
		return ""
	}
	return *t.SubProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Initial) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/wpp/portal YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal struct {
	Name           *string `path:"name" module:"nokia-conf"`
	PortalGroup    *string `path:"portal-group" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPortalGroup retrieves the value of the leaf PortalGroup from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortalGroup is set, it can
// safely use t.GetPortalGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortalGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal) GetPortalGroup() string {
	if t == nil || t.PortalGroup == nil {
		return ""
	}
	return *t.PortalGroup
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp_Portal) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime represents the /nokia-conf/configure/service/ies/subscriber-interface/hold-time YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime struct {
	Ipv4 *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6 *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime) GetOrCreateIpv4() *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime) GetOrCreateIpv6() *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime) GetIpv4() *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime) GetIpv6() *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4 represents the /nokia-conf/configure/service/ies/subscriber-interface/hold-time/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4 struct {
	Down *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4) IsYANGGoStruct() {}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4) GetOrCreateDown() *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4) GetOrCreateUp() *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4) GetDown() *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4) GetUp() *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Down represents the /nokia-conf/configure/service/ies/subscriber-interface/hold-time/ipv4/down YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Down) IsYANGGoStruct() {}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Down.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Up represents the /nokia-conf/configure/service/ies/subscriber-interface/hold-time/ipv4/up YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Up) IsYANGGoStruct() {}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Up.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv4_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6 represents the /nokia-conf/configure/service/ies/subscriber-interface/hold-time/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6 struct {
	Down *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6) IsYANGGoStruct() {}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6) GetOrCreateDown() *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6) GetOrCreateUp() *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6) GetDown() *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6) GetUp() *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Down represents the /nokia-conf/configure/service/ies/subscriber-interface/hold-time/ipv6/down YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Down) IsYANGGoStruct() {}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Down.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Up represents the /nokia-conf/configure/service/ies/subscriber-interface/hold-time/ipv6/up YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Up) IsYANGGoStruct() {}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Up.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime_Ipv6_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking represents the /nokia-conf/configure/service/ies/subscriber-interface/ipoe-linking YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking struct {
	ApplyGroups                   []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude            []string `path:"apply-groups-exclude" module:"nokia-conf"`
	GratuitousRouterAdvertisement *bool    `path:"gratuitous-router-advertisement" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGratuitousRouterAdvertisement retrieves the value of the leaf GratuitousRouterAdvertisement from the NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GratuitousRouterAdvertisement is set, it can
// safely use t.GetGratuitousRouterAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GratuitousRouterAdvertisement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking) GetGratuitousRouterAdvertisement() bool {
	if t == nil || t.GratuitousRouterAdvertisement == nil {
		return false
	}
	return *t.GratuitousRouterAdvertisement
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GratuitousRouterAdvertisement == nil {
		var v bool = false
		t.GratuitousRouterAdvertisement = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession represents the /nokia-conf/configure/service/ies/subscriber-interface/ipoe-session YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	SessionLimit       *uint32  `path:"session-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession) GetSessionLimit() uint32 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4 represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4 struct {
	Address                map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address `path:"address" module:"nokia-conf"`
	AllowUnmatchingSubnets *bool                                                                        `path:"allow-unmatching-subnets" module:"nokia-conf"`
	DefaultDns             []string                                                                     `path:"default-dns" module:"nokia-conf"`
	Dhcp                   *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp               `path:"dhcp" module:"nokia-conf"`
	ExportHostRoutes       *bool                                                                        `path:"export-host-routes" module:"nokia-conf"`
	Unnumbered             *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Unnumbered         `path:"unnumbered" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4) NewAddress(Ipv4Address string) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address{
		Ipv4Address: &Ipv4Address,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ipv4Address = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4) GetOrCreateAddress(Ipv4Address string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address {

	key := Ipv4Address

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4) GetAddress(Ipv4Address string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4) DeleteAddress(Ipv4Address string) {
	key := Ipv4Address

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address struct to the
// list Address of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4) AppendAddress(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4) GetOrCreateDhcp() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp{}
	return t.Dhcp
}

// GetOrCreateUnnumbered retrieves the value of the Unnumbered field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4) GetOrCreateUnnumbered() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Unnumbered {
	if t.Unnumbered != nil {
		return t.Unnumbered
	}
	t.Unnumbered = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Unnumbered{}
	return t.Unnumbered
}

// GetDhcp returns the value of the Dhcp struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4) GetDhcp() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetUnnumbered returns the value of the Unnumbered struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4. If the receiver or the field Unnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4) GetUnnumbered() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Unnumbered {
	if t != nil && t.Unnumbered != nil {
		return t.Unnumbered
	}
	return nil
}

// GetAllowUnmatchingSubnets retrieves the value of the leaf AllowUnmatchingSubnets from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUnmatchingSubnets is set, it can
// safely use t.GetAllowUnmatchingSubnets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUnmatchingSubnets == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4) GetAllowUnmatchingSubnets() bool {
	if t == nil || t.AllowUnmatchingSubnets == nil {
		return false
	}
	return *t.AllowUnmatchingSubnets
}

// GetDefaultDns retrieves the value of the leaf DefaultDns from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultDns is set, it can
// safely use t.GetDefaultDns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultDns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4) GetDefaultDns() []string {
	if t == nil || t.DefaultDns == nil {
		return nil
	}
	return t.DefaultDns
}

// GetExportHostRoutes retrieves the value of the leaf ExportHostRoutes from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportHostRoutes is set, it can
// safely use t.GetExportHostRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportHostRoutes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4) GetExportHostRoutes() bool {
	if t == nil || t.ExportHostRoutes == nil {
		return false
	}
	return *t.ExportHostRoutes
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowUnmatchingSubnets == nil {
		var v bool = false
		t.AllowUnmatchingSubnets = &v
	}
	if t.ExportHostRoutes == nil {
		var v bool = false
		t.ExportHostRoutes = &v
	}
	t.Dhcp.PopulateDefaults()
	t.Unnumbered.PopulateDefaults()
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv4/address YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Gateway            *string  `path:"gateway" module:"nokia-conf"`
	HoldupTime         *uint32  `path:"holdup-time" module:"nokia-conf"`
	Ipv4Address        *string  `path:"ipv4-address" module:"nokia-conf"`
	PopulateHostRoutes *bool    `path:"populate-host-routes" module:"nokia-conf"`
	PrefixLength       *uint32  `path:"prefix-length" module:"nokia-conf"`
	TrackSrrp          *uint32  `path:"track-srrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGateway retrieves the value of the leaf Gateway from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gateway is set, it can
// safely use t.GetGateway() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gateway == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address) GetGateway() string {
	if t == nil || t.Gateway == nil {
		return ""
	}
	return *t.Gateway
}

// GetHoldupTime retrieves the value of the leaf HoldupTime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldupTime is set, it can
// safely use t.GetHoldupTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldupTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address) GetHoldupTime() uint32 {
	if t == nil || t.HoldupTime == nil {
		return 0
	}
	return *t.HoldupTime
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetPopulateHostRoutes retrieves the value of the leaf PopulateHostRoutes from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PopulateHostRoutes is set, it can
// safely use t.GetPopulateHostRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PopulateHostRoutes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address) GetPopulateHostRoutes() bool {
	if t == nil || t.PopulateHostRoutes == nil {
		return false
	}
	return *t.PopulateHostRoutes
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetTrackSrrp retrieves the value of the leaf TrackSrrp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackSrrp is set, it can
// safely use t.GetTrackSrrp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackSrrp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address) GetTrackSrrp() uint32 {
	if t == nil || t.TrackSrrp == nil {
		return 0
	}
	return *t.TrackSrrp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PopulateHostRoutes == nil {
		var v bool = false
		t.PopulateHostRoutes = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv4/dhcp YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp struct {
	AdminState              E_NokiaTypesSros_AdminState                                                       `path:"admin-state" module:"nokia-conf"`
	ApplyGroups             []string                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	ClientApplications      *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ClientApplications `path:"client-applications" module:"nokia-conf"`
	Description             *string                                                                           `path:"description" module:"nokia-conf"`
	GiAddress               *string                                                                           `path:"gi-address" module:"nokia-conf"`
	LeasePopulate           *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_LeasePopulate      `path:"lease-populate" module:"nokia-conf"`
	Option_82               *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82          `path:"option-82" module:"nokia-conf"`
	ProxyServer             *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer        `path:"proxy-server" module:"nokia-conf"`
	PythonPolicy            *string                                                                           `path:"python-policy" module:"nokia-conf"`
	RelayProxy              *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_RelayProxy         `path:"relay-proxy" module:"nokia-conf" yangPresence:"true"`
	ReleaseIncludeGiAddress *bool                                                                             `path:"release-include-gi-address" module:"nokia-conf"`
	Server                  []string                                                                          `path:"server" module:"nokia-conf"`
	SrcIpAddr               E_NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_SrcIpAddr         `path:"src-ip-addr" module:"nokia-conf"`
	VirtualSubnet           *bool                                                                             `path:"virtual-subnet" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) IsYANGGoStruct() {}

// GetOrCreateClientApplications retrieves the value of the ClientApplications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) GetOrCreateClientApplications() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ClientApplications {
	if t.ClientApplications != nil {
		return t.ClientApplications
	}
	t.ClientApplications = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ClientApplications{}
	return t.ClientApplications
}

// GetOrCreateLeasePopulate retrieves the value of the LeasePopulate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) GetOrCreateLeasePopulate() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_LeasePopulate {
	if t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	t.LeasePopulate = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_LeasePopulate{}
	return t.LeasePopulate
}

// GetOrCreateOption_82 retrieves the value of the Option_82 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) GetOrCreateOption_82() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82 {
	if t.Option_82 != nil {
		return t.Option_82
	}
	t.Option_82 = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82{}
	return t.Option_82
}

// GetOrCreateProxyServer retrieves the value of the ProxyServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) GetOrCreateProxyServer() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer {
	if t.ProxyServer != nil {
		return t.ProxyServer
	}
	t.ProxyServer = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer{}
	return t.ProxyServer
}

// GetOrCreateRelayProxy retrieves the value of the RelayProxy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) GetOrCreateRelayProxy() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_RelayProxy {
	if t.RelayProxy != nil {
		return t.RelayProxy
	}
	t.RelayProxy = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_RelayProxy{}
	return t.RelayProxy
}

// GetClientApplications returns the value of the ClientApplications struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp. If the receiver or the field ClientApplications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) GetClientApplications() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ClientApplications {
	if t != nil && t.ClientApplications != nil {
		return t.ClientApplications
	}
	return nil
}

// GetLeasePopulate returns the value of the LeasePopulate struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp. If the receiver or the field LeasePopulate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) GetLeasePopulate() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_LeasePopulate {
	if t != nil && t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	return nil
}

// GetOption_82 returns the value of the Option_82 struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp. If the receiver or the field Option_82 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) GetOption_82() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82 {
	if t != nil && t.Option_82 != nil {
		return t.Option_82
	}
	return nil
}

// GetProxyServer returns the value of the ProxyServer struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp. If the receiver or the field ProxyServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) GetProxyServer() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer {
	if t != nil && t.ProxyServer != nil {
		return t.ProxyServer
	}
	return nil
}

// GetRelayProxy returns the value of the RelayProxy struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp. If the receiver or the field RelayProxy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) GetRelayProxy() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_RelayProxy {
	if t != nil && t.RelayProxy != nil {
		return t.RelayProxy
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGiAddress retrieves the value of the leaf GiAddress from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GiAddress is set, it can
// safely use t.GetGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) GetGiAddress() string {
	if t == nil || t.GiAddress == nil {
		return ""
	}
	return *t.GiAddress
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetReleaseIncludeGiAddress retrieves the value of the leaf ReleaseIncludeGiAddress from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleaseIncludeGiAddress is set, it can
// safely use t.GetReleaseIncludeGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleaseIncludeGiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) GetReleaseIncludeGiAddress() bool {
	if t == nil || t.ReleaseIncludeGiAddress == nil {
		return false
	}
	return *t.ReleaseIncludeGiAddress
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// GetSrcIpAddr retrieves the value of the leaf SrcIpAddr from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcIpAddr is set, it can
// safely use t.GetSrcIpAddr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcIpAddr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) GetSrcIpAddr() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_SrcIpAddr {
	if t == nil || t.SrcIpAddr == 0 {
		return NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_SrcIpAddr_auto
	}
	return t.SrcIpAddr
}

// GetVirtualSubnet retrieves the value of the leaf VirtualSubnet from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualSubnet is set, it can
// safely use t.GetVirtualSubnet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualSubnet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) GetVirtualSubnet() bool {
	if t == nil || t.VirtualSubnet == nil {
		return false
	}
	return *t.VirtualSubnet
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ReleaseIncludeGiAddress == nil {
		var v bool = false
		t.ReleaseIncludeGiAddress = &v
	}
	if t.SrcIpAddr == 0 {
		t.SrcIpAddr = NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_SrcIpAddr_auto
	}
	if t.VirtualSubnet == nil {
		var v bool = false
		t.VirtualSubnet = &v
	}
	t.ClientApplications.PopulateDefaults()
	t.LeasePopulate.PopulateDefaults()
	t.Option_82.PopulateDefaults()
	t.ProxyServer.PopulateDefaults()
	t.RelayProxy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ClientApplications represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv4/dhcp/client-applications YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ClientApplications struct {
	Dhcp *bool `path:"dhcp" module:"nokia-conf"`
	Ppp  *bool `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ClientApplications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ClientApplications) IsYANGGoStruct() {
}

// GetDhcp retrieves the value of the leaf Dhcp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcp is set, it can
// safely use t.GetDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ClientApplications) GetDhcp() bool {
	if t == nil || t.Dhcp == nil {
		return true
	}
	return *t.Dhcp
}

// GetPpp retrieves the value of the leaf Ppp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ppp is set, it can
// safely use t.GetPpp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ppp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ClientApplications) GetPpp() bool {
	if t == nil || t.Ppp == nil {
		return false
	}
	return *t.Ppp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ClientApplications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ClientApplications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dhcp == nil {
		var v bool = true
		t.Dhcp = &v
	}
	if t.Ppp == nil {
		var v bool = false
		t.Ppp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ClientApplications) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ClientApplications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ClientApplications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ClientApplications) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ClientApplications.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ClientApplications) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_LeasePopulate represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv4/dhcp/lease-populate YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_LeasePopulate struct {
	MaxLeases *uint32 `path:"max-leases" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_LeasePopulate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_LeasePopulate) IsYANGGoStruct() {
}

// GetMaxLeases retrieves the value of the leaf MaxLeases from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_LeasePopulate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLeases is set, it can
// safely use t.GetMaxLeases() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLeases == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_LeasePopulate) GetMaxLeases() uint32 {
	if t == nil || t.MaxLeases == nil {
		return 0
	}
	return *t.MaxLeases
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_LeasePopulate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_LeasePopulate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_LeasePopulate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_LeasePopulate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_LeasePopulate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_LeasePopulate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_LeasePopulate.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_LeasePopulate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82 represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv4/dhcp/option-82 YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82 struct {
	VendorSpecificOption *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption `path:"vendor-specific-option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82) IsYANGGoStruct() {}

// GetOrCreateVendorSpecificOption retrieves the value of the VendorSpecificOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82) GetOrCreateVendorSpecificOption() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption {
	if t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	t.VendorSpecificOption = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption{}
	return t.VendorSpecificOption
}

// GetVendorSpecificOption returns the value of the VendorSpecificOption struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82. If the receiver or the field VendorSpecificOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82) GetVendorSpecificOption() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption {
	if t != nil && t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.VendorSpecificOption.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv4/dhcp/option-82/vendor-specific-option YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption struct {
	ClientMacAddress *bool   `path:"client-mac-address" module:"nokia-conf"`
	SapId            *bool   `path:"sap-id" module:"nokia-conf"`
	ServiceId        *bool   `path:"service-id" module:"nokia-conf"`
	String           *string `path:"string" module:"nokia-conf"`
	SystemId         *bool   `path:"system-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) IsYANGGoStruct() {
}

// GetClientMacAddress retrieves the value of the leaf ClientMacAddress from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMacAddress is set, it can
// safely use t.GetClientMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetClientMacAddress() bool {
	if t == nil || t.ClientMacAddress == nil {
		return false
	}
	return *t.ClientMacAddress
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetSapId() bool {
	if t == nil || t.SapId == nil {
		return false
	}
	return *t.SapId
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetServiceId() bool {
	if t == nil || t.ServiceId == nil {
		return false
	}
	return *t.ServiceId
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetSystemId retrieves the value of the leaf SystemId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetSystemId() bool {
	if t == nil || t.SystemId == nil {
		return false
	}
	return *t.SystemId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClientMacAddress == nil {
		var v bool = false
		t.ClientMacAddress = &v
	}
	if t.SapId == nil {
		var v bool = false
		t.SapId = &v
	}
	if t.ServiceId == nil {
		var v bool = false
		t.ServiceId = &v
	}
	if t.SystemId == nil {
		var v bool = false
		t.SystemId = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv4/dhcp/proxy-server YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer struct {
	AdminState     E_NokiaTypesSros_AdminState                                                          `path:"admin-state" module:"nokia-conf"`
	EmulatedServer *string                                                                              `path:"emulated-server" module:"nokia-conf"`
	LeaseTime      *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime `path:"lease-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer) IsYANGGoStruct() {}

// GetOrCreateLeaseTime retrieves the value of the LeaseTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer) GetOrCreateLeaseTime() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime {
	if t.LeaseTime != nil {
		return t.LeaseTime
	}
	t.LeaseTime = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime{}
	return t.LeaseTime
}

// GetLeaseTime returns the value of the LeaseTime struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer. If the receiver or the field LeaseTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer) GetLeaseTime() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime {
	if t != nil && t.LeaseTime != nil {
		return t.LeaseTime
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEmulatedServer retrieves the value of the leaf EmulatedServer from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EmulatedServer is set, it can
// safely use t.GetEmulatedServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EmulatedServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer) GetEmulatedServer() string {
	if t == nil || t.EmulatedServer == nil {
		return ""
	}
	return *t.EmulatedServer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.LeaseTime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv4/dhcp/proxy-server/lease-time YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime struct {
	RadiusOverride *bool   `path:"radius-override" module:"nokia-conf"`
	Value          *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) IsYANGGoStruct() {
}

// GetRadiusOverride retrieves the value of the leaf RadiusOverride from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusOverride is set, it can
// safely use t.GetRadiusOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) GetRadiusOverride() bool {
	if t == nil || t.RadiusOverride == nil {
		return false
	}
	return *t.RadiusOverride
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RadiusOverride == nil {
		var v bool = false
		t.RadiusOverride = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_RelayProxy represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv4/dhcp/relay-proxy YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_RelayProxy struct {
	ReleaseUpdateSrcIp *bool   `path:"release-update-src-ip" module:"nokia-conf"`
	SiaddrOverride     *string `path:"siaddr-override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_RelayProxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_RelayProxy) IsYANGGoStruct() {}

// GetReleaseUpdateSrcIp retrieves the value of the leaf ReleaseUpdateSrcIp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_RelayProxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleaseUpdateSrcIp is set, it can
// safely use t.GetReleaseUpdateSrcIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleaseUpdateSrcIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_RelayProxy) GetReleaseUpdateSrcIp() bool {
	if t == nil || t.ReleaseUpdateSrcIp == nil {
		return false
	}
	return *t.ReleaseUpdateSrcIp
}

// GetSiaddrOverride retrieves the value of the leaf SiaddrOverride from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_RelayProxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SiaddrOverride is set, it can
// safely use t.GetSiaddrOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SiaddrOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_RelayProxy) GetSiaddrOverride() string {
	if t == nil || t.SiaddrOverride == nil {
		return ""
	}
	return *t.SiaddrOverride
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_RelayProxy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_RelayProxy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ReleaseUpdateSrcIp == nil {
		var v bool = false
		t.ReleaseUpdateSrcIp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_RelayProxy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_RelayProxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_RelayProxy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_RelayProxy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_RelayProxy.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Dhcp_RelayProxy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Unnumbered represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv4/unnumbered YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Unnumbered struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
	IpIntName *string `path:"ip-int-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Unnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Unnumbered) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Unnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Unnumbered) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetIpIntName retrieves the value of the leaf IpIntName from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Unnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpIntName is set, it can
// safely use t.GetIpIntName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpIntName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Unnumbered) GetIpIntName() string {
	if t == nil || t.IpIntName == nil {
		return ""
	}
	return *t.IpIntName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Unnumbered
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Unnumbered) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Unnumbered) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Unnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Unnumbered) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Unnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Unnumbered.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4_Unnumbered) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6 represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6 struct {
	Address                   map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address         `path:"address" module:"nokia-conf"`
	AllowMultipleWanAddresses *bool                                                                                `path:"allow-multiple-wan-addresses" module:"nokia-conf"`
	AllowUnmatchingPrefixes   *bool                                                                                `path:"allow-unmatching-prefixes" module:"nokia-conf"`
	DefaultDns                []string                                                                             `path:"default-dns" module:"nokia-conf"`
	DelegatedPrefixLength     NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_DelegatedPrefixLength_Union `path:"delegated-prefix-length" module:"nokia-conf"`
	Dhcp6                     *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6                      `path:"dhcp6" module:"nokia-conf"`
	IpoeBridgedMode           *bool                                                                                `path:"ipoe-bridged-mode" module:"nokia-conf"`
	LinkLocalAddress          *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_LinkLocalAddress           `path:"link-local-address" module:"nokia-conf"`
	Prefix                    map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix          `path:"prefix" module:"nokia-conf"`
	RouterAdvertisements      *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements       `path:"router-advertisements" module:"nokia-conf"`
	RouterSolicit             *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit              `path:"router-solicit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) NewAddress(Ipv6Address string) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address{
		Ipv6Address: &Ipv6Address,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ipv6Address = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) GetOrCreateAddress(Ipv6Address string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address {

	key := Ipv6Address

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) GetAddress(Ipv6Address string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address {

	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) DeleteAddress(Ipv6Address string) {
	key := Ipv6Address

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address struct to the
// list Address of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) AppendAddress(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) NewPrefix(Ipv6Prefix string) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) GetOrCreatePrefix(Ipv6Prefix string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix {

	key := Ipv6Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) GetPrefix(Ipv6Prefix string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) DeletePrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix struct to the
// list Prefix of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) AppendPrefix(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetOrCreateDhcp6 retrieves the value of the Dhcp6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) GetOrCreateDhcp6() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6 {
	if t.Dhcp6 != nil {
		return t.Dhcp6
	}
	t.Dhcp6 = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6{}
	return t.Dhcp6
}

// GetOrCreateLinkLocalAddress retrieves the value of the LinkLocalAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) GetOrCreateLinkLocalAddress() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_LinkLocalAddress {
	if t.LinkLocalAddress != nil {
		return t.LinkLocalAddress
	}
	t.LinkLocalAddress = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_LinkLocalAddress{}
	return t.LinkLocalAddress
}

// GetOrCreateRouterAdvertisements retrieves the value of the RouterAdvertisements field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) GetOrCreateRouterAdvertisements() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements {
	if t.RouterAdvertisements != nil {
		return t.RouterAdvertisements
	}
	t.RouterAdvertisements = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements{}
	return t.RouterAdvertisements
}

// GetOrCreateRouterSolicit retrieves the value of the RouterSolicit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) GetOrCreateRouterSolicit() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit {
	if t.RouterSolicit != nil {
		return t.RouterSolicit
	}
	t.RouterSolicit = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit{}
	return t.RouterSolicit
}

// GetDhcp6 returns the value of the Dhcp6 struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6. If the receiver or the field Dhcp6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) GetDhcp6() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6 {
	if t != nil && t.Dhcp6 != nil {
		return t.Dhcp6
	}
	return nil
}

// GetLinkLocalAddress returns the value of the LinkLocalAddress struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6. If the receiver or the field LinkLocalAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) GetLinkLocalAddress() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_LinkLocalAddress {
	if t != nil && t.LinkLocalAddress != nil {
		return t.LinkLocalAddress
	}
	return nil
}

// GetRouterAdvertisements returns the value of the RouterAdvertisements struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6. If the receiver or the field RouterAdvertisements is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) GetRouterAdvertisements() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements {
	if t != nil && t.RouterAdvertisements != nil {
		return t.RouterAdvertisements
	}
	return nil
}

// GetRouterSolicit returns the value of the RouterSolicit struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6. If the receiver or the field RouterSolicit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) GetRouterSolicit() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit {
	if t != nil && t.RouterSolicit != nil {
		return t.RouterSolicit
	}
	return nil
}

// GetAllowMultipleWanAddresses retrieves the value of the leaf AllowMultipleWanAddresses from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowMultipleWanAddresses is set, it can
// safely use t.GetAllowMultipleWanAddresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowMultipleWanAddresses == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) GetAllowMultipleWanAddresses() bool {
	if t == nil || t.AllowMultipleWanAddresses == nil {
		return false
	}
	return *t.AllowMultipleWanAddresses
}

// GetAllowUnmatchingPrefixes retrieves the value of the leaf AllowUnmatchingPrefixes from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUnmatchingPrefixes is set, it can
// safely use t.GetAllowUnmatchingPrefixes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUnmatchingPrefixes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) GetAllowUnmatchingPrefixes() bool {
	if t == nil || t.AllowUnmatchingPrefixes == nil {
		return false
	}
	return *t.AllowUnmatchingPrefixes
}

// GetDefaultDns retrieves the value of the leaf DefaultDns from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultDns is set, it can
// safely use t.GetDefaultDns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultDns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) GetDefaultDns() []string {
	if t == nil || t.DefaultDns == nil {
		return nil
	}
	return t.DefaultDns
}

// GetDelegatedPrefixLength retrieves the value of the leaf DelegatedPrefixLength from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelegatedPrefixLength is set, it can
// safely use t.GetDelegatedPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelegatedPrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) GetDelegatedPrefixLength() NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_DelegatedPrefixLength_Union {
	if t == nil || t.DelegatedPrefixLength == nil {
		return UnionUint32(64)
	}
	return t.DelegatedPrefixLength
}

// GetIpoeBridgedMode retrieves the value of the leaf IpoeBridgedMode from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpoeBridgedMode is set, it can
// safely use t.GetIpoeBridgedMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpoeBridgedMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) GetIpoeBridgedMode() bool {
	if t == nil || t.IpoeBridgedMode == nil {
		return false
	}
	return *t.IpoeBridgedMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowMultipleWanAddresses == nil {
		var v bool = false
		t.AllowMultipleWanAddresses = &v
	}
	if t.AllowUnmatchingPrefixes == nil {
		var v bool = false
		t.AllowUnmatchingPrefixes = &v
	}
	if t.DelegatedPrefixLength == nil {
		t.DelegatedPrefixLength = UnionUint32(64)
	}
	if t.IpoeBridgedMode == nil {
		var v bool = false
		t.IpoeBridgedMode = &v
	}
	t.Dhcp6.PopulateDefaults()
	t.LinkLocalAddress.PopulateDefaults()
	t.RouterAdvertisements.PopulateDefaults()
	t.RouterSolicit.PopulateDefaults()
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv6/address YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address struct {
	ApplyGroups        []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	HostType           E_NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address_HostType `path:"host-type" module:"nokia-conf"`
	Ipv6Address        *string                                                                     `path:"ipv6-address" module:"nokia-conf"`
	PrefixLength       *uint32                                                                     `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHostType retrieves the value of the leaf HostType from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostType is set, it can
// safely use t.GetHostType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address) GetHostType() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address_HostType {
	if t == nil || t.HostType == 0 {
		return NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address_HostType_pd
	}
	return t.HostType
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HostType == 0 {
		t.HostType = NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address_HostType_pd
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6 represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv6/dhcp6 YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6 struct {
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	OverrideSlaac      *bool                                                                          `path:"override-slaac" module:"nokia-conf"`
	PdManagedRoute     *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute `path:"pd-managed-route" module:"nokia-conf" yangPresence:"true"`
	ProxyServer        *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer    `path:"proxy-server" module:"nokia-conf"`
	PythonPolicy       *string                                                                        `path:"python-policy" module:"nokia-conf"`
	Relay              *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay          `path:"relay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6) IsYANGGoStruct() {}

// GetOrCreatePdManagedRoute retrieves the value of the PdManagedRoute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6) GetOrCreatePdManagedRoute() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute {
	if t.PdManagedRoute != nil {
		return t.PdManagedRoute
	}
	t.PdManagedRoute = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute{}
	return t.PdManagedRoute
}

// GetOrCreateProxyServer retrieves the value of the ProxyServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6) GetOrCreateProxyServer() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer {
	if t.ProxyServer != nil {
		return t.ProxyServer
	}
	t.ProxyServer = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer{}
	return t.ProxyServer
}

// GetOrCreateRelay retrieves the value of the Relay field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6) GetOrCreateRelay() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay {
	if t.Relay != nil {
		return t.Relay
	}
	t.Relay = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay{}
	return t.Relay
}

// GetPdManagedRoute returns the value of the PdManagedRoute struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6. If the receiver or the field PdManagedRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6) GetPdManagedRoute() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute {
	if t != nil && t.PdManagedRoute != nil {
		return t.PdManagedRoute
	}
	return nil
}

// GetProxyServer returns the value of the ProxyServer struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6. If the receiver or the field ProxyServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6) GetProxyServer() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer {
	if t != nil && t.ProxyServer != nil {
		return t.ProxyServer
	}
	return nil
}

// GetRelay returns the value of the Relay struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6. If the receiver or the field Relay is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6) GetRelay() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay {
	if t != nil && t.Relay != nil {
		return t.Relay
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetOverrideSlaac retrieves the value of the leaf OverrideSlaac from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverrideSlaac is set, it can
// safely use t.GetOverrideSlaac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverrideSlaac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6) GetOverrideSlaac() bool {
	if t == nil || t.OverrideSlaac == nil {
		return false
	}
	return *t.OverrideSlaac
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.OverrideSlaac == nil {
		var v bool = false
		t.OverrideSlaac = &v
	}
	t.PdManagedRoute.PopulateDefaults()
	t.ProxyServer.PopulateDefaults()
	t.Relay.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv6/dhcp6/pd-managed-route YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute struct {
	NextHop E_NokiaTypesServices_Dhcp6PdManagedRouteNh `path:"next-hop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute) IsYANGGoStruct() {
}

// GetNextHop retrieves the value of the leaf NextHop from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute) GetNextHop() E_NokiaTypesServices_Dhcp6PdManagedRouteNh {
	if t == nil || t.NextHop == 0 {
		return NokiaTypesServices_Dhcp6PdManagedRouteNh_ipv6
	}
	return t.NextHop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NextHop == 0 {
		t.NextHop = NokiaTypesServices_Dhcp6PdManagedRouteNh_ipv6
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv6/dhcp6/proxy-server YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                        `path:"admin-state" module:"nokia-conf"`
	ClientApplications *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications     `path:"client-applications" module:"nokia-conf"`
	PreferredLifetime  NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_PreferredLifetime_Union `path:"preferred-lifetime" module:"nokia-conf"`
	RebindTimer        *uint32                                                                                            `path:"rebind-timer" module:"nokia-conf"`
	RenewTimer         *uint32                                                                                            `path:"renew-timer" module:"nokia-conf"`
	ServerId           *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId               `path:"server-id" module:"nokia-conf"`
	ValidLifetime      NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ValidLifetime_Union     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) IsYANGGoStruct() {}

// GetOrCreateClientApplications retrieves the value of the ClientApplications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) GetOrCreateClientApplications() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications {
	if t.ClientApplications != nil {
		return t.ClientApplications
	}
	t.ClientApplications = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications{}
	return t.ClientApplications
}

// GetOrCreateServerId retrieves the value of the ServerId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) GetOrCreateServerId() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId {
	if t.ServerId != nil {
		return t.ServerId
	}
	t.ServerId = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId{}
	return t.ServerId
}

// GetClientApplications returns the value of the ClientApplications struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer. If the receiver or the field ClientApplications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) GetClientApplications() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications {
	if t != nil && t.ClientApplications != nil {
		return t.ClientApplications
	}
	return nil
}

// GetServerId returns the value of the ServerId struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer. If the receiver or the field ServerId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) GetServerId() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId {
	if t != nil && t.ServerId != nil {
		return t.ServerId
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) GetPreferredLifetime() NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_PreferredLifetime_Union {
	if t == nil || t.PreferredLifetime == nil {
		return UnionUint32(3600)
	}
	return t.PreferredLifetime
}

// GetRebindTimer retrieves the value of the leaf RebindTimer from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RebindTimer is set, it can
// safely use t.GetRebindTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RebindTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) GetRebindTimer() uint32 {
	if t == nil || t.RebindTimer == nil {
		return 2880
	}
	return *t.RebindTimer
}

// GetRenewTimer retrieves the value of the leaf RenewTimer from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RenewTimer is set, it can
// safely use t.GetRenewTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RenewTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) GetRenewTimer() uint32 {
	if t == nil || t.RenewTimer == nil {
		return 1800
	}
	return *t.RenewTimer
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) GetValidLifetime() NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ValidLifetime_Union {
	if t == nil || t.ValidLifetime == nil {
		return UnionUint32(86400)
	}
	return t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.PreferredLifetime == nil {
		t.PreferredLifetime = UnionUint32(3600)
	}
	if t.RebindTimer == nil {
		var v uint32 = 2880
		t.RebindTimer = &v
	}
	if t.RenewTimer == nil {
		var v uint32 = 1800
		t.RenewTimer = &v
	}
	if t.ValidLifetime == nil {
		t.ValidLifetime = UnionUint32(86400)
	}
	t.ClientApplications.PopulateDefaults()
	t.ServerId.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv6/dhcp6/proxy-server/client-applications YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications struct {
	Dhcp *bool `path:"dhcp" module:"nokia-conf"`
	Ppp  *bool `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) IsYANGGoStruct() {
}

// GetDhcp retrieves the value of the leaf Dhcp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcp is set, it can
// safely use t.GetDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) GetDhcp() bool {
	if t == nil || t.Dhcp == nil {
		return true
	}
	return *t.Dhcp
}

// GetPpp retrieves the value of the leaf Ppp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ppp is set, it can
// safely use t.GetPpp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ppp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) GetPpp() bool {
	if t == nil || t.Ppp == nil {
		return false
	}
	return *t.Ppp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dhcp == nil {
		var v bool = true
		t.Dhcp = &v
	}
	if t.Ppp == nil {
		var v bool = false
		t.Ppp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv6/dhcp6/proxy-server/server-id YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId struct {
	ApplyGroups        []string  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string  `path:"apply-groups-exclude" module:"nokia-conf"`
	DuidEnAscii        *string   `path:"duid-en-ascii" module:"nokia-conf"`
	DuidEnHex          *string   `path:"duid-en-hex" module:"nokia-conf"`
	DuidLl             YANGEmpty `path:"duid-ll" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDuidEnAscii retrieves the value of the leaf DuidEnAscii from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuidEnAscii is set, it can
// safely use t.GetDuidEnAscii() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuidEnAscii == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId) GetDuidEnAscii() string {
	if t == nil || t.DuidEnAscii == nil {
		return ""
	}
	return *t.DuidEnAscii
}

// GetDuidEnHex retrieves the value of the leaf DuidEnHex from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuidEnHex is set, it can
// safely use t.GetDuidEnHex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuidEnHex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId) GetDuidEnHex() string {
	if t == nil || t.DuidEnHex == nil {
		return ""
	}
	return *t.DuidEnHex
}

// GetDuidLl retrieves the value of the leaf DuidLl from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuidLl is set, it can
// safely use t.GetDuidLl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuidLl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId) GetDuidLl() YANGEmpty {
	if t == nil || t.DuidLl == false {
		return false
	}
	return t.DuidLl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv6/dhcp6/relay YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay struct {
	AdminState         E_NokiaTypesSros_AdminState                                                              `path:"admin-state" module:"nokia-conf"`
	ClientApplications *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications `path:"client-applications" module:"nokia-conf"`
	Description        *string                                                                                  `path:"description" module:"nokia-conf"`
	LeaseSplit         *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit         `path:"lease-split" module:"nokia-conf"`
	LinkAddress        *string                                                                                  `path:"link-address" module:"nokia-conf"`
	Server             []string                                                                                 `path:"server" module:"nokia-conf"`
	SourceAddress      *string                                                                                  `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay) IsYANGGoStruct() {}

// GetOrCreateClientApplications retrieves the value of the ClientApplications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay) GetOrCreateClientApplications() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications {
	if t.ClientApplications != nil {
		return t.ClientApplications
	}
	t.ClientApplications = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications{}
	return t.ClientApplications
}

// GetOrCreateLeaseSplit retrieves the value of the LeaseSplit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay) GetOrCreateLeaseSplit() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit {
	if t.LeaseSplit != nil {
		return t.LeaseSplit
	}
	t.LeaseSplit = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit{}
	return t.LeaseSplit
}

// GetClientApplications returns the value of the ClientApplications struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay. If the receiver or the field ClientApplications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay) GetClientApplications() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications {
	if t != nil && t.ClientApplications != nil {
		return t.ClientApplications
	}
	return nil
}

// GetLeaseSplit returns the value of the LeaseSplit struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay. If the receiver or the field LeaseSplit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay) GetLeaseSplit() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit {
	if t != nil && t.LeaseSplit != nil {
		return t.LeaseSplit
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLinkAddress retrieves the value of the leaf LinkAddress from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkAddress is set, it can
// safely use t.GetLinkAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay) GetLinkAddress() string {
	if t == nil || t.LinkAddress == nil {
		return ""
	}
	return *t.LinkAddress
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.ClientApplications.PopulateDefaults()
	t.LeaseSplit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv6/dhcp6/relay/client-applications YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications struct {
	Dhcp *bool `path:"dhcp" module:"nokia-conf"`
	Ppp  *bool `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications) IsYANGGoStruct() {
}

// GetDhcp retrieves the value of the leaf Dhcp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcp is set, it can
// safely use t.GetDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications) GetDhcp() bool {
	if t == nil || t.Dhcp == nil {
		return true
	}
	return *t.Dhcp
}

// GetPpp retrieves the value of the leaf Ppp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ppp is set, it can
// safely use t.GetPpp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ppp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications) GetPpp() bool {
	if t == nil || t.Ppp == nil {
		return false
	}
	return *t.Ppp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dhcp == nil {
		var v bool = true
		t.Dhcp = &v
	}
	if t.Ppp == nil {
		var v bool = false
		t.Ppp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv6/dhcp6/relay/lease-split YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit struct {
	AdminState    E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ValidLifetime *uint32                     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit) GetValidLifetime() uint32 {
	if t == nil || t.ValidLifetime == nil {
		return 3600
	}
	return *t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ValidLifetime == nil {
		var v uint32 = 3600
		t.ValidLifetime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_LinkLocalAddress represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv6/link-local-address YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_LinkLocalAddress struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_LinkLocalAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_LinkLocalAddress) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_LinkLocalAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_LinkLocalAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_LinkLocalAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_LinkLocalAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_LinkLocalAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_LinkLocalAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_LinkLocalAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_LinkLocalAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_LinkLocalAddress.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_LinkLocalAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv6/prefix YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix struct {
	ApplyGroups        []string                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	HoldupTime         *uint32                                                                    `path:"holdup-time" module:"nokia-conf"`
	HostType           E_NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix_HostType `path:"host-type" module:"nokia-conf"`
	Ipv6Prefix         *string                                                                    `path:"ipv6-prefix" module:"nokia-conf"`
	TrackSrrp          *uint32                                                                    `path:"track-srrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHoldupTime retrieves the value of the leaf HoldupTime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldupTime is set, it can
// safely use t.GetHoldupTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldupTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix) GetHoldupTime() uint32 {
	if t == nil || t.HoldupTime == nil {
		return 0
	}
	return *t.HoldupTime
}

// GetHostType retrieves the value of the leaf HostType from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostType is set, it can
// safely use t.GetHostType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix) GetHostType() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix_HostType {
	if t == nil || t.HostType == 0 {
		return NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix_HostType_pd
	}
	return t.HostType
}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// GetTrackSrrp retrieves the value of the leaf TrackSrrp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackSrrp is set, it can
// safely use t.GetTrackSrrp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackSrrp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix) GetTrackSrrp() uint32 {
	if t == nil || t.TrackSrrp == nil {
		return 0
	}
	return *t.TrackSrrp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HostType == 0 {
		t.HostType = NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix_HostType_pd
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv6/router-advertisements YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements struct {
	AdminState               E_NokiaTypesSros_AdminState                                                                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups              []string                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude       []string                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	ForceMcast               E_NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_ForceMcast   `path:"force-mcast" module:"nokia-conf"`
	MaxAdvertisementInterval *uint32                                                                                      `path:"max-advertisement-interval" module:"nokia-conf"`
	MinAdvertisementInterval *uint32                                                                                      `path:"min-advertisement-interval" module:"nokia-conf"`
	Options                  *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options       `path:"options" module:"nokia-conf"`
	PrefixOptions            *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions `path:"prefix-options" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements) IsYANGGoStruct() {
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements) GetOrCreateOptions() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options{}
	return t.Options
}

// GetOrCreatePrefixOptions retrieves the value of the PrefixOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements) GetOrCreatePrefixOptions() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions {
	if t.PrefixOptions != nil {
		return t.PrefixOptions
	}
	t.PrefixOptions = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions{}
	return t.PrefixOptions
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements) GetOptions() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetPrefixOptions returns the value of the PrefixOptions struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements. If the receiver or the field PrefixOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements) GetPrefixOptions() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions {
	if t != nil && t.PrefixOptions != nil {
		return t.PrefixOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetForceMcast retrieves the value of the leaf ForceMcast from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceMcast is set, it can
// safely use t.GetForceMcast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceMcast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements) GetForceMcast() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_ForceMcast {
	if t == nil || t.ForceMcast == 0 {
		return 0
	}
	return t.ForceMcast
}

// GetMaxAdvertisementInterval retrieves the value of the leaf MaxAdvertisementInterval from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAdvertisementInterval is set, it can
// safely use t.GetMaxAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements) GetMaxAdvertisementInterval() uint32 {
	if t == nil || t.MaxAdvertisementInterval == nil {
		return 1800
	}
	return *t.MaxAdvertisementInterval
}

// GetMinAdvertisementInterval retrieves the value of the leaf MinAdvertisementInterval from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinAdvertisementInterval is set, it can
// safely use t.GetMinAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements) GetMinAdvertisementInterval() uint32 {
	if t == nil || t.MinAdvertisementInterval == nil {
		return 900
	}
	return *t.MinAdvertisementInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaxAdvertisementInterval == nil {
		var v uint32 = 1800
		t.MaxAdvertisementInterval = &v
	}
	if t.MinAdvertisementInterval == nil {
		var v uint32 = 900
		t.MinAdvertisementInterval = &v
	}
	t.Options.PopulateDefaults()
	t.PrefixOptions.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv6/router-advertisements/options YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options struct {
	CurrentHopLimit            *uint32                                                                                                    `path:"current-hop-limit" module:"nokia-conf"`
	Dns                        *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns                 `path:"dns" module:"nokia-conf"`
	ManagedConfiguration       *bool                                                                                                      `path:"managed-configuration" module:"nokia-conf"`
	Mtu                        NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Mtu_Union            `path:"mtu" module:"nokia-conf"`
	OtherStatefulConfiguration *bool                                                                                                      `path:"other-stateful-configuration" module:"nokia-conf"`
	ReachableTime              *uint32                                                                                                    `path:"reachable-time" module:"nokia-conf"`
	RetransmitTimer            *uint32                                                                                                    `path:"retransmit-timer" module:"nokia-conf"`
	RouterLifetime             NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_RouterLifetime_Union `path:"router-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options) IsYANGGoStruct() {
}

// GetOrCreateDns retrieves the value of the Dns field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options) GetOrCreateDns() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns {
	if t.Dns != nil {
		return t.Dns
	}
	t.Dns = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns{}
	return t.Dns
}

// GetDns returns the value of the Dns struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options. If the receiver or the field Dns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options) GetDns() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns {
	if t != nil && t.Dns != nil {
		return t.Dns
	}
	return nil
}

// GetCurrentHopLimit retrieves the value of the leaf CurrentHopLimit from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CurrentHopLimit is set, it can
// safely use t.GetCurrentHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CurrentHopLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options) GetCurrentHopLimit() uint32 {
	if t == nil || t.CurrentHopLimit == nil {
		return 64
	}
	return *t.CurrentHopLimit
}

// GetManagedConfiguration retrieves the value of the leaf ManagedConfiguration from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagedConfiguration is set, it can
// safely use t.GetManagedConfiguration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagedConfiguration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options) GetManagedConfiguration() bool {
	if t == nil || t.ManagedConfiguration == nil {
		return false
	}
	return *t.ManagedConfiguration
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options) GetMtu() NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Mtu_Union {
	if t == nil || t.Mtu == nil {
		return NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Mtu_Enum_not_included
	}
	return t.Mtu
}

// GetOtherStatefulConfiguration retrieves the value of the leaf OtherStatefulConfiguration from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtherStatefulConfiguration is set, it can
// safely use t.GetOtherStatefulConfiguration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtherStatefulConfiguration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options) GetOtherStatefulConfiguration() bool {
	if t == nil || t.OtherStatefulConfiguration == nil {
		return false
	}
	return *t.OtherStatefulConfiguration
}

// GetReachableTime retrieves the value of the leaf ReachableTime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReachableTime is set, it can
// safely use t.GetReachableTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReachableTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options) GetReachableTime() uint32 {
	if t == nil || t.ReachableTime == nil {
		return 0
	}
	return *t.ReachableTime
}

// GetRetransmitTimer retrieves the value of the leaf RetransmitTimer from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitTimer is set, it can
// safely use t.GetRetransmitTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options) GetRetransmitTimer() uint32 {
	if t == nil || t.RetransmitTimer == nil {
		return 0
	}
	return *t.RetransmitTimer
}

// GetRouterLifetime retrieves the value of the leaf RouterLifetime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterLifetime is set, it can
// safely use t.GetRouterLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options) GetRouterLifetime() NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_RouterLifetime_Union {
	if t == nil || t.RouterLifetime == nil {
		return UnionUint32(4500)
	}
	return t.RouterLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CurrentHopLimit == nil {
		var v uint32 = 64
		t.CurrentHopLimit = &v
	}
	if t.ManagedConfiguration == nil {
		var v bool = false
		t.ManagedConfiguration = &v
	}
	if t.Mtu == nil {
		t.Mtu = NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Mtu_Enum_not_included
	}
	if t.OtherStatefulConfiguration == nil {
		var v bool = false
		t.OtherStatefulConfiguration = &v
	}
	if t.ReachableTime == nil {
		var v uint32 = 0
		t.ReachableTime = &v
	}
	if t.RetransmitTimer == nil {
		var v uint32 = 0
		t.RetransmitTimer = &v
	}
	if t.RouterLifetime == nil {
		t.RouterLifetime = UnionUint32(4500)
	}
	t.Dns.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv6/router-advertisements/options/dns YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns struct {
	IncludeRdnss  *bool                                                                                                         `path:"include-rdnss" module:"nokia-conf"`
	RdnssLifetime NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns_RdnssLifetime_Union `path:"rdnss-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns) IsYANGGoStruct() {
}

// GetIncludeRdnss retrieves the value of the leaf IncludeRdnss from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeRdnss is set, it can
// safely use t.GetIncludeRdnss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeRdnss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns) GetIncludeRdnss() bool {
	if t == nil || t.IncludeRdnss == nil {
		return false
	}
	return *t.IncludeRdnss
}

// GetRdnssLifetime retrieves the value of the leaf RdnssLifetime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RdnssLifetime is set, it can
// safely use t.GetRdnssLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RdnssLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns) GetRdnssLifetime() NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns_RdnssLifetime_Union {
	if t == nil || t.RdnssLifetime == nil {
		return UnionUint32(3600)
	}
	return t.RdnssLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncludeRdnss == nil {
		var v bool = false
		t.IncludeRdnss = &v
	}
	if t.RdnssLifetime == nil {
		t.RdnssLifetime = UnionUint32(3600)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv6/router-advertisements/prefix-options YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions struct {
	Autonomous        *bool                                                                                                               `path:"autonomous" module:"nokia-conf"`
	OnLink            *bool                                                                                                               `path:"on-link" module:"nokia-conf"`
	PreferredLifetime NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions_PreferredLifetime_Union `path:"preferred-lifetime" module:"nokia-conf"`
	ValidLifetime     NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions_ValidLifetime_Union     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions) IsYANGGoStruct() {
}

// GetAutonomous retrieves the value of the leaf Autonomous from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Autonomous is set, it can
// safely use t.GetAutonomous() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Autonomous == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions) GetAutonomous() bool {
	if t == nil || t.Autonomous == nil {
		return false
	}
	return *t.Autonomous
}

// GetOnLink retrieves the value of the leaf OnLink from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OnLink is set, it can
// safely use t.GetOnLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OnLink == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions) GetOnLink() bool {
	if t == nil || t.OnLink == nil {
		return true
	}
	return *t.OnLink
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions) GetPreferredLifetime() NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions_PreferredLifetime_Union {
	if t == nil || t.PreferredLifetime == nil {
		return UnionUint32(3600)
	}
	return t.PreferredLifetime
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions) GetValidLifetime() NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions_ValidLifetime_Union {
	if t == nil || t.ValidLifetime == nil {
		return UnionUint32(86400)
	}
	return t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Autonomous == nil {
		var v bool = false
		t.Autonomous = &v
	}
	if t.OnLink == nil {
		var v bool = true
		t.OnLink = &v
	}
	if t.PreferredLifetime == nil {
		t.PreferredLifetime = UnionUint32(3600)
	}
	if t.ValidLifetime == nil {
		t.ValidLifetime = UnionUint32(86400)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit represents the /nokia-conf/configure/service/ies/subscriber-interface/ipv6/router-solicit YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit struct {
	ApplyGroups        []string                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	InactivityTimer    NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit_InactivityTimer_Union `path:"inactivity-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInactivityTimer retrieves the value of the leaf InactivityTimer from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InactivityTimer is set, it can
// safely use t.GetInactivityTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InactivityTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit) GetInactivityTimer() NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit_InactivityTimer_Union {
	if t == nil || t.InactivityTimer == nil {
		return UnionUint32(300)
	}
	return t.InactivityTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InactivityTimer == nil {
		t.InactivityTimer = UnionUint32(300)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6_RouterSolicit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment represents the /nokia-conf/configure/service/ies/subscriber-interface/local-address-assignment YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment struct {
	AdminState         E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv4               *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6               *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment) GetOrCreateIpv4() *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment) GetOrCreateIpv6() *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment) GetIpv4() *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment) GetIpv6() *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4 represents the /nokia-conf/configure/service/ies/subscriber-interface/local-address-assignment/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4 struct {
	ClientApplications *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications `path:"client-applications" module:"nokia-conf"`
	DefaultPool        []string                                                                                            `path:"default-pool" module:"nokia-conf"`
	Server             *string                                                                                             `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4) IsYANGGoStruct() {
}

// GetOrCreateClientApplications retrieves the value of the ClientApplications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4) GetOrCreateClientApplications() *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications {
	if t.ClientApplications != nil {
		return t.ClientApplications
	}
	t.ClientApplications = &NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications{}
	return t.ClientApplications
}

// GetClientApplications returns the value of the ClientApplications struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4. If the receiver or the field ClientApplications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4) GetClientApplications() *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications {
	if t != nil && t.ClientApplications != nil {
		return t.ClientApplications
	}
	return nil
}

// GetDefaultPool retrieves the value of the leaf DefaultPool from the NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultPool is set, it can
// safely use t.GetDefaultPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4) GetDefaultPool() []string {
	if t == nil || t.DefaultPool == nil {
		return nil
	}
	return t.DefaultPool
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4) GetServer() string {
	if t == nil || t.Server == nil {
		return ""
	}
	return *t.Server
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ClientApplications.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications represents the /nokia-conf/configure/service/ies/subscriber-interface/local-address-assignment/ipv4/client-applications YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications struct {
	Ppp *bool `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications) IsYANGGoStruct() {
}

// GetPpp retrieves the value of the leaf Ppp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ppp is set, it can
// safely use t.GetPpp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ppp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications) GetPpp() bool {
	if t == nil || t.Ppp == nil {
		return false
	}
	return *t.Ppp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ppp == nil {
		var v bool = false
		t.Ppp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6 represents the /nokia-conf/configure/service/ies/subscriber-interface/local-address-assignment/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6 struct {
	ClientApplications *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications `path:"client-applications" module:"nokia-conf"`
	Server             *string                                                                                             `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6) IsYANGGoStruct() {
}

// GetOrCreateClientApplications retrieves the value of the ClientApplications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6) GetOrCreateClientApplications() *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications {
	if t.ClientApplications != nil {
		return t.ClientApplications
	}
	t.ClientApplications = &NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications{}
	return t.ClientApplications
}

// GetClientApplications returns the value of the ClientApplications struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6. If the receiver or the field ClientApplications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6) GetClientApplications() *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications {
	if t != nil && t.ClientApplications != nil {
		return t.ClientApplications
	}
	return nil
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6) GetServer() string {
	if t == nil || t.Server == nil {
		return ""
	}
	return *t.Server
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ClientApplications.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications represents the /nokia-conf/configure/service/ies/subscriber-interface/local-address-assignment/ipv6/client-applications YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications struct {
	IpoeSlaac *bool `path:"ipoe-slaac" module:"nokia-conf"`
	IpoeWan   *bool `path:"ipoe-wan" module:"nokia-conf"`
	PppSlaac  *bool `path:"ppp-slaac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications) IsYANGGoStruct() {
}

// GetIpoeSlaac retrieves the value of the leaf IpoeSlaac from the NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpoeSlaac is set, it can
// safely use t.GetIpoeSlaac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpoeSlaac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications) GetIpoeSlaac() bool {
	if t == nil || t.IpoeSlaac == nil {
		return false
	}
	return *t.IpoeSlaac
}

// GetIpoeWan retrieves the value of the leaf IpoeWan from the NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpoeWan is set, it can
// safely use t.GetIpoeWan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpoeWan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications) GetIpoeWan() bool {
	if t == nil || t.IpoeWan == nil {
		return false
	}
	return *t.IpoeWan
}

// GetPppSlaac retrieves the value of the leaf PppSlaac from the NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppSlaac is set, it can
// safely use t.GetPppSlaac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppSlaac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications) GetPppSlaac() bool {
	if t == nil || t.PppSlaac == nil {
		return false
	}
	return *t.PppSlaac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IpoeSlaac == nil {
		var v bool = false
		t.IpoeSlaac = &v
	}
	if t.IpoeWan == nil {
		var v bool = false
		t.IpoeWan = &v
	}
	if t.PppSlaac == nil {
		var v bool = false
		t.PppSlaac = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe represents the /nokia-conf/configure/service/ies/subscriber-interface/pppoe YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	SessionLimit       *uint32  `path:"session-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe) GetSessionLimit() uint32 {
	if t == nil || t.SessionLimit == nil {
		return 1
	}
	return *t.SessionLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SessionLimit == nil {
		var v uint32 = 1
		t.SessionLimit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw represents the /nokia-conf/configure/service/ies/subscriber-interface/wlan-gw YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw struct {
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	PoolManager        *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager `path:"pool-manager" module:"nokia-conf"`
	Redundancy         *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy  `path:"redundancy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw) IsYANGGoStruct() {}

// GetOrCreatePoolManager retrieves the value of the PoolManager field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw) GetOrCreatePoolManager() *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager {
	if t.PoolManager != nil {
		return t.PoolManager
	}
	t.PoolManager = &NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager{}
	return t.PoolManager
}

// GetOrCreateRedundancy retrieves the value of the Redundancy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw) GetOrCreateRedundancy() *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy {
	if t.Redundancy != nil {
		return t.Redundancy
	}
	t.Redundancy = &NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy{}
	return t.Redundancy
}

// GetPoolManager returns the value of the PoolManager struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw. If the receiver or the field PoolManager is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw) GetPoolManager() *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager {
	if t != nil && t.PoolManager != nil {
		return t.PoolManager
	}
	return nil
}

// GetRedundancy returns the value of the Redundancy struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw. If the receiver or the field Redundancy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw) GetRedundancy() *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy {
	if t != nil && t.Redundancy != nil {
		return t.Redundancy
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PoolManager.PopulateDefaults()
	t.Redundancy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager represents the /nokia-conf/configure/service/ies/subscriber-interface/wlan-gw/pool-manager YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager struct {
	ApplyGroups        []string                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Dhcp6Client        *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client `path:"dhcp6-client" module:"nokia-conf"`
	Watermarks         *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Watermarks  `path:"watermarks" module:"nokia-conf"`
	WlanGwGroup        *uint32                                                                             `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager) IsYANGGoStruct() {}

// GetOrCreateDhcp6Client retrieves the value of the Dhcp6Client field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager) GetOrCreateDhcp6Client() *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client {
	if t.Dhcp6Client != nil {
		return t.Dhcp6Client
	}
	t.Dhcp6Client = &NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client{}
	return t.Dhcp6Client
}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager) GetOrCreateWatermarks() *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Watermarks{}
	return t.Watermarks
}

// GetDhcp6Client returns the value of the Dhcp6Client struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager. If the receiver or the field Dhcp6Client is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager) GetDhcp6Client() *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client {
	if t != nil && t.Dhcp6Client != nil {
		return t.Dhcp6Client
	}
	return nil
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager) GetWatermarks() *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dhcp6Client.PopulateDefaults()
	t.Watermarks.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client represents the /nokia-conf/configure/service/ies/subscriber-interface/wlan-gw/pool-manager/dhcp6-client YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client struct {
	Dhcpv4Nat  *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat     `path:"dhcpv4-nat" module:"nokia-conf"`
	IaNa       *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa          `path:"ia-na" module:"nokia-conf"`
	LeaseQuery *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery    `path:"lease-query" module:"nokia-conf" yangPresence:"true"`
	Servers    []string                                                                                          `path:"servers" module:"nokia-conf"`
	Slaac      *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac         `path:"slaac" module:"nokia-conf"`
	SourceIp   NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_SourceIp_Union `path:"source-ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) IsYANGGoStruct() {
}

// GetOrCreateDhcpv4Nat retrieves the value of the Dhcpv4Nat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) GetOrCreateDhcpv4Nat() *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat {
	if t.Dhcpv4Nat != nil {
		return t.Dhcpv4Nat
	}
	t.Dhcpv4Nat = &NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat{}
	return t.Dhcpv4Nat
}

// GetOrCreateIaNa retrieves the value of the IaNa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) GetOrCreateIaNa() *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa {
	if t.IaNa != nil {
		return t.IaNa
	}
	t.IaNa = &NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa{}
	return t.IaNa
}

// GetOrCreateLeaseQuery retrieves the value of the LeaseQuery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) GetOrCreateLeaseQuery() *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery {
	if t.LeaseQuery != nil {
		return t.LeaseQuery
	}
	t.LeaseQuery = &NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery{}
	return t.LeaseQuery
}

// GetOrCreateSlaac retrieves the value of the Slaac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) GetOrCreateSlaac() *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac {
	if t.Slaac != nil {
		return t.Slaac
	}
	t.Slaac = &NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac{}
	return t.Slaac
}

// GetDhcpv4Nat returns the value of the Dhcpv4Nat struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client. If the receiver or the field Dhcpv4Nat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) GetDhcpv4Nat() *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat {
	if t != nil && t.Dhcpv4Nat != nil {
		return t.Dhcpv4Nat
	}
	return nil
}

// GetIaNa returns the value of the IaNa struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client. If the receiver or the field IaNa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) GetIaNa() *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa {
	if t != nil && t.IaNa != nil {
		return t.IaNa
	}
	return nil
}

// GetLeaseQuery returns the value of the LeaseQuery struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client. If the receiver or the field LeaseQuery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) GetLeaseQuery() *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery {
	if t != nil && t.LeaseQuery != nil {
		return t.LeaseQuery
	}
	return nil
}

// GetSlaac returns the value of the Slaac struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client. If the receiver or the field Slaac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) GetSlaac() *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac {
	if t != nil && t.Slaac != nil {
		return t.Slaac
	}
	return nil
}

// GetServers retrieves the value of the leaf Servers from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Servers is set, it can
// safely use t.GetServers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Servers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) GetServers() []string {
	if t == nil || t.Servers == nil {
		return nil
	}
	return t.Servers
}

// GetSourceIp retrieves the value of the leaf SourceIp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceIp is set, it can
// safely use t.GetSourceIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) GetSourceIp() NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_SourceIp_Union {
	if t == nil || t.SourceIp == nil {
		return NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_SourceIp_Enum_use_interface_ip
	}
	return t.SourceIp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SourceIp == nil {
		t.SourceIp = NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_SourceIp_Enum_use_interface_ip
	}
	t.Dhcpv4Nat.PopulateDefaults()
	t.IaNa.PopulateDefaults()
	t.LeaseQuery.PopulateDefaults()
	t.Slaac.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat represents the /nokia-conf/configure/service/ies/subscriber-interface/wlan-gw/pool-manager/dhcp6-client/dhcpv4-nat YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	LinkAddress *string                     `path:"link-address" module:"nokia-conf"`
	PoolName    *string                     `path:"pool-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetLinkAddress retrieves the value of the leaf LinkAddress from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkAddress is set, it can
// safely use t.GetLinkAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat) GetLinkAddress() string {
	if t == nil || t.LinkAddress == nil {
		return "::"
	}
	return *t.LinkAddress
}

// GetPoolName retrieves the value of the leaf PoolName from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolName is set, it can
// safely use t.GetPoolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat) GetPoolName() string {
	if t == nil || t.PoolName == nil {
		return ""
	}
	return *t.PoolName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.LinkAddress == nil {
		var v string = "::"
		t.LinkAddress = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa represents the /nokia-conf/configure/service/ies/subscriber-interface/wlan-gw/pool-manager/dhcp6-client/ia-na YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	LinkAddress *string                     `path:"link-address" module:"nokia-conf"`
	PoolName    *string                     `path:"pool-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetLinkAddress retrieves the value of the leaf LinkAddress from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkAddress is set, it can
// safely use t.GetLinkAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa) GetLinkAddress() string {
	if t == nil || t.LinkAddress == nil {
		return "::"
	}
	return *t.LinkAddress
}

// GetPoolName retrieves the value of the leaf PoolName from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolName is set, it can
// safely use t.GetPoolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa) GetPoolName() string {
	if t == nil || t.PoolName == nil {
		return ""
	}
	return *t.PoolName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.LinkAddress == nil {
		var v string = "::"
		t.LinkAddress = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery represents the /nokia-conf/configure/service/ies/subscriber-interface/wlan-gw/pool-manager/dhcp6-client/lease-query YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery struct {
	MaxRetries *uint32 `path:"max-retries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery) IsYANGGoStruct() {
}

// GetMaxRetries retrieves the value of the leaf MaxRetries from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetries is set, it can
// safely use t.GetMaxRetries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery) GetMaxRetries() uint32 {
	if t == nil || t.MaxRetries == nil {
		return 2
	}
	return *t.MaxRetries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxRetries == nil {
		var v uint32 = 2
		t.MaxRetries = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac represents the /nokia-conf/configure/service/ies/subscriber-interface/wlan-gw/pool-manager/dhcp6-client/slaac YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	LinkAddress *string                     `path:"link-address" module:"nokia-conf"`
	PoolName    *string                     `path:"pool-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetLinkAddress retrieves the value of the leaf LinkAddress from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkAddress is set, it can
// safely use t.GetLinkAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac) GetLinkAddress() string {
	if t == nil || t.LinkAddress == nil {
		return "::"
	}
	return *t.LinkAddress
}

// GetPoolName retrieves the value of the leaf PoolName from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolName is set, it can
// safely use t.GetPoolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac) GetPoolName() string {
	if t == nil || t.PoolName == nil {
		return ""
	}
	return *t.PoolName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.LinkAddress == nil {
		var v string = "::"
		t.LinkAddress = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Watermarks represents the /nokia-conf/configure/service/ies/subscriber-interface/wlan-gw/pool-manager/watermarks YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Watermarks) IsYANGGoStruct() {
}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 95
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 90
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.High == nil {
		var v uint32 = 95
		t.High = &v
	}
	if t.Low == nil {
		var v uint32 = 90
		t.Low = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Watermarks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Watermarks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Watermarks.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_PoolManager_Watermarks) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy represents the /nokia-conf/configure/service/ies/subscriber-interface/wlan-gw/redundancy YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Export     *string                     `path:"export" module:"nokia-conf"`
	Monitor    *string                     `path:"monitor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetExport retrieves the value of the leaf Export from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Export is set, it can
// safely use t.GetExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Export == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy) GetExport() string {
	if t == nil || t.Export == nil {
		return ""
	}
	return *t.Export
}

// GetMonitor retrieves the value of the leaf Monitor from the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Monitor is set, it can
// safely use t.GetMonitor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Monitor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy) GetMonitor() string {
	if t == nil || t.Monitor == nil {
		return ""
	}
	return *t.Monitor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw_Redundancy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberMgmt represents the /nokia-conf/configure/service/ies/subscriber-mgmt YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberMgmt struct {
	ApplyGroups         []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	MultiChassisShuntId *uint32                                                      `path:"multi-chassis-shunt-id" module:"nokia-conf"`
	UpResiliency        *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency `path:"up-resiliency" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberMgmt) IsYANGGoStruct() {}

// GetOrCreateUpResiliency retrieves the value of the UpResiliency field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt) GetOrCreateUpResiliency() *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency {
	if t.UpResiliency != nil {
		return t.UpResiliency
	}
	t.UpResiliency = &NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency{}
	return t.UpResiliency
}

// GetUpResiliency returns the value of the UpResiliency struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberMgmt. If the receiver or the field UpResiliency is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt) GetUpResiliency() *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency {
	if t != nil && t.UpResiliency != nil {
		return t.UpResiliency
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMultiChassisShuntId retrieves the value of the leaf MultiChassisShuntId from the NokiaConf_Configure_Service_Ies_SubscriberMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiChassisShuntId is set, it can
// safely use t.GetMultiChassisShuntId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiChassisShuntId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt) GetMultiChassisShuntId() uint32 {
	if t == nil || t.MultiChassisShuntId == nil {
		return 0
	}
	return *t.MultiChassisShuntId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.UpResiliency.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberMgmt.
func (*NokiaConf_Configure_Service_Ies_SubscriberMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency represents the /nokia-conf/configure/service/ies/subscriber-mgmt/up-resiliency YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency struct {
	MonitorOperGroup map[string]*NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup `path:"monitor-oper-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency) IsYANGGoStruct() {}

// NewMonitorOperGroup creates a new entry in the MonitorOperGroup list of the
// NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency) NewMonitorOperGroup(OperGroup string) (*NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MonitorOperGroup == nil {
		t.MonitorOperGroup = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup)
	}

	key := OperGroup

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MonitorOperGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MonitorOperGroup", key)
	}

	t.MonitorOperGroup[key] = &NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup{
		OperGroup: &OperGroup,
	}

	return t.MonitorOperGroup[key], nil
}

// RenameMonitorOperGroup renames an entry in the list MonitorOperGroup within
// the NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency) RenameMonitorOperGroup(oldK, newK string) error {
	if _, ok := t.MonitorOperGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in MonitorOperGroup", newK)
	}

	e, ok := t.MonitorOperGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MonitorOperGroup", oldK)
	}
	e.OperGroup = &newK

	t.MonitorOperGroup[newK] = e
	delete(t.MonitorOperGroup, oldK)
	return nil
}

// GetOrCreateMonitorOperGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency) GetOrCreateMonitorOperGroup(OperGroup string) *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup {

	key := OperGroup

	if v, ok := t.MonitorOperGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMonitorOperGroup(OperGroup)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMonitorOperGroup got unexpected error: %v", err))
	}
	return v
}

// GetMonitorOperGroup retrieves the value with the specified key from
// the MonitorOperGroup map field of NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency) GetMonitorOperGroup(OperGroup string) *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup {

	if t == nil {
		return nil
	}

	key := OperGroup

	if lm, ok := t.MonitorOperGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteMonitorOperGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency) DeleteMonitorOperGroup(OperGroup string) {
	key := OperGroup

	delete(t.MonitorOperGroup, key)
}

// AppendMonitorOperGroup appends the supplied NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup struct to the
// list MonitorOperGroup of NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency) AppendMonitorOperGroup(v *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup) error {
	if v.OperGroup == nil {
		return fmt.Errorf("invalid nil key received for OperGroup")
	}

	key := *v.OperGroup

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MonitorOperGroup == nil {
		t.MonitorOperGroup = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup)
	}

	if _, ok := t.MonitorOperGroup[key]; ok {
		return fmt.Errorf("duplicate key for list MonitorOperGroup %v", key)
	}

	t.MonitorOperGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MonitorOperGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency.
func (*NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup represents the /nokia-conf/configure/service/ies/subscriber-mgmt/up-resiliency/monitor-oper-group YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	HealthDrop         *uint32  `path:"health-drop" module:"nokia-conf"`
	OperGroup          *string  `path:"oper-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHealthDrop retrieves the value of the leaf HealthDrop from the NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HealthDrop is set, it can
// safely use t.GetHealthDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HealthDrop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup) GetHealthDrop() uint32 {
	if t == nil || t.HealthDrop == nil {
		return 1
	}
	return *t.HealthDrop
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HealthDrop == nil {
		var v uint32 = 1
		t.HealthDrop = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.OperGroup == nil {
		return nil, fmt.Errorf("nil value for key OperGroup")
	}

	return map[string]interface{}{
		"oper-group": *t.OperGroup,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup.
func (*NokiaConf_Configure_Service_Ies_SubscriberMgmt_UpResiliency_MonitorOperGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_VideoInterface represents the /nokia-conf/configure/service/ies/video-interface YANG schema element.
type NokiaConf_Configure_Service_Ies_VideoInterface struct {
	AccountingPolicy   *uint32                                                                                                                `path:"accounting-policy" module:"nokia-conf"`
	Address            map[string]*NokiaConf_Configure_Service_Ies_VideoInterface_Address                                                     `path:"address" module:"nokia-conf"`
	Adi                *NokiaConf_Configure_Service_Ies_VideoInterface_Adi                                                                    `path:"adi" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                                                                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Channel            map[NokiaConf_Configure_Service_Ies_VideoInterface_Channel_Key]*NokiaConf_Configure_Service_Ies_VideoInterface_Channel `path:"channel" module:"nokia-conf"`
	CpuProtection      *uint32                                                                                                                `path:"cpu-protection" module:"nokia-conf"`
	Description        *string                                                                                                                `path:"description" module:"nokia-conf"`
	InterfaceName      *string                                                                                                                `path:"interface-name" module:"nokia-conf"`
	MulticastService   *uint32                                                                                                                `path:"multicast-service" module:"nokia-conf"`
	OutputFormat       E_NokiaConf_Configure_Service_Ies_VideoInterface_OutputFormat                                                          `path:"output-format" module:"nokia-conf"`
	RtClient           *NokiaConf_Configure_Service_Ies_VideoInterface_RtClient                                                               `path:"rt-client" module:"nokia-conf" yangPresence:"true"`
	VideoSap           *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap                                                               `path:"video-sap" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_VideoInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_VideoInterface) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Ies_VideoInterface_Channel_Key represents the key for list Channel of element /nokia-conf/configure/service/ies/video-interface.
type NokiaConf_Configure_Service_Ies_VideoInterface_Channel_Key struct {
	McastAddress string `path:"mcast-address"`
	Source       string `path:"source"`
}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Service_Ies_VideoInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) NewAddress(IpAddress string) (*NokiaConf_Configure_Service_Ies_VideoInterface_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Service_Ies_VideoInterface_Address)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Service_Ies_VideoInterface_Address{
		IpAddress: &IpAddress,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Service_Ies_VideoInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.IpAddress = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_VideoInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) GetOrCreateAddress(IpAddress string) *NokiaConf_Configure_Service_Ies_VideoInterface_Address {

	key := IpAddress

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Service_Ies_VideoInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) GetAddress(IpAddress string) *NokiaConf_Configure_Service_Ies_VideoInterface_Address {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_VideoInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) DeleteAddress(IpAddress string) {
	key := IpAddress

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Service_Ies_VideoInterface_Address struct to the
// list Address of NokiaConf_Configure_Service_Ies_VideoInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_VideoInterface_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) AppendAddress(v *NokiaConf_Configure_Service_Ies_VideoInterface_Address) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Service_Ies_VideoInterface_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// NewChannel creates a new entry in the Channel list of the
// NokiaConf_Configure_Service_Ies_VideoInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) NewChannel(McastAddress string, Source string) (*NokiaConf_Configure_Service_Ies_VideoInterface_Channel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[NokiaConf_Configure_Service_Ies_VideoInterface_Channel_Key]*NokiaConf_Configure_Service_Ies_VideoInterface_Channel)
	}

	key := NokiaConf_Configure_Service_Ies_VideoInterface_Channel_Key{
		McastAddress: McastAddress,
		Source:       Source,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Channel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Channel", key)
	}

	t.Channel[key] = &NokiaConf_Configure_Service_Ies_VideoInterface_Channel{
		McastAddress: &McastAddress,
		Source:       &Source,
	}

	return t.Channel[key], nil
}

// RenameChannel renames an entry in the list Channel within
// the NokiaConf_Configure_Service_Ies_VideoInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) RenameChannel(oldK, newK NokiaConf_Configure_Service_Ies_VideoInterface_Channel_Key) error {
	if _, ok := t.Channel[newK]; ok {
		return fmt.Errorf("key %v already exists in Channel", newK)
	}

	e, ok := t.Channel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Channel", oldK)
	}
	e.McastAddress = &newK.McastAddress
	e.Source = &newK.Source

	t.Channel[newK] = e
	delete(t.Channel, oldK)
	return nil
}

// GetOrCreateChannel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_VideoInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) GetOrCreateChannel(McastAddress string, Source string) *NokiaConf_Configure_Service_Ies_VideoInterface_Channel {

	key := NokiaConf_Configure_Service_Ies_VideoInterface_Channel_Key{
		McastAddress: McastAddress,
		Source:       Source,
	}

	if v, ok := t.Channel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChannel(McastAddress, Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChannel got unexpected error: %v", err))
	}
	return v
}

// GetChannel retrieves the value with the specified key from
// the Channel map field of NokiaConf_Configure_Service_Ies_VideoInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) GetChannel(McastAddress string, Source string) *NokiaConf_Configure_Service_Ies_VideoInterface_Channel {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Ies_VideoInterface_Channel_Key{
		McastAddress: McastAddress,
		Source:       Source,
	}

	if lm, ok := t.Channel[key]; ok {
		return lm
	}
	return nil
}

// DeleteChannel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_VideoInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) DeleteChannel(McastAddress string, Source string) {
	key := NokiaConf_Configure_Service_Ies_VideoInterface_Channel_Key{
		McastAddress: McastAddress,
		Source:       Source,
	}

	delete(t.Channel, key)
}

// AppendChannel appends the supplied NokiaConf_Configure_Service_Ies_VideoInterface_Channel struct to the
// list Channel of NokiaConf_Configure_Service_Ies_VideoInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_VideoInterface_Channel already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) AppendChannel(v *NokiaConf_Configure_Service_Ies_VideoInterface_Channel) error {
	if v.McastAddress == nil {
		return fmt.Errorf("invalid nil key for McastAddress")
	}

	if v.Source == nil {
		return fmt.Errorf("invalid nil key for Source")
	}

	key := NokiaConf_Configure_Service_Ies_VideoInterface_Channel_Key{
		McastAddress: *v.McastAddress,
		Source:       *v.Source,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[NokiaConf_Configure_Service_Ies_VideoInterface_Channel_Key]*NokiaConf_Configure_Service_Ies_VideoInterface_Channel)
	}

	if _, ok := t.Channel[key]; ok {
		return fmt.Errorf("duplicate key for list Channel %v", key)
	}

	t.Channel[key] = v
	return nil
}

// GetOrCreateAdi retrieves the value of the Adi field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) GetOrCreateAdi() *NokiaConf_Configure_Service_Ies_VideoInterface_Adi {
	if t.Adi != nil {
		return t.Adi
	}
	t.Adi = &NokiaConf_Configure_Service_Ies_VideoInterface_Adi{}
	return t.Adi
}

// GetOrCreateRtClient retrieves the value of the RtClient field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) GetOrCreateRtClient() *NokiaConf_Configure_Service_Ies_VideoInterface_RtClient {
	if t.RtClient != nil {
		return t.RtClient
	}
	t.RtClient = &NokiaConf_Configure_Service_Ies_VideoInterface_RtClient{}
	return t.RtClient
}

// GetOrCreateVideoSap retrieves the value of the VideoSap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) GetOrCreateVideoSap() *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap {
	if t.VideoSap != nil {
		return t.VideoSap
	}
	t.VideoSap = &NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap{}
	return t.VideoSap
}

// GetAdi returns the value of the Adi struct pointer
// from NokiaConf_Configure_Service_Ies_VideoInterface. If the receiver or the field Adi is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) GetAdi() *NokiaConf_Configure_Service_Ies_VideoInterface_Adi {
	if t != nil && t.Adi != nil {
		return t.Adi
	}
	return nil
}

// GetRtClient returns the value of the RtClient struct pointer
// from NokiaConf_Configure_Service_Ies_VideoInterface. If the receiver or the field RtClient is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) GetRtClient() *NokiaConf_Configure_Service_Ies_VideoInterface_RtClient {
	if t != nil && t.RtClient != nil {
		return t.RtClient
	}
	return nil
}

// GetVideoSap returns the value of the VideoSap struct pointer
// from NokiaConf_Configure_Service_Ies_VideoInterface. If the receiver or the field VideoSap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) GetVideoSap() *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap {
	if t != nil && t.VideoSap != nil {
		return t.VideoSap
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Service_Ies_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCpuProtection retrieves the value of the leaf CpuProtection from the NokiaConf_Configure_Service_Ies_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuProtection is set, it can
// safely use t.GetCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) GetCpuProtection() uint32 {
	if t == nil || t.CpuProtection == nil {
		return 0
	}
	return *t.CpuProtection
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Ies_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMulticastService retrieves the value of the leaf MulticastService from the NokiaConf_Configure_Service_Ies_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastService is set, it can
// safely use t.GetMulticastService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) GetMulticastService() uint32 {
	if t == nil || t.MulticastService == nil {
		return 0
	}
	return *t.MulticastService
}

// GetOutputFormat retrieves the value of the leaf OutputFormat from the NokiaConf_Configure_Service_Ies_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputFormat is set, it can
// safely use t.GetOutputFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) GetOutputFormat() E_NokiaConf_Configure_Service_Ies_VideoInterface_OutputFormat {
	if t == nil || t.OutputFormat == 0 {
		return NokiaConf_Configure_Service_Ies_VideoInterface_OutputFormat_rtp_udp
	}
	return t.OutputFormat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_VideoInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.OutputFormat == 0 {
		t.OutputFormat = NokiaConf_Configure_Service_Ies_VideoInterface_OutputFormat_rtp_udp
	}
	t.Adi.PopulateDefaults()
	t.RtClient.PopulateDefaults()
	t.VideoSap.PopulateDefaults()
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
	for _, e := range t.Channel {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_VideoInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_VideoInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_VideoInterface.
func (*NokiaConf_Configure_Service_Ies_VideoInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_VideoInterface_Address represents the /nokia-conf/configure/service/ies/video-interface/address YANG schema element.
type NokiaConf_Configure_Service_Ies_VideoInterface_Address struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_VideoInterface_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_Address) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_Ies_VideoInterface_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Address) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_VideoInterface_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_VideoInterface_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_VideoInterface_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_VideoInterface_Address.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_VideoInterface_Adi represents the /nokia-conf/configure/service/ies/video-interface/adi YANG schema element.
type NokiaConf_Configure_Service_Ies_VideoInterface_Adi struct {
	Scte30 *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30 `path:"scte30" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_VideoInterface_Adi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_Adi) IsYANGGoStruct() {}

// GetOrCreateScte30 retrieves the value of the Scte30 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi) GetOrCreateScte30() *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30 {
	if t.Scte30 != nil {
		return t.Scte30
	}
	t.Scte30 = &NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30{}
	return t.Scte30
}

// GetScte30 returns the value of the Scte30 struct pointer
// from NokiaConf_Configure_Service_Ies_VideoInterface_Adi. If the receiver or the field Scte30 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi) GetScte30() *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30 {
	if t != nil && t.Scte30 != nil {
		return t.Scte30
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_VideoInterface_Adi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Scte30.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_VideoInterface_Adi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_VideoInterface_Adi.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_Adi) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30 represents the /nokia-conf/configure/service/ies/video-interface/adi/scte30 YANG schema element.
type NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30 struct {
	AdServer     map[string]*NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer `path:"ad-server" module:"nokia-conf"`
	LocalAddress *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress        `path:"local-address" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30) IsYANGGoStruct() {}

// NewAdServer creates a new entry in the AdServer list of the
// NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30) NewAdServer(Address string) (*NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdServer == nil {
		t.AdServer = make(map[string]*NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdServer", key)
	}

	t.AdServer[key] = &NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer{
		Address: &Address,
	}

	return t.AdServer[key], nil
}

// RenameAdServer renames an entry in the list AdServer within
// the NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30) RenameAdServer(oldK, newK string) error {
	if _, ok := t.AdServer[newK]; ok {
		return fmt.Errorf("key %v already exists in AdServer", newK)
	}

	e, ok := t.AdServer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdServer", oldK)
	}
	e.Address = &newK

	t.AdServer[newK] = e
	delete(t.AdServer, oldK)
	return nil
}

// GetOrCreateAdServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30) GetOrCreateAdServer(Address string) *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer {

	key := Address

	if v, ok := t.AdServer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdServer got unexpected error: %v", err))
	}
	return v
}

// GetAdServer retrieves the value with the specified key from
// the AdServer map field of NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30) GetAdServer(Address string) *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.AdServer[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30) DeleteAdServer(Address string) {
	key := Address

	delete(t.AdServer, key)
}

// AppendAdServer appends the supplied NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer struct to the
// list AdServer of NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30) AppendAdServer(v *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdServer == nil {
		t.AdServer = make(map[string]*NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer)
	}

	if _, ok := t.AdServer[key]; ok {
		return fmt.Errorf("duplicate key for list AdServer %v", key)
	}

	t.AdServer[key] = v
	return nil
}

// GetOrCreateLocalAddress retrieves the value of the LocalAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30) GetOrCreateLocalAddress() *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress {
	if t.LocalAddress != nil {
		return t.LocalAddress
	}
	t.LocalAddress = &NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress{}
	return t.LocalAddress
}

// GetLocalAddress returns the value of the LocalAddress struct pointer
// from NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30. If the receiver or the field LocalAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30) GetLocalAddress() *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress {
	if t != nil && t.LocalAddress != nil {
		return t.LocalAddress
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LocalAddress.PopulateDefaults()
	for _, e := range t.AdServer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer represents the /nokia-conf/configure/service/ies/video-interface/adi/scte30/ad-server YANG schema element.
type NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_AdServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress represents the /nokia-conf/configure/service/ies/video-interface/adi/scte30/local-address YANG schema element.
type NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Control            *string  `path:"control" module:"nokia-conf"`
	Data               *string  `path:"data" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetControl retrieves the value of the leaf Control from the NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Control is set, it can
// safely use t.GetControl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Control == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress) GetControl() string {
	if t == nil || t.Control == nil {
		return ""
	}
	return *t.Control
}

// GetData retrieves the value of the leaf Data from the NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Data is set, it can
// safely use t.GetData() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Data == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress) GetData() string {
	if t == nil || t.Data == nil {
		return ""
	}
	return *t.Data
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_Adi_Scte30_LocalAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_VideoInterface_Channel represents the /nokia-conf/configure/service/ies/video-interface/channel YANG schema element.
type NokiaConf_Configure_Service_Ies_VideoInterface_Channel struct {
	ApplyGroups        []string                                                                                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	ChannelName        *string                                                                                                                                        `path:"channel-name" module:"nokia-conf"`
	Description        *string                                                                                                                                        `path:"description" module:"nokia-conf"`
	McastAddress       *string                                                                                                                                        `path:"mcast-address" module:"nokia-conf"`
	Scte35Action       E_NokiaConf_Configure_Service_Ies_VideoInterface_Channel_Scte35Action                                                                          `path:"scte35-action" module:"nokia-conf"`
	Source             *string                                                                                                                                        `path:"source" module:"nokia-conf"`
	ZoneChannel        map[NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel_Key]*NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel `path:"zone-channel" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_VideoInterface_Channel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_Channel) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel_Key represents the key for list ZoneChannel of element /nokia-conf/configure/service/ies/video-interface/channel.
type NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel_Key struct {
	ZoneMcastAddress string `path:"zone-mcast-address"`
	ZoneSource       string `path:"zone-source"`
}

// NewZoneChannel creates a new entry in the ZoneChannel list of the
// NokiaConf_Configure_Service_Ies_VideoInterface_Channel struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel) NewZoneChannel(ZoneMcastAddress string, ZoneSource string) (*NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ZoneChannel == nil {
		t.ZoneChannel = make(map[NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel_Key]*NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel)
	}

	key := NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel_Key{
		ZoneMcastAddress: ZoneMcastAddress,
		ZoneSource:       ZoneSource,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ZoneChannel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ZoneChannel", key)
	}

	t.ZoneChannel[key] = &NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel{
		ZoneMcastAddress: &ZoneMcastAddress,
		ZoneSource:       &ZoneSource,
	}

	return t.ZoneChannel[key], nil
}

// RenameZoneChannel renames an entry in the list ZoneChannel within
// the NokiaConf_Configure_Service_Ies_VideoInterface_Channel struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel) RenameZoneChannel(oldK, newK NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel_Key) error {
	if _, ok := t.ZoneChannel[newK]; ok {
		return fmt.Errorf("key %v already exists in ZoneChannel", newK)
	}

	e, ok := t.ZoneChannel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ZoneChannel", oldK)
	}
	e.ZoneMcastAddress = &newK.ZoneMcastAddress
	e.ZoneSource = &newK.ZoneSource

	t.ZoneChannel[newK] = e
	delete(t.ZoneChannel, oldK)
	return nil
}

// GetOrCreateZoneChannel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_VideoInterface_Channel. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel) GetOrCreateZoneChannel(ZoneMcastAddress string, ZoneSource string) *NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel {

	key := NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel_Key{
		ZoneMcastAddress: ZoneMcastAddress,
		ZoneSource:       ZoneSource,
	}

	if v, ok := t.ZoneChannel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewZoneChannel(ZoneMcastAddress, ZoneSource)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateZoneChannel got unexpected error: %v", err))
	}
	return v
}

// GetZoneChannel retrieves the value with the specified key from
// the ZoneChannel map field of NokiaConf_Configure_Service_Ies_VideoInterface_Channel. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel) GetZoneChannel(ZoneMcastAddress string, ZoneSource string) *NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel_Key{
		ZoneMcastAddress: ZoneMcastAddress,
		ZoneSource:       ZoneSource,
	}

	if lm, ok := t.ZoneChannel[key]; ok {
		return lm
	}
	return nil
}

// DeleteZoneChannel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_VideoInterface_Channel. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel) DeleteZoneChannel(ZoneMcastAddress string, ZoneSource string) {
	key := NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel_Key{
		ZoneMcastAddress: ZoneMcastAddress,
		ZoneSource:       ZoneSource,
	}

	delete(t.ZoneChannel, key)
}

// AppendZoneChannel appends the supplied NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel struct to the
// list ZoneChannel of NokiaConf_Configure_Service_Ies_VideoInterface_Channel. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel) AppendZoneChannel(v *NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel) error {
	if v.ZoneMcastAddress == nil {
		return fmt.Errorf("invalid nil key for ZoneMcastAddress")
	}

	if v.ZoneSource == nil {
		return fmt.Errorf("invalid nil key for ZoneSource")
	}

	key := NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel_Key{
		ZoneMcastAddress: *v.ZoneMcastAddress,
		ZoneSource:       *v.ZoneSource,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ZoneChannel == nil {
		t.ZoneChannel = make(map[NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel_Key]*NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel)
	}

	if _, ok := t.ZoneChannel[key]; ok {
		return fmt.Errorf("duplicate key for list ZoneChannel %v", key)
	}

	t.ZoneChannel[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_VideoInterface_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_VideoInterface_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetChannelName retrieves the value of the leaf ChannelName from the NokiaConf_Configure_Service_Ies_VideoInterface_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChannelName is set, it can
// safely use t.GetChannelName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChannelName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel) GetChannelName() string {
	if t == nil || t.ChannelName == nil {
		return ""
	}
	return *t.ChannelName
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_VideoInterface_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMcastAddress retrieves the value of the leaf McastAddress from the NokiaConf_Configure_Service_Ies_VideoInterface_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastAddress is set, it can
// safely use t.GetMcastAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel) GetMcastAddress() string {
	if t == nil || t.McastAddress == nil {
		return ""
	}
	return *t.McastAddress
}

// GetScte35Action retrieves the value of the leaf Scte35Action from the NokiaConf_Configure_Service_Ies_VideoInterface_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scte35Action is set, it can
// safely use t.GetScte35Action() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scte35Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel) GetScte35Action() E_NokiaConf_Configure_Service_Ies_VideoInterface_Channel_Scte35Action {
	if t == nil || t.Scte35Action == 0 {
		return NokiaConf_Configure_Service_Ies_VideoInterface_Channel_Scte35Action_forward
	}
	return t.Scte35Action
}

// GetSource retrieves the value of the leaf Source from the NokiaConf_Configure_Service_Ies_VideoInterface_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_VideoInterface_Channel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Scte35Action == 0 {
		t.Scte35Action = NokiaConf_Configure_Service_Ies_VideoInterface_Channel_Scte35Action_forward
	}
	for _, e := range t.ZoneChannel {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_VideoInterface_Channel struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.McastAddress == nil {
		return nil, fmt.Errorf("nil value for key McastAddress")
	}

	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"mcast-address": *t.McastAddress,
		"source":        *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_VideoInterface_Channel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_VideoInterface_Channel.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_Channel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel represents the /nokia-conf/configure/service/ies/video-interface/channel/zone-channel YANG schema element.
type NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel struct {
	AdiChannelName     *string  `path:"adi-channel-name" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	ZoneMcastAddress   *string  `path:"zone-mcast-address" module:"nokia-conf"`
	ZoneSource         *string  `path:"zone-source" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel) IsYANGGoStruct() {}

// GetAdiChannelName retrieves the value of the leaf AdiChannelName from the NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdiChannelName is set, it can
// safely use t.GetAdiChannelName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdiChannelName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel) GetAdiChannelName() string {
	if t == nil || t.AdiChannelName == nil {
		return ""
	}
	return *t.AdiChannelName
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetZoneMcastAddress retrieves the value of the leaf ZoneMcastAddress from the NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ZoneMcastAddress is set, it can
// safely use t.GetZoneMcastAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ZoneMcastAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel) GetZoneMcastAddress() string {
	if t == nil || t.ZoneMcastAddress == nil {
		return ""
	}
	return *t.ZoneMcastAddress
}

// GetZoneSource retrieves the value of the leaf ZoneSource from the NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ZoneSource is set, it can
// safely use t.GetZoneSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ZoneSource == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel) GetZoneSource() string {
	if t == nil || t.ZoneSource == nil {
		return ""
	}
	return *t.ZoneSource
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ZoneMcastAddress == nil {
		return nil, fmt.Errorf("nil value for key ZoneMcastAddress")
	}

	if t.ZoneSource == nil {
		return nil, fmt.Errorf("nil value for key ZoneSource")
	}

	return map[string]interface{}{
		"zone-mcast-address": *t.ZoneMcastAddress,
		"zone-source":        *t.ZoneSource,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_Channel_ZoneChannel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_VideoInterface_RtClient represents the /nokia-conf/configure/service/ies/video-interface/rt-client YANG schema element.
type NokiaConf_Configure_Service_Ies_VideoInterface_RtClient struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	SrcAddress         *string  `path:"src-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_VideoInterface_RtClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_RtClient) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_VideoInterface_RtClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_RtClient) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_VideoInterface_RtClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_RtClient) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSrcAddress retrieves the value of the leaf SrcAddress from the NokiaConf_Configure_Service_Ies_VideoInterface_RtClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcAddress is set, it can
// safely use t.GetSrcAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_RtClient) GetSrcAddress() string {
	if t == nil || t.SrcAddress == nil {
		return ""
	}
	return *t.SrcAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_VideoInterface_RtClient
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_RtClient) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_RtClient) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_VideoInterface_RtClient"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_RtClient) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_RtClient) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_VideoInterface_RtClient.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_RtClient) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap represents the /nokia-conf/configure/service/ies/video-interface/video-sap YANG schema element.
type NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap struct {
	ApplyGroups        []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress  `path:"egress" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress `path:"ingress" module:"nokia-conf"`
	VideoGroupId       *uint32                                                          `path:"video-group-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap) GetOrCreateEgress() *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap) GetOrCreateIngress() *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap) GetEgress() *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap) GetIngress() *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetVideoGroupId retrieves the value of the leaf VideoGroupId from the NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VideoGroupId is set, it can
// safely use t.GetVideoGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VideoGroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap) GetVideoGroupId() uint32 {
	if t == nil || t.VideoGroupId == nil {
		return 0
	}
	return *t.VideoGroupId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress represents the /nokia-conf/configure/service/ies/video-interface/video-sap/egress YANG schema element.
type NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress struct {
	ApplyGroups        []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Filter             *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Filter `path:"filter" module:"nokia-conf"`
	Qos                *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Qos    `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress) GetOrCreateQos() *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress) GetFilter() *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress) GetQos() *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Filter represents the /nokia-conf/configure/service/ies/video-interface/video-sap/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Filter.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Qos represents the /nokia-conf/configure/service/ies/video-interface/video-sap/egress/qos YANG schema element.
type NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Qos struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Qos) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Qos) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Qos.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress represents the /nokia-conf/configure/service/ies/video-interface/video-sap/ingress YANG schema element.
type NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress struct {
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Filter             *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Filter `path:"filter" module:"nokia-conf"`
	Qos                *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Qos    `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress) GetFilter() *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress) GetQos() *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Filter represents the /nokia-conf/configure/service/ies/video-interface/video-sap/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Filter.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Qos represents the /nokia-conf/configure/service/ies/video-interface/video-sap/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Qos struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Qos) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Qos) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Qos.
func (*NokiaConf_Configure_Service_Ies_VideoInterface_VideoSap_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipfix represents the /nokia-conf/configure/service/ipfix YANG schema element.
type NokiaConf_Configure_Service_Ipfix struct {
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	ExportPolicy       map[string]*NokiaConf_Configure_Service_Ipfix_ExportPolicy `path:"export-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipfix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipfix) IsYANGGoStruct() {}

// NewExportPolicy creates a new entry in the ExportPolicy list of the
// NokiaConf_Configure_Service_Ipfix struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ipfix) NewExportPolicy(Name string) (*NokiaConf_Configure_Service_Ipfix_ExportPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExportPolicy == nil {
		t.ExportPolicy = make(map[string]*NokiaConf_Configure_Service_Ipfix_ExportPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExportPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExportPolicy", key)
	}

	t.ExportPolicy[key] = &NokiaConf_Configure_Service_Ipfix_ExportPolicy{
		Name: &Name,
	}

	return t.ExportPolicy[key], nil
}

// RenameExportPolicy renames an entry in the list ExportPolicy within
// the NokiaConf_Configure_Service_Ipfix struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ipfix) RenameExportPolicy(oldK, newK string) error {
	if _, ok := t.ExportPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in ExportPolicy", newK)
	}

	e, ok := t.ExportPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExportPolicy", oldK)
	}
	e.Name = &newK

	t.ExportPolicy[newK] = e
	delete(t.ExportPolicy, oldK)
	return nil
}

// GetOrCreateExportPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipfix. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ipfix) GetOrCreateExportPolicy(Name string) *NokiaConf_Configure_Service_Ipfix_ExportPolicy {

	key := Name

	if v, ok := t.ExportPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExportPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExportPolicy got unexpected error: %v", err))
	}
	return v
}

// GetExportPolicy retrieves the value with the specified key from
// the ExportPolicy map field of NokiaConf_Configure_Service_Ipfix. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ipfix) GetExportPolicy(Name string) *NokiaConf_Configure_Service_Ipfix_ExportPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ExportPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteExportPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipfix. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ipfix) DeleteExportPolicy(Name string) {
	key := Name

	delete(t.ExportPolicy, key)
}

// AppendExportPolicy appends the supplied NokiaConf_Configure_Service_Ipfix_ExportPolicy struct to the
// list ExportPolicy of NokiaConf_Configure_Service_Ipfix. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ipfix_ExportPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ipfix) AppendExportPolicy(v *NokiaConf_Configure_Service_Ipfix_ExportPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExportPolicy == nil {
		t.ExportPolicy = make(map[string]*NokiaConf_Configure_Service_Ipfix_ExportPolicy)
	}

	if _, ok := t.ExportPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list ExportPolicy %v", key)
	}

	t.ExportPolicy[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ipfix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipfix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ipfix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipfix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipfix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipfix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ExportPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipfix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipfix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipfix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipfix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipfix.
func (*NokiaConf_Configure_Service_Ipfix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipfix_ExportPolicy represents the /nokia-conf/configure/service/ipfix/export-policy YANG schema element.
type NokiaConf_Configure_Service_Ipfix_ExportPolicy struct {
	ApplyGroups        []string                                                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Collector          map[NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector_Key]*NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector `path:"collector" module:"nokia-conf"`
	Description        *string                                                                                                                    `path:"description" module:"nokia-conf"`
	Name               *string                                                                                                                    `path:"name" module:"nokia-conf"`
	TemplateFormat     E_NokiaConf_Configure_Service_Ipfix_ExportPolicy_TemplateFormat                                                            `path:"template-format" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipfix_ExportPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipfix_ExportPolicy) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector_Key represents the key for list Collector of element /nokia-conf/configure/service/ipfix/export-policy.
type NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector_Key struct {
	RouterInstance string `path:"router-instance"`
	IpAddress      string `path:"ip-address"`
}

// NewCollector creates a new entry in the Collector list of the
// NokiaConf_Configure_Service_Ipfix_ExportPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy) NewCollector(RouterInstance string, IpAddress string) (*NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector_Key]*NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector)
	}

	key := NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector_Key{
		RouterInstance: RouterInstance,
		IpAddress:      IpAddress,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Collector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Collector", key)
	}

	t.Collector[key] = &NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector{
		RouterInstance: &RouterInstance,
		IpAddress:      &IpAddress,
	}

	return t.Collector[key], nil
}

// RenameCollector renames an entry in the list Collector within
// the NokiaConf_Configure_Service_Ipfix_ExportPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy) RenameCollector(oldK, newK NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector_Key) error {
	if _, ok := t.Collector[newK]; ok {
		return fmt.Errorf("key %v already exists in Collector", newK)
	}

	e, ok := t.Collector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Collector", oldK)
	}
	e.RouterInstance = &newK.RouterInstance
	e.IpAddress = &newK.IpAddress

	t.Collector[newK] = e
	delete(t.Collector, oldK)
	return nil
}

// GetOrCreateCollector retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipfix_ExportPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy) GetOrCreateCollector(RouterInstance string, IpAddress string) *NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector {

	key := NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector_Key{
		RouterInstance: RouterInstance,
		IpAddress:      IpAddress,
	}

	if v, ok := t.Collector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCollector(RouterInstance, IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCollector got unexpected error: %v", err))
	}
	return v
}

// GetCollector retrieves the value with the specified key from
// the Collector map field of NokiaConf_Configure_Service_Ipfix_ExportPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy) GetCollector(RouterInstance string, IpAddress string) *NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector_Key{
		RouterInstance: RouterInstance,
		IpAddress:      IpAddress,
	}

	if lm, ok := t.Collector[key]; ok {
		return lm
	}
	return nil
}

// DeleteCollector deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipfix_ExportPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy) DeleteCollector(RouterInstance string, IpAddress string) {
	key := NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector_Key{
		RouterInstance: RouterInstance,
		IpAddress:      IpAddress,
	}

	delete(t.Collector, key)
}

// AppendCollector appends the supplied NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector struct to the
// list Collector of NokiaConf_Configure_Service_Ipfix_ExportPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy) AppendCollector(v *NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector) error {
	if v.RouterInstance == nil {
		return fmt.Errorf("invalid nil key for RouterInstance")
	}

	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key for IpAddress")
	}

	key := NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector_Key{
		RouterInstance: *v.RouterInstance,
		IpAddress:      *v.IpAddress,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector_Key]*NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector)
	}

	if _, ok := t.Collector[key]; ok {
		return fmt.Errorf("duplicate key for list Collector %v", key)
	}

	t.Collector[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ipfix_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ipfix_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ipfix_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Ipfix_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTemplateFormat retrieves the value of the leaf TemplateFormat from the NokiaConf_Configure_Service_Ipfix_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateFormat is set, it can
// safely use t.GetTemplateFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy) GetTemplateFormat() E_NokiaConf_Configure_Service_Ipfix_ExportPolicy_TemplateFormat {
	if t == nil || t.TemplateFormat == 0 {
		return NokiaConf_Configure_Service_Ipfix_ExportPolicy_TemplateFormat_format1
	}
	return t.TemplateFormat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipfix_ExportPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.TemplateFormat == 0 {
		t.TemplateFormat = NokiaConf_Configure_Service_Ipfix_ExportPolicy_TemplateFormat_format1
	}
	for _, e := range t.Collector {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ipfix_ExportPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipfix_ExportPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipfix_ExportPolicy.
func (*NokiaConf_Configure_Service_Ipfix_ExportPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector represents the /nokia-conf/configure/service/ipfix/export-policy/collector YANG schema element.
type NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	IpAddress          *string                     `path:"ip-address" module:"nokia-conf"`
	Mtu                *uint32                     `path:"mtu" module:"nokia-conf"`
	RefreshTimeout     *uint32                     `path:"refresh-timeout" module:"nokia-conf"`
	RouterInstance     *string                     `path:"router-instance" module:"nokia-conf"`
	SourceIpAddress    *string                     `path:"source-ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 1500
	}
	return *t.Mtu
}

// GetRefreshTimeout retrieves the value of the leaf RefreshTimeout from the NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RefreshTimeout is set, it can
// safely use t.GetRefreshTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RefreshTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector) GetRefreshTimeout() uint32 {
	if t == nil || t.RefreshTimeout == nil {
		return 600
	}
	return *t.RefreshTimeout
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetSourceIpAddress retrieves the value of the leaf SourceIpAddress from the NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceIpAddress is set, it can
// safely use t.GetSourceIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector) GetSourceIpAddress() string {
	if t == nil || t.SourceIpAddress == nil {
		return ""
	}
	return *t.SourceIpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Mtu == nil {
		var v uint32 = 1500
		t.Mtu = &v
	}
	if t.RefreshTimeout == nil {
		var v uint32 = 600
		t.RefreshTimeout = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	if t.RouterInstance == nil {
		return nil, fmt.Errorf("nil value for key RouterInstance")
	}

	return map[string]interface{}{
		"ip-address":      *t.IpAddress,
		"router-instance": *t.RouterInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector.
func (*NokiaConf_Configure_Service_Ipfix_ExportPolicy_Collector) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe represents the /nokia-conf/configure/service/ipipe YANG schema element.
type NokiaConf_Configure_Service_Ipipe struct {
	AdminState         E_NokiaTypesSros_AdminState                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	CeAddressDiscovery *NokiaConf_Configure_Service_Ipipe_CeAddressDiscovery  `path:"ce-address-discovery" module:"nokia-conf" yangPresence:"true"`
	Customer           *string                                                `path:"customer" module:"nokia-conf"`
	Description        *string                                                `path:"description" module:"nokia-conf"`
	Endpoint           map[string]*NokiaConf_Configure_Service_Ipipe_Endpoint `path:"endpoint" module:"nokia-conf"`
	Sap                map[string]*NokiaConf_Configure_Service_Ipipe_Sap      `path:"sap" module:"nokia-conf"`
	ServiceId          *uint32                                                `path:"service-id" module:"nokia-conf"`
	ServiceMtu         *int32                                                 `path:"service-mtu" module:"nokia-conf"`
	ServiceName        *string                                                `path:"service-name" module:"nokia-conf"`
	SpokeSdp           map[string]*NokiaConf_Configure_Service_Ipipe_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
	VcSwitching        *bool                                                  `path:"vc-switching" module:"nokia-conf"`
	VpnId              *uint32                                                `path:"vpn-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe) IsYANGGoStruct() {}

// NewEndpoint creates a new entry in the Endpoint list of the
// NokiaConf_Configure_Service_Ipipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ipipe) NewEndpoint(Name string) (*NokiaConf_Configure_Service_Ipipe_Endpoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*NokiaConf_Configure_Service_Ipipe_Endpoint)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Endpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Endpoint", key)
	}

	t.Endpoint[key] = &NokiaConf_Configure_Service_Ipipe_Endpoint{
		Name: &Name,
	}

	return t.Endpoint[key], nil
}

// RenameEndpoint renames an entry in the list Endpoint within
// the NokiaConf_Configure_Service_Ipipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ipipe) RenameEndpoint(oldK, newK string) error {
	if _, ok := t.Endpoint[newK]; ok {
		return fmt.Errorf("key %v already exists in Endpoint", newK)
	}

	e, ok := t.Endpoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Endpoint", oldK)
	}
	e.Name = &newK

	t.Endpoint[newK] = e
	delete(t.Endpoint, oldK)
	return nil
}

// GetOrCreateEndpoint retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ipipe) GetOrCreateEndpoint(Name string) *NokiaConf_Configure_Service_Ipipe_Endpoint {

	key := Name

	if v, ok := t.Endpoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEndpoint(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEndpoint got unexpected error: %v", err))
	}
	return v
}

// GetEndpoint retrieves the value with the specified key from
// the Endpoint map field of NokiaConf_Configure_Service_Ipipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe) GetEndpoint(Name string) *NokiaConf_Configure_Service_Ipipe_Endpoint {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Endpoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteEndpoint deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ipipe) DeleteEndpoint(Name string) {
	key := Name

	delete(t.Endpoint, key)
}

// AppendEndpoint appends the supplied NokiaConf_Configure_Service_Ipipe_Endpoint struct to the
// list Endpoint of NokiaConf_Configure_Service_Ipipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ipipe_Endpoint already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ipipe) AppendEndpoint(v *NokiaConf_Configure_Service_Ipipe_Endpoint) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*NokiaConf_Configure_Service_Ipipe_Endpoint)
	}

	if _, ok := t.Endpoint[key]; ok {
		return fmt.Errorf("duplicate key for list Endpoint %v", key)
	}

	t.Endpoint[key] = v
	return nil
}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Service_Ipipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ipipe) NewSap(SapId string) (*NokiaConf_Configure_Service_Ipipe_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Ipipe_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Service_Ipipe_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Service_Ipipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ipipe) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ipipe) GetOrCreateSap(SapId string) *NokiaConf_Configure_Service_Ipipe_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Service_Ipipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe) GetSap(SapId string) *NokiaConf_Configure_Service_Ipipe_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ipipe) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Service_Ipipe_Sap struct to the
// list Sap of NokiaConf_Configure_Service_Ipipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ipipe_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ipipe) AppendSap(v *NokiaConf_Configure_Service_Ipipe_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Ipipe_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Service_Ipipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ipipe) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Service_Ipipe_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Ipipe_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Service_Ipipe_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Service_Ipipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ipipe) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ipipe) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Ipipe_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Service_Ipipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Ipipe_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ipipe) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Service_Ipipe_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Service_Ipipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ipipe_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ipipe) AppendSpokeSdp(v *NokiaConf_Configure_Service_Ipipe_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Ipipe_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// GetOrCreateCeAddressDiscovery retrieves the value of the CeAddressDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe) GetOrCreateCeAddressDiscovery() *NokiaConf_Configure_Service_Ipipe_CeAddressDiscovery {
	if t.CeAddressDiscovery != nil {
		return t.CeAddressDiscovery
	}
	t.CeAddressDiscovery = &NokiaConf_Configure_Service_Ipipe_CeAddressDiscovery{}
	return t.CeAddressDiscovery
}

// GetCeAddressDiscovery returns the value of the CeAddressDiscovery struct pointer
// from NokiaConf_Configure_Service_Ipipe. If the receiver or the field CeAddressDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe) GetCeAddressDiscovery() *NokiaConf_Configure_Service_Ipipe_CeAddressDiscovery {
	if t != nil && t.CeAddressDiscovery != nil {
		return t.CeAddressDiscovery
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ipipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ipipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ipipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCustomer retrieves the value of the leaf Customer from the NokiaConf_Configure_Service_Ipipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Customer is set, it can
// safely use t.GetCustomer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Customer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe) GetCustomer() string {
	if t == nil || t.Customer == nil {
		return ""
	}
	return *t.Customer
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ipipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Service_Ipipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe) GetServiceId() uint32 {
	if t == nil || t.ServiceId == nil {
		return 0
	}
	return *t.ServiceId
}

// GetServiceMtu retrieves the value of the leaf ServiceMtu from the NokiaConf_Configure_Service_Ipipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceMtu is set, it can
// safely use t.GetServiceMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe) GetServiceMtu() int32 {
	if t == nil || t.ServiceMtu == nil {
		return 0
	}
	return *t.ServiceMtu
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Service_Ipipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetVcSwitching retrieves the value of the leaf VcSwitching from the NokiaConf_Configure_Service_Ipipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcSwitching is set, it can
// safely use t.GetVcSwitching() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcSwitching == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe) GetVcSwitching() bool {
	if t == nil || t.VcSwitching == nil {
		return false
	}
	return *t.VcSwitching
}

// GetVpnId retrieves the value of the leaf VpnId from the NokiaConf_Configure_Service_Ipipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnId is set, it can
// safely use t.GetVpnId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe) GetVpnId() uint32 {
	if t == nil || t.VpnId == nil {
		return 0
	}
	return *t.VpnId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.VcSwitching == nil {
		var v bool = false
		t.VcSwitching = &v
	}
	t.CeAddressDiscovery.PopulateDefaults()
	for _, e := range t.Endpoint {
		e.PopulateDefaults()
	}
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ipipe struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ipipe) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"service-name": *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe.
func (*NokiaConf_Configure_Service_Ipipe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_CeAddressDiscovery represents the /nokia-conf/configure/service/ipipe/ce-address-discovery YANG schema element.
type NokiaConf_Configure_Service_Ipipe_CeAddressDiscovery struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_CeAddressDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_CeAddressDiscovery) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_CeAddressDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_CeAddressDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_CeAddressDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_CeAddressDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_CeAddressDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_CeAddressDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_CeAddressDiscovery.
func (*NokiaConf_Configure_Service_Ipipe_CeAddressDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Endpoint represents the /nokia-conf/configure/service/ipipe/endpoint YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Endpoint struct {
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                       `path:"description" module:"nokia-conf"`
	HoldTimeActive     *uint32                                                       `path:"hold-time-active" module:"nokia-conf"`
	Name               *string                                                       `path:"name" module:"nokia-conf"`
	RevertTime         NokiaConf_Configure_Service_Ipipe_Endpoint_RevertTime_Union   `path:"revert-time" module:"nokia-conf"`
	StandbySignaling   E_NokiaConf_Configure_Service_Ipipe_Endpoint_StandbySignaling `path:"standby-signaling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Endpoint) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ipipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Endpoint) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ipipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Endpoint) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ipipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Endpoint) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHoldTimeActive retrieves the value of the leaf HoldTimeActive from the NokiaConf_Configure_Service_Ipipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTimeActive is set, it can
// safely use t.GetHoldTimeActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTimeActive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Endpoint) GetHoldTimeActive() uint32 {
	if t == nil || t.HoldTimeActive == nil {
		return 0
	}
	return *t.HoldTimeActive
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Ipipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Endpoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRevertTime retrieves the value of the leaf RevertTime from the NokiaConf_Configure_Service_Ipipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertTime is set, it can
// safely use t.GetRevertTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Endpoint) GetRevertTime() NokiaConf_Configure_Service_Ipipe_Endpoint_RevertTime_Union {
	if t == nil || t.RevertTime == nil {
		return NokiaTypesServices_RevertTime_Enum_immediate
	}
	return t.RevertTime
}

// GetStandbySignaling retrieves the value of the leaf StandbySignaling from the NokiaConf_Configure_Service_Ipipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandbySignaling is set, it can
// safely use t.GetStandbySignaling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandbySignaling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Endpoint) GetStandbySignaling() E_NokiaConf_Configure_Service_Ipipe_Endpoint_StandbySignaling {
	if t == nil || t.StandbySignaling == 0 {
		return 0
	}
	return t.StandbySignaling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RevertTime == nil {
		t.RevertTime = NokiaTypesServices_RevertTime_Enum_immediate
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ipipe_Endpoint struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ipipe_Endpoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Endpoint.
func (*NokiaConf_Configure_Service_Ipipe_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap represents the /nokia-conf/configure/service/ipipe/sap YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap struct {
	AccountingPolicy   *uint32                                              `path:"accounting-policy" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                          `path:"admin-state" module:"nokia-conf"`
	AppProfile         *string                                              `path:"app-profile" module:"nokia-conf"`
	ApplyGroups        []string                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Bandwidth          *uint64                                              `path:"bandwidth" module:"nokia-conf"`
	CeAddress          *string                                              `path:"ce-address" module:"nokia-conf"`
	CollectStats       *bool                                                `path:"collect-stats" module:"nokia-conf"`
	CpuProtection      *NokiaConf_Configure_Service_Ipipe_Sap_CpuProtection `path:"cpu-protection" module:"nokia-conf"`
	Description        *string                                              `path:"description" module:"nokia-conf"`
	DistCpuProtection  *string                                              `path:"dist-cpu-protection" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Ipipe_Sap_Egress        `path:"egress" module:"nokia-conf"`
	Endpoint           *string                                              `path:"endpoint" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Ipipe_Sap_Ingress       `path:"ingress" module:"nokia-conf"`
	Lag                *NokiaConf_Configure_Service_Ipipe_Sap_Lag           `path:"lag" module:"nokia-conf"`
	Mac                *string                                              `path:"mac" module:"nokia-conf"`
	MacRefresh         *uint32                                              `path:"mac-refresh" module:"nokia-conf"`
	MultiServiceSite   *string                                              `path:"multi-service-site" module:"nokia-conf"`
	SapId              *string                                              `path:"sap-id" module:"nokia-conf"`
	TransitPolicy      *NokiaConf_Configure_Service_Ipipe_Sap_TransitPolicy `path:"transit-policy" module:"nokia-conf" yangPresence:"true"`
	UseBroadcastMac    *bool                                                `path:"use-broadcast-mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap) IsYANGGoStruct() {}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetOrCreateCpuProtection() *NokiaConf_Configure_Service_Ipipe_Sap_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Service_Ipipe_Sap_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetOrCreateEgress() *NokiaConf_Configure_Service_Ipipe_Sap_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Ipipe_Sap_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetOrCreateIngress() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress{}
	return t.Ingress
}

// GetOrCreateLag retrieves the value of the Lag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetOrCreateLag() *NokiaConf_Configure_Service_Ipipe_Sap_Lag {
	if t.Lag != nil {
		return t.Lag
	}
	t.Lag = &NokiaConf_Configure_Service_Ipipe_Sap_Lag{}
	return t.Lag
}

// GetOrCreateTransitPolicy retrieves the value of the TransitPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetOrCreateTransitPolicy() *NokiaConf_Configure_Service_Ipipe_Sap_TransitPolicy {
	if t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	t.TransitPolicy = &NokiaConf_Configure_Service_Ipipe_Sap_TransitPolicy{}
	return t.TransitPolicy
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetCpuProtection() *NokiaConf_Configure_Service_Ipipe_Sap_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetEgress() *NokiaConf_Configure_Service_Ipipe_Sap_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetIngress() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetLag returns the value of the Lag struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap. If the receiver or the field Lag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetLag() *NokiaConf_Configure_Service_Ipipe_Sap_Lag {
	if t != nil && t.Lag != nil {
		return t.Lag
	}
	return nil
}

// GetTransitPolicy returns the value of the TransitPolicy struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap. If the receiver or the field TransitPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetTransitPolicy() *NokiaConf_Configure_Service_Ipipe_Sap_TransitPolicy {
	if t != nil && t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetBandwidth() uint64 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetCeAddress retrieves the value of the leaf CeAddress from the NokiaConf_Configure_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CeAddress is set, it can
// safely use t.GetCeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CeAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetCeAddress() string {
	if t == nil || t.CeAddress == nil {
		return ""
	}
	return *t.CeAddress
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDistCpuProtection retrieves the value of the leaf DistCpuProtection from the NokiaConf_Configure_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DistCpuProtection is set, it can
// safely use t.GetDistCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DistCpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetDistCpuProtection() string {
	if t == nil || t.DistCpuProtection == nil {
		return ""
	}
	return *t.DistCpuProtection
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetMac() string {
	if t == nil || t.Mac == nil {
		return "00:00:00:00:00:00"
	}
	return *t.Mac
}

// GetMacRefresh retrieves the value of the leaf MacRefresh from the NokiaConf_Configure_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacRefresh is set, it can
// safely use t.GetMacRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacRefresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetMacRefresh() uint32 {
	if t == nil || t.MacRefresh == nil {
		return 14400
	}
	return *t.MacRefresh
}

// GetMultiServiceSite retrieves the value of the leaf MultiServiceSite from the NokiaConf_Configure_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiServiceSite is set, it can
// safely use t.GetMultiServiceSite() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiServiceSite == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetMultiServiceSite() string {
	if t == nil || t.MultiServiceSite == nil {
		return ""
	}
	return *t.MultiServiceSite
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// GetUseBroadcastMac retrieves the value of the leaf UseBroadcastMac from the NokiaConf_Configure_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseBroadcastMac is set, it can
// safely use t.GetUseBroadcastMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseBroadcastMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) GetUseBroadcastMac() bool {
	if t == nil || t.UseBroadcastMac == nil {
		return false
	}
	return *t.UseBroadcastMac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.Mac == nil {
		var v string = "00:00:00:00:00:00"
		t.Mac = &v
	}
	if t.MacRefresh == nil {
		var v uint32 = 14400
		t.MacRefresh = &v
	}
	if t.UseBroadcastMac == nil {
		var v bool = false
		t.UseBroadcastMac = &v
	}
	t.CpuProtection.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Lag.PopulateDefaults()
	t.TransitPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ipipe_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap.
func (*NokiaConf_Configure_Service_Ipipe_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_CpuProtection represents the /nokia-conf/configure/service/ipipe/sap/cpu-protection YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_CpuProtection struct {
	MacMonitoring YANGEmpty `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId      *uint32   `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_CpuProtection) IsYANGGoStruct() {}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Service_Ipipe_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Service_Ipipe_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_CpuProtection.
func (*NokiaConf_Configure_Service_Ipipe_Sap_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress represents the /nokia-conf/configure/service/ipipe/sap/egress YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress struct {
	AggRate *NokiaConf_Configure_Service_Ipipe_Sap_Egress_AggRate `path:"agg-rate" module:"nokia-conf"`
	Filter  *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Filter  `path:"filter" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos     `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress) IsYANGGoStruct() {}

// GetOrCreateAggRate retrieves the value of the AggRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress) GetOrCreateAggRate() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_AggRate {
	if t.AggRate != nil {
		return t.AggRate
	}
	t.AggRate = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_AggRate{}
	return t.AggRate
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress) GetOrCreateQos() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos{}
	return t.Qos
}

// GetAggRate returns the value of the AggRate struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress. If the receiver or the field AggRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress) GetAggRate() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_AggRate {
	if t != nil && t.AggRate != nil {
		return t.AggRate
	}
	return nil
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress) GetFilter() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress) GetQos() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AggRate.PopulateDefaults()
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_AggRate represents the /nokia-conf/configure/service/ipipe/sap/egress/agg-rate YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_AggRate struct {
	LimitUnusedBandwidth *bool  `path:"limit-unused-bandwidth" module:"nokia-conf"`
	Rate                 *int64 `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_AggRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_AggRate) IsYANGGoStruct() {}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_AggRate) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_AggRate) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_AggRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_AggRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_AggRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_AggRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_AggRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_AggRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_AggRate.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_AggRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Filter represents the /nokia-conf/configure/service/ipipe/sap/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Filter.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos represents the /nokia-conf/configure/service/ipipe/sap/egress/qos YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos struct {
	PolicerControlPolicy *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	QinqMarkTopOnly      *bool                                                                  `path:"qinq-mark-top-only" module:"nokia-conf"`
	SapEgress            *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress            `path:"sap-egress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapEgress retrieves the value of the SapEgress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos) GetOrCreateSapEgress() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress {
	if t.SapEgress != nil {
		return t.SapEgress
	}
	t.SapEgress = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress{}
	return t.SapEgress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapEgress returns the value of the SapEgress struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos. If the receiver or the field SapEgress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos) GetSapEgress() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress {
	if t != nil && t.SapEgress != nil {
		return t.SapEgress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetQinqMarkTopOnly retrieves the value of the leaf QinqMarkTopOnly from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QinqMarkTopOnly is set, it can
// safely use t.GetQinqMarkTopOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QinqMarkTopOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos) GetQinqMarkTopOnly() bool {
	if t == nil || t.QinqMarkTopOnly == nil {
		return false
	}
	return *t.QinqMarkTopOnly
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.QinqMarkTopOnly == nil {
		var v bool = false
		t.QinqMarkTopOnly = &v
	}
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapEgress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                          `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides struct {
	ApplyGroups        []string                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Root               *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority       `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(PriorityLevel int32) (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: &PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK int32) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = &newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel int32) *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(PriorityLevel int32) *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel int32) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	if v.PriorityLevel == nil {
		return fmt.Errorf("invalid nil key received for PriorityLevel")
	}

	key := *v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	ApplyGroups        []string                                                                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	MbsContribution    NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel      *int32                                                                                                                                    `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() int32 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PriorityLevel == nil {
		return nil, fmt.Errorf("nil value for key PriorityLevel")
	}

	return map[string]interface{}{
		"priority-level": *t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/sap-egress YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress struct {
	Overrides         *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides         `path:"overrides" module:"nokia-conf"`
	PolicyName        *string                                                                       `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress) GetOrCreateOverrides() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides{}
	return t.Overrides
}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress) GetOverrides() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress) GetPortRedirectGroup() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/sap-egress/overrides YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides struct {
	HsSecondaryShaper *string                                                                                     `path:"hs-secondary-shaper" module:"nokia-conf"`
	HsWrrGroup        map[uint32]*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup `path:"hs-wrr-group" module:"nokia-conf"`
	HsmdaQueues       *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues           `path:"hsmda-queues" module:"nokia-conf"`
	Policer           map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer     `path:"policer" module:"nokia-conf"`
	Queue             map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue       `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) IsYANGGoStruct() {}

// NewHsWrrGroup creates a new entry in the HsWrrGroup list of the
// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) NewHsWrrGroup(GroupId uint32) (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[uint32]*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsWrrGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsWrrGroup", key)
	}

	t.HsWrrGroup[key] = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup{
		GroupId: &GroupId,
	}

	return t.HsWrrGroup[key], nil
}

// RenameHsWrrGroup renames an entry in the list HsWrrGroup within
// the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) RenameHsWrrGroup(oldK, newK uint32) error {
	if _, ok := t.HsWrrGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in HsWrrGroup", newK)
	}

	e, ok := t.HsWrrGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsWrrGroup", oldK)
	}
	e.GroupId = &newK

	t.HsWrrGroup[newK] = e
	delete(t.HsWrrGroup, oldK)
	return nil
}

// GetOrCreateHsWrrGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateHsWrrGroup(GroupId uint32) *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup {

	key := GroupId

	if v, ok := t.HsWrrGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsWrrGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsWrrGroup got unexpected error: %v", err))
	}
	return v
}

// GetHsWrrGroup retrieves the value with the specified key from
// the HsWrrGroup map field of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) GetHsWrrGroup(GroupId uint32) *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.HsWrrGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsWrrGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) DeleteHsWrrGroup(GroupId uint32) {
	key := GroupId

	delete(t.HsWrrGroup, key)
}

// AppendHsWrrGroup appends the supplied NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct to the
// list HsWrrGroup of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) AppendHsWrrGroup(v *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) error {
	if v.GroupId == nil {
		return fmt.Errorf("invalid nil key received for GroupId")
	}

	key := *v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[uint32]*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup)
	}

	if _, ok := t.HsWrrGroup[key]; ok {
		return fmt.Errorf("duplicate key for list HsWrrGroup %v", key)
	}

	t.HsWrrGroup[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) NewPolicer(PolicerId int32) (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) RenamePolicer(oldK, newK int32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreatePolicer(PolicerId int32) *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) GetPolicer(PolicerId int32) *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) DeletePolicer(PolicerId int32) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) AppendPolicer(v *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) NewQueue(QueueId int32) (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) GetQueue(QueueId int32) *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) AppendQueue(v *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateHsmdaQueues retrieves the value of the HsmdaQueues field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateHsmdaQueues() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues {
	if t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	t.HsmdaQueues = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues{}
	return t.HsmdaQueues
}

// GetHsmdaQueues returns the value of the HsmdaQueues struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If the receiver or the field HsmdaQueues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) GetHsmdaQueues() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues {
	if t != nil && t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	return nil
}

// GetHsSecondaryShaper retrieves the value of the leaf HsSecondaryShaper from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsSecondaryShaper is set, it can
// safely use t.GetHsSecondaryShaper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsSecondaryShaper == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) GetHsSecondaryShaper() string {
	if t == nil || t.HsSecondaryShaper == nil {
		return ""
	}
	return *t.HsSecondaryShaper
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HsmdaQueues.PopulateDefaults()
	for _, e := range t.HsWrrGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/sap-egress/overrides/hs-wrr-group YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct {
	ApplyGroups        []string                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupId            *uint32                                                                                    `path:"group-id" module:"nokia-conf"`
	HsClassWeight      *int32                                                                                     `path:"hs-class-weight" module:"nokia-conf"`
	PercentRate        *float64                                                                                   `path:"percent-rate" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetGroupId() uint32 {
	if t == nil || t.GroupId == nil {
		return 0
	}
	return *t.GroupId
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetHsClassWeight() int32 {
	if t == nil || t.HsClassWeight == nil {
		return 0
	}
	return *t.HsClassWeight
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 0.0
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetRate() NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/sap-egress/overrides/hsmda-queues YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct {
	PacketByteOffset *int32                                                                                            `path:"packet-byte-offset" module:"nokia-conf"`
	Queue            map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue `path:"queue" module:"nokia-conf"`
	SecondaryShaper  *string                                                                                           `path:"secondary-shaper" module:"nokia-conf"`
	WrrPolicy        *string                                                                                           `path:"wrr-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) IsYANGGoStruct() {
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) NewQueue(QueueId int32) (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetQueue(QueueId int32) *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct to the
// list Queue of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) AppendQueue(v *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetSecondaryShaper retrieves the value of the leaf SecondaryShaper from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryShaper is set, it can
// safely use t.GetSecondaryShaper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryShaper == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetSecondaryShaper() string {
	if t == nil || t.SecondaryShaper == nil {
		return ""
	}
	return *t.SecondaryShaper
}

// GetWrrPolicy retrieves the value of the leaf WrrPolicy from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrPolicy is set, it can
// safely use t.GetWrrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetWrrPolicy() string {
	if t == nil || t.WrrPolicy == nil {
		return ""
	}
	return *t.WrrPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/sap-egress/overrides/hsmda-queues/queue YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct {
	ApplyGroups        []string                                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Mbs_Union  `path:"mbs" module:"nokia-conf"`
	QueueId            *int32                                                                                            `path:"queue-id" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Rate_Union `path:"rate" module:"nokia-conf"`
	SlopePolicy        *string                                                                                           `path:"slope-policy" module:"nokia-conf"`
	WrrWeight          *int32                                                                                            `path:"wrr-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetMbs() NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetRate() NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// GetWrrWeight retrieves the value of the leaf WrrWeight from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeight is set, it can
// safely use t.GetWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetWrrWeight() int32 {
	if t == nil || t.WrrWeight == nil {
		return 0
	}
	return *t.WrrWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/sap-egress/overrides/policer YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer struct {
	ApplyGroups        []string                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union    `path:"cbs" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union    `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                                    `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PolicerId          *int32                                                                                    `path:"policer-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate        `path:"rate" module:"nokia-conf"`
	StatMode           E_NokiaTypesQos_EgressPolicerStatMode                                                     `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPercentRate() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetRate() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetCbs() NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetMbs() NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPolicerId() int32 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetStatMode() E_NokiaTypesQos_EgressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/sap-egress/overrides/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/sap-egress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/sap-egress/overrides/queue YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	AvgFrameOverhead   *float64                                                                                      `path:"avg-frame-overhead" module:"nokia-conf"`
	BurstLimit         NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_BurstLimit_Union   `path:"burst-limit" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	HsClassWeight      *int32                                                                                        `path:"hs-class-weight" module:"nokia-conf"`
	HsWredQueue        *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue       `path:"hs-wred-queue" module:"nokia-conf"`
	HsWrrWeight        *int32                                                                                        `path:"hs-wrr-weight" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth       *bool                                                                                         `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth  *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent             *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId            *int32                                                                                        `path:"queue-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateHsWredQueue retrieves the value of the HsWredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateHsWredQueue() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	t.HsWredQueue = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue{}
	return t.HsWredQueue
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetDropTail() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetHsWredQueue returns the value of the HsWredQueue struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field HsWredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsWredQueue() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t != nil && t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetParent() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetPercentRate() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetRate() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAvgFrameOverhead retrieves the value of the leaf AvgFrameOverhead from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgFrameOverhead is set, it can
// safely use t.GetAvgFrameOverhead() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgFrameOverhead == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetAvgFrameOverhead() float64 {
	if t == nil || t.AvgFrameOverhead == nil {
		return 0.0
	}
	return *t.AvgFrameOverhead
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetBurstLimit() NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return nil
	}
	return t.BurstLimit
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetCbs() NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsClassWeight() int32 {
	if t == nil || t.HsClassWeight == nil {
		return 0
	}
	return *t.HsClassWeight
}

// GetHsWrrWeight retrieves the value of the leaf HsWrrWeight from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsWrrWeight is set, it can
// safely use t.GetHsWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsWrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsWrrWeight() int32 {
	if t == nil || t.HsWrrWeight == nil {
		return 1
	}
	return *t.HsWrrWeight
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMbs() NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HsWrrWeight == nil {
		var v int32 = 1
		t.HsWrrWeight = &v
	}
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.HsWredQueue.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/sap-egress/overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/sap-egress/overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/sap-egress/overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/sap-egress/overrides/queue/hs-wred-queue YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue struct {
	Policy *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) IsYANGGoStruct() {
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/sap-egress/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling        *bool    `path:"fast-polling" module:"nokia-conf"`
	ViolationThreshold *float64 `path:"violation-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// GetViolationThreshold retrieves the value of the leaf ViolationThreshold from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolationThreshold is set, it can
// safely use t.GetViolationThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolationThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) GetViolationThreshold() float64 {
	if t == nil || t.ViolationThreshold == nil {
		return 0.0
	}
	return *t.ViolationThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/sap-egress/overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/sap-egress/overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/sap-egress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/sap-egress/port-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                     `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	ApplyGroups        []string                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Parent             *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName      *string                                                                                      `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/service/ipipe/sap/egress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress represents the /nokia-conf/configure/service/ipipe/sap/ingress YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress struct {
	Filter *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Filter `path:"filter" module:"nokia-conf"`
	Qos    *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos    `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress) GetFilter() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress) GetQos() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Filter represents the /nokia-conf/configure/service/ipipe/sap/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Filter.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos struct {
	MatchQinqDot1P       E_NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_MatchQinqDot1P      `path:"match-qinq-dot1p" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	SapIngress           *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress           `path:"sap-ingress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapIngress retrieves the value of the SapIngress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos) GetOrCreateSapIngress() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress {
	if t.SapIngress != nil {
		return t.SapIngress
	}
	t.SapIngress = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress{}
	return t.SapIngress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapIngress returns the value of the SapIngress struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos. If the receiver or the field SapIngress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos) GetSapIngress() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress {
	if t != nil && t.SapIngress != nil {
		return t.SapIngress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetMatchQinqDot1P retrieves the value of the leaf MatchQinqDot1P from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchQinqDot1P is set, it can
// safely use t.GetMatchQinqDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchQinqDot1P == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos) GetMatchQinqDot1P() E_NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_MatchQinqDot1P {
	if t == nil || t.MatchQinqDot1P == 0 {
		return 0
	}
	return t.MatchQinqDot1P
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapIngress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                           `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides struct {
	ApplyGroups        []string                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Root               *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority       `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(PriorityLevel int32) (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: &PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK int32) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = &newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel int32) *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(PriorityLevel int32) *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel int32) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	if v.PriorityLevel == nil {
		return fmt.Errorf("invalid nil key received for PriorityLevel")
	}

	key := *v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	ApplyGroups        []string                                                                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	MbsContribution    NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel      *int32                                                                                                                                     `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() int32 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PriorityLevel == nil {
		return nil, fmt.Errorf("nil value for key PriorityLevel")
	}

	return map[string]interface{}{
		"priority-level": *t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/sap-ingress YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress struct {
	FpRedirectGroup *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	Overrides       *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides       `path:"overrides" module:"nokia-conf"`
	PolicyName      *string                                                                       `path:"policy-name" module:"nokia-conf"`
	QueuingType     E_NokiaTypesServices_ServicesSapQueuingType                                   `path:"queuing-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress) IsYANGGoStruct() {}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress) GetOrCreateOverrides() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides{}
	return t.Overrides
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress) GetFpRedirectGroup() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress) GetOverrides() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetQueuingType retrieves the value of the leaf QueuingType from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuingType is set, it can
// safely use t.GetQueuingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress) GetQueuingType() E_NokiaTypesServices_ServicesSapQueuingType {
	if t == nil || t.QueuingType == 0 {
		return 0
	}
	return t.QueuingType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/sap-ingress/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/sap-ingress/overrides YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides struct {
	Policer map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer `path:"policer" module:"nokia-conf"`
	Queue   map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue   `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) IsYANGGoStruct() {}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) NewPolicer(PolicerId int32) (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) RenamePolicer(oldK, newK int32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreatePolicer(PolicerId int32) *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) GetPolicer(PolicerId int32) *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) DeletePolicer(PolicerId int32) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) AppendPolicer(v *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) NewQueue(QueueId int32) (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) GetQueue(QueueId int32) *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) AppendQueue(v *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/sap-ingress/overrides/policer YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct {
	ApplyGroups        []string                                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union    `path:"cbs" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union    `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                                      `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PolicerId          *int32                                                                                      `path:"policer-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate        `path:"rate" module:"nokia-conf"`
	StatMode           E_NokiaTypesQos_IngressPolicerStatMode                                                      `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPercentRate() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetRate() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetCbs() NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetMbs() NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPolicerId() int32 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetStatMode() E_NokiaTypesQos_IngressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/sap-ingress/overrides/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/sap-ingress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/sap-ingress/overrides/queue YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth       *bool                                                                                           `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth  *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent             *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId            *int32                                                                                          `path:"queue-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetDropTail() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetParent() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetPercentRate() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetRate() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetCbs() NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMbs() NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/sap-ingress/overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/sap-ingress/overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/sap-ingress/overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/sap-ingress/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling *bool `path:"fast-polling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/sap-ingress/overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/sap-ingress/overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/sap-ingress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                      `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	ApplyGroups        []string                                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Parent             *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName      *string                                                                                       `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/service/ipipe/sap/ingress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Lag represents the /nokia-conf/configure/service/ipipe/sap/lag YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Lag struct {
	LinkMapProfile *int32                                                 `path:"link-map-profile" module:"nokia-conf"`
	PerLinkHash    *NokiaConf_Configure_Service_Ipipe_Sap_Lag_PerLinkHash `path:"per-link-hash" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Lag) IsYANGGoStruct() {}

// GetOrCreatePerLinkHash retrieves the value of the PerLinkHash field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Lag) GetOrCreatePerLinkHash() *NokiaConf_Configure_Service_Ipipe_Sap_Lag_PerLinkHash {
	if t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	t.PerLinkHash = &NokiaConf_Configure_Service_Ipipe_Sap_Lag_PerLinkHash{}
	return t.PerLinkHash
}

// GetPerLinkHash returns the value of the PerLinkHash struct pointer
// from NokiaConf_Configure_Service_Ipipe_Sap_Lag. If the receiver or the field PerLinkHash is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Lag) GetPerLinkHash() *NokiaConf_Configure_Service_Ipipe_Sap_Lag_PerLinkHash {
	if t != nil && t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	return nil
}

// GetLinkMapProfile retrieves the value of the leaf LinkMapProfile from the NokiaConf_Configure_Service_Ipipe_Sap_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkMapProfile is set, it can
// safely use t.GetLinkMapProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkMapProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Lag) GetLinkMapProfile() int32 {
	if t == nil || t.LinkMapProfile == nil {
		return 0
	}
	return *t.LinkMapProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PerLinkHash.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Lag.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_Lag_PerLinkHash represents the /nokia-conf/configure/service/ipipe/sap/lag/per-link-hash YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_Lag_PerLinkHash struct {
	Class  *int32 `path:"class" module:"nokia-conf"`
	Weight *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_Lag_PerLinkHash implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Lag_PerLinkHash) IsYANGGoStruct() {}

// GetClass retrieves the value of the leaf Class from the NokiaConf_Configure_Service_Ipipe_Sap_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Class is set, it can
// safely use t.GetClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Class == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Lag_PerLinkHash) GetClass() int32 {
	if t == nil || t.Class == nil {
		return 1
	}
	return *t.Class
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Ipipe_Sap_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Lag_PerLinkHash) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_Lag_PerLinkHash
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Lag_PerLinkHash) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Class == nil {
		var v int32 = 1
		t.Class = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Lag_PerLinkHash) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_Lag_PerLinkHash"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Lag_PerLinkHash) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_Lag_PerLinkHash) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_Lag_PerLinkHash.
func (*NokiaConf_Configure_Service_Ipipe_Sap_Lag_PerLinkHash) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_Sap_TransitPolicy represents the /nokia-conf/configure/service/ipipe/sap/transit-policy YANG schema element.
type NokiaConf_Configure_Service_Ipipe_Sap_TransitPolicy struct {
	Prefix *uint32 `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_Sap_TransitPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_Sap_TransitPolicy) IsYANGGoStruct() {}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Service_Ipipe_Sap_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_TransitPolicy) GetPrefix() uint32 {
	if t == nil || t.Prefix == nil {
		return 0
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_Sap_TransitPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_TransitPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_TransitPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_Sap_TransitPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_TransitPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_Sap_TransitPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_Sap_TransitPolicy.
func (*NokiaConf_Configure_Service_Ipipe_Sap_TransitPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_SpokeSdp represents the /nokia-conf/configure/service/ipipe/spoke-sdp YANG schema element.
type NokiaConf_Configure_Service_Ipipe_SpokeSdp struct {
	Aarp               *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Aarp           `path:"aarp" module:"nokia-conf" yangPresence:"true"`
	AdminState         E_NokiaTypesSros_AdminState                                `path:"admin-state" module:"nokia-conf"`
	AppProfile         *string                                                    `path:"app-profile" module:"nokia-conf"`
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Bandwidth          NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bandwidth_Union `path:"bandwidth" module:"nokia-conf"`
	Bfd                *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd            `path:"bfd" module:"nokia-conf"`
	BfdLiveness        *NokiaConf_Configure_Service_Ipipe_SpokeSdp_BfdLiveness    `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate        *string                                                    `path:"bfd-template" module:"nokia-conf"`
	CeAddress          *string                                                    `path:"ce-address" module:"nokia-conf"`
	ControlWord        *bool                                                      `path:"control-word" module:"nokia-conf"`
	Description        *string                                                    `path:"description" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress         `path:"egress" module:"nokia-conf"`
	Endpoint           *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint       `path:"endpoint" module:"nokia-conf"`
	EntropyLabel       YANGEmpty                                                  `path:"entropy-label" module:"nokia-conf"`
	HashLabel          *NokiaConf_Configure_Service_Ipipe_SpokeSdp_HashLabel      `path:"hash-label" module:"nokia-conf" yangPresence:"true"`
	Ingress            *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress        `path:"ingress" module:"nokia-conf"`
	SdpBindId          *string                                                    `path:"sdp-bind-id" module:"nokia-conf"`
	TransitPolicy      *NokiaConf_Configure_Service_Ipipe_SpokeSdp_TransitPolicy  `path:"transit-policy" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp) IsYANGGoStruct() {}

// GetOrCreateAarp retrieves the value of the Aarp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetOrCreateAarp() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Aarp {
	if t.Aarp != nil {
		return t.Aarp
	}
	t.Aarp = &NokiaConf_Configure_Service_Ipipe_SpokeSdp_Aarp{}
	return t.Aarp
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetOrCreateBfd() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd{}
	return t.Bfd
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Ipipe_SpokeSdp_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetOrCreateEgress() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress{}
	return t.Egress
}

// GetOrCreateEndpoint retrieves the value of the Endpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetOrCreateEndpoint() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint {
	if t.Endpoint != nil {
		return t.Endpoint
	}
	t.Endpoint = &NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint{}
	return t.Endpoint
}

// GetOrCreateHashLabel retrieves the value of the HashLabel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetOrCreateHashLabel() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_HashLabel {
	if t.HashLabel != nil {
		return t.HashLabel
	}
	t.HashLabel = &NokiaConf_Configure_Service_Ipipe_SpokeSdp_HashLabel{}
	return t.HashLabel
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetOrCreateIngress() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress{}
	return t.Ingress
}

// GetOrCreateTransitPolicy retrieves the value of the TransitPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetOrCreateTransitPolicy() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_TransitPolicy {
	if t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	t.TransitPolicy = &NokiaConf_Configure_Service_Ipipe_SpokeSdp_TransitPolicy{}
	return t.TransitPolicy
}

// GetAarp returns the value of the Aarp struct pointer
// from NokiaConf_Configure_Service_Ipipe_SpokeSdp. If the receiver or the field Aarp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetAarp() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Aarp {
	if t != nil && t.Aarp != nil {
		return t.Aarp
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Service_Ipipe_SpokeSdp. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetBfd() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Ipipe_SpokeSdp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetBfdLiveness() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Ipipe_SpokeSdp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetEgress() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEndpoint returns the value of the Endpoint struct pointer
// from NokiaConf_Configure_Service_Ipipe_SpokeSdp. If the receiver or the field Endpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetEndpoint() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint {
	if t != nil && t.Endpoint != nil {
		return t.Endpoint
	}
	return nil
}

// GetHashLabel returns the value of the HashLabel struct pointer
// from NokiaConf_Configure_Service_Ipipe_SpokeSdp. If the receiver or the field HashLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetHashLabel() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_HashLabel {
	if t != nil && t.HashLabel != nil {
		return t.HashLabel
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Ipipe_SpokeSdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetIngress() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetTransitPolicy returns the value of the TransitPolicy struct pointer
// from NokiaConf_Configure_Service_Ipipe_SpokeSdp. If the receiver or the field TransitPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetTransitPolicy() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_TransitPolicy {
	if t != nil && t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ipipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Service_Ipipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ipipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ipipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Service_Ipipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetBandwidth() NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bandwidth_Union {
	if t == nil || t.Bandwidth == nil {
		return UnionUint32(0)
	}
	return t.Bandwidth
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Service_Ipipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetCeAddress retrieves the value of the leaf CeAddress from the NokiaConf_Configure_Service_Ipipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CeAddress is set, it can
// safely use t.GetCeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CeAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetCeAddress() string {
	if t == nil || t.CeAddress == nil {
		return ""
	}
	return *t.CeAddress
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Service_Ipipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ipipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Service_Ipipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetEntropyLabel() YANGEmpty {
	if t == nil || t.EntropyLabel == false {
		return false
	}
	return t.EntropyLabel
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Service_Ipipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Bandwidth == nil {
		t.Bandwidth = UnionUint32(0)
	}
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	t.Aarp.PopulateDefaults()
	t.Bfd.PopulateDefaults()
	t.BfdLiveness.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.Endpoint.PopulateDefaults()
	t.HashLabel.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.TransitPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ipipe_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_SpokeSdp.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_SpokeSdp_Aarp represents the /nokia-conf/configure/service/ipipe/spoke-sdp/aarp YANG schema element.
type NokiaConf_Configure_Service_Ipipe_SpokeSdp_Aarp struct {
	Id   *uint32                                      `path:"id" module:"nokia-conf"`
	Type E_NokiaTypesServices_L3BsxAarpServiceRefType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_SpokeSdp_Aarp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Aarp) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Aarp) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Aarp) GetType() E_NokiaTypesServices_L3BsxAarpServiceRefType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Aarp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Aarp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Aarp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_SpokeSdp_Aarp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Aarp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Aarp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_SpokeSdp_Aarp.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Aarp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd represents the /nokia-conf/configure/service/ipipe/spoke-sdp/bfd YANG schema element.
type NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd struct {
	BfdLiveness *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate *string                                                     `path:"bfd-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd) GetBfdLiveness() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BfdLiveness.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_SpokeSdp_BfdLiveness represents the /nokia-conf/configure/service/ipipe/spoke-sdp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Ipipe_SpokeSdp_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_SpokeSdp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_SpokeSdp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_SpokeSdp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_SpokeSdp_BfdLiveness.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness represents the /nokia-conf/configure/service/ipipe/spoke-sdp/bfd/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress represents the /nokia-conf/configure/service/ipipe/spoke-sdp/egress YANG schema element.
type NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress struct {
	Filter  *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Filter `path:"filter" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos    `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                   `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress) GetOrCreateQos() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress) GetFilter() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress) GetQos() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Filter represents the /nokia-conf/configure/service/ipipe/spoke-sdp/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Filter.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos represents the /nokia-conf/configure/service/ipipe/spoke-sdp/egress/qos YANG schema element.
type NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos struct {
	Network *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos) GetNetwork() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network represents the /nokia-conf/configure/service/ipipe/spoke-sdp/egress/qos/network YANG schema element.
type NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network struct {
	PolicyName        *string                                                                          `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network) GetPortRedirectGroup() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup represents the /nokia-conf/configure/service/ipipe/spoke-sdp/egress/qos/network/port-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint represents the /nokia-conf/configure/service/ipipe/spoke-sdp/endpoint YANG schema element.
type NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint struct {
	Name       *string                                                              `path:"name" module:"nokia-conf"`
	Precedence NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint_Precedence_Union `path:"precedence" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPrecedence retrieves the value of the leaf Precedence from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Precedence is set, it can
// safely use t.GetPrecedence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Precedence == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint) GetPrecedence() NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint_Precedence_Union {
	if t == nil || t.Precedence == nil {
		return UnionUint32(4)
	}
	return t.Precedence
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Precedence == nil {
		t.Precedence = UnionUint32(4)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_SpokeSdp_HashLabel represents the /nokia-conf/configure/service/ipipe/spoke-sdp/hash-label YANG schema element.
type NokiaConf_Configure_Service_Ipipe_SpokeSdp_HashLabel struct {
	SignalCapability YANGEmpty `path:"signal-capability" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_SpokeSdp_HashLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_HashLabel) IsYANGGoStruct() {}

// GetSignalCapability retrieves the value of the leaf SignalCapability from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_HashLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalCapability is set, it can
// safely use t.GetSignalCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_HashLabel) GetSignalCapability() YANGEmpty {
	if t == nil || t.SignalCapability == false {
		return false
	}
	return t.SignalCapability
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_SpokeSdp_HashLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_HashLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_HashLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_SpokeSdp_HashLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_HashLabel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_HashLabel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_SpokeSdp_HashLabel.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_HashLabel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress represents the /nokia-conf/configure/service/ipipe/spoke-sdp/ingress YANG schema element.
type NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress struct {
	Filter  *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Filter `path:"filter" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos    `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                    `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress) GetFilter() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress) GetQos() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Filter represents the /nokia-conf/configure/service/ipipe/spoke-sdp/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Filter.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos represents the /nokia-conf/configure/service/ipipe/spoke-sdp/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos struct {
	Network *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos) GetNetwork() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network represents the /nokia-conf/configure/service/ipipe/spoke-sdp/ingress/qos/network YANG schema element.
type NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network struct {
	FpRedirectGroup *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	PolicyName      *string                                                                         `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network) GetFpRedirectGroup() *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup represents the /nokia-conf/configure/service/ipipe/spoke-sdp/ingress/qos/network/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ipipe_SpokeSdp_TransitPolicy represents the /nokia-conf/configure/service/ipipe/spoke-sdp/transit-policy YANG schema element.
type NokiaConf_Configure_Service_Ipipe_SpokeSdp_TransitPolicy struct {
	Prefix *uint32 `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ipipe_SpokeSdp_TransitPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_TransitPolicy) IsYANGGoStruct() {}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Service_Ipipe_SpokeSdp_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_TransitPolicy) GetPrefix() uint32 {
	if t == nil || t.Prefix == nil {
		return 0
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ipipe_SpokeSdp_TransitPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_TransitPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_TransitPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ipipe_SpokeSdp_TransitPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_TransitPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ipipe_SpokeSdp_TransitPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ipipe_SpokeSdp_TransitPolicy.
func (*NokiaConf_Configure_Service_Ipipe_SpokeSdp_TransitPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_MacList represents the /nokia-conf/configure/service/mac-list YANG schema element.
type NokiaConf_Configure_Service_MacList struct {
	ApplyGroups        []string                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                             `path:"description" module:"nokia-conf"`
	Mac                map[string]*NokiaConf_Configure_Service_MacList_Mac `path:"mac" module:"nokia-conf"`
	Name               *string                                             `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_MacList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_MacList) IsYANGGoStruct() {}

// NewMac creates a new entry in the Mac list of the
// NokiaConf_Configure_Service_MacList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_MacList) NewMac(Address string) (*NokiaConf_Configure_Service_MacList_Mac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*NokiaConf_Configure_Service_MacList_Mac)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mac", key)
	}

	t.Mac[key] = &NokiaConf_Configure_Service_MacList_Mac{
		Address: &Address,
	}

	return t.Mac[key], nil
}

// RenameMac renames an entry in the list Mac within
// the NokiaConf_Configure_Service_MacList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_MacList) RenameMac(oldK, newK string) error {
	if _, ok := t.Mac[newK]; ok {
		return fmt.Errorf("key %v already exists in Mac", newK)
	}

	e, ok := t.Mac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mac", oldK)
	}
	e.Address = &newK

	t.Mac[newK] = e
	delete(t.Mac, oldK)
	return nil
}

// GetOrCreateMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_MacList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_MacList) GetOrCreateMac(Address string) *NokiaConf_Configure_Service_MacList_Mac {

	key := Address

	if v, ok := t.Mac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMac(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMac got unexpected error: %v", err))
	}
	return v
}

// GetMac retrieves the value with the specified key from
// the Mac map field of NokiaConf_Configure_Service_MacList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_MacList) GetMac(Address string) *NokiaConf_Configure_Service_MacList_Mac {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Mac[key]; ok {
		return lm
	}
	return nil
}

// DeleteMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_MacList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_MacList) DeleteMac(Address string) {
	key := Address

	delete(t.Mac, key)
}

// AppendMac appends the supplied NokiaConf_Configure_Service_MacList_Mac struct to the
// list Mac of NokiaConf_Configure_Service_MacList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_MacList_Mac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_MacList) AppendMac(v *NokiaConf_Configure_Service_MacList_Mac) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*NokiaConf_Configure_Service_MacList_Mac)
	}

	if _, ok := t.Mac[key]; ok {
		return fmt.Errorf("duplicate key for list Mac %v", key)
	}

	t.Mac[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_MacList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_MacList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_MacList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_MacList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_MacList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_MacList) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_MacList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_MacList) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_MacList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_MacList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mac {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_MacList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_MacList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_MacList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_MacList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_MacList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_MacList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_MacList.
func (*NokiaConf_Configure_Service_MacList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_MacList_Mac represents the /nokia-conf/configure/service/mac-list/mac YANG schema element.
type NokiaConf_Configure_Service_MacList_Mac struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Mask               *string  `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_MacList_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_MacList_Mac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_MacList_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_MacList_Mac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_MacList_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_MacList_Mac) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_MacList_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_MacList_Mac) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Service_MacList_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_MacList_Mac) GetMask() string {
	if t == nil || t.Mask == nil {
		return "ff:ff:ff:ff:ff:ff"
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_MacList_Mac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_MacList_Mac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v string = "ff:ff:ff:ff:ff:ff"
		t.Mask = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_MacList_Mac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_MacList_Mac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_MacList_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_MacList_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_MacList_Mac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_MacList_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_MacList_Mac.
func (*NokiaConf_Configure_Service_MacList_Mac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_MdAutoId represents the /nokia-conf/configure/service/md-auto-id YANG schema element.
type NokiaConf_Configure_Service_MdAutoId struct {
	CustomerIdRange   *NokiaConf_Configure_Service_MdAutoId_CustomerIdRange   `path:"customer-id-range" module:"nokia-conf" yangPresence:"true"`
	PwTemplateIdRange *NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange `path:"pw-template-id-range" module:"nokia-conf" yangPresence:"true"`
	ServiceIdRange    *NokiaConf_Configure_Service_MdAutoId_ServiceIdRange    `path:"service-id-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_MdAutoId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_MdAutoId) IsYANGGoStruct() {}

// GetOrCreateCustomerIdRange retrieves the value of the CustomerIdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_MdAutoId) GetOrCreateCustomerIdRange() *NokiaConf_Configure_Service_MdAutoId_CustomerIdRange {
	if t.CustomerIdRange != nil {
		return t.CustomerIdRange
	}
	t.CustomerIdRange = &NokiaConf_Configure_Service_MdAutoId_CustomerIdRange{}
	return t.CustomerIdRange
}

// GetOrCreatePwTemplateIdRange retrieves the value of the PwTemplateIdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_MdAutoId) GetOrCreatePwTemplateIdRange() *NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange {
	if t.PwTemplateIdRange != nil {
		return t.PwTemplateIdRange
	}
	t.PwTemplateIdRange = &NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange{}
	return t.PwTemplateIdRange
}

// GetOrCreateServiceIdRange retrieves the value of the ServiceIdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_MdAutoId) GetOrCreateServiceIdRange() *NokiaConf_Configure_Service_MdAutoId_ServiceIdRange {
	if t.ServiceIdRange != nil {
		return t.ServiceIdRange
	}
	t.ServiceIdRange = &NokiaConf_Configure_Service_MdAutoId_ServiceIdRange{}
	return t.ServiceIdRange
}

// GetCustomerIdRange returns the value of the CustomerIdRange struct pointer
// from NokiaConf_Configure_Service_MdAutoId. If the receiver or the field CustomerIdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_MdAutoId) GetCustomerIdRange() *NokiaConf_Configure_Service_MdAutoId_CustomerIdRange {
	if t != nil && t.CustomerIdRange != nil {
		return t.CustomerIdRange
	}
	return nil
}

// GetPwTemplateIdRange returns the value of the PwTemplateIdRange struct pointer
// from NokiaConf_Configure_Service_MdAutoId. If the receiver or the field PwTemplateIdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_MdAutoId) GetPwTemplateIdRange() *NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange {
	if t != nil && t.PwTemplateIdRange != nil {
		return t.PwTemplateIdRange
	}
	return nil
}

// GetServiceIdRange returns the value of the ServiceIdRange struct pointer
// from NokiaConf_Configure_Service_MdAutoId. If the receiver or the field ServiceIdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_MdAutoId) GetServiceIdRange() *NokiaConf_Configure_Service_MdAutoId_ServiceIdRange {
	if t != nil && t.ServiceIdRange != nil {
		return t.ServiceIdRange
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_MdAutoId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_MdAutoId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CustomerIdRange.PopulateDefaults()
	t.PwTemplateIdRange.PopulateDefaults()
	t.ServiceIdRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_MdAutoId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_MdAutoId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_MdAutoId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_MdAutoId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_MdAutoId.
func (*NokiaConf_Configure_Service_MdAutoId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_MdAutoId_CustomerIdRange represents the /nokia-conf/configure/service/md-auto-id/customer-id-range YANG schema element.
type NokiaConf_Configure_Service_MdAutoId_CustomerIdRange struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *uint32  `path:"end" module:"nokia-conf"`
	Start              *uint32  `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_MdAutoId_CustomerIdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_MdAutoId_CustomerIdRange) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_MdAutoId_CustomerIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_MdAutoId_CustomerIdRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_MdAutoId_CustomerIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_MdAutoId_CustomerIdRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_MdAutoId_CustomerIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_MdAutoId_CustomerIdRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_MdAutoId_CustomerIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_MdAutoId_CustomerIdRange) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_MdAutoId_CustomerIdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_MdAutoId_CustomerIdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_MdAutoId_CustomerIdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_MdAutoId_CustomerIdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_MdAutoId_CustomerIdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_MdAutoId_CustomerIdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_MdAutoId_CustomerIdRange.
func (*NokiaConf_Configure_Service_MdAutoId_CustomerIdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange represents the /nokia-conf/configure/service/md-auto-id/pw-template-id-range YANG schema element.
type NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *uint32  `path:"end" module:"nokia-conf"`
	Start              *uint32  `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange.
func (*NokiaConf_Configure_Service_MdAutoId_PwTemplateIdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_MdAutoId_ServiceIdRange represents the /nokia-conf/configure/service/md-auto-id/service-id-range YANG schema element.
type NokiaConf_Configure_Service_MdAutoId_ServiceIdRange struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *uint32  `path:"end" module:"nokia-conf"`
	Start              *uint32  `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_MdAutoId_ServiceIdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_MdAutoId_ServiceIdRange) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_MdAutoId_ServiceIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_MdAutoId_ServiceIdRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_MdAutoId_ServiceIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_MdAutoId_ServiceIdRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_MdAutoId_ServiceIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_MdAutoId_ServiceIdRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_MdAutoId_ServiceIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_MdAutoId_ServiceIdRange) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_MdAutoId_ServiceIdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_MdAutoId_ServiceIdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_MdAutoId_ServiceIdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_MdAutoId_ServiceIdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_MdAutoId_ServiceIdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_MdAutoId_ServiceIdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_MdAutoId_ServiceIdRange.
func (*NokiaConf_Configure_Service_MdAutoId_ServiceIdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Mrp represents the /nokia-conf/configure/service/mrp YANG schema element.
type NokiaConf_Configure_Service_Mrp struct {
	Policy map[string]*NokiaConf_Configure_Service_Mrp_Policy `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Mrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Mrp) IsYANGGoStruct() {}

// NewPolicy creates a new entry in the Policy list of the
// NokiaConf_Configure_Service_Mrp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Mrp) NewPolicy(PolicyName string) (*NokiaConf_Configure_Service_Mrp_Policy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*NokiaConf_Configure_Service_Mrp_Policy)
	}

	key := PolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policy", key)
	}

	t.Policy[key] = &NokiaConf_Configure_Service_Mrp_Policy{
		PolicyName: &PolicyName,
	}

	return t.Policy[key], nil
}

// RenamePolicy renames an entry in the list Policy within
// the NokiaConf_Configure_Service_Mrp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Mrp) RenamePolicy(oldK, newK string) error {
	if _, ok := t.Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Policy", newK)
	}

	e, ok := t.Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policy", oldK)
	}
	e.PolicyName = &newK

	t.Policy[newK] = e
	delete(t.Policy, oldK)
	return nil
}

// GetOrCreatePolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Mrp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Mrp) GetOrCreatePolicy(PolicyName string) *NokiaConf_Configure_Service_Mrp_Policy {

	key := PolicyName

	if v, ok := t.Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicy(PolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicy retrieves the value with the specified key from
// the Policy map field of NokiaConf_Configure_Service_Mrp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Mrp) GetPolicy(PolicyName string) *NokiaConf_Configure_Service_Mrp_Policy {

	if t == nil {
		return nil
	}

	key := PolicyName

	if lm, ok := t.Policy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Mrp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Mrp) DeletePolicy(PolicyName string) {
	key := PolicyName

	delete(t.Policy, key)
}

// AppendPolicy appends the supplied NokiaConf_Configure_Service_Mrp_Policy struct to the
// list Policy of NokiaConf_Configure_Service_Mrp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Mrp_Policy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Mrp) AppendPolicy(v *NokiaConf_Configure_Service_Mrp_Policy) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicyName")
	}

	key := *v.PolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*NokiaConf_Configure_Service_Mrp_Policy)
	}

	if _, ok := t.Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Policy %v", key)
	}

	t.Policy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Mrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Mrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Mrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Mrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Mrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Mrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Mrp.
func (*NokiaConf_Configure_Service_Mrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Mrp_Policy represents the /nokia-conf/configure/service/mrp/policy YANG schema element.
type NokiaConf_Configure_Service_Mrp_Policy struct {
	ApplyGroups        []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultAction      E_NokiaTypesServices_MrpPolicyDefaultAction              `path:"default-action" module:"nokia-conf"`
	Description        *string                                                  `path:"description" module:"nokia-conf"`
	Entry              map[uint32]*NokiaConf_Configure_Service_Mrp_Policy_Entry `path:"entry" module:"nokia-conf"`
	PolicyName         *string                                                  `path:"policy-name" module:"nokia-conf"`
	Scope              E_NokiaTypesServices_ItemScope                           `path:"scope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Mrp_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Mrp_Policy) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Service_Mrp_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Mrp_Policy) NewEntry(EntryId uint32) (*NokiaConf_Configure_Service_Mrp_Policy_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Service_Mrp_Policy_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Service_Mrp_Policy_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Service_Mrp_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Mrp_Policy) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Mrp_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Mrp_Policy) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Service_Mrp_Policy_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Service_Mrp_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Mrp_Policy) GetEntry(EntryId uint32) *NokiaConf_Configure_Service_Mrp_Policy_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Mrp_Policy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Mrp_Policy) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Service_Mrp_Policy_Entry struct to the
// list Entry of NokiaConf_Configure_Service_Mrp_Policy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Mrp_Policy_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Mrp_Policy) AppendEntry(v *NokiaConf_Configure_Service_Mrp_Policy_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Service_Mrp_Policy_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Mrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Mrp_Policy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Mrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Mrp_Policy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_Service_Mrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Mrp_Policy) GetDefaultAction() E_NokiaTypesServices_MrpPolicyDefaultAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesServices_MrpPolicyDefaultAction_allow
	}
	return t.DefaultAction
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Mrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Mrp_Policy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Mrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Mrp_Policy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Service_Mrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Mrp_Policy) GetScope() E_NokiaTypesServices_ItemScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesServices_ItemScope_template
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Mrp_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Mrp_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesServices_MrpPolicyDefaultAction_allow
	}
	if t.Scope == 0 {
		t.Scope = NokiaTypesServices_ItemScope_template
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Mrp_Policy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Mrp_Policy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Mrp_Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Mrp_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Mrp_Policy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Mrp_Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Mrp_Policy.
func (*NokiaConf_Configure_Service_Mrp_Policy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Mrp_Policy_Entry represents the /nokia-conf/configure/service/mrp/policy/entry YANG schema element.
type NokiaConf_Configure_Service_Mrp_Policy_Entry struct {
	Action             E_NokiaTypesServices_MrpPolicyAction                `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                             `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                             `path:"entry-id" module:"nokia-conf"`
	Match              *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Mrp_Policy_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Mrp_Policy_Entry) IsYANGGoStruct() {}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry) GetOrCreateMatch() *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Service_Mrp_Policy_Entry_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Service_Mrp_Policy_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry) GetMatch() *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Service_Mrp_Policy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry) GetAction() E_NokiaTypesServices_MrpPolicyAction {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Mrp_Policy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Mrp_Policy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Mrp_Policy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Service_Mrp_Policy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Mrp_Policy_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Mrp_Policy_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Mrp_Policy_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Mrp_Policy_Entry.
func (*NokiaConf_Configure_Service_Mrp_Policy_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Mrp_Policy_Entry_Match represents the /nokia-conf/configure/service/mrp/policy/entry/match YANG schema element.
type NokiaConf_Configure_Service_Mrp_Policy_Entry_Match struct {
	Isid map[int32]*NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid `path:"isid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Mrp_Policy_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Mrp_Policy_Entry_Match) IsYANGGoStruct() {}

// NewIsid creates a new entry in the Isid list of the
// NokiaConf_Configure_Service_Mrp_Policy_Entry_Match struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match) NewIsid(Value int32) (*NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Isid == nil {
		t.Isid = make(map[int32]*NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid)
	}

	key := Value

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Isid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Isid", key)
	}

	t.Isid[key] = &NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid{
		Value: &Value,
	}

	return t.Isid[key], nil
}

// RenameIsid renames an entry in the list Isid within
// the NokiaConf_Configure_Service_Mrp_Policy_Entry_Match struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match) RenameIsid(oldK, newK int32) error {
	if _, ok := t.Isid[newK]; ok {
		return fmt.Errorf("key %v already exists in Isid", newK)
	}

	e, ok := t.Isid[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Isid", oldK)
	}
	e.Value = &newK

	t.Isid[newK] = e
	delete(t.Isid, oldK)
	return nil
}

// GetOrCreateIsid retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Mrp_Policy_Entry_Match. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match) GetOrCreateIsid(Value int32) *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid {

	key := Value

	if v, ok := t.Isid[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIsid(Value)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIsid got unexpected error: %v", err))
	}
	return v
}

// GetIsid retrieves the value with the specified key from
// the Isid map field of NokiaConf_Configure_Service_Mrp_Policy_Entry_Match. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match) GetIsid(Value int32) *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid {

	if t == nil {
		return nil
	}

	key := Value

	if lm, ok := t.Isid[key]; ok {
		return lm
	}
	return nil
}

// DeleteIsid deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Mrp_Policy_Entry_Match. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match) DeleteIsid(Value int32) {
	key := Value

	delete(t.Isid, key)
}

// AppendIsid appends the supplied NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid struct to the
// list Isid of NokiaConf_Configure_Service_Mrp_Policy_Entry_Match. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match) AppendIsid(v *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid) error {
	if v.Value == nil {
		return fmt.Errorf("invalid nil key received for Value")
	}

	key := *v.Value

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Isid == nil {
		t.Isid = make(map[int32]*NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid)
	}

	if _, ok := t.Isid[key]; ok {
		return fmt.Errorf("duplicate key for list Isid %v", key)
	}

	t.Isid[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Mrp_Policy_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Isid {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Mrp_Policy_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Mrp_Policy_Entry_Match.
func (*NokiaConf_Configure_Service_Mrp_Policy_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid represents the /nokia-conf/configure/service/mrp/policy/entry/match/isid YANG schema element.
type NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	HigherValue        *int32   `path:"higher-value" module:"nokia-conf"`
	Value              *int32   `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHigherValue retrieves the value of the leaf HigherValue from the NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HigherValue is set, it can
// safely use t.GetHigherValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HigherValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid) GetHigherValue() int32 {
	if t == nil || t.HigherValue == nil {
		return 0
	}
	return *t.HigherValue
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Value == nil {
		return nil, fmt.Errorf("nil value for key Value")
	}

	return map[string]interface{}{
		"value": *t.Value,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid.
func (*NokiaConf_Configure_Service_Mrp_Policy_Entry_Match_Isid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat represents the /nokia-conf/configure/service/nat YANG schema element.
type NokiaConf_Configure_Service_Nat struct {
	ApplyGroups         []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Classifier          map[string]*NokiaConf_Configure_Service_Nat_Classifier      `path:"classifier" module:"nokia-conf"`
	DeterministicScript *NokiaConf_Configure_Service_Nat_DeterministicScript        `path:"deterministic-script" module:"nokia-conf"`
	FirewallPolicy      map[string]*NokiaConf_Configure_Service_Nat_FirewallPolicy  `path:"firewall-policy" module:"nokia-conf"`
	MapT                *NokiaConf_Configure_Service_Nat_MapT                       `path:"map-t" module:"nokia-conf"`
	NatPolicy           map[string]*NokiaConf_Configure_Service_Nat_NatPolicy       `path:"nat-policy" module:"nokia-conf"`
	PcpServerPolicy     map[string]*NokiaConf_Configure_Service_Nat_PcpServerPolicy `path:"pcp-server-policy" module:"nokia-conf"`
	PrefixList          map[string]*NokiaConf_Configure_Service_Nat_PrefixList      `path:"prefix-list" module:"nokia-conf"`
	Syslog              *NokiaConf_Configure_Service_Nat_Syslog                     `path:"syslog" module:"nokia-conf"`
	UpNatPolicy         map[string]*NokiaConf_Configure_Service_Nat_UpNatPolicy     `path:"up-nat-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat) IsYANGGoStruct() {}

// NewClassifier creates a new entry in the Classifier list of the
// NokiaConf_Configure_Service_Nat struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Nat) NewClassifier(Name string) (*NokiaConf_Configure_Service_Nat_Classifier, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[string]*NokiaConf_Configure_Service_Nat_Classifier)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Classifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Classifier", key)
	}

	t.Classifier[key] = &NokiaConf_Configure_Service_Nat_Classifier{
		Name: &Name,
	}

	return t.Classifier[key], nil
}

// RenameClassifier renames an entry in the list Classifier within
// the NokiaConf_Configure_Service_Nat struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Nat) RenameClassifier(oldK, newK string) error {
	if _, ok := t.Classifier[newK]; ok {
		return fmt.Errorf("key %v already exists in Classifier", newK)
	}

	e, ok := t.Classifier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Classifier", oldK)
	}
	e.Name = &newK

	t.Classifier[newK] = e
	delete(t.Classifier, oldK)
	return nil
}

// GetOrCreateClassifier retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Nat) GetOrCreateClassifier(Name string) *NokiaConf_Configure_Service_Nat_Classifier {

	key := Name

	if v, ok := t.Classifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassifier(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassifier got unexpected error: %v", err))
	}
	return v
}

// GetClassifier retrieves the value with the specified key from
// the Classifier map field of NokiaConf_Configure_Service_Nat. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Nat) GetClassifier(Name string) *NokiaConf_Configure_Service_Nat_Classifier {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Classifier[key]; ok {
		return lm
	}
	return nil
}

// DeleteClassifier deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Nat) DeleteClassifier(Name string) {
	key := Name

	delete(t.Classifier, key)
}

// AppendClassifier appends the supplied NokiaConf_Configure_Service_Nat_Classifier struct to the
// list Classifier of NokiaConf_Configure_Service_Nat. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Nat_Classifier already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Nat) AppendClassifier(v *NokiaConf_Configure_Service_Nat_Classifier) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[string]*NokiaConf_Configure_Service_Nat_Classifier)
	}

	if _, ok := t.Classifier[key]; ok {
		return fmt.Errorf("duplicate key for list Classifier %v", key)
	}

	t.Classifier[key] = v
	return nil
}

// NewFirewallPolicy creates a new entry in the FirewallPolicy list of the
// NokiaConf_Configure_Service_Nat struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Nat) NewFirewallPolicy(Name string) (*NokiaConf_Configure_Service_Nat_FirewallPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FirewallPolicy == nil {
		t.FirewallPolicy = make(map[string]*NokiaConf_Configure_Service_Nat_FirewallPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FirewallPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FirewallPolicy", key)
	}

	t.FirewallPolicy[key] = &NokiaConf_Configure_Service_Nat_FirewallPolicy{
		Name: &Name,
	}

	return t.FirewallPolicy[key], nil
}

// RenameFirewallPolicy renames an entry in the list FirewallPolicy within
// the NokiaConf_Configure_Service_Nat struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Nat) RenameFirewallPolicy(oldK, newK string) error {
	if _, ok := t.FirewallPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in FirewallPolicy", newK)
	}

	e, ok := t.FirewallPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FirewallPolicy", oldK)
	}
	e.Name = &newK

	t.FirewallPolicy[newK] = e
	delete(t.FirewallPolicy, oldK)
	return nil
}

// GetOrCreateFirewallPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Nat) GetOrCreateFirewallPolicy(Name string) *NokiaConf_Configure_Service_Nat_FirewallPolicy {

	key := Name

	if v, ok := t.FirewallPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFirewallPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFirewallPolicy got unexpected error: %v", err))
	}
	return v
}

// GetFirewallPolicy retrieves the value with the specified key from
// the FirewallPolicy map field of NokiaConf_Configure_Service_Nat. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Nat) GetFirewallPolicy(Name string) *NokiaConf_Configure_Service_Nat_FirewallPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.FirewallPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteFirewallPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Nat) DeleteFirewallPolicy(Name string) {
	key := Name

	delete(t.FirewallPolicy, key)
}

// AppendFirewallPolicy appends the supplied NokiaConf_Configure_Service_Nat_FirewallPolicy struct to the
// list FirewallPolicy of NokiaConf_Configure_Service_Nat. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Nat_FirewallPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Nat) AppendFirewallPolicy(v *NokiaConf_Configure_Service_Nat_FirewallPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FirewallPolicy == nil {
		t.FirewallPolicy = make(map[string]*NokiaConf_Configure_Service_Nat_FirewallPolicy)
	}

	if _, ok := t.FirewallPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list FirewallPolicy %v", key)
	}

	t.FirewallPolicy[key] = v
	return nil
}

// NewNatPolicy creates a new entry in the NatPolicy list of the
// NokiaConf_Configure_Service_Nat struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Nat) NewNatPolicy(Name string) (*NokiaConf_Configure_Service_Nat_NatPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NatPolicy == nil {
		t.NatPolicy = make(map[string]*NokiaConf_Configure_Service_Nat_NatPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NatPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NatPolicy", key)
	}

	t.NatPolicy[key] = &NokiaConf_Configure_Service_Nat_NatPolicy{
		Name: &Name,
	}

	return t.NatPolicy[key], nil
}

// RenameNatPolicy renames an entry in the list NatPolicy within
// the NokiaConf_Configure_Service_Nat struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Nat) RenameNatPolicy(oldK, newK string) error {
	if _, ok := t.NatPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in NatPolicy", newK)
	}

	e, ok := t.NatPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NatPolicy", oldK)
	}
	e.Name = &newK

	t.NatPolicy[newK] = e
	delete(t.NatPolicy, oldK)
	return nil
}

// GetOrCreateNatPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Nat) GetOrCreateNatPolicy(Name string) *NokiaConf_Configure_Service_Nat_NatPolicy {

	key := Name

	if v, ok := t.NatPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNatPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNatPolicy got unexpected error: %v", err))
	}
	return v
}

// GetNatPolicy retrieves the value with the specified key from
// the NatPolicy map field of NokiaConf_Configure_Service_Nat. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Nat) GetNatPolicy(Name string) *NokiaConf_Configure_Service_Nat_NatPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.NatPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteNatPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Nat) DeleteNatPolicy(Name string) {
	key := Name

	delete(t.NatPolicy, key)
}

// AppendNatPolicy appends the supplied NokiaConf_Configure_Service_Nat_NatPolicy struct to the
// list NatPolicy of NokiaConf_Configure_Service_Nat. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Nat_NatPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Nat) AppendNatPolicy(v *NokiaConf_Configure_Service_Nat_NatPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NatPolicy == nil {
		t.NatPolicy = make(map[string]*NokiaConf_Configure_Service_Nat_NatPolicy)
	}

	if _, ok := t.NatPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list NatPolicy %v", key)
	}

	t.NatPolicy[key] = v
	return nil
}

// NewPcpServerPolicy creates a new entry in the PcpServerPolicy list of the
// NokiaConf_Configure_Service_Nat struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Nat) NewPcpServerPolicy(Name string) (*NokiaConf_Configure_Service_Nat_PcpServerPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PcpServerPolicy == nil {
		t.PcpServerPolicy = make(map[string]*NokiaConf_Configure_Service_Nat_PcpServerPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PcpServerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PcpServerPolicy", key)
	}

	t.PcpServerPolicy[key] = &NokiaConf_Configure_Service_Nat_PcpServerPolicy{
		Name: &Name,
	}

	return t.PcpServerPolicy[key], nil
}

// RenamePcpServerPolicy renames an entry in the list PcpServerPolicy within
// the NokiaConf_Configure_Service_Nat struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Nat) RenamePcpServerPolicy(oldK, newK string) error {
	if _, ok := t.PcpServerPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in PcpServerPolicy", newK)
	}

	e, ok := t.PcpServerPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PcpServerPolicy", oldK)
	}
	e.Name = &newK

	t.PcpServerPolicy[newK] = e
	delete(t.PcpServerPolicy, oldK)
	return nil
}

// GetOrCreatePcpServerPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Nat) GetOrCreatePcpServerPolicy(Name string) *NokiaConf_Configure_Service_Nat_PcpServerPolicy {

	key := Name

	if v, ok := t.PcpServerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPcpServerPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePcpServerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetPcpServerPolicy retrieves the value with the specified key from
// the PcpServerPolicy map field of NokiaConf_Configure_Service_Nat. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Nat) GetPcpServerPolicy(Name string) *NokiaConf_Configure_Service_Nat_PcpServerPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PcpServerPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeletePcpServerPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Nat) DeletePcpServerPolicy(Name string) {
	key := Name

	delete(t.PcpServerPolicy, key)
}

// AppendPcpServerPolicy appends the supplied NokiaConf_Configure_Service_Nat_PcpServerPolicy struct to the
// list PcpServerPolicy of NokiaConf_Configure_Service_Nat. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Nat_PcpServerPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Nat) AppendPcpServerPolicy(v *NokiaConf_Configure_Service_Nat_PcpServerPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PcpServerPolicy == nil {
		t.PcpServerPolicy = make(map[string]*NokiaConf_Configure_Service_Nat_PcpServerPolicy)
	}

	if _, ok := t.PcpServerPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list PcpServerPolicy %v", key)
	}

	t.PcpServerPolicy[key] = v
	return nil
}

// NewPrefixList creates a new entry in the PrefixList list of the
// NokiaConf_Configure_Service_Nat struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Nat) NewPrefixList(Name string) (*NokiaConf_Configure_Service_Nat_PrefixList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixList == nil {
		t.PrefixList = make(map[string]*NokiaConf_Configure_Service_Nat_PrefixList)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixList", key)
	}

	t.PrefixList[key] = &NokiaConf_Configure_Service_Nat_PrefixList{
		Name: &Name,
	}

	return t.PrefixList[key], nil
}

// RenamePrefixList renames an entry in the list PrefixList within
// the NokiaConf_Configure_Service_Nat struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Nat) RenamePrefixList(oldK, newK string) error {
	if _, ok := t.PrefixList[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixList", newK)
	}

	e, ok := t.PrefixList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixList", oldK)
	}
	e.Name = &newK

	t.PrefixList[newK] = e
	delete(t.PrefixList, oldK)
	return nil
}

// GetOrCreatePrefixList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Nat) GetOrCreatePrefixList(Name string) *NokiaConf_Configure_Service_Nat_PrefixList {

	key := Name

	if v, ok := t.PrefixList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixList(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixList got unexpected error: %v", err))
	}
	return v
}

// GetPrefixList retrieves the value with the specified key from
// the PrefixList map field of NokiaConf_Configure_Service_Nat. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Nat) GetPrefixList(Name string) *NokiaConf_Configure_Service_Nat_PrefixList {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PrefixList[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Nat) DeletePrefixList(Name string) {
	key := Name

	delete(t.PrefixList, key)
}

// AppendPrefixList appends the supplied NokiaConf_Configure_Service_Nat_PrefixList struct to the
// list PrefixList of NokiaConf_Configure_Service_Nat. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Nat_PrefixList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Nat) AppendPrefixList(v *NokiaConf_Configure_Service_Nat_PrefixList) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixList == nil {
		t.PrefixList = make(map[string]*NokiaConf_Configure_Service_Nat_PrefixList)
	}

	if _, ok := t.PrefixList[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixList %v", key)
	}

	t.PrefixList[key] = v
	return nil
}

// NewUpNatPolicy creates a new entry in the UpNatPolicy list of the
// NokiaConf_Configure_Service_Nat struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Nat) NewUpNatPolicy(Name string) (*NokiaConf_Configure_Service_Nat_UpNatPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UpNatPolicy == nil {
		t.UpNatPolicy = make(map[string]*NokiaConf_Configure_Service_Nat_UpNatPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UpNatPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UpNatPolicy", key)
	}

	t.UpNatPolicy[key] = &NokiaConf_Configure_Service_Nat_UpNatPolicy{
		Name: &Name,
	}

	return t.UpNatPolicy[key], nil
}

// RenameUpNatPolicy renames an entry in the list UpNatPolicy within
// the NokiaConf_Configure_Service_Nat struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Nat) RenameUpNatPolicy(oldK, newK string) error {
	if _, ok := t.UpNatPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in UpNatPolicy", newK)
	}

	e, ok := t.UpNatPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UpNatPolicy", oldK)
	}
	e.Name = &newK

	t.UpNatPolicy[newK] = e
	delete(t.UpNatPolicy, oldK)
	return nil
}

// GetOrCreateUpNatPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Nat) GetOrCreateUpNatPolicy(Name string) *NokiaConf_Configure_Service_Nat_UpNatPolicy {

	key := Name

	if v, ok := t.UpNatPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUpNatPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUpNatPolicy got unexpected error: %v", err))
	}
	return v
}

// GetUpNatPolicy retrieves the value with the specified key from
// the UpNatPolicy map field of NokiaConf_Configure_Service_Nat. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Nat) GetUpNatPolicy(Name string) *NokiaConf_Configure_Service_Nat_UpNatPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.UpNatPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteUpNatPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Nat) DeleteUpNatPolicy(Name string) {
	key := Name

	delete(t.UpNatPolicy, key)
}

// AppendUpNatPolicy appends the supplied NokiaConf_Configure_Service_Nat_UpNatPolicy struct to the
// list UpNatPolicy of NokiaConf_Configure_Service_Nat. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Nat_UpNatPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Nat) AppendUpNatPolicy(v *NokiaConf_Configure_Service_Nat_UpNatPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UpNatPolicy == nil {
		t.UpNatPolicy = make(map[string]*NokiaConf_Configure_Service_Nat_UpNatPolicy)
	}

	if _, ok := t.UpNatPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list UpNatPolicy %v", key)
	}

	t.UpNatPolicy[key] = v
	return nil
}

// GetOrCreateDeterministicScript retrieves the value of the DeterministicScript field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat) GetOrCreateDeterministicScript() *NokiaConf_Configure_Service_Nat_DeterministicScript {
	if t.DeterministicScript != nil {
		return t.DeterministicScript
	}
	t.DeterministicScript = &NokiaConf_Configure_Service_Nat_DeterministicScript{}
	return t.DeterministicScript
}

// GetOrCreateMapT retrieves the value of the MapT field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat) GetOrCreateMapT() *NokiaConf_Configure_Service_Nat_MapT {
	if t.MapT != nil {
		return t.MapT
	}
	t.MapT = &NokiaConf_Configure_Service_Nat_MapT{}
	return t.MapT
}

// GetOrCreateSyslog retrieves the value of the Syslog field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat) GetOrCreateSyslog() *NokiaConf_Configure_Service_Nat_Syslog {
	if t.Syslog != nil {
		return t.Syslog
	}
	t.Syslog = &NokiaConf_Configure_Service_Nat_Syslog{}
	return t.Syslog
}

// GetDeterministicScript returns the value of the DeterministicScript struct pointer
// from NokiaConf_Configure_Service_Nat. If the receiver or the field DeterministicScript is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat) GetDeterministicScript() *NokiaConf_Configure_Service_Nat_DeterministicScript {
	if t != nil && t.DeterministicScript != nil {
		return t.DeterministicScript
	}
	return nil
}

// GetMapT returns the value of the MapT struct pointer
// from NokiaConf_Configure_Service_Nat. If the receiver or the field MapT is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat) GetMapT() *NokiaConf_Configure_Service_Nat_MapT {
	if t != nil && t.MapT != nil {
		return t.MapT
	}
	return nil
}

// GetSyslog returns the value of the Syslog struct pointer
// from NokiaConf_Configure_Service_Nat. If the receiver or the field Syslog is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat) GetSyslog() *NokiaConf_Configure_Service_Nat_Syslog {
	if t != nil && t.Syslog != nil {
		return t.Syslog
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DeterministicScript.PopulateDefaults()
	t.MapT.PopulateDefaults()
	t.Syslog.PopulateDefaults()
	for _, e := range t.Classifier {
		e.PopulateDefaults()
	}
	for _, e := range t.FirewallPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.NatPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.PcpServerPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.PrefixList {
		e.PopulateDefaults()
	}
	for _, e := range t.UpNatPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat.
func (*NokiaConf_Configure_Service_Nat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_Classifier represents the /nokia-conf/configure/service/nat/classifier YANG schema element.
type NokiaConf_Configure_Service_Nat_Classifier struct {
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Default            *NokiaConf_Configure_Service_Nat_Classifier_Default          `path:"default" module:"nokia-conf"`
	Description        *string                                                      `path:"description" module:"nokia-conf"`
	Entry              map[uint32]*NokiaConf_Configure_Service_Nat_Classifier_Entry `path:"entry" module:"nokia-conf"`
	Name               *string                                                      `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_Classifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_Classifier) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Service_Nat_Classifier struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Nat_Classifier) NewEntry(Id uint32) (*NokiaConf_Configure_Service_Nat_Classifier_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Service_Nat_Classifier_Entry)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Service_Nat_Classifier_Entry{
		Id: &Id,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Service_Nat_Classifier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Nat_Classifier) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.Id = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat_Classifier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Nat_Classifier) GetOrCreateEntry(Id uint32) *NokiaConf_Configure_Service_Nat_Classifier_Entry {

	key := Id

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Service_Nat_Classifier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Nat_Classifier) GetEntry(Id uint32) *NokiaConf_Configure_Service_Nat_Classifier_Entry {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat_Classifier. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Nat_Classifier) DeleteEntry(Id uint32) {
	key := Id

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Service_Nat_Classifier_Entry struct to the
// list Entry of NokiaConf_Configure_Service_Nat_Classifier. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Nat_Classifier_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Nat_Classifier) AppendEntry(v *NokiaConf_Configure_Service_Nat_Classifier_Entry) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Service_Nat_Classifier_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetOrCreateDefault retrieves the value of the Default field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_Classifier) GetOrCreateDefault() *NokiaConf_Configure_Service_Nat_Classifier_Default {
	if t.Default != nil {
		return t.Default
	}
	t.Default = &NokiaConf_Configure_Service_Nat_Classifier_Default{}
	return t.Default
}

// GetDefault returns the value of the Default struct pointer
// from NokiaConf_Configure_Service_Nat_Classifier. If the receiver or the field Default is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_Classifier) GetDefault() *NokiaConf_Configure_Service_Nat_Classifier_Default {
	if t != nil && t.Default != nil {
		return t.Default
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Nat_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Nat_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Nat_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Nat_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_Classifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_Classifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Default.PopulateDefaults()
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Nat_Classifier struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Nat_Classifier) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Classifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_Classifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Classifier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_Classifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_Classifier.
func (*NokiaConf_Configure_Service_Nat_Classifier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_Classifier_Default represents the /nokia-conf/configure/service/nat/classifier/default YANG schema element.
type NokiaConf_Configure_Service_Nat_Classifier_Default struct {
	Action        *NokiaConf_Configure_Service_Nat_Classifier_Default_Action `path:"action" module:"nokia-conf"`
	DnatIpAddress *string                                                    `path:"dnat-ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_Classifier_Default implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_Classifier_Default) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default) GetOrCreateAction() *NokiaConf_Configure_Service_Nat_Classifier_Default_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Service_Nat_Classifier_Default_Action{}
	return t.Action
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Service_Nat_Classifier_Default. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default) GetAction() *NokiaConf_Configure_Service_Nat_Classifier_Default_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetDnatIpAddress retrieves the value of the leaf DnatIpAddress from the NokiaConf_Configure_Service_Nat_Classifier_Default
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnatIpAddress is set, it can
// safely use t.GetDnatIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnatIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default) GetDnatIpAddress() string {
	if t == nil || t.DnatIpAddress == nil {
		return ""
	}
	return *t.DnatIpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_Classifier_Default
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_Classifier_Default"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_Classifier_Default.
func (*NokiaConf_Configure_Service_Nat_Classifier_Default) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_Classifier_Default_Action represents the /nokia-conf/configure/service/nat/classifier/default/action YANG schema element.
type NokiaConf_Configure_Service_Nat_Classifier_Default_Action struct {
	DestinationNat *NokiaConf_Configure_Service_Nat_Classifier_Default_Action_DestinationNat `path:"destination-nat" module:"nokia-conf" yangPresence:"true"`
	Dnat           YANGEmpty                                                                 `path:"dnat" module:"nokia-conf"`
	DnatIpAddress  *string                                                                   `path:"dnat-ip-address" module:"nokia-conf"`
	Forward        YANGEmpty                                                                 `path:"forward" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_Classifier_Default_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_Classifier_Default_Action) IsYANGGoStruct() {}

// GetOrCreateDestinationNat retrieves the value of the DestinationNat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default_Action) GetOrCreateDestinationNat() *NokiaConf_Configure_Service_Nat_Classifier_Default_Action_DestinationNat {
	if t.DestinationNat != nil {
		return t.DestinationNat
	}
	t.DestinationNat = &NokiaConf_Configure_Service_Nat_Classifier_Default_Action_DestinationNat{}
	return t.DestinationNat
}

// GetDestinationNat returns the value of the DestinationNat struct pointer
// from NokiaConf_Configure_Service_Nat_Classifier_Default_Action. If the receiver or the field DestinationNat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default_Action) GetDestinationNat() *NokiaConf_Configure_Service_Nat_Classifier_Default_Action_DestinationNat {
	if t != nil && t.DestinationNat != nil {
		return t.DestinationNat
	}
	return nil
}

// GetDnat retrieves the value of the leaf Dnat from the NokiaConf_Configure_Service_Nat_Classifier_Default_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dnat is set, it can
// safely use t.GetDnat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dnat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default_Action) GetDnat() YANGEmpty {
	if t == nil || t.Dnat == false {
		return false
	}
	return t.Dnat
}

// GetDnatIpAddress retrieves the value of the leaf DnatIpAddress from the NokiaConf_Configure_Service_Nat_Classifier_Default_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnatIpAddress is set, it can
// safely use t.GetDnatIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnatIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default_Action) GetDnatIpAddress() string {
	if t == nil || t.DnatIpAddress == nil {
		return ""
	}
	return *t.DnatIpAddress
}

// GetForward retrieves the value of the leaf Forward from the NokiaConf_Configure_Service_Nat_Classifier_Default_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Forward is set, it can
// safely use t.GetForward() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Forward == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default_Action) GetForward() YANGEmpty {
	if t == nil || t.Forward == false {
		return false
	}
	return t.Forward
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_Classifier_Default_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DestinationNat.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_Classifier_Default_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_Classifier_Default_Action.
func (*NokiaConf_Configure_Service_Nat_Classifier_Default_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_Classifier_Default_Action_DestinationNat represents the /nokia-conf/configure/service/nat/classifier/default/action/destination-nat YANG schema element.
type NokiaConf_Configure_Service_Nat_Classifier_Default_Action_DestinationNat struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_Classifier_Default_Action_DestinationNat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_Classifier_Default_Action_DestinationNat) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_Nat_Classifier_Default_Action_DestinationNat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default_Action_DestinationNat) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_Classifier_Default_Action_DestinationNat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default_Action_DestinationNat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default_Action_DestinationNat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_Classifier_Default_Action_DestinationNat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default_Action_DestinationNat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Default_Action_DestinationNat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_Classifier_Default_Action_DestinationNat.
func (*NokiaConf_Configure_Service_Nat_Classifier_Default_Action_DestinationNat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_Classifier_Entry represents the /nokia-conf/configure/service/nat/classifier/entry YANG schema element.
type NokiaConf_Configure_Service_Nat_Classifier_Entry struct {
	Action             *NokiaConf_Configure_Service_Nat_Classifier_Entry_Action `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                  `path:"description" module:"nokia-conf"`
	Id                 *uint32                                                  `path:"id" module:"nokia-conf"`
	Match              *NokiaConf_Configure_Service_Nat_Classifier_Entry_Match  `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_Classifier_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_Classifier_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry) GetOrCreateAction() *NokiaConf_Configure_Service_Nat_Classifier_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Service_Nat_Classifier_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry) GetOrCreateMatch() *NokiaConf_Configure_Service_Nat_Classifier_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Service_Nat_Classifier_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Service_Nat_Classifier_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry) GetAction() *NokiaConf_Configure_Service_Nat_Classifier_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Service_Nat_Classifier_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry) GetMatch() *NokiaConf_Configure_Service_Nat_Classifier_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Nat_Classifier_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Nat_Classifier_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Nat_Classifier_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Nat_Classifier_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_Classifier_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Nat_Classifier_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_Classifier_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_Classifier_Entry.
func (*NokiaConf_Configure_Service_Nat_Classifier_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_Classifier_Entry_Action represents the /nokia-conf/configure/service/nat/classifier/entry/action YANG schema element.
type NokiaConf_Configure_Service_Nat_Classifier_Entry_Action struct {
	DestinationNat *NokiaConf_Configure_Service_Nat_Classifier_Entry_Action_DestinationNat `path:"destination-nat" module:"nokia-conf" yangPresence:"true"`
	Dnat           YANGEmpty                                                               `path:"dnat" module:"nokia-conf"`
	DnatIpAddress  *string                                                                 `path:"dnat-ip-address" module:"nokia-conf"`
	Forward        YANGEmpty                                                               `path:"forward" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_Classifier_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_Classifier_Entry_Action) IsYANGGoStruct() {}

// GetOrCreateDestinationNat retrieves the value of the DestinationNat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Action) GetOrCreateDestinationNat() *NokiaConf_Configure_Service_Nat_Classifier_Entry_Action_DestinationNat {
	if t.DestinationNat != nil {
		return t.DestinationNat
	}
	t.DestinationNat = &NokiaConf_Configure_Service_Nat_Classifier_Entry_Action_DestinationNat{}
	return t.DestinationNat
}

// GetDestinationNat returns the value of the DestinationNat struct pointer
// from NokiaConf_Configure_Service_Nat_Classifier_Entry_Action. If the receiver or the field DestinationNat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Action) GetDestinationNat() *NokiaConf_Configure_Service_Nat_Classifier_Entry_Action_DestinationNat {
	if t != nil && t.DestinationNat != nil {
		return t.DestinationNat
	}
	return nil
}

// GetDnat retrieves the value of the leaf Dnat from the NokiaConf_Configure_Service_Nat_Classifier_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dnat is set, it can
// safely use t.GetDnat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dnat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Action) GetDnat() YANGEmpty {
	if t == nil || t.Dnat == false {
		return false
	}
	return t.Dnat
}

// GetDnatIpAddress retrieves the value of the leaf DnatIpAddress from the NokiaConf_Configure_Service_Nat_Classifier_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnatIpAddress is set, it can
// safely use t.GetDnatIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnatIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Action) GetDnatIpAddress() string {
	if t == nil || t.DnatIpAddress == nil {
		return ""
	}
	return *t.DnatIpAddress
}

// GetForward retrieves the value of the leaf Forward from the NokiaConf_Configure_Service_Nat_Classifier_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Forward is set, it can
// safely use t.GetForward() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Forward == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Action) GetForward() YANGEmpty {
	if t == nil || t.Forward == false {
		return false
	}
	return t.Forward
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_Classifier_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DestinationNat.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_Classifier_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_Classifier_Entry_Action.
func (*NokiaConf_Configure_Service_Nat_Classifier_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_Classifier_Entry_Action_DestinationNat represents the /nokia-conf/configure/service/nat/classifier/entry/action/destination-nat YANG schema element.
type NokiaConf_Configure_Service_Nat_Classifier_Entry_Action_DestinationNat struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_Classifier_Entry_Action_DestinationNat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_Classifier_Entry_Action_DestinationNat) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_Nat_Classifier_Entry_Action_DestinationNat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Action_DestinationNat) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_Classifier_Entry_Action_DestinationNat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Action_DestinationNat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Action_DestinationNat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_Classifier_Entry_Action_DestinationNat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Action_DestinationNat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Action_DestinationNat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_Classifier_Entry_Action_DestinationNat.
func (*NokiaConf_Configure_Service_Nat_Classifier_Entry_Action_DestinationNat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_Classifier_Entry_Match represents the /nokia-conf/configure/service/nat/classifier/entry/match YANG schema element.
type NokiaConf_Configure_Service_Nat_Classifier_Entry_Match struct {
	DstPortRange     *NokiaConf_Configure_Service_Nat_Classifier_Entry_Match_DstPortRange `path:"dst-port-range" module:"nokia-conf"`
	ForeignIpAddress *string                                                              `path:"foreign-ip-address" module:"nokia-conf"`
	Protocol         E_NokiaTypesNat_IpProtocolTcpOrUdp                                   `path:"protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_Classifier_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_Classifier_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstPortRange retrieves the value of the DstPortRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Match) GetOrCreateDstPortRange() *NokiaConf_Configure_Service_Nat_Classifier_Entry_Match_DstPortRange {
	if t.DstPortRange != nil {
		return t.DstPortRange
	}
	t.DstPortRange = &NokiaConf_Configure_Service_Nat_Classifier_Entry_Match_DstPortRange{}
	return t.DstPortRange
}

// GetDstPortRange returns the value of the DstPortRange struct pointer
// from NokiaConf_Configure_Service_Nat_Classifier_Entry_Match. If the receiver or the field DstPortRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Match) GetDstPortRange() *NokiaConf_Configure_Service_Nat_Classifier_Entry_Match_DstPortRange {
	if t != nil && t.DstPortRange != nil {
		return t.DstPortRange
	}
	return nil
}

// GetForeignIpAddress retrieves the value of the leaf ForeignIpAddress from the NokiaConf_Configure_Service_Nat_Classifier_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForeignIpAddress is set, it can
// safely use t.GetForeignIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForeignIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Match) GetForeignIpAddress() string {
	if t == nil || t.ForeignIpAddress == nil {
		return ""
	}
	return *t.ForeignIpAddress
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Service_Nat_Classifier_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Match) GetProtocol() E_NokiaTypesNat_IpProtocolTcpOrUdp {
	if t == nil || t.Protocol == 0 {
		return NokiaTypesNat_IpProtocolTcpOrUdp_udp
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_Classifier_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Protocol == 0 {
		t.Protocol = NokiaTypesNat_IpProtocolTcpOrUdp_udp
	}
	t.DstPortRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_Classifier_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_Classifier_Entry_Match.
func (*NokiaConf_Configure_Service_Nat_Classifier_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_Classifier_Entry_Match_DstPortRange represents the /nokia-conf/configure/service/nat/classifier/entry/match/dst-port-range YANG schema element.
type NokiaConf_Configure_Service_Nat_Classifier_Entry_Match_DstPortRange struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_Classifier_Entry_Match_DstPortRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_Classifier_Entry_Match_DstPortRange) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_Nat_Classifier_Entry_Match_DstPortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Match_DstPortRange) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 65535
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_Nat_Classifier_Entry_Match_DstPortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Match_DstPortRange) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_Classifier_Entry_Match_DstPortRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Match_DstPortRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v int32 = 65535
		t.End = &v
	}
	if t.Start == nil {
		var v int32 = 0
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Match_DstPortRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_Classifier_Entry_Match_DstPortRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Match_DstPortRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_Classifier_Entry_Match_DstPortRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_Classifier_Entry_Match_DstPortRange.
func (*NokiaConf_Configure_Service_Nat_Classifier_Entry_Match_DstPortRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_DeterministicScript represents the /nokia-conf/configure/service/nat/deterministic-script YANG schema element.
type NokiaConf_Configure_Service_Nat_DeterministicScript struct {
	Location *string `path:"location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_DeterministicScript implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_DeterministicScript) IsYANGGoStruct() {}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_Service_Nat_DeterministicScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_DeterministicScript) GetLocation() string {
	if t == nil || t.Location == nil {
		return ""
	}
	return *t.Location
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_DeterministicScript
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_DeterministicScript) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_DeterministicScript) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_DeterministicScript"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_DeterministicScript) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_DeterministicScript) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_DeterministicScript.
func (*NokiaConf_Configure_Service_Nat_DeterministicScript) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_FirewallPolicy represents the /nokia-conf/configure/service/nat/firewall-policy YANG schema element.
type NokiaConf_Configure_Service_Nat_FirewallPolicy struct {
	Alg                *NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg              `path:"alg" module:"nokia-conf"`
	ApplyGroups        []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                          `path:"description" module:"nokia-conf"`
	Domain             *NokiaConf_Configure_Service_Nat_FirewallPolicy_Domain           `path:"domain" module:"nokia-conf"`
	Filtering          E_NokiaTypesNat_Filtering                                        `path:"filtering" module:"nokia-conf"`
	L2Outside          YANGEmpty                                                        `path:"l2-outside" module:"nokia-conf"`
	Name               *string                                                          `path:"name" module:"nokia-conf"`
	PortLimits         *NokiaConf_Configure_Service_Nat_FirewallPolicy_PortLimits       `path:"port-limits" module:"nokia-conf"`
	PrioritySessions   *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions `path:"priority-sessions" module:"nokia-conf"`
	SessionLimits      *NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits    `path:"session-limits" module:"nokia-conf"`
	Tcp                *NokiaConf_Configure_Service_Nat_FirewallPolicy_Tcp              `path:"tcp" module:"nokia-conf"`
	Timeouts           *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts         `path:"timeouts" module:"nokia-conf"`
	Udp                *NokiaConf_Configure_Service_Nat_FirewallPolicy_Udp              `path:"udp" module:"nokia-conf"`
	UnknownProtocols   *NokiaConf_Configure_Service_Nat_FirewallPolicy_UnknownProtocols `path:"unknown-protocols" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_FirewallPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy) IsYANGGoStruct() {}

// GetOrCreateAlg retrieves the value of the Alg field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetOrCreateAlg() *NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg {
	if t.Alg != nil {
		return t.Alg
	}
	t.Alg = &NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg{}
	return t.Alg
}

// GetOrCreateDomain retrieves the value of the Domain field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetOrCreateDomain() *NokiaConf_Configure_Service_Nat_FirewallPolicy_Domain {
	if t.Domain != nil {
		return t.Domain
	}
	t.Domain = &NokiaConf_Configure_Service_Nat_FirewallPolicy_Domain{}
	return t.Domain
}

// GetOrCreatePortLimits retrieves the value of the PortLimits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetOrCreatePortLimits() *NokiaConf_Configure_Service_Nat_FirewallPolicy_PortLimits {
	if t.PortLimits != nil {
		return t.PortLimits
	}
	t.PortLimits = &NokiaConf_Configure_Service_Nat_FirewallPolicy_PortLimits{}
	return t.PortLimits
}

// GetOrCreatePrioritySessions retrieves the value of the PrioritySessions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetOrCreatePrioritySessions() *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions {
	if t.PrioritySessions != nil {
		return t.PrioritySessions
	}
	t.PrioritySessions = &NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions{}
	return t.PrioritySessions
}

// GetOrCreateSessionLimits retrieves the value of the SessionLimits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetOrCreateSessionLimits() *NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits {
	if t.SessionLimits != nil {
		return t.SessionLimits
	}
	t.SessionLimits = &NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits{}
	return t.SessionLimits
}

// GetOrCreateTcp retrieves the value of the Tcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetOrCreateTcp() *NokiaConf_Configure_Service_Nat_FirewallPolicy_Tcp {
	if t.Tcp != nil {
		return t.Tcp
	}
	t.Tcp = &NokiaConf_Configure_Service_Nat_FirewallPolicy_Tcp{}
	return t.Tcp
}

// GetOrCreateTimeouts retrieves the value of the Timeouts field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetOrCreateTimeouts() *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts {
	if t.Timeouts != nil {
		return t.Timeouts
	}
	t.Timeouts = &NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts{}
	return t.Timeouts
}

// GetOrCreateUdp retrieves the value of the Udp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetOrCreateUdp() *NokiaConf_Configure_Service_Nat_FirewallPolicy_Udp {
	if t.Udp != nil {
		return t.Udp
	}
	t.Udp = &NokiaConf_Configure_Service_Nat_FirewallPolicy_Udp{}
	return t.Udp
}

// GetOrCreateUnknownProtocols retrieves the value of the UnknownProtocols field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetOrCreateUnknownProtocols() *NokiaConf_Configure_Service_Nat_FirewallPolicy_UnknownProtocols {
	if t.UnknownProtocols != nil {
		return t.UnknownProtocols
	}
	t.UnknownProtocols = &NokiaConf_Configure_Service_Nat_FirewallPolicy_UnknownProtocols{}
	return t.UnknownProtocols
}

// GetAlg returns the value of the Alg struct pointer
// from NokiaConf_Configure_Service_Nat_FirewallPolicy. If the receiver or the field Alg is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetAlg() *NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg {
	if t != nil && t.Alg != nil {
		return t.Alg
	}
	return nil
}

// GetDomain returns the value of the Domain struct pointer
// from NokiaConf_Configure_Service_Nat_FirewallPolicy. If the receiver or the field Domain is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetDomain() *NokiaConf_Configure_Service_Nat_FirewallPolicy_Domain {
	if t != nil && t.Domain != nil {
		return t.Domain
	}
	return nil
}

// GetPortLimits returns the value of the PortLimits struct pointer
// from NokiaConf_Configure_Service_Nat_FirewallPolicy. If the receiver or the field PortLimits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetPortLimits() *NokiaConf_Configure_Service_Nat_FirewallPolicy_PortLimits {
	if t != nil && t.PortLimits != nil {
		return t.PortLimits
	}
	return nil
}

// GetPrioritySessions returns the value of the PrioritySessions struct pointer
// from NokiaConf_Configure_Service_Nat_FirewallPolicy. If the receiver or the field PrioritySessions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetPrioritySessions() *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions {
	if t != nil && t.PrioritySessions != nil {
		return t.PrioritySessions
	}
	return nil
}

// GetSessionLimits returns the value of the SessionLimits struct pointer
// from NokiaConf_Configure_Service_Nat_FirewallPolicy. If the receiver or the field SessionLimits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetSessionLimits() *NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits {
	if t != nil && t.SessionLimits != nil {
		return t.SessionLimits
	}
	return nil
}

// GetTcp returns the value of the Tcp struct pointer
// from NokiaConf_Configure_Service_Nat_FirewallPolicy. If the receiver or the field Tcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetTcp() *NokiaConf_Configure_Service_Nat_FirewallPolicy_Tcp {
	if t != nil && t.Tcp != nil {
		return t.Tcp
	}
	return nil
}

// GetTimeouts returns the value of the Timeouts struct pointer
// from NokiaConf_Configure_Service_Nat_FirewallPolicy. If the receiver or the field Timeouts is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetTimeouts() *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts {
	if t != nil && t.Timeouts != nil {
		return t.Timeouts
	}
	return nil
}

// GetUdp returns the value of the Udp struct pointer
// from NokiaConf_Configure_Service_Nat_FirewallPolicy. If the receiver or the field Udp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetUdp() *NokiaConf_Configure_Service_Nat_FirewallPolicy_Udp {
	if t != nil && t.Udp != nil {
		return t.Udp
	}
	return nil
}

// GetUnknownProtocols returns the value of the UnknownProtocols struct pointer
// from NokiaConf_Configure_Service_Nat_FirewallPolicy. If the receiver or the field UnknownProtocols is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetUnknownProtocols() *NokiaConf_Configure_Service_Nat_FirewallPolicy_UnknownProtocols {
	if t != nil && t.UnknownProtocols != nil {
		return t.UnknownProtocols
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Nat_FirewallPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Nat_FirewallPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Nat_FirewallPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFiltering retrieves the value of the leaf Filtering from the NokiaConf_Configure_Service_Nat_FirewallPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Filtering is set, it can
// safely use t.GetFiltering() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Filtering == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetFiltering() E_NokiaTypesNat_Filtering {
	if t == nil || t.Filtering == 0 {
		return NokiaTypesNat_Filtering_endpoint_independent
	}
	return t.Filtering
}

// GetL2Outside retrieves the value of the leaf L2Outside from the NokiaConf_Configure_Service_Nat_FirewallPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Outside is set, it can
// safely use t.GetL2Outside() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Outside == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetL2Outside() YANGEmpty {
	if t == nil || t.L2Outside == false {
		return false
	}
	return t.L2Outside
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Nat_FirewallPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_FirewallPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Filtering == 0 {
		t.Filtering = NokiaTypesNat_Filtering_endpoint_independent
	}
	t.Alg.PopulateDefaults()
	t.Domain.PopulateDefaults()
	t.PortLimits.PopulateDefaults()
	t.PrioritySessions.PopulateDefaults()
	t.SessionLimits.PopulateDefaults()
	t.Tcp.PopulateDefaults()
	t.Timeouts.PopulateDefaults()
	t.Udp.PopulateDefaults()
	t.UnknownProtocols.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Nat_FirewallPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_FirewallPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_FirewallPolicy.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg represents the /nokia-conf/configure/service/nat/firewall-policy/alg YANG schema element.
type NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg struct {
	Ftp  *bool `path:"ftp" module:"nokia-conf"`
	Rtsp *bool `path:"rtsp" module:"nokia-conf"`
	Sip  *bool `path:"sip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg) IsYANGGoStruct() {}

// GetFtp retrieves the value of the leaf Ftp from the NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ftp is set, it can
// safely use t.GetFtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ftp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg) GetFtp() bool {
	if t == nil || t.Ftp == nil {
		return true
	}
	return *t.Ftp
}

// GetRtsp retrieves the value of the leaf Rtsp from the NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rtsp is set, it can
// safely use t.GetRtsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rtsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg) GetRtsp() bool {
	if t == nil || t.Rtsp == nil {
		return false
	}
	return *t.Rtsp
}

// GetSip retrieves the value of the leaf Sip from the NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sip is set, it can
// safely use t.GetSip() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg) GetSip() bool {
	if t == nil || t.Sip == nil {
		return false
	}
	return *t.Sip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ftp == nil {
		var v bool = true
		t.Ftp = &v
	}
	if t.Rtsp == nil {
		var v bool = false
		t.Rtsp = &v
	}
	if t.Sip == nil {
		var v bool = false
		t.Sip = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_Alg) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_FirewallPolicy_Domain represents the /nokia-conf/configure/service/nat/firewall-policy/domain YANG schema element.
type NokiaConf_Configure_Service_Nat_FirewallPolicy_Domain struct {
	Name           *string `path:"name" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_FirewallPolicy_Domain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_Domain) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Nat_FirewallPolicy_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Domain) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_Nat_FirewallPolicy_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Domain) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_FirewallPolicy_Domain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Domain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Domain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_FirewallPolicy_Domain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Domain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Domain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_FirewallPolicy_Domain.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_Domain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_FirewallPolicy_PortLimits represents the /nokia-conf/configure/service/nat/firewall-policy/port-limits YANG schema element.
type NokiaConf_Configure_Service_Nat_FirewallPolicy_PortLimits struct {
	Forwarding *uint16 `path:"forwarding" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_FirewallPolicy_PortLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_PortLimits) IsYANGGoStruct() {}

// GetForwarding retrieves the value of the leaf Forwarding from the NokiaConf_Configure_Service_Nat_FirewallPolicy_PortLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Forwarding is set, it can
// safely use t.GetForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Forwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PortLimits) GetForwarding() uint16 {
	if t == nil || t.Forwarding == nil {
		return 0
	}
	return *t.Forwarding
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_FirewallPolicy_PortLimits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PortLimits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PortLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_FirewallPolicy_PortLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PortLimits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PortLimits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_FirewallPolicy_PortLimits.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_PortLimits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions represents the /nokia-conf/configure/service/nat/firewall-policy/priority-sessions YANG schema element.
type NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions struct {
	Fc *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc `path:"fc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions) IsYANGGoStruct() {}

// GetOrCreateFc retrieves the value of the Fc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions) GetOrCreateFc() *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc {
	if t.Fc != nil {
		return t.Fc
	}
	t.Fc = &NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc{}
	return t.Fc
}

// GetFc returns the value of the Fc struct pointer
// from NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions. If the receiver or the field Fc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions) GetFc() *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc {
	if t != nil && t.Fc != nil {
		return t.Fc
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Fc.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc represents the /nokia-conf/configure/service/nat/firewall-policy/priority-sessions/fc YANG schema element.
type NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc struct {
	Af *bool `path:"af" module:"nokia-conf"`
	Be *bool `path:"be" module:"nokia-conf"`
	Ef *bool `path:"ef" module:"nokia-conf"`
	H1 *bool `path:"h1" module:"nokia-conf"`
	H2 *bool `path:"h2" module:"nokia-conf"`
	L1 *bool `path:"l1" module:"nokia-conf"`
	L2 *bool `path:"l2" module:"nokia-conf"`
	Nc *bool `path:"nc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc) IsYANGGoStruct() {}

// GetAf retrieves the value of the leaf Af from the NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Af is set, it can
// safely use t.GetAf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Af == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc) GetAf() bool {
	if t == nil || t.Af == nil {
		return false
	}
	return *t.Af
}

// GetBe retrieves the value of the leaf Be from the NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Be is set, it can
// safely use t.GetBe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Be == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc) GetBe() bool {
	if t == nil || t.Be == nil {
		return false
	}
	return *t.Be
}

// GetEf retrieves the value of the leaf Ef from the NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ef is set, it can
// safely use t.GetEf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ef == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc) GetEf() bool {
	if t == nil || t.Ef == nil {
		return false
	}
	return *t.Ef
}

// GetH1 retrieves the value of the leaf H1 from the NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if H1 is set, it can
// safely use t.GetH1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.H1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc) GetH1() bool {
	if t == nil || t.H1 == nil {
		return false
	}
	return *t.H1
}

// GetH2 retrieves the value of the leaf H2 from the NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if H2 is set, it can
// safely use t.GetH2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.H2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc) GetH2() bool {
	if t == nil || t.H2 == nil {
		return false
	}
	return *t.H2
}

// GetL1 retrieves the value of the leaf L1 from the NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L1 is set, it can
// safely use t.GetL1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc) GetL1() bool {
	if t == nil || t.L1 == nil {
		return false
	}
	return *t.L1
}

// GetL2 retrieves the value of the leaf L2 from the NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2 is set, it can
// safely use t.GetL2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc) GetL2() bool {
	if t == nil || t.L2 == nil {
		return false
	}
	return *t.L2
}

// GetNc retrieves the value of the leaf Nc from the NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Nc is set, it can
// safely use t.GetNc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Nc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc) GetNc() bool {
	if t == nil || t.Nc == nil {
		return false
	}
	return *t.Nc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Af == nil {
		var v bool = false
		t.Af = &v
	}
	if t.Be == nil {
		var v bool = false
		t.Be = &v
	}
	if t.Ef == nil {
		var v bool = false
		t.Ef = &v
	}
	if t.H1 == nil {
		var v bool = false
		t.H1 = &v
	}
	if t.H2 == nil {
		var v bool = false
		t.H2 = &v
	}
	if t.L1 == nil {
		var v bool = false
		t.L1 = &v
	}
	if t.L2 == nil {
		var v bool = false
		t.L2 = &v
	}
	if t.Nc == nil {
		var v bool = false
		t.Nc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_PrioritySessions_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits represents the /nokia-conf/configure/service/nat/firewall-policy/session-limits YANG schema element.
type NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits struct {
	Max        *uint16                                                                  `path:"max" module:"nokia-conf"`
	Reserved   *uint16                                                                  `path:"reserved" module:"nokia-conf"`
	Watermarks *NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits_Watermarks `path:"watermarks" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits) IsYANGGoStruct() {}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits) GetOrCreateWatermarks() *NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits_Watermarks{}
	return t.Watermarks
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits) GetWatermarks() *NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits) GetMax() uint16 {
	if t == nil || t.Max == nil {
		return 65535
	}
	return *t.Max
}

// GetReserved retrieves the value of the leaf Reserved from the NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reserved is set, it can
// safely use t.GetReserved() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reserved == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits) GetReserved() uint16 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Max == nil {
		var v uint16 = 65535
		t.Max = &v
	}
	t.Watermarks.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits_Watermarks represents the /nokia-conf/configure/service/nat/firewall-policy/session-limits/watermarks YANG schema element.
type NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits_Watermarks) IsYANGGoStruct() {}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits_Watermarks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits_Watermarks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits_Watermarks.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_SessionLimits_Watermarks) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_FirewallPolicy_Tcp represents the /nokia-conf/configure/service/nat/firewall-policy/tcp YANG schema element.
type NokiaConf_Configure_Service_Nat_FirewallPolicy_Tcp struct {
	MssAdjust *uint32 `path:"mss-adjust" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_FirewallPolicy_Tcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_Tcp) IsYANGGoStruct() {}

// GetMssAdjust retrieves the value of the leaf MssAdjust from the NokiaConf_Configure_Service_Nat_FirewallPolicy_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MssAdjust is set, it can
// safely use t.GetMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Tcp) GetMssAdjust() uint32 {
	if t == nil || t.MssAdjust == nil {
		return 0
	}
	return *t.MssAdjust
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_FirewallPolicy_Tcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Tcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Tcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_FirewallPolicy_Tcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Tcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Tcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_FirewallPolicy_Tcp.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_Tcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts represents the /nokia-conf/configure/service/nat/firewall-policy/timeouts YANG schema element.
type NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts struct {
	Icmp6Query      *uint32                                                      `path:"icmp6-query" module:"nokia-conf"`
	Sip             *uint32                                                      `path:"sip" module:"nokia-conf"`
	Tcp             *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp `path:"tcp" module:"nokia-conf"`
	Udp             *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp `path:"udp" module:"nokia-conf"`
	UnknownProtocol *uint32                                                      `path:"unknown-protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts) IsYANGGoStruct() {}

// GetOrCreateTcp retrieves the value of the Tcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts) GetOrCreateTcp() *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp {
	if t.Tcp != nil {
		return t.Tcp
	}
	t.Tcp = &NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp{}
	return t.Tcp
}

// GetOrCreateUdp retrieves the value of the Udp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts) GetOrCreateUdp() *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp {
	if t.Udp != nil {
		return t.Udp
	}
	t.Udp = &NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp{}
	return t.Udp
}

// GetTcp returns the value of the Tcp struct pointer
// from NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts. If the receiver or the field Tcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts) GetTcp() *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp {
	if t != nil && t.Tcp != nil {
		return t.Tcp
	}
	return nil
}

// GetUdp returns the value of the Udp struct pointer
// from NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts. If the receiver or the field Udp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts) GetUdp() *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp {
	if t != nil && t.Udp != nil {
		return t.Udp
	}
	return nil
}

// GetIcmp6Query retrieves the value of the leaf Icmp6Query from the NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Icmp6Query is set, it can
// safely use t.GetIcmp6Query() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Icmp6Query == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts) GetIcmp6Query() uint32 {
	if t == nil || t.Icmp6Query == nil {
		return 60
	}
	return *t.Icmp6Query
}

// GetSip retrieves the value of the leaf Sip from the NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sip is set, it can
// safely use t.GetSip() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts) GetSip() uint32 {
	if t == nil || t.Sip == nil {
		return 120
	}
	return *t.Sip
}

// GetUnknownProtocol retrieves the value of the leaf UnknownProtocol from the NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownProtocol is set, it can
// safely use t.GetUnknownProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownProtocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts) GetUnknownProtocol() uint32 {
	if t == nil || t.UnknownProtocol == nil {
		return 300
	}
	return *t.UnknownProtocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Icmp6Query == nil {
		var v uint32 = 60
		t.Icmp6Query = &v
	}
	if t.Sip == nil {
		var v uint32 = 120
		t.Sip = &v
	}
	if t.UnknownProtocol == nil {
		var v uint32 = 300
		t.UnknownProtocol = &v
	}
	t.Tcp.PopulateDefaults()
	t.Udp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp represents the /nokia-conf/configure/service/nat/firewall-policy/timeouts/tcp YANG schema element.
type NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp struct {
	Established *uint32 `path:"established" module:"nokia-conf"`
	Rst         *uint32 `path:"rst" module:"nokia-conf"`
	Syn         *uint32 `path:"syn" module:"nokia-conf"`
	TimeWait    *uint32 `path:"time-wait" module:"nokia-conf"`
	Transitory  *uint32 `path:"transitory" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp) IsYANGGoStruct() {}

// GetEstablished retrieves the value of the leaf Established from the NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Established is set, it can
// safely use t.GetEstablished() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Established == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp) GetEstablished() uint32 {
	if t == nil || t.Established == nil {
		return 7440
	}
	return *t.Established
}

// GetRst retrieves the value of the leaf Rst from the NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rst is set, it can
// safely use t.GetRst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp) GetRst() uint32 {
	if t == nil || t.Rst == nil {
		return 0
	}
	return *t.Rst
}

// GetSyn retrieves the value of the leaf Syn from the NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syn is set, it can
// safely use t.GetSyn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp) GetSyn() uint32 {
	if t == nil || t.Syn == nil {
		return 15
	}
	return *t.Syn
}

// GetTimeWait retrieves the value of the leaf TimeWait from the NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeWait is set, it can
// safely use t.GetTimeWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp) GetTimeWait() uint32 {
	if t == nil || t.TimeWait == nil {
		return 0
	}
	return *t.TimeWait
}

// GetTransitory retrieves the value of the leaf Transitory from the NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitory is set, it can
// safely use t.GetTransitory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp) GetTransitory() uint32 {
	if t == nil || t.Transitory == nil {
		return 240
	}
	return *t.Transitory
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Established == nil {
		var v uint32 = 7440
		t.Established = &v
	}
	if t.Rst == nil {
		var v uint32 = 0
		t.Rst = &v
	}
	if t.Syn == nil {
		var v uint32 = 15
		t.Syn = &v
	}
	if t.TimeWait == nil {
		var v uint32 = 0
		t.TimeWait = &v
	}
	if t.Transitory == nil {
		var v uint32 = 240
		t.Transitory = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Tcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp represents the /nokia-conf/configure/service/nat/firewall-policy/timeouts/udp YANG schema element.
type NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp struct {
	Dns     *uint32 `path:"dns" module:"nokia-conf"`
	Initial *uint32 `path:"initial" module:"nokia-conf"`
	Normal  *uint32 `path:"normal" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp) IsYANGGoStruct() {}

// GetDns retrieves the value of the leaf Dns from the NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dns is set, it can
// safely use t.GetDns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp) GetDns() uint32 {
	if t == nil || t.Dns == nil {
		return 15
	}
	return *t.Dns
}

// GetInitial retrieves the value of the leaf Initial from the NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Initial is set, it can
// safely use t.GetInitial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Initial == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp) GetInitial() uint32 {
	if t == nil || t.Initial == nil {
		return 15
	}
	return *t.Initial
}

// GetNormal retrieves the value of the leaf Normal from the NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Normal is set, it can
// safely use t.GetNormal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Normal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp) GetNormal() uint32 {
	if t == nil || t.Normal == nil {
		return 300
	}
	return *t.Normal
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dns == nil {
		var v uint32 = 15
		t.Dns = &v
	}
	if t.Initial == nil {
		var v uint32 = 15
		t.Initial = &v
	}
	if t.Normal == nil {
		var v uint32 = 300
		t.Normal = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_Timeouts_Udp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_FirewallPolicy_Udp represents the /nokia-conf/configure/service/nat/firewall-policy/udp YANG schema element.
type NokiaConf_Configure_Service_Nat_FirewallPolicy_Udp struct {
	InboundRefresh *bool `path:"inbound-refresh" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_FirewallPolicy_Udp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_Udp) IsYANGGoStruct() {}

// GetInboundRefresh retrieves the value of the leaf InboundRefresh from the NokiaConf_Configure_Service_Nat_FirewallPolicy_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InboundRefresh is set, it can
// safely use t.GetInboundRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InboundRefresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Udp) GetInboundRefresh() bool {
	if t == nil || t.InboundRefresh == nil {
		return false
	}
	return *t.InboundRefresh
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_FirewallPolicy_Udp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Udp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InboundRefresh == nil {
		var v bool = false
		t.InboundRefresh = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Udp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_FirewallPolicy_Udp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Udp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_Udp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_FirewallPolicy_Udp.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_Udp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_FirewallPolicy_UnknownProtocols represents the /nokia-conf/configure/service/nat/firewall-policy/unknown-protocols YANG schema element.
type NokiaConf_Configure_Service_Nat_FirewallPolicy_UnknownProtocols struct {
	All      YANGEmpty `path:"all" module:"nokia-conf"`
	Protocol []uint8   `path:"protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_FirewallPolicy_UnknownProtocols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_UnknownProtocols) IsYANGGoStruct() {}

// GetAll retrieves the value of the leaf All from the NokiaConf_Configure_Service_Nat_FirewallPolicy_UnknownProtocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if All is set, it can
// safely use t.GetAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.All == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_UnknownProtocols) GetAll() YANGEmpty {
	if t == nil || t.All == false {
		return false
	}
	return t.All
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Service_Nat_FirewallPolicy_UnknownProtocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_UnknownProtocols) GetProtocol() []uint8 {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_FirewallPolicy_UnknownProtocols
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_UnknownProtocols) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_UnknownProtocols) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_FirewallPolicy_UnknownProtocols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_UnknownProtocols) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_FirewallPolicy_UnknownProtocols) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_FirewallPolicy_UnknownProtocols.
func (*NokiaConf_Configure_Service_Nat_FirewallPolicy_UnknownProtocols) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_MapT represents the /nokia-conf/configure/service/nat/map-t YANG schema element.
type NokiaConf_Configure_Service_Nat_MapT struct {
	Domain map[string]*NokiaConf_Configure_Service_Nat_MapT_Domain `path:"domain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_MapT implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_MapT) IsYANGGoStruct() {}

// NewDomain creates a new entry in the Domain list of the
// NokiaConf_Configure_Service_Nat_MapT struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Nat_MapT) NewDomain(Name string) (*NokiaConf_Configure_Service_Nat_MapT_Domain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*NokiaConf_Configure_Service_Nat_MapT_Domain)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Domain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Domain", key)
	}

	t.Domain[key] = &NokiaConf_Configure_Service_Nat_MapT_Domain{
		Name: &Name,
	}

	return t.Domain[key], nil
}

// RenameDomain renames an entry in the list Domain within
// the NokiaConf_Configure_Service_Nat_MapT struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Nat_MapT) RenameDomain(oldK, newK string) error {
	if _, ok := t.Domain[newK]; ok {
		return fmt.Errorf("key %v already exists in Domain", newK)
	}

	e, ok := t.Domain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Domain", oldK)
	}
	e.Name = &newK

	t.Domain[newK] = e
	delete(t.Domain, oldK)
	return nil
}

// GetOrCreateDomain retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat_MapT. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Nat_MapT) GetOrCreateDomain(Name string) *NokiaConf_Configure_Service_Nat_MapT_Domain {

	key := Name

	if v, ok := t.Domain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDomain(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDomain got unexpected error: %v", err))
	}
	return v
}

// GetDomain retrieves the value with the specified key from
// the Domain map field of NokiaConf_Configure_Service_Nat_MapT. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Nat_MapT) GetDomain(Name string) *NokiaConf_Configure_Service_Nat_MapT_Domain {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Domain[key]; ok {
		return lm
	}
	return nil
}

// DeleteDomain deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat_MapT. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Nat_MapT) DeleteDomain(Name string) {
	key := Name

	delete(t.Domain, key)
}

// AppendDomain appends the supplied NokiaConf_Configure_Service_Nat_MapT_Domain struct to the
// list Domain of NokiaConf_Configure_Service_Nat_MapT. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Nat_MapT_Domain already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Nat_MapT) AppendDomain(v *NokiaConf_Configure_Service_Nat_MapT_Domain) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*NokiaConf_Configure_Service_Nat_MapT_Domain)
	}

	if _, ok := t.Domain[key]; ok {
		return fmt.Errorf("duplicate key for list Domain %v", key)
	}

	t.Domain[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_MapT
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_MapT) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Domain {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_MapT) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_MapT"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_MapT) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_MapT) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_MapT.
func (*NokiaConf_Configure_Service_Nat_MapT) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_MapT_Domain represents the /nokia-conf/configure/service/nat/map-t/domain YANG schema element.
type NokiaConf_Configure_Service_Nat_MapT_Domain struct {
	AdminState         E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                             `path:"description" module:"nokia-conf"`
	DmrPrefix          *string                                                             `path:"dmr-prefix" module:"nokia-conf"`
	IpFragmentation    *NokiaConf_Configure_Service_Nat_MapT_Domain_IpFragmentation        `path:"ip-fragmentation" module:"nokia-conf"`
	MappingRule        map[string]*NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule `path:"mapping-rule" module:"nokia-conf"`
	Mtu                *uint32                                                             `path:"mtu" module:"nokia-conf"`
	Name               *string                                                             `path:"name" module:"nokia-conf"`
	TcpMssAdjust       *uint32                                                             `path:"tcp-mss-adjust" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_MapT_Domain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_MapT_Domain) IsYANGGoStruct() {}

// NewMappingRule creates a new entry in the MappingRule list of the
// NokiaConf_Configure_Service_Nat_MapT_Domain struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) NewMappingRule(RuleName string) (*NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MappingRule == nil {
		t.MappingRule = make(map[string]*NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule)
	}

	key := RuleName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MappingRule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MappingRule", key)
	}

	t.MappingRule[key] = &NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule{
		RuleName: &RuleName,
	}

	return t.MappingRule[key], nil
}

// RenameMappingRule renames an entry in the list MappingRule within
// the NokiaConf_Configure_Service_Nat_MapT_Domain struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) RenameMappingRule(oldK, newK string) error {
	if _, ok := t.MappingRule[newK]; ok {
		return fmt.Errorf("key %v already exists in MappingRule", newK)
	}

	e, ok := t.MappingRule[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MappingRule", oldK)
	}
	e.RuleName = &newK

	t.MappingRule[newK] = e
	delete(t.MappingRule, oldK)
	return nil
}

// GetOrCreateMappingRule retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat_MapT_Domain. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) GetOrCreateMappingRule(RuleName string) *NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule {

	key := RuleName

	if v, ok := t.MappingRule[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMappingRule(RuleName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMappingRule got unexpected error: %v", err))
	}
	return v
}

// GetMappingRule retrieves the value with the specified key from
// the MappingRule map field of NokiaConf_Configure_Service_Nat_MapT_Domain. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) GetMappingRule(RuleName string) *NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule {

	if t == nil {
		return nil
	}

	key := RuleName

	if lm, ok := t.MappingRule[key]; ok {
		return lm
	}
	return nil
}

// DeleteMappingRule deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat_MapT_Domain. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) DeleteMappingRule(RuleName string) {
	key := RuleName

	delete(t.MappingRule, key)
}

// AppendMappingRule appends the supplied NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule struct to the
// list MappingRule of NokiaConf_Configure_Service_Nat_MapT_Domain. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) AppendMappingRule(v *NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule) error {
	if v.RuleName == nil {
		return fmt.Errorf("invalid nil key received for RuleName")
	}

	key := *v.RuleName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MappingRule == nil {
		t.MappingRule = make(map[string]*NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule)
	}

	if _, ok := t.MappingRule[key]; ok {
		return fmt.Errorf("duplicate key for list MappingRule %v", key)
	}

	t.MappingRule[key] = v
	return nil
}

// GetOrCreateIpFragmentation retrieves the value of the IpFragmentation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) GetOrCreateIpFragmentation() *NokiaConf_Configure_Service_Nat_MapT_Domain_IpFragmentation {
	if t.IpFragmentation != nil {
		return t.IpFragmentation
	}
	t.IpFragmentation = &NokiaConf_Configure_Service_Nat_MapT_Domain_IpFragmentation{}
	return t.IpFragmentation
}

// GetIpFragmentation returns the value of the IpFragmentation struct pointer
// from NokiaConf_Configure_Service_Nat_MapT_Domain. If the receiver or the field IpFragmentation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) GetIpFragmentation() *NokiaConf_Configure_Service_Nat_MapT_Domain_IpFragmentation {
	if t != nil && t.IpFragmentation != nil {
		return t.IpFragmentation
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Nat_MapT_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Nat_MapT_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Nat_MapT_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Nat_MapT_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDmrPrefix retrieves the value of the leaf DmrPrefix from the NokiaConf_Configure_Service_Nat_MapT_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DmrPrefix is set, it can
// safely use t.GetDmrPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DmrPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) GetDmrPrefix() string {
	if t == nil || t.DmrPrefix == nil {
		return ""
	}
	return *t.DmrPrefix
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Service_Nat_MapT_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 8686
	}
	return *t.Mtu
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Nat_MapT_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTcpMssAdjust retrieves the value of the leaf TcpMssAdjust from the NokiaConf_Configure_Service_Nat_MapT_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMssAdjust is set, it can
// safely use t.GetTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) GetTcpMssAdjust() uint32 {
	if t == nil || t.TcpMssAdjust == nil {
		return 0
	}
	return *t.TcpMssAdjust
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_MapT_Domain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Mtu == nil {
		var v uint32 = 8686
		t.Mtu = &v
	}
	if t.TcpMssAdjust == nil {
		var v uint32 = 0
		t.TcpMssAdjust = &v
	}
	t.IpFragmentation.PopulateDefaults()
	for _, e := range t.MappingRule {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Nat_MapT_Domain struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_MapT_Domain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_MapT_Domain.
func (*NokiaConf_Configure_Service_Nat_MapT_Domain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_MapT_Domain_IpFragmentation represents the /nokia-conf/configure/service/nat/map-t/domain/ip-fragmentation YANG schema element.
type NokiaConf_Configure_Service_Nat_MapT_Domain_IpFragmentation struct {
	V6FragHeader *bool `path:"v6-frag-header" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_MapT_Domain_IpFragmentation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_MapT_Domain_IpFragmentation) IsYANGGoStruct() {}

// GetV6FragHeader retrieves the value of the leaf V6FragHeader from the NokiaConf_Configure_Service_Nat_MapT_Domain_IpFragmentation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V6FragHeader is set, it can
// safely use t.GetV6FragHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V6FragHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain_IpFragmentation) GetV6FragHeader() bool {
	if t == nil || t.V6FragHeader == nil {
		return false
	}
	return *t.V6FragHeader
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_MapT_Domain_IpFragmentation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain_IpFragmentation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.V6FragHeader == nil {
		var v bool = false
		t.V6FragHeader = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain_IpFragmentation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_MapT_Domain_IpFragmentation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain_IpFragmentation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain_IpFragmentation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_MapT_Domain_IpFragmentation.
func (*NokiaConf_Configure_Service_Nat_MapT_Domain_IpFragmentation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule represents the /nokia-conf/configure/service/nat/map-t/domain/mapping-rule YANG schema element.
type NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                     `path:"description" module:"nokia-conf"`
	EaLength           *uint32                     `path:"ea-length" module:"nokia-conf"`
	Ipv4Prefix         *string                     `path:"ipv4-prefix" module:"nokia-conf"`
	PsidOffset         *uint32                     `path:"psid-offset" module:"nokia-conf"`
	RuleName           *string                     `path:"rule-name" module:"nokia-conf"`
	RulePrefix         *string                     `path:"rule-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEaLength retrieves the value of the leaf EaLength from the NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EaLength is set, it can
// safely use t.GetEaLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EaLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule) GetEaLength() uint32 {
	if t == nil || t.EaLength == nil {
		return 0
	}
	return *t.EaLength
}

// GetIpv4Prefix retrieves the value of the leaf Ipv4Prefix from the NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Prefix is set, it can
// safely use t.GetIpv4Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule) GetIpv4Prefix() string {
	if t == nil || t.Ipv4Prefix == nil {
		return ""
	}
	return *t.Ipv4Prefix
}

// GetPsidOffset retrieves the value of the leaf PsidOffset from the NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PsidOffset is set, it can
// safely use t.GetPsidOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PsidOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule) GetPsidOffset() uint32 {
	if t == nil || t.PsidOffset == nil {
		return 6
	}
	return *t.PsidOffset
}

// GetRuleName retrieves the value of the leaf RuleName from the NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RuleName is set, it can
// safely use t.GetRuleName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RuleName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule) GetRuleName() string {
	if t == nil || t.RuleName == nil {
		return ""
	}
	return *t.RuleName
}

// GetRulePrefix retrieves the value of the leaf RulePrefix from the NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RulePrefix is set, it can
// safely use t.GetRulePrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RulePrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule) GetRulePrefix() string {
	if t == nil || t.RulePrefix == nil {
		return ""
	}
	return *t.RulePrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.EaLength == nil {
		var v uint32 = 0
		t.EaLength = &v
	}
	if t.PsidOffset == nil {
		var v uint32 = 6
		t.PsidOffset = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RuleName == nil {
		return nil, fmt.Errorf("nil value for key RuleName")
	}

	return map[string]interface{}{
		"rule-name": *t.RuleName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule.
func (*NokiaConf_Configure_Service_Nat_MapT_Domain_MappingRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_NatPolicy represents the /nokia-conf/configure/service/nat/nat-policy YANG schema element.
type NokiaConf_Configure_Service_Nat_NatPolicy struct {
	Alg                    *NokiaConf_Configure_Service_Nat_NatPolicy_Alg              `path:"alg" module:"nokia-conf"`
	ApplyGroups            []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	BlockLimit             *uint16                                                     `path:"block-limit" module:"nokia-conf"`
	Description            *string                                                     `path:"description" module:"nokia-conf"`
	Dnat                   *NokiaConf_Configure_Service_Nat_NatPolicy_Dnat             `path:"dnat" module:"nokia-conf"`
	DnatOnly               *NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly         `path:"dnat-only" module:"nokia-conf" yangPresence:"true"`
	Filtering              E_NokiaTypesNat_Filtering                                   `path:"filtering" module:"nokia-conf"`
	FlowLogPolicy          *NokiaConf_Configure_Service_Nat_NatPolicy_FlowLogPolicy    `path:"flow-log-policy" module:"nokia-conf"`
	L2Outside              YANGEmpty                                                   `path:"l2-outside" module:"nokia-conf"`
	Name                   *string                                                     `path:"name" module:"nokia-conf"`
	Pool                   *NokiaConf_Configure_Service_Nat_NatPolicy_Pool             `path:"pool" module:"nokia-conf"`
	PortForwardingRangeEnd *uint16                                                     `path:"port-forwarding-range-end" module:"nokia-conf"`
	PortLimits             *NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits       `path:"port-limits" module:"nokia-conf"`
	PrioritySessions       *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions `path:"priority-sessions" module:"nokia-conf"`
	SessionLimits          *NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits    `path:"session-limits" module:"nokia-conf"`
	Tcp                    *NokiaConf_Configure_Service_Nat_NatPolicy_Tcp              `path:"tcp" module:"nokia-conf"`
	Timeouts               *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts         `path:"timeouts" module:"nokia-conf"`
	Udp                    *NokiaConf_Configure_Service_Nat_NatPolicy_Udp              `path:"udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_NatPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_NatPolicy) IsYANGGoStruct() {}

// GetOrCreateAlg retrieves the value of the Alg field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetOrCreateAlg() *NokiaConf_Configure_Service_Nat_NatPolicy_Alg {
	if t.Alg != nil {
		return t.Alg
	}
	t.Alg = &NokiaConf_Configure_Service_Nat_NatPolicy_Alg{}
	return t.Alg
}

// GetOrCreateDnat retrieves the value of the Dnat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetOrCreateDnat() *NokiaConf_Configure_Service_Nat_NatPolicy_Dnat {
	if t.Dnat != nil {
		return t.Dnat
	}
	t.Dnat = &NokiaConf_Configure_Service_Nat_NatPolicy_Dnat{}
	return t.Dnat
}

// GetOrCreateDnatOnly retrieves the value of the DnatOnly field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetOrCreateDnatOnly() *NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly {
	if t.DnatOnly != nil {
		return t.DnatOnly
	}
	t.DnatOnly = &NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly{}
	return t.DnatOnly
}

// GetOrCreateFlowLogPolicy retrieves the value of the FlowLogPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetOrCreateFlowLogPolicy() *NokiaConf_Configure_Service_Nat_NatPolicy_FlowLogPolicy {
	if t.FlowLogPolicy != nil {
		return t.FlowLogPolicy
	}
	t.FlowLogPolicy = &NokiaConf_Configure_Service_Nat_NatPolicy_FlowLogPolicy{}
	return t.FlowLogPolicy
}

// GetOrCreatePool retrieves the value of the Pool field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetOrCreatePool() *NokiaConf_Configure_Service_Nat_NatPolicy_Pool {
	if t.Pool != nil {
		return t.Pool
	}
	t.Pool = &NokiaConf_Configure_Service_Nat_NatPolicy_Pool{}
	return t.Pool
}

// GetOrCreatePortLimits retrieves the value of the PortLimits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetOrCreatePortLimits() *NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits {
	if t.PortLimits != nil {
		return t.PortLimits
	}
	t.PortLimits = &NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits{}
	return t.PortLimits
}

// GetOrCreatePrioritySessions retrieves the value of the PrioritySessions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetOrCreatePrioritySessions() *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions {
	if t.PrioritySessions != nil {
		return t.PrioritySessions
	}
	t.PrioritySessions = &NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions{}
	return t.PrioritySessions
}

// GetOrCreateSessionLimits retrieves the value of the SessionLimits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetOrCreateSessionLimits() *NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits {
	if t.SessionLimits != nil {
		return t.SessionLimits
	}
	t.SessionLimits = &NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits{}
	return t.SessionLimits
}

// GetOrCreateTcp retrieves the value of the Tcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetOrCreateTcp() *NokiaConf_Configure_Service_Nat_NatPolicy_Tcp {
	if t.Tcp != nil {
		return t.Tcp
	}
	t.Tcp = &NokiaConf_Configure_Service_Nat_NatPolicy_Tcp{}
	return t.Tcp
}

// GetOrCreateTimeouts retrieves the value of the Timeouts field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetOrCreateTimeouts() *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts {
	if t.Timeouts != nil {
		return t.Timeouts
	}
	t.Timeouts = &NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts{}
	return t.Timeouts
}

// GetOrCreateUdp retrieves the value of the Udp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetOrCreateUdp() *NokiaConf_Configure_Service_Nat_NatPolicy_Udp {
	if t.Udp != nil {
		return t.Udp
	}
	t.Udp = &NokiaConf_Configure_Service_Nat_NatPolicy_Udp{}
	return t.Udp
}

// GetAlg returns the value of the Alg struct pointer
// from NokiaConf_Configure_Service_Nat_NatPolicy. If the receiver or the field Alg is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetAlg() *NokiaConf_Configure_Service_Nat_NatPolicy_Alg {
	if t != nil && t.Alg != nil {
		return t.Alg
	}
	return nil
}

// GetDnat returns the value of the Dnat struct pointer
// from NokiaConf_Configure_Service_Nat_NatPolicy. If the receiver or the field Dnat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetDnat() *NokiaConf_Configure_Service_Nat_NatPolicy_Dnat {
	if t != nil && t.Dnat != nil {
		return t.Dnat
	}
	return nil
}

// GetDnatOnly returns the value of the DnatOnly struct pointer
// from NokiaConf_Configure_Service_Nat_NatPolicy. If the receiver or the field DnatOnly is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetDnatOnly() *NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly {
	if t != nil && t.DnatOnly != nil {
		return t.DnatOnly
	}
	return nil
}

// GetFlowLogPolicy returns the value of the FlowLogPolicy struct pointer
// from NokiaConf_Configure_Service_Nat_NatPolicy. If the receiver or the field FlowLogPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetFlowLogPolicy() *NokiaConf_Configure_Service_Nat_NatPolicy_FlowLogPolicy {
	if t != nil && t.FlowLogPolicy != nil {
		return t.FlowLogPolicy
	}
	return nil
}

// GetPool returns the value of the Pool struct pointer
// from NokiaConf_Configure_Service_Nat_NatPolicy. If the receiver or the field Pool is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetPool() *NokiaConf_Configure_Service_Nat_NatPolicy_Pool {
	if t != nil && t.Pool != nil {
		return t.Pool
	}
	return nil
}

// GetPortLimits returns the value of the PortLimits struct pointer
// from NokiaConf_Configure_Service_Nat_NatPolicy. If the receiver or the field PortLimits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetPortLimits() *NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits {
	if t != nil && t.PortLimits != nil {
		return t.PortLimits
	}
	return nil
}

// GetPrioritySessions returns the value of the PrioritySessions struct pointer
// from NokiaConf_Configure_Service_Nat_NatPolicy. If the receiver or the field PrioritySessions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetPrioritySessions() *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions {
	if t != nil && t.PrioritySessions != nil {
		return t.PrioritySessions
	}
	return nil
}

// GetSessionLimits returns the value of the SessionLimits struct pointer
// from NokiaConf_Configure_Service_Nat_NatPolicy. If the receiver or the field SessionLimits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetSessionLimits() *NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits {
	if t != nil && t.SessionLimits != nil {
		return t.SessionLimits
	}
	return nil
}

// GetTcp returns the value of the Tcp struct pointer
// from NokiaConf_Configure_Service_Nat_NatPolicy. If the receiver or the field Tcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetTcp() *NokiaConf_Configure_Service_Nat_NatPolicy_Tcp {
	if t != nil && t.Tcp != nil {
		return t.Tcp
	}
	return nil
}

// GetTimeouts returns the value of the Timeouts struct pointer
// from NokiaConf_Configure_Service_Nat_NatPolicy. If the receiver or the field Timeouts is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetTimeouts() *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts {
	if t != nil && t.Timeouts != nil {
		return t.Timeouts
	}
	return nil
}

// GetUdp returns the value of the Udp struct pointer
// from NokiaConf_Configure_Service_Nat_NatPolicy. If the receiver or the field Udp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetUdp() *NokiaConf_Configure_Service_Nat_NatPolicy_Udp {
	if t != nil && t.Udp != nil {
		return t.Udp
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Nat_NatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Nat_NatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBlockLimit retrieves the value of the leaf BlockLimit from the NokiaConf_Configure_Service_Nat_NatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockLimit is set, it can
// safely use t.GetBlockLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetBlockLimit() uint16 {
	if t == nil || t.BlockLimit == nil {
		return 1
	}
	return *t.BlockLimit
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Nat_NatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFiltering retrieves the value of the leaf Filtering from the NokiaConf_Configure_Service_Nat_NatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Filtering is set, it can
// safely use t.GetFiltering() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Filtering == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetFiltering() E_NokiaTypesNat_Filtering {
	if t == nil || t.Filtering == 0 {
		return NokiaTypesNat_Filtering_endpoint_independent
	}
	return t.Filtering
}

// GetL2Outside retrieves the value of the leaf L2Outside from the NokiaConf_Configure_Service_Nat_NatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Outside is set, it can
// safely use t.GetL2Outside() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Outside == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetL2Outside() YANGEmpty {
	if t == nil || t.L2Outside == false {
		return false
	}
	return t.L2Outside
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Nat_NatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPortForwardingRangeEnd retrieves the value of the leaf PortForwardingRangeEnd from the NokiaConf_Configure_Service_Nat_NatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortForwardingRangeEnd is set, it can
// safely use t.GetPortForwardingRangeEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortForwardingRangeEnd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) GetPortForwardingRangeEnd() uint16 {
	if t == nil || t.PortForwardingRangeEnd == nil {
		return 1023
	}
	return *t.PortForwardingRangeEnd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_NatPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BlockLimit == nil {
		var v uint16 = 1
		t.BlockLimit = &v
	}
	if t.Filtering == 0 {
		t.Filtering = NokiaTypesNat_Filtering_endpoint_independent
	}
	if t.PortForwardingRangeEnd == nil {
		var v uint16 = 1023
		t.PortForwardingRangeEnd = &v
	}
	t.Alg.PopulateDefaults()
	t.Dnat.PopulateDefaults()
	t.DnatOnly.PopulateDefaults()
	t.FlowLogPolicy.PopulateDefaults()
	t.Pool.PopulateDefaults()
	t.PortLimits.PopulateDefaults()
	t.PrioritySessions.PopulateDefaults()
	t.SessionLimits.PopulateDefaults()
	t.Tcp.PopulateDefaults()
	t.Timeouts.PopulateDefaults()
	t.Udp.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Nat_NatPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_NatPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_NatPolicy.
func (*NokiaConf_Configure_Service_Nat_NatPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_NatPolicy_Alg represents the /nokia-conf/configure/service/nat/nat-policy/alg YANG schema element.
type NokiaConf_Configure_Service_Nat_NatPolicy_Alg struct {
	Ftp  *bool `path:"ftp" module:"nokia-conf"`
	Pptp *bool `path:"pptp" module:"nokia-conf"`
	Rtsp *bool `path:"rtsp" module:"nokia-conf"`
	Sip  *bool `path:"sip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_NatPolicy_Alg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_Alg) IsYANGGoStruct() {}

// GetFtp retrieves the value of the leaf Ftp from the NokiaConf_Configure_Service_Nat_NatPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ftp is set, it can
// safely use t.GetFtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ftp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Alg) GetFtp() bool {
	if t == nil || t.Ftp == nil {
		return true
	}
	return *t.Ftp
}

// GetPptp retrieves the value of the leaf Pptp from the NokiaConf_Configure_Service_Nat_NatPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pptp is set, it can
// safely use t.GetPptp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pptp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Alg) GetPptp() bool {
	if t == nil || t.Pptp == nil {
		return false
	}
	return *t.Pptp
}

// GetRtsp retrieves the value of the leaf Rtsp from the NokiaConf_Configure_Service_Nat_NatPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rtsp is set, it can
// safely use t.GetRtsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rtsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Alg) GetRtsp() bool {
	if t == nil || t.Rtsp == nil {
		return false
	}
	return *t.Rtsp
}

// GetSip retrieves the value of the leaf Sip from the NokiaConf_Configure_Service_Nat_NatPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sip is set, it can
// safely use t.GetSip() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Alg) GetSip() bool {
	if t == nil || t.Sip == nil {
		return false
	}
	return *t.Sip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_NatPolicy_Alg
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Alg) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ftp == nil {
		var v bool = true
		t.Ftp = &v
	}
	if t.Pptp == nil {
		var v bool = false
		t.Pptp = &v
	}
	if t.Rtsp == nil {
		var v bool = false
		t.Rtsp = &v
	}
	if t.Sip == nil {
		var v bool = false
		t.Sip = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Alg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_NatPolicy_Alg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Alg) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Alg) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_NatPolicy_Alg.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_Alg) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_NatPolicy_Dnat represents the /nokia-conf/configure/service/nat/nat-policy/dnat YANG schema element.
type NokiaConf_Configure_Service_Nat_NatPolicy_Dnat struct {
	Classifier *string `path:"classifier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_NatPolicy_Dnat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_Dnat) IsYANGGoStruct() {}

// GetClassifier retrieves the value of the leaf Classifier from the NokiaConf_Configure_Service_Nat_NatPolicy_Dnat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Classifier is set, it can
// safely use t.GetClassifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Classifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Dnat) GetClassifier() string {
	if t == nil || t.Classifier == nil {
		return ""
	}
	return *t.Classifier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_NatPolicy_Dnat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Dnat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Dnat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_NatPolicy_Dnat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Dnat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Dnat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_NatPolicy_Dnat.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_Dnat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly represents the /nokia-conf/configure/service/nat/nat-policy/dnat-only YANG schema element.
type NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly struct {
	NatGroup       *uint32 `path:"nat-group" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
	WlanGwGroup    *uint32 `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly) IsYANGGoStruct() {}

// GetNatGroup retrieves the value of the leaf NatGroup from the NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatGroup is set, it can
// safely use t.GetNatGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly) GetNatGroup() uint32 {
	if t == nil || t.NatGroup == nil {
		return 0
	}
	return *t.NatGroup
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_DnatOnly) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_NatPolicy_FlowLogPolicy represents the /nokia-conf/configure/service/nat/nat-policy/flow-log-policy YANG schema element.
type NokiaConf_Configure_Service_Nat_NatPolicy_FlowLogPolicy struct {
	Ipfix  *string `path:"ipfix" module:"nokia-conf"`
	Syslog *string `path:"syslog" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_NatPolicy_FlowLogPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_FlowLogPolicy) IsYANGGoStruct() {}

// GetIpfix retrieves the value of the leaf Ipfix from the NokiaConf_Configure_Service_Nat_NatPolicy_FlowLogPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipfix is set, it can
// safely use t.GetIpfix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipfix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_FlowLogPolicy) GetIpfix() string {
	if t == nil || t.Ipfix == nil {
		return ""
	}
	return *t.Ipfix
}

// GetSyslog retrieves the value of the leaf Syslog from the NokiaConf_Configure_Service_Nat_NatPolicy_FlowLogPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syslog is set, it can
// safely use t.GetSyslog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syslog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_FlowLogPolicy) GetSyslog() string {
	if t == nil || t.Syslog == nil {
		return ""
	}
	return *t.Syslog
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_NatPolicy_FlowLogPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_FlowLogPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_FlowLogPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_NatPolicy_FlowLogPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_FlowLogPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_FlowLogPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_NatPolicy_FlowLogPolicy.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_FlowLogPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_NatPolicy_Pool represents the /nokia-conf/configure/service/nat/nat-policy/pool YANG schema element.
type NokiaConf_Configure_Service_Nat_NatPolicy_Pool struct {
	Name           *string `path:"name" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_NatPolicy_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_Pool) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Nat_NatPolicy_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_Nat_NatPolicy_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Pool) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_NatPolicy_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_NatPolicy_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_NatPolicy_Pool.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits represents the /nokia-conf/configure/service/nat/nat-policy/port-limits YANG schema element.
type NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits struct {
	Forwarding *uint16                                                          `path:"forwarding" module:"nokia-conf"`
	Reserved   *uint16                                                          `path:"reserved" module:"nokia-conf"`
	Watermarks *NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits_Watermarks `path:"watermarks" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits) IsYANGGoStruct() {}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits) GetOrCreateWatermarks() *NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits_Watermarks{}
	return t.Watermarks
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits) GetWatermarks() *NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetForwarding retrieves the value of the leaf Forwarding from the NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Forwarding is set, it can
// safely use t.GetForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Forwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits) GetForwarding() uint16 {
	if t == nil || t.Forwarding == nil {
		return 0
	}
	return *t.Forwarding
}

// GetReserved retrieves the value of the leaf Reserved from the NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reserved is set, it can
// safely use t.GetReserved() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reserved == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits) GetReserved() uint16 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Watermarks.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits_Watermarks represents the /nokia-conf/configure/service/nat/nat-policy/port-limits/watermarks YANG schema element.
type NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits_Watermarks) IsYANGGoStruct() {}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits_Watermarks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits_Watermarks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits_Watermarks.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_PortLimits_Watermarks) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions represents the /nokia-conf/configure/service/nat/nat-policy/priority-sessions YANG schema element.
type NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions struct {
	Fc *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc `path:"fc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions) IsYANGGoStruct() {}

// GetOrCreateFc retrieves the value of the Fc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions) GetOrCreateFc() *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc {
	if t.Fc != nil {
		return t.Fc
	}
	t.Fc = &NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc{}
	return t.Fc
}

// GetFc returns the value of the Fc struct pointer
// from NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions. If the receiver or the field Fc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions) GetFc() *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc {
	if t != nil && t.Fc != nil {
		return t.Fc
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Fc.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc represents the /nokia-conf/configure/service/nat/nat-policy/priority-sessions/fc YANG schema element.
type NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc struct {
	Af *bool `path:"af" module:"nokia-conf"`
	Be *bool `path:"be" module:"nokia-conf"`
	Ef *bool `path:"ef" module:"nokia-conf"`
	H1 *bool `path:"h1" module:"nokia-conf"`
	H2 *bool `path:"h2" module:"nokia-conf"`
	L1 *bool `path:"l1" module:"nokia-conf"`
	L2 *bool `path:"l2" module:"nokia-conf"`
	Nc *bool `path:"nc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc) IsYANGGoStruct() {}

// GetAf retrieves the value of the leaf Af from the NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Af is set, it can
// safely use t.GetAf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Af == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc) GetAf() bool {
	if t == nil || t.Af == nil {
		return false
	}
	return *t.Af
}

// GetBe retrieves the value of the leaf Be from the NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Be is set, it can
// safely use t.GetBe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Be == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc) GetBe() bool {
	if t == nil || t.Be == nil {
		return false
	}
	return *t.Be
}

// GetEf retrieves the value of the leaf Ef from the NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ef is set, it can
// safely use t.GetEf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ef == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc) GetEf() bool {
	if t == nil || t.Ef == nil {
		return false
	}
	return *t.Ef
}

// GetH1 retrieves the value of the leaf H1 from the NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if H1 is set, it can
// safely use t.GetH1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.H1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc) GetH1() bool {
	if t == nil || t.H1 == nil {
		return false
	}
	return *t.H1
}

// GetH2 retrieves the value of the leaf H2 from the NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if H2 is set, it can
// safely use t.GetH2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.H2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc) GetH2() bool {
	if t == nil || t.H2 == nil {
		return false
	}
	return *t.H2
}

// GetL1 retrieves the value of the leaf L1 from the NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L1 is set, it can
// safely use t.GetL1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc) GetL1() bool {
	if t == nil || t.L1 == nil {
		return false
	}
	return *t.L1
}

// GetL2 retrieves the value of the leaf L2 from the NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2 is set, it can
// safely use t.GetL2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc) GetL2() bool {
	if t == nil || t.L2 == nil {
		return false
	}
	return *t.L2
}

// GetNc retrieves the value of the leaf Nc from the NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Nc is set, it can
// safely use t.GetNc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Nc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc) GetNc() bool {
	if t == nil || t.Nc == nil {
		return false
	}
	return *t.Nc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Af == nil {
		var v bool = false
		t.Af = &v
	}
	if t.Be == nil {
		var v bool = false
		t.Be = &v
	}
	if t.Ef == nil {
		var v bool = false
		t.Ef = &v
	}
	if t.H1 == nil {
		var v bool = false
		t.H1 = &v
	}
	if t.H2 == nil {
		var v bool = false
		t.H2 = &v
	}
	if t.L1 == nil {
		var v bool = false
		t.L1 = &v
	}
	if t.L2 == nil {
		var v bool = false
		t.L2 = &v
	}
	if t.Nc == nil {
		var v bool = false
		t.Nc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_PrioritySessions_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits represents the /nokia-conf/configure/service/nat/nat-policy/session-limits YANG schema element.
type NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits struct {
	Max        *uint16                                                             `path:"max" module:"nokia-conf"`
	Reserved   *uint16                                                             `path:"reserved" module:"nokia-conf"`
	Watermarks *NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits_Watermarks `path:"watermarks" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits) IsYANGGoStruct() {}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits) GetOrCreateWatermarks() *NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits_Watermarks{}
	return t.Watermarks
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits) GetWatermarks() *NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits) GetMax() uint16 {
	if t == nil || t.Max == nil {
		return 65535
	}
	return *t.Max
}

// GetReserved retrieves the value of the leaf Reserved from the NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reserved is set, it can
// safely use t.GetReserved() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reserved == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits) GetReserved() uint16 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Max == nil {
		var v uint16 = 65535
		t.Max = &v
	}
	t.Watermarks.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits_Watermarks represents the /nokia-conf/configure/service/nat/nat-policy/session-limits/watermarks YANG schema element.
type NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits_Watermarks) IsYANGGoStruct() {}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits_Watermarks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits_Watermarks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits_Watermarks.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_SessionLimits_Watermarks) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_NatPolicy_Tcp represents the /nokia-conf/configure/service/nat/nat-policy/tcp YANG schema element.
type NokiaConf_Configure_Service_Nat_NatPolicy_Tcp struct {
	MssAdjust    *uint32 `path:"mss-adjust" module:"nokia-conf"`
	ResetUnknown *bool   `path:"reset-unknown" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_NatPolicy_Tcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_Tcp) IsYANGGoStruct() {}

// GetMssAdjust retrieves the value of the leaf MssAdjust from the NokiaConf_Configure_Service_Nat_NatPolicy_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MssAdjust is set, it can
// safely use t.GetMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Tcp) GetMssAdjust() uint32 {
	if t == nil || t.MssAdjust == nil {
		return 0
	}
	return *t.MssAdjust
}

// GetResetUnknown retrieves the value of the leaf ResetUnknown from the NokiaConf_Configure_Service_Nat_NatPolicy_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResetUnknown is set, it can
// safely use t.GetResetUnknown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResetUnknown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Tcp) GetResetUnknown() bool {
	if t == nil || t.ResetUnknown == nil {
		return false
	}
	return *t.ResetUnknown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_NatPolicy_Tcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Tcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ResetUnknown == nil {
		var v bool = false
		t.ResetUnknown = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Tcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_NatPolicy_Tcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Tcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Tcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_NatPolicy_Tcp.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_Tcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts represents the /nokia-conf/configure/service/nat/nat-policy/timeouts YANG schema element.
type NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts struct {
	IcmpQuery           *uint32                                                 `path:"icmp-query" module:"nokia-conf"`
	Sip                 *uint32                                                 `path:"sip" module:"nokia-conf"`
	SubscriberRetention *uint32                                                 `path:"subscriber-retention" module:"nokia-conf"`
	Tcp                 *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp `path:"tcp" module:"nokia-conf"`
	Udp                 *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp `path:"udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts) IsYANGGoStruct() {}

// GetOrCreateTcp retrieves the value of the Tcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts) GetOrCreateTcp() *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp {
	if t.Tcp != nil {
		return t.Tcp
	}
	t.Tcp = &NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp{}
	return t.Tcp
}

// GetOrCreateUdp retrieves the value of the Udp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts) GetOrCreateUdp() *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp {
	if t.Udp != nil {
		return t.Udp
	}
	t.Udp = &NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp{}
	return t.Udp
}

// GetTcp returns the value of the Tcp struct pointer
// from NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts. If the receiver or the field Tcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts) GetTcp() *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp {
	if t != nil && t.Tcp != nil {
		return t.Tcp
	}
	return nil
}

// GetUdp returns the value of the Udp struct pointer
// from NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts. If the receiver or the field Udp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts) GetUdp() *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp {
	if t != nil && t.Udp != nil {
		return t.Udp
	}
	return nil
}

// GetIcmpQuery retrieves the value of the leaf IcmpQuery from the NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IcmpQuery is set, it can
// safely use t.GetIcmpQuery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IcmpQuery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts) GetIcmpQuery() uint32 {
	if t == nil || t.IcmpQuery == nil {
		return 60
	}
	return *t.IcmpQuery
}

// GetSip retrieves the value of the leaf Sip from the NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sip is set, it can
// safely use t.GetSip() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts) GetSip() uint32 {
	if t == nil || t.Sip == nil {
		return 120
	}
	return *t.Sip
}

// GetSubscriberRetention retrieves the value of the leaf SubscriberRetention from the NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberRetention is set, it can
// safely use t.GetSubscriberRetention() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberRetention == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts) GetSubscriberRetention() uint32 {
	if t == nil || t.SubscriberRetention == nil {
		return 0
	}
	return *t.SubscriberRetention
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IcmpQuery == nil {
		var v uint32 = 60
		t.IcmpQuery = &v
	}
	if t.Sip == nil {
		var v uint32 = 120
		t.Sip = &v
	}
	if t.SubscriberRetention == nil {
		var v uint32 = 0
		t.SubscriberRetention = &v
	}
	t.Tcp.PopulateDefaults()
	t.Udp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp represents the /nokia-conf/configure/service/nat/nat-policy/timeouts/tcp YANG schema element.
type NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp struct {
	Established *uint32 `path:"established" module:"nokia-conf"`
	Rst         *uint32 `path:"rst" module:"nokia-conf"`
	Syn         *uint32 `path:"syn" module:"nokia-conf"`
	TimeWait    *uint32 `path:"time-wait" module:"nokia-conf"`
	Transitory  *uint32 `path:"transitory" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp) IsYANGGoStruct() {}

// GetEstablished retrieves the value of the leaf Established from the NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Established is set, it can
// safely use t.GetEstablished() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Established == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp) GetEstablished() uint32 {
	if t == nil || t.Established == nil {
		return 7440
	}
	return *t.Established
}

// GetRst retrieves the value of the leaf Rst from the NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rst is set, it can
// safely use t.GetRst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp) GetRst() uint32 {
	if t == nil || t.Rst == nil {
		return 0
	}
	return *t.Rst
}

// GetSyn retrieves the value of the leaf Syn from the NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syn is set, it can
// safely use t.GetSyn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp) GetSyn() uint32 {
	if t == nil || t.Syn == nil {
		return 15
	}
	return *t.Syn
}

// GetTimeWait retrieves the value of the leaf TimeWait from the NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeWait is set, it can
// safely use t.GetTimeWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp) GetTimeWait() uint32 {
	if t == nil || t.TimeWait == nil {
		return 0
	}
	return *t.TimeWait
}

// GetTransitory retrieves the value of the leaf Transitory from the NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitory is set, it can
// safely use t.GetTransitory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp) GetTransitory() uint32 {
	if t == nil || t.Transitory == nil {
		return 240
	}
	return *t.Transitory
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Established == nil {
		var v uint32 = 7440
		t.Established = &v
	}
	if t.Rst == nil {
		var v uint32 = 0
		t.Rst = &v
	}
	if t.Syn == nil {
		var v uint32 = 15
		t.Syn = &v
	}
	if t.TimeWait == nil {
		var v uint32 = 0
		t.TimeWait = &v
	}
	if t.Transitory == nil {
		var v uint32 = 240
		t.Transitory = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Tcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp represents the /nokia-conf/configure/service/nat/nat-policy/timeouts/udp YANG schema element.
type NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp struct {
	Dns     *uint32 `path:"dns" module:"nokia-conf"`
	Initial *uint32 `path:"initial" module:"nokia-conf"`
	Normal  *uint32 `path:"normal" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp) IsYANGGoStruct() {}

// GetDns retrieves the value of the leaf Dns from the NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dns is set, it can
// safely use t.GetDns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp) GetDns() uint32 {
	if t == nil || t.Dns == nil {
		return 15
	}
	return *t.Dns
}

// GetInitial retrieves the value of the leaf Initial from the NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Initial is set, it can
// safely use t.GetInitial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Initial == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp) GetInitial() uint32 {
	if t == nil || t.Initial == nil {
		return 15
	}
	return *t.Initial
}

// GetNormal retrieves the value of the leaf Normal from the NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Normal is set, it can
// safely use t.GetNormal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Normal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp) GetNormal() uint32 {
	if t == nil || t.Normal == nil {
		return 300
	}
	return *t.Normal
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dns == nil {
		var v uint32 = 15
		t.Dns = &v
	}
	if t.Initial == nil {
		var v uint32 = 15
		t.Initial = &v
	}
	if t.Normal == nil {
		var v uint32 = 300
		t.Normal = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_Timeouts_Udp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_NatPolicy_Udp represents the /nokia-conf/configure/service/nat/nat-policy/udp YANG schema element.
type NokiaConf_Configure_Service_Nat_NatPolicy_Udp struct {
	InboundRefresh *bool `path:"inbound-refresh" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_NatPolicy_Udp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_Udp) IsYANGGoStruct() {}

// GetInboundRefresh retrieves the value of the leaf InboundRefresh from the NokiaConf_Configure_Service_Nat_NatPolicy_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InboundRefresh is set, it can
// safely use t.GetInboundRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InboundRefresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Udp) GetInboundRefresh() bool {
	if t == nil || t.InboundRefresh == nil {
		return false
	}
	return *t.InboundRefresh
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_NatPolicy_Udp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Udp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InboundRefresh == nil {
		var v bool = false
		t.InboundRefresh = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Udp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_NatPolicy_Udp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Udp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_NatPolicy_Udp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_NatPolicy_Udp.
func (*NokiaConf_Configure_Service_Nat_NatPolicy_Udp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_PcpServerPolicy represents the /nokia-conf/configure/service/nat/pcp-server-policy YANG schema element.
type NokiaConf_Configure_Service_Nat_PcpServerPolicy struct {
	ApplyGroups            []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Description            *string                                                   `path:"description" module:"nokia-conf"`
	Lifetime               *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Lifetime `path:"lifetime" module:"nokia-conf"`
	MaxDescriptionSize     *uint32                                                   `path:"max-description-size" module:"nokia-conf"`
	Name                   *string                                                   `path:"name" module:"nokia-conf"`
	Opcode                 *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode   `path:"opcode" module:"nokia-conf"`
	Option                 *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option   `path:"option" module:"nokia-conf"`
	ReuseExternalIpAddress *bool                                                     `path:"reuse-external-ip-address" module:"nokia-conf"`
	Version                *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Version  `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_PcpServerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_PcpServerPolicy) IsYANGGoStruct() {}

// GetOrCreateLifetime retrieves the value of the Lifetime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy) GetOrCreateLifetime() *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Lifetime {
	if t.Lifetime != nil {
		return t.Lifetime
	}
	t.Lifetime = &NokiaConf_Configure_Service_Nat_PcpServerPolicy_Lifetime{}
	return t.Lifetime
}

// GetOrCreateOpcode retrieves the value of the Opcode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy) GetOrCreateOpcode() *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode {
	if t.Opcode != nil {
		return t.Opcode
	}
	t.Opcode = &NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode{}
	return t.Opcode
}

// GetOrCreateOption retrieves the value of the Option field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy) GetOrCreateOption() *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option {
	if t.Option != nil {
		return t.Option
	}
	t.Option = &NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option{}
	return t.Option
}

// GetOrCreateVersion retrieves the value of the Version field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy) GetOrCreateVersion() *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Version {
	if t.Version != nil {
		return t.Version
	}
	t.Version = &NokiaConf_Configure_Service_Nat_PcpServerPolicy_Version{}
	return t.Version
}

// GetLifetime returns the value of the Lifetime struct pointer
// from NokiaConf_Configure_Service_Nat_PcpServerPolicy. If the receiver or the field Lifetime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy) GetLifetime() *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Lifetime {
	if t != nil && t.Lifetime != nil {
		return t.Lifetime
	}
	return nil
}

// GetOpcode returns the value of the Opcode struct pointer
// from NokiaConf_Configure_Service_Nat_PcpServerPolicy. If the receiver or the field Opcode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy) GetOpcode() *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode {
	if t != nil && t.Opcode != nil {
		return t.Opcode
	}
	return nil
}

// GetOption returns the value of the Option struct pointer
// from NokiaConf_Configure_Service_Nat_PcpServerPolicy. If the receiver or the field Option is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy) GetOption() *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option {
	if t != nil && t.Option != nil {
		return t.Option
	}
	return nil
}

// GetVersion returns the value of the Version struct pointer
// from NokiaConf_Configure_Service_Nat_PcpServerPolicy. If the receiver or the field Version is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy) GetVersion() *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Version {
	if t != nil && t.Version != nil {
		return t.Version
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Nat_PcpServerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Nat_PcpServerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Nat_PcpServerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMaxDescriptionSize retrieves the value of the leaf MaxDescriptionSize from the NokiaConf_Configure_Service_Nat_PcpServerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxDescriptionSize is set, it can
// safely use t.GetMaxDescriptionSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxDescriptionSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy) GetMaxDescriptionSize() uint32 {
	if t == nil || t.MaxDescriptionSize == nil {
		return 64
	}
	return *t.MaxDescriptionSize
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Nat_PcpServerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetReuseExternalIpAddress retrieves the value of the leaf ReuseExternalIpAddress from the NokiaConf_Configure_Service_Nat_PcpServerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReuseExternalIpAddress is set, it can
// safely use t.GetReuseExternalIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReuseExternalIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy) GetReuseExternalIpAddress() bool {
	if t == nil || t.ReuseExternalIpAddress == nil {
		return false
	}
	return *t.ReuseExternalIpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_PcpServerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxDescriptionSize == nil {
		var v uint32 = 64
		t.MaxDescriptionSize = &v
	}
	if t.ReuseExternalIpAddress == nil {
		var v bool = false
		t.ReuseExternalIpAddress = &v
	}
	t.Lifetime.PopulateDefaults()
	t.Opcode.PopulateDefaults()
	t.Option.PopulateDefaults()
	t.Version.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Nat_PcpServerPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_PcpServerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_PcpServerPolicy.
func (*NokiaConf_Configure_Service_Nat_PcpServerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_PcpServerPolicy_Lifetime represents the /nokia-conf/configure/service/nat/pcp-server-policy/lifetime YANG schema element.
type NokiaConf_Configure_Service_Nat_PcpServerPolicy_Lifetime struct {
	Maximum *uint32 `path:"maximum" module:"nokia-conf"`
	Minimum *uint32 `path:"minimum" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_PcpServerPolicy_Lifetime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_PcpServerPolicy_Lifetime) IsYANGGoStruct() {}

// GetMaximum retrieves the value of the leaf Maximum from the NokiaConf_Configure_Service_Nat_PcpServerPolicy_Lifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Maximum is set, it can
// safely use t.GetMaximum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Maximum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Lifetime) GetMaximum() uint32 {
	if t == nil || t.Maximum == nil {
		return 86400
	}
	return *t.Maximum
}

// GetMinimum retrieves the value of the leaf Minimum from the NokiaConf_Configure_Service_Nat_PcpServerPolicy_Lifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Minimum is set, it can
// safely use t.GetMinimum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Minimum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Lifetime) GetMinimum() uint32 {
	if t == nil || t.Minimum == nil {
		return 120
	}
	return *t.Minimum
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_PcpServerPolicy_Lifetime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Lifetime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Maximum == nil {
		var v uint32 = 86400
		t.Maximum = &v
	}
	if t.Minimum == nil {
		var v uint32 = 120
		t.Minimum = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Lifetime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_PcpServerPolicy_Lifetime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Lifetime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Lifetime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_PcpServerPolicy_Lifetime.
func (*NokiaConf_Configure_Service_Nat_PcpServerPolicy_Lifetime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode represents the /nokia-conf/configure/service/nat/pcp-server-policy/opcode YANG schema element.
type NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode struct {
	Announce *bool `path:"announce" module:"nokia-conf"`
	Get      *bool `path:"get" module:"nokia-conf"`
	Map      *bool `path:"map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode) IsYANGGoStruct() {}

// GetAnnounce retrieves the value of the leaf Announce from the NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Announce is set, it can
// safely use t.GetAnnounce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Announce == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode) GetAnnounce() bool {
	if t == nil || t.Announce == nil {
		return false
	}
	return *t.Announce
}

// GetGet retrieves the value of the leaf Get from the NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Get is set, it can
// safely use t.GetGet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Get == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode) GetGet() bool {
	if t == nil || t.Get == nil {
		return false
	}
	return *t.Get
}

// GetMap retrieves the value of the leaf Map from the NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Map is set, it can
// safely use t.GetMap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Map == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode) GetMap() bool {
	if t == nil || t.Map == nil {
		return false
	}
	return *t.Map
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Announce == nil {
		var v bool = false
		t.Announce = &v
	}
	if t.Get == nil {
		var v bool = false
		t.Get = &v
	}
	if t.Map == nil {
		var v bool = false
		t.Map = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode.
func (*NokiaConf_Configure_Service_Nat_PcpServerPolicy_Opcode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option represents the /nokia-conf/configure/service/nat/pcp-server-policy/option YANG schema element.
type NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option struct {
	Description     *bool `path:"description" module:"nokia-conf"`
	Next            *bool `path:"next" module:"nokia-conf"`
	PortReservation *bool `path:"port-reservation" module:"nokia-conf"`
	PortSet         *bool `path:"port-set" module:"nokia-conf"`
	PreferFailure   *bool `path:"prefer-failure" module:"nokia-conf"`
	ThirdParty      *bool `path:"third-party" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option) GetDescription() bool {
	if t == nil || t.Description == nil {
		return false
	}
	return *t.Description
}

// GetNext retrieves the value of the leaf Next from the NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Next is set, it can
// safely use t.GetNext() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Next == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option) GetNext() bool {
	if t == nil || t.Next == nil {
		return false
	}
	return *t.Next
}

// GetPortReservation retrieves the value of the leaf PortReservation from the NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortReservation is set, it can
// safely use t.GetPortReservation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortReservation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option) GetPortReservation() bool {
	if t == nil || t.PortReservation == nil {
		return false
	}
	return *t.PortReservation
}

// GetPortSet retrieves the value of the leaf PortSet from the NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortSet is set, it can
// safely use t.GetPortSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option) GetPortSet() bool {
	if t == nil || t.PortSet == nil {
		return false
	}
	return *t.PortSet
}

// GetPreferFailure retrieves the value of the leaf PreferFailure from the NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferFailure is set, it can
// safely use t.GetPreferFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option) GetPreferFailure() bool {
	if t == nil || t.PreferFailure == nil {
		return false
	}
	return *t.PreferFailure
}

// GetThirdParty retrieves the value of the leaf ThirdParty from the NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThirdParty is set, it can
// safely use t.GetThirdParty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThirdParty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option) GetThirdParty() bool {
	if t == nil || t.ThirdParty == nil {
		return false
	}
	return *t.ThirdParty
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Description == nil {
		var v bool = false
		t.Description = &v
	}
	if t.Next == nil {
		var v bool = false
		t.Next = &v
	}
	if t.PortReservation == nil {
		var v bool = false
		t.PortReservation = &v
	}
	if t.PortSet == nil {
		var v bool = false
		t.PortSet = &v
	}
	if t.PreferFailure == nil {
		var v bool = false
		t.PreferFailure = &v
	}
	if t.ThirdParty == nil {
		var v bool = false
		t.ThirdParty = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option.
func (*NokiaConf_Configure_Service_Nat_PcpServerPolicy_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_PcpServerPolicy_Version represents the /nokia-conf/configure/service/nat/pcp-server-policy/version YANG schema element.
type NokiaConf_Configure_Service_Nat_PcpServerPolicy_Version struct {
	Maximum *uint16 `path:"maximum" module:"nokia-conf"`
	Minimum *uint16 `path:"minimum" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_PcpServerPolicy_Version implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_PcpServerPolicy_Version) IsYANGGoStruct() {}

// GetMaximum retrieves the value of the leaf Maximum from the NokiaConf_Configure_Service_Nat_PcpServerPolicy_Version
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Maximum is set, it can
// safely use t.GetMaximum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Maximum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Version) GetMaximum() uint16 {
	if t == nil || t.Maximum == nil {
		return 1
	}
	return *t.Maximum
}

// GetMinimum retrieves the value of the leaf Minimum from the NokiaConf_Configure_Service_Nat_PcpServerPolicy_Version
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Minimum is set, it can
// safely use t.GetMinimum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Minimum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Version) GetMinimum() uint16 {
	if t == nil || t.Minimum == nil {
		return 1
	}
	return *t.Minimum
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_PcpServerPolicy_Version
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Version) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Maximum == nil {
		var v uint16 = 1
		t.Maximum = &v
	}
	if t.Minimum == nil {
		var v uint16 = 1
		t.Minimum = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Version) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_PcpServerPolicy_Version"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Version) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_PcpServerPolicy_Version) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_PcpServerPolicy_Version.
func (*NokiaConf_Configure_Service_Nat_PcpServerPolicy_Version) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_PrefixList represents the /nokia-conf/configure/service/nat/prefix-list YANG schema element.
type NokiaConf_Configure_Service_Nat_PrefixList struct {
	Application        E_NokiaTypesNat_PrefixListApplication                         `path:"application" module:"nokia-conf"`
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Name               *string                                                       `path:"name" module:"nokia-conf"`
	Prefix             map[string]*NokiaConf_Configure_Service_Nat_PrefixList_Prefix `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_PrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_PrefixList) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Service_Nat_PrefixList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Nat_PrefixList) NewPrefix(IpPrefix string) (*NokiaConf_Configure_Service_Nat_PrefixList_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Service_Nat_PrefixList_Prefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Service_Nat_PrefixList_Prefix{
		IpPrefix: &IpPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Service_Nat_PrefixList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Nat_PrefixList) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat_PrefixList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Nat_PrefixList) GetOrCreatePrefix(IpPrefix string) *NokiaConf_Configure_Service_Nat_PrefixList_Prefix {

	key := IpPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Service_Nat_PrefixList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Nat_PrefixList) GetPrefix(IpPrefix string) *NokiaConf_Configure_Service_Nat_PrefixList_Prefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat_PrefixList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Nat_PrefixList) DeletePrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Service_Nat_PrefixList_Prefix struct to the
// list Prefix of NokiaConf_Configure_Service_Nat_PrefixList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Nat_PrefixList_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Nat_PrefixList) AppendPrefix(v *NokiaConf_Configure_Service_Nat_PrefixList_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Service_Nat_PrefixList_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetApplication retrieves the value of the leaf Application from the NokiaConf_Configure_Service_Nat_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Application is set, it can
// safely use t.GetApplication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Application == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PrefixList) GetApplication() E_NokiaTypesNat_PrefixListApplication {
	if t == nil || t.Application == 0 {
		return NokiaTypesNat_PrefixListApplication_l2_aware_dest_to_policy
	}
	return t.Application
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Nat_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PrefixList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Nat_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PrefixList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Nat_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PrefixList) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_PrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_PrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Application == 0 {
		t.Application = NokiaTypesNat_PrefixListApplication_l2_aware_dest_to_policy
	}
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Nat_PrefixList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Nat_PrefixList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_PrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_PrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_PrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_PrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_PrefixList.
func (*NokiaConf_Configure_Service_Nat_PrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_PrefixList_Prefix represents the /nokia-conf/configure/service/nat/prefix-list/prefix YANG schema element.
type NokiaConf_Configure_Service_Nat_PrefixList_Prefix struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpPrefix           *string  `path:"ip-prefix" module:"nokia-conf"`
	NatPolicy          *string  `path:"nat-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_PrefixList_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_PrefixList_Prefix) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Nat_PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PrefixList_Prefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Nat_PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PrefixList_Prefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Service_Nat_PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PrefixList_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Service_Nat_PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_PrefixList_Prefix) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_PrefixList_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_PrefixList_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Nat_PrefixList_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Nat_PrefixList_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_PrefixList_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_PrefixList_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_PrefixList_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_PrefixList_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_PrefixList_Prefix.
func (*NokiaConf_Configure_Service_Nat_PrefixList_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_Syslog represents the /nokia-conf/configure/service/nat/syslog YANG schema element.
type NokiaConf_Configure_Service_Nat_Syslog struct {
	ExportPolicy map[string]*NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy `path:"export-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_Syslog implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_Syslog) IsYANGGoStruct() {}

// NewExportPolicy creates a new entry in the ExportPolicy list of the
// NokiaConf_Configure_Service_Nat_Syslog struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Nat_Syslog) NewExportPolicy(Name string) (*NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExportPolicy == nil {
		t.ExportPolicy = make(map[string]*NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExportPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExportPolicy", key)
	}

	t.ExportPolicy[key] = &NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy{
		Name: &Name,
	}

	return t.ExportPolicy[key], nil
}

// RenameExportPolicy renames an entry in the list ExportPolicy within
// the NokiaConf_Configure_Service_Nat_Syslog struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Nat_Syslog) RenameExportPolicy(oldK, newK string) error {
	if _, ok := t.ExportPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in ExportPolicy", newK)
	}

	e, ok := t.ExportPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExportPolicy", oldK)
	}
	e.Name = &newK

	t.ExportPolicy[newK] = e
	delete(t.ExportPolicy, oldK)
	return nil
}

// GetOrCreateExportPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat_Syslog. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Nat_Syslog) GetOrCreateExportPolicy(Name string) *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy {

	key := Name

	if v, ok := t.ExportPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExportPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExportPolicy got unexpected error: %v", err))
	}
	return v
}

// GetExportPolicy retrieves the value with the specified key from
// the ExportPolicy map field of NokiaConf_Configure_Service_Nat_Syslog. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Nat_Syslog) GetExportPolicy(Name string) *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ExportPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteExportPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat_Syslog. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Nat_Syslog) DeleteExportPolicy(Name string) {
	key := Name

	delete(t.ExportPolicy, key)
}

// AppendExportPolicy appends the supplied NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy struct to the
// list ExportPolicy of NokiaConf_Configure_Service_Nat_Syslog. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Nat_Syslog) AppendExportPolicy(v *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExportPolicy == nil {
		t.ExportPolicy = make(map[string]*NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy)
	}

	if _, ok := t.ExportPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list ExportPolicy %v", key)
	}

	t.ExportPolicy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_Syslog
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_Syslog) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ExportPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Syslog) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_Syslog"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Syslog) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_Syslog) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_Syslog.
func (*NokiaConf_Configure_Service_Nat_Syslog) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy represents the /nokia-conf/configure/service/nat/syslog/export-policy YANG schema element.
type NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy struct {
	ApplyGroups        []string                                                                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Collector          map[NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector_Key]*NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector `path:"collector" module:"nokia-conf"`
	Description        *string                                                                                                                              `path:"description" module:"nokia-conf"`
	Facility           E_NokiaTypesNat_SyslogFacility                                                                                                       `path:"facility" module:"nokia-conf"`
	Include            *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include                                                                         `path:"include" module:"nokia-conf"`
	LogPrefix          *string                                                                                                                              `path:"log-prefix" module:"nokia-conf"`
	MaxTxDelay         *uint32                                                                                                                              `path:"max-tx-delay" module:"nokia-conf"`
	Mtu                *uint32                                                                                                                              `path:"mtu" module:"nokia-conf"`
	Name               *string                                                                                                                              `path:"name" module:"nokia-conf"`
	RateLimit          *uint32                                                                                                                              `path:"rate-limit" module:"nokia-conf"`
	SeverityLevel      E_NokiaTypesNat_SyslogSeverityLevel                                                                                                  `path:"severity-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector_Key represents the key for list Collector of element /nokia-conf/configure/service/nat/syslog/export-policy.
type NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector_Key struct {
	RouterInstance string `path:"router-instance"`
	IpAddress      string `path:"ip-address"`
}

// NewCollector creates a new entry in the Collector list of the
// NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) NewCollector(RouterInstance string, IpAddress string) (*NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector_Key]*NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector)
	}

	key := NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector_Key{
		RouterInstance: RouterInstance,
		IpAddress:      IpAddress,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Collector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Collector", key)
	}

	t.Collector[key] = &NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector{
		RouterInstance: &RouterInstance,
		IpAddress:      &IpAddress,
	}

	return t.Collector[key], nil
}

// RenameCollector renames an entry in the list Collector within
// the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) RenameCollector(oldK, newK NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector_Key) error {
	if _, ok := t.Collector[newK]; ok {
		return fmt.Errorf("key %v already exists in Collector", newK)
	}

	e, ok := t.Collector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Collector", oldK)
	}
	e.RouterInstance = &newK.RouterInstance
	e.IpAddress = &newK.IpAddress

	t.Collector[newK] = e
	delete(t.Collector, oldK)
	return nil
}

// GetOrCreateCollector retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) GetOrCreateCollector(RouterInstance string, IpAddress string) *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector {

	key := NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector_Key{
		RouterInstance: RouterInstance,
		IpAddress:      IpAddress,
	}

	if v, ok := t.Collector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCollector(RouterInstance, IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCollector got unexpected error: %v", err))
	}
	return v
}

// GetCollector retrieves the value with the specified key from
// the Collector map field of NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) GetCollector(RouterInstance string, IpAddress string) *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector_Key{
		RouterInstance: RouterInstance,
		IpAddress:      IpAddress,
	}

	if lm, ok := t.Collector[key]; ok {
		return lm
	}
	return nil
}

// DeleteCollector deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) DeleteCollector(RouterInstance string, IpAddress string) {
	key := NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector_Key{
		RouterInstance: RouterInstance,
		IpAddress:      IpAddress,
	}

	delete(t.Collector, key)
}

// AppendCollector appends the supplied NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector struct to the
// list Collector of NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) AppendCollector(v *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector) error {
	if v.RouterInstance == nil {
		return fmt.Errorf("invalid nil key for RouterInstance")
	}

	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key for IpAddress")
	}

	key := NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector_Key{
		RouterInstance: *v.RouterInstance,
		IpAddress:      *v.IpAddress,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector_Key]*NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector)
	}

	if _, ok := t.Collector[key]; ok {
		return fmt.Errorf("duplicate key for list Collector %v", key)
	}

	t.Collector[key] = v
	return nil
}

// GetOrCreateInclude retrieves the value of the Include field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) GetOrCreateInclude() *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include {
	if t.Include != nil {
		return t.Include
	}
	t.Include = &NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include{}
	return t.Include
}

// GetInclude returns the value of the Include struct pointer
// from NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy. If the receiver or the field Include is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) GetInclude() *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include {
	if t != nil && t.Include != nil {
		return t.Include
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFacility retrieves the value of the leaf Facility from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) GetFacility() E_NokiaTypesNat_SyslogFacility {
	if t == nil || t.Facility == 0 {
		return NokiaTypesNat_SyslogFacility_local0
	}
	return t.Facility
}

// GetLogPrefix retrieves the value of the leaf LogPrefix from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogPrefix is set, it can
// safely use t.GetLogPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) GetLogPrefix() string {
	if t == nil || t.LogPrefix == nil {
		return "TMNX"
	}
	return *t.LogPrefix
}

// GetMaxTxDelay retrieves the value of the leaf MaxTxDelay from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTxDelay is set, it can
// safely use t.GetMaxTxDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTxDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) GetMaxTxDelay() uint32 {
	if t == nil || t.MaxTxDelay == nil {
		return 3
	}
	return *t.MaxTxDelay
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 1500
	}
	return *t.Mtu
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRateLimit retrieves the value of the leaf RateLimit from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateLimit is set, it can
// safely use t.GetRateLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) GetRateLimit() uint32 {
	if t == nil || t.RateLimit == nil {
		return 0
	}
	return *t.RateLimit
}

// GetSeverityLevel retrieves the value of the leaf SeverityLevel from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SeverityLevel is set, it can
// safely use t.GetSeverityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SeverityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) GetSeverityLevel() E_NokiaTypesNat_SyslogSeverityLevel {
	if t == nil || t.SeverityLevel == 0 {
		return NokiaTypesNat_SyslogSeverityLevel_info
	}
	return t.SeverityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Facility == 0 {
		t.Facility = NokiaTypesNat_SyslogFacility_local0
	}
	if t.LogPrefix == nil {
		var v string = "TMNX"
		t.LogPrefix = &v
	}
	if t.MaxTxDelay == nil {
		var v uint32 = 3
		t.MaxTxDelay = &v
	}
	if t.Mtu == nil {
		var v uint32 = 1500
		t.Mtu = &v
	}
	if t.SeverityLevel == 0 {
		t.SeverityLevel = NokiaTypesNat_SyslogSeverityLevel_info
	}
	t.Include.PopulateDefaults()
	for _, e := range t.Collector {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy.
func (*NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector represents the /nokia-conf/configure/service/nat/syslog/export-policy/collector YANG schema element.
type NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	DestinationPort    *int32                      `path:"destination-port" module:"nokia-conf"`
	IpAddress          *string                     `path:"ip-address" module:"nokia-conf"`
	Ipv4SourceAddress  *string                     `path:"ipv4-source-address" module:"nokia-conf"`
	RouterInstance     *string                     `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDestinationPort retrieves the value of the leaf DestinationPort from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationPort is set, it can
// safely use t.GetDestinationPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector) GetDestinationPort() int32 {
	if t == nil || t.DestinationPort == nil {
		return 514
	}
	return *t.DestinationPort
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetIpv4SourceAddress retrieves the value of the leaf Ipv4SourceAddress from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4SourceAddress is set, it can
// safely use t.GetIpv4SourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector) GetIpv4SourceAddress() string {
	if t == nil || t.Ipv4SourceAddress == nil {
		return ""
	}
	return *t.Ipv4SourceAddress
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DestinationPort == nil {
		var v int32 = 514
		t.DestinationPort = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	if t.RouterInstance == nil {
		return nil, fmt.Errorf("nil value for key RouterInstance")
	}

	return map[string]interface{}{
		"ip-address":      *t.IpAddress,
		"router-instance": *t.RouterInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector.
func (*NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Collector) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include represents the /nokia-conf/configure/service/nat/syslog/export-policy/include YANG schema element.
type NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include struct {
	DestinationIp *bool `path:"destination-ip" module:"nokia-conf"`
	ForeignIp     *bool `path:"foreign-ip" module:"nokia-conf"`
	ForeignPort   *bool `path:"foreign-port" module:"nokia-conf"`
	NatPolicyName *bool `path:"nat-policy-name" module:"nokia-conf"`
	SubId         *bool `path:"sub-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include) IsYANGGoStruct() {}

// GetDestinationIp retrieves the value of the leaf DestinationIp from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationIp is set, it can
// safely use t.GetDestinationIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include) GetDestinationIp() bool {
	if t == nil || t.DestinationIp == nil {
		return false
	}
	return *t.DestinationIp
}

// GetForeignIp retrieves the value of the leaf ForeignIp from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForeignIp is set, it can
// safely use t.GetForeignIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForeignIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include) GetForeignIp() bool {
	if t == nil || t.ForeignIp == nil {
		return false
	}
	return *t.ForeignIp
}

// GetForeignPort retrieves the value of the leaf ForeignPort from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForeignPort is set, it can
// safely use t.GetForeignPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForeignPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include) GetForeignPort() bool {
	if t == nil || t.ForeignPort == nil {
		return false
	}
	return *t.ForeignPort
}

// GetNatPolicyName retrieves the value of the leaf NatPolicyName from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicyName is set, it can
// safely use t.GetNatPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include) GetNatPolicyName() bool {
	if t == nil || t.NatPolicyName == nil {
		return false
	}
	return *t.NatPolicyName
}

// GetSubId retrieves the value of the leaf SubId from the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubId is set, it can
// safely use t.GetSubId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include) GetSubId() bool {
	if t == nil || t.SubId == nil {
		return false
	}
	return *t.SubId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DestinationIp == nil {
		var v bool = false
		t.DestinationIp = &v
	}
	if t.ForeignIp == nil {
		var v bool = false
		t.ForeignIp = &v
	}
	if t.ForeignPort == nil {
		var v bool = false
		t.ForeignPort = &v
	}
	if t.NatPolicyName == nil {
		var v bool = false
		t.NatPolicyName = &v
	}
	if t.SubId == nil {
		var v bool = false
		t.SubId = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include.
func (*NokiaConf_Configure_Service_Nat_Syslog_ExportPolicy_Include) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_UpNatPolicy represents the /nokia-conf/configure/service/nat/up-nat-policy YANG schema element.
type NokiaConf_Configure_Service_Nat_UpNatPolicy struct {
	Alg                *NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg              `path:"alg" module:"nokia-conf"`
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                       `path:"description" module:"nokia-conf"`
	Filtering          E_NokiaTypesNat_Filtering                                     `path:"filtering" module:"nokia-conf"`
	FlowLogPolicy      *NokiaConf_Configure_Service_Nat_UpNatPolicy_FlowLogPolicy    `path:"flow-log-policy" module:"nokia-conf"`
	IcmpEchoReply      *bool                                                         `path:"icmp-echo-reply" module:"nokia-conf"`
	Name               *string                                                       `path:"name" module:"nokia-conf"`
	PortLimits         *NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits       `path:"port-limits" module:"nokia-conf"`
	PrioritySessions   *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions `path:"priority-sessions" module:"nokia-conf"`
	SessionLimits      *NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits    `path:"session-limits" module:"nokia-conf"`
	Tcp                *NokiaConf_Configure_Service_Nat_UpNatPolicy_Tcp              `path:"tcp" module:"nokia-conf"`
	Timeouts           *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts         `path:"timeouts" module:"nokia-conf"`
	Udp                *NokiaConf_Configure_Service_Nat_UpNatPolicy_Udp              `path:"udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_UpNatPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy) IsYANGGoStruct() {}

// GetOrCreateAlg retrieves the value of the Alg field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetOrCreateAlg() *NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg {
	if t.Alg != nil {
		return t.Alg
	}
	t.Alg = &NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg{}
	return t.Alg
}

// GetOrCreateFlowLogPolicy retrieves the value of the FlowLogPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetOrCreateFlowLogPolicy() *NokiaConf_Configure_Service_Nat_UpNatPolicy_FlowLogPolicy {
	if t.FlowLogPolicy != nil {
		return t.FlowLogPolicy
	}
	t.FlowLogPolicy = &NokiaConf_Configure_Service_Nat_UpNatPolicy_FlowLogPolicy{}
	return t.FlowLogPolicy
}

// GetOrCreatePortLimits retrieves the value of the PortLimits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetOrCreatePortLimits() *NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits {
	if t.PortLimits != nil {
		return t.PortLimits
	}
	t.PortLimits = &NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits{}
	return t.PortLimits
}

// GetOrCreatePrioritySessions retrieves the value of the PrioritySessions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetOrCreatePrioritySessions() *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions {
	if t.PrioritySessions != nil {
		return t.PrioritySessions
	}
	t.PrioritySessions = &NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions{}
	return t.PrioritySessions
}

// GetOrCreateSessionLimits retrieves the value of the SessionLimits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetOrCreateSessionLimits() *NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits {
	if t.SessionLimits != nil {
		return t.SessionLimits
	}
	t.SessionLimits = &NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits{}
	return t.SessionLimits
}

// GetOrCreateTcp retrieves the value of the Tcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetOrCreateTcp() *NokiaConf_Configure_Service_Nat_UpNatPolicy_Tcp {
	if t.Tcp != nil {
		return t.Tcp
	}
	t.Tcp = &NokiaConf_Configure_Service_Nat_UpNatPolicy_Tcp{}
	return t.Tcp
}

// GetOrCreateTimeouts retrieves the value of the Timeouts field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetOrCreateTimeouts() *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts {
	if t.Timeouts != nil {
		return t.Timeouts
	}
	t.Timeouts = &NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts{}
	return t.Timeouts
}

// GetOrCreateUdp retrieves the value of the Udp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetOrCreateUdp() *NokiaConf_Configure_Service_Nat_UpNatPolicy_Udp {
	if t.Udp != nil {
		return t.Udp
	}
	t.Udp = &NokiaConf_Configure_Service_Nat_UpNatPolicy_Udp{}
	return t.Udp
}

// GetAlg returns the value of the Alg struct pointer
// from NokiaConf_Configure_Service_Nat_UpNatPolicy. If the receiver or the field Alg is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetAlg() *NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg {
	if t != nil && t.Alg != nil {
		return t.Alg
	}
	return nil
}

// GetFlowLogPolicy returns the value of the FlowLogPolicy struct pointer
// from NokiaConf_Configure_Service_Nat_UpNatPolicy. If the receiver or the field FlowLogPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetFlowLogPolicy() *NokiaConf_Configure_Service_Nat_UpNatPolicy_FlowLogPolicy {
	if t != nil && t.FlowLogPolicy != nil {
		return t.FlowLogPolicy
	}
	return nil
}

// GetPortLimits returns the value of the PortLimits struct pointer
// from NokiaConf_Configure_Service_Nat_UpNatPolicy. If the receiver or the field PortLimits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetPortLimits() *NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits {
	if t != nil && t.PortLimits != nil {
		return t.PortLimits
	}
	return nil
}

// GetPrioritySessions returns the value of the PrioritySessions struct pointer
// from NokiaConf_Configure_Service_Nat_UpNatPolicy. If the receiver or the field PrioritySessions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetPrioritySessions() *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions {
	if t != nil && t.PrioritySessions != nil {
		return t.PrioritySessions
	}
	return nil
}

// GetSessionLimits returns the value of the SessionLimits struct pointer
// from NokiaConf_Configure_Service_Nat_UpNatPolicy. If the receiver or the field SessionLimits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetSessionLimits() *NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits {
	if t != nil && t.SessionLimits != nil {
		return t.SessionLimits
	}
	return nil
}

// GetTcp returns the value of the Tcp struct pointer
// from NokiaConf_Configure_Service_Nat_UpNatPolicy. If the receiver or the field Tcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetTcp() *NokiaConf_Configure_Service_Nat_UpNatPolicy_Tcp {
	if t != nil && t.Tcp != nil {
		return t.Tcp
	}
	return nil
}

// GetTimeouts returns the value of the Timeouts struct pointer
// from NokiaConf_Configure_Service_Nat_UpNatPolicy. If the receiver or the field Timeouts is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetTimeouts() *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts {
	if t != nil && t.Timeouts != nil {
		return t.Timeouts
	}
	return nil
}

// GetUdp returns the value of the Udp struct pointer
// from NokiaConf_Configure_Service_Nat_UpNatPolicy. If the receiver or the field Udp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetUdp() *NokiaConf_Configure_Service_Nat_UpNatPolicy_Udp {
	if t != nil && t.Udp != nil {
		return t.Udp
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Nat_UpNatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Nat_UpNatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Nat_UpNatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFiltering retrieves the value of the leaf Filtering from the NokiaConf_Configure_Service_Nat_UpNatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Filtering is set, it can
// safely use t.GetFiltering() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Filtering == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetFiltering() E_NokiaTypesNat_Filtering {
	if t == nil || t.Filtering == 0 {
		return NokiaTypesNat_Filtering_endpoint_independent
	}
	return t.Filtering
}

// GetIcmpEchoReply retrieves the value of the leaf IcmpEchoReply from the NokiaConf_Configure_Service_Nat_UpNatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IcmpEchoReply is set, it can
// safely use t.GetIcmpEchoReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IcmpEchoReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetIcmpEchoReply() bool {
	if t == nil || t.IcmpEchoReply == nil {
		return false
	}
	return *t.IcmpEchoReply
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Nat_UpNatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_UpNatPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Filtering == 0 {
		t.Filtering = NokiaTypesNat_Filtering_endpoint_independent
	}
	if t.IcmpEchoReply == nil {
		var v bool = false
		t.IcmpEchoReply = &v
	}
	t.Alg.PopulateDefaults()
	t.FlowLogPolicy.PopulateDefaults()
	t.PortLimits.PopulateDefaults()
	t.PrioritySessions.PopulateDefaults()
	t.SessionLimits.PopulateDefaults()
	t.Tcp.PopulateDefaults()
	t.Timeouts.PopulateDefaults()
	t.Udp.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Nat_UpNatPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_UpNatPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_UpNatPolicy.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg represents the /nokia-conf/configure/service/nat/up-nat-policy/alg YANG schema element.
type NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg struct {
	Ftp  *bool `path:"ftp" module:"nokia-conf"`
	Pptp *bool `path:"pptp" module:"nokia-conf"`
	Rtsp *bool `path:"rtsp" module:"nokia-conf"`
	Sip  *bool `path:"sip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg) IsYANGGoStruct() {}

// GetFtp retrieves the value of the leaf Ftp from the NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ftp is set, it can
// safely use t.GetFtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ftp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg) GetFtp() bool {
	if t == nil || t.Ftp == nil {
		return true
	}
	return *t.Ftp
}

// GetPptp retrieves the value of the leaf Pptp from the NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pptp is set, it can
// safely use t.GetPptp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pptp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg) GetPptp() bool {
	if t == nil || t.Pptp == nil {
		return false
	}
	return *t.Pptp
}

// GetRtsp retrieves the value of the leaf Rtsp from the NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rtsp is set, it can
// safely use t.GetRtsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rtsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg) GetRtsp() bool {
	if t == nil || t.Rtsp == nil {
		return false
	}
	return *t.Rtsp
}

// GetSip retrieves the value of the leaf Sip from the NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sip is set, it can
// safely use t.GetSip() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg) GetSip() bool {
	if t == nil || t.Sip == nil {
		return false
	}
	return *t.Sip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ftp == nil {
		var v bool = true
		t.Ftp = &v
	}
	if t.Pptp == nil {
		var v bool = false
		t.Pptp = &v
	}
	if t.Rtsp == nil {
		var v bool = false
		t.Rtsp = &v
	}
	if t.Sip == nil {
		var v bool = false
		t.Sip = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_Alg) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_UpNatPolicy_FlowLogPolicy represents the /nokia-conf/configure/service/nat/up-nat-policy/flow-log-policy YANG schema element.
type NokiaConf_Configure_Service_Nat_UpNatPolicy_FlowLogPolicy struct {
	Ipfix *string `path:"ipfix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_UpNatPolicy_FlowLogPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_FlowLogPolicy) IsYANGGoStruct() {}

// GetIpfix retrieves the value of the leaf Ipfix from the NokiaConf_Configure_Service_Nat_UpNatPolicy_FlowLogPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipfix is set, it can
// safely use t.GetIpfix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipfix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_FlowLogPolicy) GetIpfix() string {
	if t == nil || t.Ipfix == nil {
		return ""
	}
	return *t.Ipfix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_UpNatPolicy_FlowLogPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_FlowLogPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_FlowLogPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_UpNatPolicy_FlowLogPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_FlowLogPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_FlowLogPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_UpNatPolicy_FlowLogPolicy.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_FlowLogPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits represents the /nokia-conf/configure/service/nat/up-nat-policy/port-limits YANG schema element.
type NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits struct {
	Reserved   *uint16                                                            `path:"reserved" module:"nokia-conf"`
	Watermarks *NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits_Watermarks `path:"watermarks" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits) IsYANGGoStruct() {}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits) GetOrCreateWatermarks() *NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits_Watermarks{}
	return t.Watermarks
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits) GetWatermarks() *NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetReserved retrieves the value of the leaf Reserved from the NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reserved is set, it can
// safely use t.GetReserved() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reserved == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits) GetReserved() uint16 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Watermarks.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits_Watermarks represents the /nokia-conf/configure/service/nat/up-nat-policy/port-limits/watermarks YANG schema element.
type NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits_Watermarks) IsYANGGoStruct() {}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits_Watermarks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits_Watermarks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits_Watermarks.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_PortLimits_Watermarks) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions represents the /nokia-conf/configure/service/nat/up-nat-policy/priority-sessions YANG schema element.
type NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions struct {
	Fc *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc `path:"fc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions) IsYANGGoStruct() {}

// GetOrCreateFc retrieves the value of the Fc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions) GetOrCreateFc() *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc {
	if t.Fc != nil {
		return t.Fc
	}
	t.Fc = &NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc{}
	return t.Fc
}

// GetFc returns the value of the Fc struct pointer
// from NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions. If the receiver or the field Fc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions) GetFc() *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc {
	if t != nil && t.Fc != nil {
		return t.Fc
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Fc.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc represents the /nokia-conf/configure/service/nat/up-nat-policy/priority-sessions/fc YANG schema element.
type NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc struct {
	Af *bool `path:"af" module:"nokia-conf"`
	Be *bool `path:"be" module:"nokia-conf"`
	Ef *bool `path:"ef" module:"nokia-conf"`
	H1 *bool `path:"h1" module:"nokia-conf"`
	H2 *bool `path:"h2" module:"nokia-conf"`
	L1 *bool `path:"l1" module:"nokia-conf"`
	L2 *bool `path:"l2" module:"nokia-conf"`
	Nc *bool `path:"nc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc) IsYANGGoStruct() {}

// GetAf retrieves the value of the leaf Af from the NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Af is set, it can
// safely use t.GetAf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Af == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc) GetAf() bool {
	if t == nil || t.Af == nil {
		return false
	}
	return *t.Af
}

// GetBe retrieves the value of the leaf Be from the NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Be is set, it can
// safely use t.GetBe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Be == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc) GetBe() bool {
	if t == nil || t.Be == nil {
		return false
	}
	return *t.Be
}

// GetEf retrieves the value of the leaf Ef from the NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ef is set, it can
// safely use t.GetEf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ef == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc) GetEf() bool {
	if t == nil || t.Ef == nil {
		return false
	}
	return *t.Ef
}

// GetH1 retrieves the value of the leaf H1 from the NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if H1 is set, it can
// safely use t.GetH1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.H1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc) GetH1() bool {
	if t == nil || t.H1 == nil {
		return false
	}
	return *t.H1
}

// GetH2 retrieves the value of the leaf H2 from the NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if H2 is set, it can
// safely use t.GetH2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.H2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc) GetH2() bool {
	if t == nil || t.H2 == nil {
		return false
	}
	return *t.H2
}

// GetL1 retrieves the value of the leaf L1 from the NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L1 is set, it can
// safely use t.GetL1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc) GetL1() bool {
	if t == nil || t.L1 == nil {
		return false
	}
	return *t.L1
}

// GetL2 retrieves the value of the leaf L2 from the NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2 is set, it can
// safely use t.GetL2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc) GetL2() bool {
	if t == nil || t.L2 == nil {
		return false
	}
	return *t.L2
}

// GetNc retrieves the value of the leaf Nc from the NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Nc is set, it can
// safely use t.GetNc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Nc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc) GetNc() bool {
	if t == nil || t.Nc == nil {
		return false
	}
	return *t.Nc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Af == nil {
		var v bool = false
		t.Af = &v
	}
	if t.Be == nil {
		var v bool = false
		t.Be = &v
	}
	if t.Ef == nil {
		var v bool = false
		t.Ef = &v
	}
	if t.H1 == nil {
		var v bool = false
		t.H1 = &v
	}
	if t.H2 == nil {
		var v bool = false
		t.H2 = &v
	}
	if t.L1 == nil {
		var v bool = false
		t.L1 = &v
	}
	if t.L2 == nil {
		var v bool = false
		t.L2 = &v
	}
	if t.Nc == nil {
		var v bool = false
		t.Nc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_PrioritySessions_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits represents the /nokia-conf/configure/service/nat/up-nat-policy/session-limits YANG schema element.
type NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits struct {
	Max        *uint16                                                               `path:"max" module:"nokia-conf"`
	Reserved   *uint16                                                               `path:"reserved" module:"nokia-conf"`
	Watermarks *NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits_Watermarks `path:"watermarks" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits) IsYANGGoStruct() {}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits) GetOrCreateWatermarks() *NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits_Watermarks{}
	return t.Watermarks
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits) GetWatermarks() *NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits) GetMax() uint16 {
	if t == nil || t.Max == nil {
		return 65535
	}
	return *t.Max
}

// GetReserved retrieves the value of the leaf Reserved from the NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reserved is set, it can
// safely use t.GetReserved() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reserved == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits) GetReserved() uint16 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Max == nil {
		var v uint16 = 65535
		t.Max = &v
	}
	t.Watermarks.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits_Watermarks represents the /nokia-conf/configure/service/nat/up-nat-policy/session-limits/watermarks YANG schema element.
type NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits_Watermarks) IsYANGGoStruct() {}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits_Watermarks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits_Watermarks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits_Watermarks.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_SessionLimits_Watermarks) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_UpNatPolicy_Tcp represents the /nokia-conf/configure/service/nat/up-nat-policy/tcp YANG schema element.
type NokiaConf_Configure_Service_Nat_UpNatPolicy_Tcp struct {
	MssAdjust    *uint32 `path:"mss-adjust" module:"nokia-conf"`
	ResetUnknown *bool   `path:"reset-unknown" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_UpNatPolicy_Tcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_Tcp) IsYANGGoStruct() {}

// GetMssAdjust retrieves the value of the leaf MssAdjust from the NokiaConf_Configure_Service_Nat_UpNatPolicy_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MssAdjust is set, it can
// safely use t.GetMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Tcp) GetMssAdjust() uint32 {
	if t == nil || t.MssAdjust == nil {
		return 0
	}
	return *t.MssAdjust
}

// GetResetUnknown retrieves the value of the leaf ResetUnknown from the NokiaConf_Configure_Service_Nat_UpNatPolicy_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResetUnknown is set, it can
// safely use t.GetResetUnknown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResetUnknown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Tcp) GetResetUnknown() bool {
	if t == nil || t.ResetUnknown == nil {
		return false
	}
	return *t.ResetUnknown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_UpNatPolicy_Tcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Tcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ResetUnknown == nil {
		var v bool = false
		t.ResetUnknown = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Tcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_UpNatPolicy_Tcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Tcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Tcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_UpNatPolicy_Tcp.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_Tcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts represents the /nokia-conf/configure/service/nat/up-nat-policy/timeouts YANG schema element.
type NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts struct {
	IcmpQuery           *uint32                                                   `path:"icmp-query" module:"nokia-conf"`
	Sip                 *uint32                                                   `path:"sip" module:"nokia-conf"`
	SubscriberRetention *uint32                                                   `path:"subscriber-retention" module:"nokia-conf"`
	Tcp                 *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp `path:"tcp" module:"nokia-conf"`
	Udp                 *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp `path:"udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts) IsYANGGoStruct() {}

// GetOrCreateTcp retrieves the value of the Tcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts) GetOrCreateTcp() *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp {
	if t.Tcp != nil {
		return t.Tcp
	}
	t.Tcp = &NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp{}
	return t.Tcp
}

// GetOrCreateUdp retrieves the value of the Udp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts) GetOrCreateUdp() *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp {
	if t.Udp != nil {
		return t.Udp
	}
	t.Udp = &NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp{}
	return t.Udp
}

// GetTcp returns the value of the Tcp struct pointer
// from NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts. If the receiver or the field Tcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts) GetTcp() *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp {
	if t != nil && t.Tcp != nil {
		return t.Tcp
	}
	return nil
}

// GetUdp returns the value of the Udp struct pointer
// from NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts. If the receiver or the field Udp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts) GetUdp() *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp {
	if t != nil && t.Udp != nil {
		return t.Udp
	}
	return nil
}

// GetIcmpQuery retrieves the value of the leaf IcmpQuery from the NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IcmpQuery is set, it can
// safely use t.GetIcmpQuery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IcmpQuery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts) GetIcmpQuery() uint32 {
	if t == nil || t.IcmpQuery == nil {
		return 60
	}
	return *t.IcmpQuery
}

// GetSip retrieves the value of the leaf Sip from the NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sip is set, it can
// safely use t.GetSip() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts) GetSip() uint32 {
	if t == nil || t.Sip == nil {
		return 120
	}
	return *t.Sip
}

// GetSubscriberRetention retrieves the value of the leaf SubscriberRetention from the NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberRetention is set, it can
// safely use t.GetSubscriberRetention() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberRetention == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts) GetSubscriberRetention() uint32 {
	if t == nil || t.SubscriberRetention == nil {
		return 0
	}
	return *t.SubscriberRetention
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IcmpQuery == nil {
		var v uint32 = 60
		t.IcmpQuery = &v
	}
	if t.Sip == nil {
		var v uint32 = 120
		t.Sip = &v
	}
	if t.SubscriberRetention == nil {
		var v uint32 = 0
		t.SubscriberRetention = &v
	}
	t.Tcp.PopulateDefaults()
	t.Udp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp represents the /nokia-conf/configure/service/nat/up-nat-policy/timeouts/tcp YANG schema element.
type NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp struct {
	Established *uint32 `path:"established" module:"nokia-conf"`
	Rst         *uint32 `path:"rst" module:"nokia-conf"`
	Syn         *uint32 `path:"syn" module:"nokia-conf"`
	TimeWait    *uint32 `path:"time-wait" module:"nokia-conf"`
	Transitory  *uint32 `path:"transitory" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp) IsYANGGoStruct() {}

// GetEstablished retrieves the value of the leaf Established from the NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Established is set, it can
// safely use t.GetEstablished() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Established == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp) GetEstablished() uint32 {
	if t == nil || t.Established == nil {
		return 7440
	}
	return *t.Established
}

// GetRst retrieves the value of the leaf Rst from the NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rst is set, it can
// safely use t.GetRst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp) GetRst() uint32 {
	if t == nil || t.Rst == nil {
		return 0
	}
	return *t.Rst
}

// GetSyn retrieves the value of the leaf Syn from the NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syn is set, it can
// safely use t.GetSyn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp) GetSyn() uint32 {
	if t == nil || t.Syn == nil {
		return 15
	}
	return *t.Syn
}

// GetTimeWait retrieves the value of the leaf TimeWait from the NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeWait is set, it can
// safely use t.GetTimeWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp) GetTimeWait() uint32 {
	if t == nil || t.TimeWait == nil {
		return 0
	}
	return *t.TimeWait
}

// GetTransitory retrieves the value of the leaf Transitory from the NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitory is set, it can
// safely use t.GetTransitory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp) GetTransitory() uint32 {
	if t == nil || t.Transitory == nil {
		return 240
	}
	return *t.Transitory
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Established == nil {
		var v uint32 = 7440
		t.Established = &v
	}
	if t.Rst == nil {
		var v uint32 = 0
		t.Rst = &v
	}
	if t.Syn == nil {
		var v uint32 = 15
		t.Syn = &v
	}
	if t.TimeWait == nil {
		var v uint32 = 0
		t.TimeWait = &v
	}
	if t.Transitory == nil {
		var v uint32 = 240
		t.Transitory = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Tcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp represents the /nokia-conf/configure/service/nat/up-nat-policy/timeouts/udp YANG schema element.
type NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp struct {
	Dns     *uint32 `path:"dns" module:"nokia-conf"`
	Initial *uint32 `path:"initial" module:"nokia-conf"`
	Normal  *uint32 `path:"normal" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp) IsYANGGoStruct() {}

// GetDns retrieves the value of the leaf Dns from the NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dns is set, it can
// safely use t.GetDns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp) GetDns() uint32 {
	if t == nil || t.Dns == nil {
		return 15
	}
	return *t.Dns
}

// GetInitial retrieves the value of the leaf Initial from the NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Initial is set, it can
// safely use t.GetInitial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Initial == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp) GetInitial() uint32 {
	if t == nil || t.Initial == nil {
		return 15
	}
	return *t.Initial
}

// GetNormal retrieves the value of the leaf Normal from the NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Normal is set, it can
// safely use t.GetNormal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Normal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp) GetNormal() uint32 {
	if t == nil || t.Normal == nil {
		return 300
	}
	return *t.Normal
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dns == nil {
		var v uint32 = 15
		t.Dns = &v
	}
	if t.Initial == nil {
		var v uint32 = 15
		t.Initial = &v
	}
	if t.Normal == nil {
		var v uint32 = 300
		t.Normal = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_Timeouts_Udp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Nat_UpNatPolicy_Udp represents the /nokia-conf/configure/service/nat/up-nat-policy/udp YANG schema element.
type NokiaConf_Configure_Service_Nat_UpNatPolicy_Udp struct {
	InboundRefresh *bool `path:"inbound-refresh" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Nat_UpNatPolicy_Udp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_Udp) IsYANGGoStruct() {}

// GetInboundRefresh retrieves the value of the leaf InboundRefresh from the NokiaConf_Configure_Service_Nat_UpNatPolicy_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InboundRefresh is set, it can
// safely use t.GetInboundRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InboundRefresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Udp) GetInboundRefresh() bool {
	if t == nil || t.InboundRefresh == nil {
		return false
	}
	return *t.InboundRefresh
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Nat_UpNatPolicy_Udp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Udp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InboundRefresh == nil {
		var v bool = false
		t.InboundRefresh = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Udp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Nat_UpNatPolicy_Udp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Udp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Nat_UpNatPolicy_Udp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Nat_UpNatPolicy_Udp.
func (*NokiaConf_Configure_Service_Nat_UpNatPolicy_Udp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_OperGroup represents the /nokia-conf/configure/service/oper-group YANG schema element.
type NokiaConf_Configure_Service_OperGroup struct {
	ApplyGroups        []string                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	BfdLiveness        *NokiaConf_Configure_Service_OperGroup_BfdLiveness `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	HoldTime           *NokiaConf_Configure_Service_OperGroup_HoldTime    `path:"hold-time" module:"nokia-conf"`
	Name               *string                                            `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_OperGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_OperGroup) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_OperGroup) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_OperGroup_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_OperGroup_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_OperGroup) GetOrCreateHoldTime() *NokiaConf_Configure_Service_OperGroup_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Service_OperGroup_HoldTime{}
	return t.HoldTime
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_OperGroup. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_OperGroup) GetBfdLiveness() *NokiaConf_Configure_Service_OperGroup_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Service_OperGroup. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_OperGroup) GetHoldTime() *NokiaConf_Configure_Service_OperGroup_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_OperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_OperGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_OperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_OperGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_OperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_OperGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_OperGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_OperGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BfdLiveness.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_OperGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_OperGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_OperGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_OperGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_OperGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_OperGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_OperGroup.
func (*NokiaConf_Configure_Service_OperGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_OperGroup_BfdLiveness represents the /nokia-conf/configure/service/oper-group/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_OperGroup_BfdLiveness struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DestIp             *string  `path:"dest-ip" module:"nokia-conf"`
	InterfaceName      *string  `path:"interface-name" module:"nokia-conf"`
	RouterInstance     *string  `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_OperGroup_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_OperGroup_BfdLiveness) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_OperGroup_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_OperGroup_BfdLiveness) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_OperGroup_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_OperGroup_BfdLiveness) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDestIp retrieves the value of the leaf DestIp from the NokiaConf_Configure_Service_OperGroup_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestIp is set, it can
// safely use t.GetDestIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_OperGroup_BfdLiveness) GetDestIp() string {
	if t == nil || t.DestIp == nil {
		return ""
	}
	return *t.DestIp
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_OperGroup_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_OperGroup_BfdLiveness) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_OperGroup_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_OperGroup_BfdLiveness) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_OperGroup_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_OperGroup_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_OperGroup_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_OperGroup_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_OperGroup_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_OperGroup_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_OperGroup_BfdLiveness.
func (*NokiaConf_Configure_Service_OperGroup_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_OperGroup_HoldTime represents the /nokia-conf/configure/service/oper-group/hold-time YANG schema element.
type NokiaConf_Configure_Service_OperGroup_HoldTime struct {
	Down *uint32 `path:"down" module:"nokia-conf"`
	Up   *uint32 `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_OperGroup_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_OperGroup_HoldTime) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the NokiaConf_Configure_Service_OperGroup_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Down is set, it can
// safely use t.GetDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Down == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_OperGroup_HoldTime) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 0
	}
	return *t.Down
}

// GetUp retrieves the value of the leaf Up from the NokiaConf_Configure_Service_OperGroup_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Up is set, it can
// safely use t.GetUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Up == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_OperGroup_HoldTime) GetUp() uint32 {
	if t == nil || t.Up == nil {
		return 4
	}
	return *t.Up
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_OperGroup_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_OperGroup_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Up == nil {
		var v uint32 = 4
		t.Up = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_OperGroup_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_OperGroup_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_OperGroup_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_OperGroup_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_OperGroup_HoldTime.
func (*NokiaConf_Configure_Service_OperGroup_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Pbb represents the /nokia-conf/configure/service/pbb YANG schema element.
type NokiaConf_Configure_Service_Pbb struct {
	ApplyGroups        []string                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Mac                map[string]*NokiaConf_Configure_Service_Pbb_Mac  `path:"mac" module:"nokia-conf"`
	MacNotification    *NokiaConf_Configure_Service_Pbb_MacNotification `path:"mac-notification" module:"nokia-conf"`
	SourceBmac         *NokiaConf_Configure_Service_Pbb_SourceBmac      `path:"source-bmac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Pbb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Pbb) IsYANGGoStruct() {}

// NewMac creates a new entry in the Mac list of the
// NokiaConf_Configure_Service_Pbb struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Pbb) NewMac(Name string) (*NokiaConf_Configure_Service_Pbb_Mac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*NokiaConf_Configure_Service_Pbb_Mac)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mac", key)
	}

	t.Mac[key] = &NokiaConf_Configure_Service_Pbb_Mac{
		Name: &Name,
	}

	return t.Mac[key], nil
}

// RenameMac renames an entry in the list Mac within
// the NokiaConf_Configure_Service_Pbb struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Pbb) RenameMac(oldK, newK string) error {
	if _, ok := t.Mac[newK]; ok {
		return fmt.Errorf("key %v already exists in Mac", newK)
	}

	e, ok := t.Mac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mac", oldK)
	}
	e.Name = &newK

	t.Mac[newK] = e
	delete(t.Mac, oldK)
	return nil
}

// GetOrCreateMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Pbb. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Pbb) GetOrCreateMac(Name string) *NokiaConf_Configure_Service_Pbb_Mac {

	key := Name

	if v, ok := t.Mac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMac(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMac got unexpected error: %v", err))
	}
	return v
}

// GetMac retrieves the value with the specified key from
// the Mac map field of NokiaConf_Configure_Service_Pbb. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Pbb) GetMac(Name string) *NokiaConf_Configure_Service_Pbb_Mac {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Mac[key]; ok {
		return lm
	}
	return nil
}

// DeleteMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Pbb. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Pbb) DeleteMac(Name string) {
	key := Name

	delete(t.Mac, key)
}

// AppendMac appends the supplied NokiaConf_Configure_Service_Pbb_Mac struct to the
// list Mac of NokiaConf_Configure_Service_Pbb. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Pbb_Mac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Pbb) AppendMac(v *NokiaConf_Configure_Service_Pbb_Mac) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*NokiaConf_Configure_Service_Pbb_Mac)
	}

	if _, ok := t.Mac[key]; ok {
		return fmt.Errorf("duplicate key for list Mac %v", key)
	}

	t.Mac[key] = v
	return nil
}

// GetOrCreateMacNotification retrieves the value of the MacNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Pbb) GetOrCreateMacNotification() *NokiaConf_Configure_Service_Pbb_MacNotification {
	if t.MacNotification != nil {
		return t.MacNotification
	}
	t.MacNotification = &NokiaConf_Configure_Service_Pbb_MacNotification{}
	return t.MacNotification
}

// GetOrCreateSourceBmac retrieves the value of the SourceBmac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Pbb) GetOrCreateSourceBmac() *NokiaConf_Configure_Service_Pbb_SourceBmac {
	if t.SourceBmac != nil {
		return t.SourceBmac
	}
	t.SourceBmac = &NokiaConf_Configure_Service_Pbb_SourceBmac{}
	return t.SourceBmac
}

// GetMacNotification returns the value of the MacNotification struct pointer
// from NokiaConf_Configure_Service_Pbb. If the receiver or the field MacNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Pbb) GetMacNotification() *NokiaConf_Configure_Service_Pbb_MacNotification {
	if t != nil && t.MacNotification != nil {
		return t.MacNotification
	}
	return nil
}

// GetSourceBmac returns the value of the SourceBmac struct pointer
// from NokiaConf_Configure_Service_Pbb. If the receiver or the field SourceBmac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Pbb) GetSourceBmac() *NokiaConf_Configure_Service_Pbb_SourceBmac {
	if t != nil && t.SourceBmac != nil {
		return t.SourceBmac
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Pbb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Pbb) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Pbb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Pbb) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Pbb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Pbb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MacNotification.PopulateDefaults()
	t.SourceBmac.PopulateDefaults()
	for _, e := range t.Mac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Pbb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Pbb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Pbb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Pbb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Pbb.
func (*NokiaConf_Configure_Service_Pbb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Pbb_Mac represents the /nokia-conf/configure/service/pbb/mac YANG schema element.
type NokiaConf_Configure_Service_Pbb_Mac struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Name               *string  `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Pbb_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Pbb_Mac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Pbb_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Pbb_Mac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Pbb_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Pbb_Mac) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Pbb_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Pbb_Mac) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Pbb_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Pbb_Mac) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Pbb_Mac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Pbb_Mac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Pbb_Mac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Pbb_Mac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Pbb_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Pbb_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Pbb_Mac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Pbb_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Pbb_Mac.
func (*NokiaConf_Configure_Service_Pbb_Mac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Pbb_MacNotification represents the /nokia-conf/configure/service/pbb/mac-notification YANG schema element.
type NokiaConf_Configure_Service_Pbb_MacNotification struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Count              *uint32  `path:"count" module:"nokia-conf"`
	Interval           *uint32  `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Pbb_MacNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Pbb_MacNotification) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Pbb_MacNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Pbb_MacNotification) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Pbb_MacNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Pbb_MacNotification) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCount retrieves the value of the leaf Count from the NokiaConf_Configure_Service_Pbb_MacNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Count is set, it can
// safely use t.GetCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Count == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Pbb_MacNotification) GetCount() uint32 {
	if t == nil || t.Count == nil {
		return 3
	}
	return *t.Count
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Service_Pbb_MacNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Pbb_MacNotification) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Pbb_MacNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Pbb_MacNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Count == nil {
		var v uint32 = 3
		t.Count = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Pbb_MacNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Pbb_MacNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Pbb_MacNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Pbb_MacNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Pbb_MacNotification.
func (*NokiaConf_Configure_Service_Pbb_MacNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Pbb_SourceBmac represents the /nokia-conf/configure/service/pbb/source-bmac YANG schema element.
type NokiaConf_Configure_Service_Pbb_SourceBmac struct {
	Address              *string `path:"address" module:"nokia-conf"`
	EvpnEtreeLeafAddress *string `path:"evpn-etree-leaf-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Pbb_SourceBmac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Pbb_SourceBmac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Pbb_SourceBmac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Pbb_SourceBmac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetEvpnEtreeLeafAddress retrieves the value of the leaf EvpnEtreeLeafAddress from the NokiaConf_Configure_Service_Pbb_SourceBmac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EvpnEtreeLeafAddress is set, it can
// safely use t.GetEvpnEtreeLeafAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EvpnEtreeLeafAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Pbb_SourceBmac) GetEvpnEtreeLeafAddress() string {
	if t == nil || t.EvpnEtreeLeafAddress == nil {
		return ""
	}
	return *t.EvpnEtreeLeafAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Pbb_SourceBmac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Pbb_SourceBmac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Pbb_SourceBmac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Pbb_SourceBmac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Pbb_SourceBmac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Pbb_SourceBmac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Pbb_SourceBmac.
func (*NokiaConf_Configure_Service_Pbb_SourceBmac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_ProxyArpNd represents the /nokia-conf/configure/service/proxy-arp-nd YANG schema element.
type NokiaConf_Configure_Service_ProxyArpNd struct {
	MacList *NokiaConf_Configure_Service_ProxyArpNd_MacList `path:"mac-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_ProxyArpNd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_ProxyArpNd) IsYANGGoStruct() {}

// GetOrCreateMacList retrieves the value of the MacList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_ProxyArpNd) GetOrCreateMacList() *NokiaConf_Configure_Service_ProxyArpNd_MacList {
	if t.MacList != nil {
		return t.MacList
	}
	t.MacList = &NokiaConf_Configure_Service_ProxyArpNd_MacList{}
	return t.MacList
}

// GetMacList returns the value of the MacList struct pointer
// from NokiaConf_Configure_Service_ProxyArpNd. If the receiver or the field MacList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_ProxyArpNd) GetMacList() *NokiaConf_Configure_Service_ProxyArpNd_MacList {
	if t != nil && t.MacList != nil {
		return t.MacList
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_ProxyArpNd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_ProxyArpNd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MacList.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_ProxyArpNd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_ProxyArpNd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_ProxyArpNd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_ProxyArpNd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_ProxyArpNd.
func (*NokiaConf_Configure_Service_ProxyArpNd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_ProxyArpNd_MacList represents the /nokia-conf/configure/service/proxy-arp-nd/mac-list YANG schema element.
type NokiaConf_Configure_Service_ProxyArpNd_MacList struct {
	List map[string]*NokiaConf_Configure_Service_ProxyArpNd_MacList_List `path:"list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_ProxyArpNd_MacList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_ProxyArpNd_MacList) IsYANGGoStruct() {}

// NewList creates a new entry in the List list of the
// NokiaConf_Configure_Service_ProxyArpNd_MacList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList) NewList(ListName string) (*NokiaConf_Configure_Service_ProxyArpNd_MacList_List, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.List == nil {
		t.List = make(map[string]*NokiaConf_Configure_Service_ProxyArpNd_MacList_List)
	}

	key := ListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.List[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list List", key)
	}

	t.List[key] = &NokiaConf_Configure_Service_ProxyArpNd_MacList_List{
		ListName: &ListName,
	}

	return t.List[key], nil
}

// RenameList renames an entry in the list List within
// the NokiaConf_Configure_Service_ProxyArpNd_MacList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList) RenameList(oldK, newK string) error {
	if _, ok := t.List[newK]; ok {
		return fmt.Errorf("key %v already exists in List", newK)
	}

	e, ok := t.List[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in List", oldK)
	}
	e.ListName = &newK

	t.List[newK] = e
	delete(t.List, oldK)
	return nil
}

// GetOrCreateList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_ProxyArpNd_MacList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList) GetOrCreateList(ListName string) *NokiaConf_Configure_Service_ProxyArpNd_MacList_List {

	key := ListName

	if v, ok := t.List[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewList(ListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateList got unexpected error: %v", err))
	}
	return v
}

// GetList retrieves the value with the specified key from
// the List map field of NokiaConf_Configure_Service_ProxyArpNd_MacList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList) GetList(ListName string) *NokiaConf_Configure_Service_ProxyArpNd_MacList_List {

	if t == nil {
		return nil
	}

	key := ListName

	if lm, ok := t.List[key]; ok {
		return lm
	}
	return nil
}

// DeleteList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_ProxyArpNd_MacList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList) DeleteList(ListName string) {
	key := ListName

	delete(t.List, key)
}

// AppendList appends the supplied NokiaConf_Configure_Service_ProxyArpNd_MacList_List struct to the
// list List of NokiaConf_Configure_Service_ProxyArpNd_MacList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_ProxyArpNd_MacList_List already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList) AppendList(v *NokiaConf_Configure_Service_ProxyArpNd_MacList_List) error {
	if v.ListName == nil {
		return fmt.Errorf("invalid nil key received for ListName")
	}

	key := *v.ListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.List == nil {
		t.List = make(map[string]*NokiaConf_Configure_Service_ProxyArpNd_MacList_List)
	}

	if _, ok := t.List[key]; ok {
		return fmt.Errorf("duplicate key for list List %v", key)
	}

	t.List[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_ProxyArpNd_MacList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.List {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_ProxyArpNd_MacList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_ProxyArpNd_MacList.
func (*NokiaConf_Configure_Service_ProxyArpNd_MacList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_ProxyArpNd_MacList_List represents the /nokia-conf/configure/service/proxy-arp-nd/mac-list/list YANG schema element.
type NokiaConf_Configure_Service_ProxyArpNd_MacList_List struct {
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	ListName           *string                                                             `path:"list-name" module:"nokia-conf"`
	Mac                map[string]*NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_ProxyArpNd_MacList_List implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_ProxyArpNd_MacList_List) IsYANGGoStruct() {}

// NewMac creates a new entry in the Mac list of the
// NokiaConf_Configure_Service_ProxyArpNd_MacList_List struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList_List) NewMac(Address string) (*NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mac", key)
	}

	t.Mac[key] = &NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac{
		Address: &Address,
	}

	return t.Mac[key], nil
}

// RenameMac renames an entry in the list Mac within
// the NokiaConf_Configure_Service_ProxyArpNd_MacList_List struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList_List) RenameMac(oldK, newK string) error {
	if _, ok := t.Mac[newK]; ok {
		return fmt.Errorf("key %v already exists in Mac", newK)
	}

	e, ok := t.Mac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mac", oldK)
	}
	e.Address = &newK

	t.Mac[newK] = e
	delete(t.Mac, oldK)
	return nil
}

// GetOrCreateMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_ProxyArpNd_MacList_List. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList_List) GetOrCreateMac(Address string) *NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac {

	key := Address

	if v, ok := t.Mac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMac(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMac got unexpected error: %v", err))
	}
	return v
}

// GetMac retrieves the value with the specified key from
// the Mac map field of NokiaConf_Configure_Service_ProxyArpNd_MacList_List. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList_List) GetMac(Address string) *NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Mac[key]; ok {
		return lm
	}
	return nil
}

// DeleteMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_ProxyArpNd_MacList_List. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList_List) DeleteMac(Address string) {
	key := Address

	delete(t.Mac, key)
}

// AppendMac appends the supplied NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac struct to the
// list Mac of NokiaConf_Configure_Service_ProxyArpNd_MacList_List. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList_List) AppendMac(v *NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac)
	}

	if _, ok := t.Mac[key]; ok {
		return fmt.Errorf("duplicate key for list Mac %v", key)
	}

	t.Mac[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_ProxyArpNd_MacList_List
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList_List) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_ProxyArpNd_MacList_List
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList_List) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetListName retrieves the value of the leaf ListName from the NokiaConf_Configure_Service_ProxyArpNd_MacList_List
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ListName is set, it can
// safely use t.GetListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList_List) GetListName() string {
	if t == nil || t.ListName == nil {
		return ""
	}
	return *t.ListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_ProxyArpNd_MacList_List
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList_List) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mac {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_ProxyArpNd_MacList_List struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList_List) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ListName == nil {
		return nil, fmt.Errorf("nil value for key ListName")
	}

	return map[string]interface{}{
		"list-name": *t.ListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList_List) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_ProxyArpNd_MacList_List"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList_List) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList_List) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_ProxyArpNd_MacList_List.
func (*NokiaConf_Configure_Service_ProxyArpNd_MacList_List) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac represents the /nokia-conf/configure/service/proxy-arp-nd/mac-list/list/mac YANG schema element.
type NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac.
func (*NokiaConf_Configure_Service_ProxyArpNd_MacList_List_Mac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate represents the /nokia-conf/configure/service/pw-template YANG schema element.
type NokiaConf_Configure_Service_PwTemplate struct {
	AccountingPolicy   *uint32                                                       `path:"accounting-policy" module:"nokia-conf"`
	AllowFragmentation *bool                                                         `path:"allow-fragmentation" module:"nokia-conf"`
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	AutoGreSdp         *bool                                                         `path:"auto-gre-sdp" module:"nokia-conf"`
	BlockOnPeerFault   *bool                                                         `path:"block-on-peer-fault" module:"nokia-conf"`
	CollectStats       *bool                                                         `path:"collect-stats" module:"nokia-conf"`
	ControlWord        *bool                                                         `path:"control-word" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_PwTemplate_Egress                `path:"egress" module:"nokia-conf"`
	EncryptionKeygroup *NokiaConf_Configure_Service_PwTemplate_EncryptionKeygroup    `path:"encryption-keygroup" module:"nokia-conf"`
	EntropyLabel       YANGEmpty                                                     `path:"entropy-label" module:"nokia-conf"`
	Fdb                *NokiaConf_Configure_Service_PwTemplate_Fdb                   `path:"fdb" module:"nokia-conf"`
	ForceVcForwarding  E_NokiaConf_Configure_Service_PwTemplate_ForceVcForwarding    `path:"force-vc-forwarding" module:"nokia-conf"`
	HashLabel          *NokiaConf_Configure_Service_PwTemplate_HashLabel             `path:"hash-label" module:"nokia-conf" yangPresence:"true"`
	IgmpSnooping       *NokiaConf_Configure_Service_PwTemplate_IgmpSnooping          `path:"igmp-snooping" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_PwTemplate_Ingress               `path:"ingress" module:"nokia-conf"`
	L2Pt               *NokiaConf_Configure_Service_PwTemplate_L2Pt                  `path:"l2pt" module:"nokia-conf"`
	ProvisionedSdp     E_NokiaTypesServices_ProvisionedSdp                           `path:"provisioned-sdp" module:"nokia-conf"`
	PwTemplateId       *uint32                                                       `path:"pw-template-id" module:"nokia-conf"`
	PwTemplateName     *string                                                       `path:"pw-template-name" module:"nokia-conf"`
	SdpExclude         map[string]*NokiaConf_Configure_Service_PwTemplate_SdpExclude `path:"sdp-exclude" module:"nokia-conf"`
	SdpInclude         map[string]*NokiaConf_Configure_Service_PwTemplate_SdpInclude `path:"sdp-include" module:"nokia-conf"`
	SplitHorizonGroup  *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup     `path:"split-horizon-group" module:"nokia-conf"`
	Stp                *NokiaConf_Configure_Service_PwTemplate_Stp                   `path:"stp" module:"nokia-conf"`
	VcType             E_NokiaTypesServices_PwTemplateSdpBindVcType                  `path:"vc-type" module:"nokia-conf"`
	VlanVcTag          *uint32                                                       `path:"vlan-vc-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate) IsYANGGoStruct() {}

// NewSdpExclude creates a new entry in the SdpExclude list of the
// NokiaConf_Configure_Service_PwTemplate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_PwTemplate) NewSdpExclude(GroupName string) (*NokiaConf_Configure_Service_PwTemplate_SdpExclude, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SdpExclude == nil {
		t.SdpExclude = make(map[string]*NokiaConf_Configure_Service_PwTemplate_SdpExclude)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SdpExclude[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SdpExclude", key)
	}

	t.SdpExclude[key] = &NokiaConf_Configure_Service_PwTemplate_SdpExclude{
		GroupName: &GroupName,
	}

	return t.SdpExclude[key], nil
}

// RenameSdpExclude renames an entry in the list SdpExclude within
// the NokiaConf_Configure_Service_PwTemplate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_PwTemplate) RenameSdpExclude(oldK, newK string) error {
	if _, ok := t.SdpExclude[newK]; ok {
		return fmt.Errorf("key %v already exists in SdpExclude", newK)
	}

	e, ok := t.SdpExclude[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SdpExclude", oldK)
	}
	e.GroupName = &newK

	t.SdpExclude[newK] = e
	delete(t.SdpExclude, oldK)
	return nil
}

// GetOrCreateSdpExclude retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_PwTemplate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_PwTemplate) GetOrCreateSdpExclude(GroupName string) *NokiaConf_Configure_Service_PwTemplate_SdpExclude {

	key := GroupName

	if v, ok := t.SdpExclude[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSdpExclude(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSdpExclude got unexpected error: %v", err))
	}
	return v
}

// GetSdpExclude retrieves the value with the specified key from
// the SdpExclude map field of NokiaConf_Configure_Service_PwTemplate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate) GetSdpExclude(GroupName string) *NokiaConf_Configure_Service_PwTemplate_SdpExclude {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.SdpExclude[key]; ok {
		return lm
	}
	return nil
}

// DeleteSdpExclude deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_PwTemplate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_PwTemplate) DeleteSdpExclude(GroupName string) {
	key := GroupName

	delete(t.SdpExclude, key)
}

// AppendSdpExclude appends the supplied NokiaConf_Configure_Service_PwTemplate_SdpExclude struct to the
// list SdpExclude of NokiaConf_Configure_Service_PwTemplate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_PwTemplate_SdpExclude already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_PwTemplate) AppendSdpExclude(v *NokiaConf_Configure_Service_PwTemplate_SdpExclude) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SdpExclude == nil {
		t.SdpExclude = make(map[string]*NokiaConf_Configure_Service_PwTemplate_SdpExclude)
	}

	if _, ok := t.SdpExclude[key]; ok {
		return fmt.Errorf("duplicate key for list SdpExclude %v", key)
	}

	t.SdpExclude[key] = v
	return nil
}

// NewSdpInclude creates a new entry in the SdpInclude list of the
// NokiaConf_Configure_Service_PwTemplate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_PwTemplate) NewSdpInclude(GroupName string) (*NokiaConf_Configure_Service_PwTemplate_SdpInclude, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SdpInclude == nil {
		t.SdpInclude = make(map[string]*NokiaConf_Configure_Service_PwTemplate_SdpInclude)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SdpInclude[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SdpInclude", key)
	}

	t.SdpInclude[key] = &NokiaConf_Configure_Service_PwTemplate_SdpInclude{
		GroupName: &GroupName,
	}

	return t.SdpInclude[key], nil
}

// RenameSdpInclude renames an entry in the list SdpInclude within
// the NokiaConf_Configure_Service_PwTemplate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_PwTemplate) RenameSdpInclude(oldK, newK string) error {
	if _, ok := t.SdpInclude[newK]; ok {
		return fmt.Errorf("key %v already exists in SdpInclude", newK)
	}

	e, ok := t.SdpInclude[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SdpInclude", oldK)
	}
	e.GroupName = &newK

	t.SdpInclude[newK] = e
	delete(t.SdpInclude, oldK)
	return nil
}

// GetOrCreateSdpInclude retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_PwTemplate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_PwTemplate) GetOrCreateSdpInclude(GroupName string) *NokiaConf_Configure_Service_PwTemplate_SdpInclude {

	key := GroupName

	if v, ok := t.SdpInclude[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSdpInclude(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSdpInclude got unexpected error: %v", err))
	}
	return v
}

// GetSdpInclude retrieves the value with the specified key from
// the SdpInclude map field of NokiaConf_Configure_Service_PwTemplate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate) GetSdpInclude(GroupName string) *NokiaConf_Configure_Service_PwTemplate_SdpInclude {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.SdpInclude[key]; ok {
		return lm
	}
	return nil
}

// DeleteSdpInclude deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_PwTemplate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_PwTemplate) DeleteSdpInclude(GroupName string) {
	key := GroupName

	delete(t.SdpInclude, key)
}

// AppendSdpInclude appends the supplied NokiaConf_Configure_Service_PwTemplate_SdpInclude struct to the
// list SdpInclude of NokiaConf_Configure_Service_PwTemplate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_PwTemplate_SdpInclude already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_PwTemplate) AppendSdpInclude(v *NokiaConf_Configure_Service_PwTemplate_SdpInclude) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SdpInclude == nil {
		t.SdpInclude = make(map[string]*NokiaConf_Configure_Service_PwTemplate_SdpInclude)
	}

	if _, ok := t.SdpInclude[key]; ok {
		return fmt.Errorf("duplicate key for list SdpInclude %v", key)
	}

	t.SdpInclude[key] = v
	return nil
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate) GetOrCreateEgress() *NokiaConf_Configure_Service_PwTemplate_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_PwTemplate_Egress{}
	return t.Egress
}

// GetOrCreateEncryptionKeygroup retrieves the value of the EncryptionKeygroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate) GetOrCreateEncryptionKeygroup() *NokiaConf_Configure_Service_PwTemplate_EncryptionKeygroup {
	if t.EncryptionKeygroup != nil {
		return t.EncryptionKeygroup
	}
	t.EncryptionKeygroup = &NokiaConf_Configure_Service_PwTemplate_EncryptionKeygroup{}
	return t.EncryptionKeygroup
}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate) GetOrCreateFdb() *NokiaConf_Configure_Service_PwTemplate_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &NokiaConf_Configure_Service_PwTemplate_Fdb{}
	return t.Fdb
}

// GetOrCreateHashLabel retrieves the value of the HashLabel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate) GetOrCreateHashLabel() *NokiaConf_Configure_Service_PwTemplate_HashLabel {
	if t.HashLabel != nil {
		return t.HashLabel
	}
	t.HashLabel = &NokiaConf_Configure_Service_PwTemplate_HashLabel{}
	return t.HashLabel
}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate) GetOrCreateIgmpSnooping() *NokiaConf_Configure_Service_PwTemplate_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &NokiaConf_Configure_Service_PwTemplate_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate) GetOrCreateIngress() *NokiaConf_Configure_Service_PwTemplate_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_PwTemplate_Ingress{}
	return t.Ingress
}

// GetOrCreateL2Pt retrieves the value of the L2Pt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate) GetOrCreateL2Pt() *NokiaConf_Configure_Service_PwTemplate_L2Pt {
	if t.L2Pt != nil {
		return t.L2Pt
	}
	t.L2Pt = &NokiaConf_Configure_Service_PwTemplate_L2Pt{}
	return t.L2Pt
}

// GetOrCreateSplitHorizonGroup retrieves the value of the SplitHorizonGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate) GetOrCreateSplitHorizonGroup() *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup {
	if t.SplitHorizonGroup != nil {
		return t.SplitHorizonGroup
	}
	t.SplitHorizonGroup = &NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup{}
	return t.SplitHorizonGroup
}

// GetOrCreateStp retrieves the value of the Stp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate) GetOrCreateStp() *NokiaConf_Configure_Service_PwTemplate_Stp {
	if t.Stp != nil {
		return t.Stp
	}
	t.Stp = &NokiaConf_Configure_Service_PwTemplate_Stp{}
	return t.Stp
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_PwTemplate. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate) GetEgress() *NokiaConf_Configure_Service_PwTemplate_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEncryptionKeygroup returns the value of the EncryptionKeygroup struct pointer
// from NokiaConf_Configure_Service_PwTemplate. If the receiver or the field EncryptionKeygroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate) GetEncryptionKeygroup() *NokiaConf_Configure_Service_PwTemplate_EncryptionKeygroup {
	if t != nil && t.EncryptionKeygroup != nil {
		return t.EncryptionKeygroup
	}
	return nil
}

// GetFdb returns the value of the Fdb struct pointer
// from NokiaConf_Configure_Service_PwTemplate. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate) GetFdb() *NokiaConf_Configure_Service_PwTemplate_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetHashLabel returns the value of the HashLabel struct pointer
// from NokiaConf_Configure_Service_PwTemplate. If the receiver or the field HashLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate) GetHashLabel() *NokiaConf_Configure_Service_PwTemplate_HashLabel {
	if t != nil && t.HashLabel != nil {
		return t.HashLabel
	}
	return nil
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from NokiaConf_Configure_Service_PwTemplate. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate) GetIgmpSnooping() *NokiaConf_Configure_Service_PwTemplate_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_PwTemplate. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate) GetIngress() *NokiaConf_Configure_Service_PwTemplate_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetL2Pt returns the value of the L2Pt struct pointer
// from NokiaConf_Configure_Service_PwTemplate. If the receiver or the field L2Pt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate) GetL2Pt() *NokiaConf_Configure_Service_PwTemplate_L2Pt {
	if t != nil && t.L2Pt != nil {
		return t.L2Pt
	}
	return nil
}

// GetSplitHorizonGroup returns the value of the SplitHorizonGroup struct pointer
// from NokiaConf_Configure_Service_PwTemplate. If the receiver or the field SplitHorizonGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate) GetSplitHorizonGroup() *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup {
	if t != nil && t.SplitHorizonGroup != nil {
		return t.SplitHorizonGroup
	}
	return nil
}

// GetStp returns the value of the Stp struct pointer
// from NokiaConf_Configure_Service_PwTemplate. If the receiver or the field Stp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate) GetStp() *NokiaConf_Configure_Service_PwTemplate_Stp {
	if t != nil && t.Stp != nil {
		return t.Stp
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAllowFragmentation retrieves the value of the leaf AllowFragmentation from the NokiaConf_Configure_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowFragmentation is set, it can
// safely use t.GetAllowFragmentation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowFragmentation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate) GetAllowFragmentation() bool {
	if t == nil || t.AllowFragmentation == nil {
		return false
	}
	return *t.AllowFragmentation
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAutoGreSdp retrieves the value of the leaf AutoGreSdp from the NokiaConf_Configure_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoGreSdp is set, it can
// safely use t.GetAutoGreSdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoGreSdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate) GetAutoGreSdp() bool {
	if t == nil || t.AutoGreSdp == nil {
		return false
	}
	return *t.AutoGreSdp
}

// GetBlockOnPeerFault retrieves the value of the leaf BlockOnPeerFault from the NokiaConf_Configure_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockOnPeerFault is set, it can
// safely use t.GetBlockOnPeerFault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockOnPeerFault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate) GetBlockOnPeerFault() bool {
	if t == nil || t.BlockOnPeerFault == nil {
		return false
	}
	return *t.BlockOnPeerFault
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate) GetEntropyLabel() YANGEmpty {
	if t == nil || t.EntropyLabel == false {
		return false
	}
	return t.EntropyLabel
}

// GetForceVcForwarding retrieves the value of the leaf ForceVcForwarding from the NokiaConf_Configure_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceVcForwarding is set, it can
// safely use t.GetForceVcForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceVcForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate) GetForceVcForwarding() E_NokiaConf_Configure_Service_PwTemplate_ForceVcForwarding {
	if t == nil || t.ForceVcForwarding == 0 {
		return 0
	}
	return t.ForceVcForwarding
}

// GetProvisionedSdp retrieves the value of the leaf ProvisionedSdp from the NokiaConf_Configure_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProvisionedSdp is set, it can
// safely use t.GetProvisionedSdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProvisionedSdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate) GetProvisionedSdp() E_NokiaTypesServices_ProvisionedSdp {
	if t == nil || t.ProvisionedSdp == 0 {
		return 0
	}
	return t.ProvisionedSdp
}

// GetPwTemplateId retrieves the value of the leaf PwTemplateId from the NokiaConf_Configure_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PwTemplateId is set, it can
// safely use t.GetPwTemplateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PwTemplateId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate) GetPwTemplateId() uint32 {
	if t == nil || t.PwTemplateId == nil {
		return 0
	}
	return *t.PwTemplateId
}

// GetPwTemplateName retrieves the value of the leaf PwTemplateName from the NokiaConf_Configure_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PwTemplateName is set, it can
// safely use t.GetPwTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PwTemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate) GetPwTemplateName() string {
	if t == nil || t.PwTemplateName == nil {
		return ""
	}
	return *t.PwTemplateName
}

// GetVcType retrieves the value of the leaf VcType from the NokiaConf_Configure_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcType is set, it can
// safely use t.GetVcType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate) GetVcType() E_NokiaTypesServices_PwTemplateSdpBindVcType {
	if t == nil || t.VcType == 0 {
		return NokiaTypesServices_PwTemplateSdpBindVcType_ether
	}
	return t.VcType
}

// GetVlanVcTag retrieves the value of the leaf VlanVcTag from the NokiaConf_Configure_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanVcTag is set, it can
// safely use t.GetVlanVcTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanVcTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate) GetVlanVcTag() uint32 {
	if t == nil || t.VlanVcTag == nil {
		return 0
	}
	return *t.VlanVcTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowFragmentation == nil {
		var v bool = false
		t.AllowFragmentation = &v
	}
	if t.AutoGreSdp == nil {
		var v bool = false
		t.AutoGreSdp = &v
	}
	if t.BlockOnPeerFault == nil {
		var v bool = false
		t.BlockOnPeerFault = &v
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	if t.VcType == 0 {
		t.VcType = NokiaTypesServices_PwTemplateSdpBindVcType_ether
	}
	t.Egress.PopulateDefaults()
	t.EncryptionKeygroup.PopulateDefaults()
	t.Fdb.PopulateDefaults()
	t.HashLabel.PopulateDefaults()
	t.IgmpSnooping.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.L2Pt.PopulateDefaults()
	t.SplitHorizonGroup.PopulateDefaults()
	t.Stp.PopulateDefaults()
	for _, e := range t.SdpExclude {
		e.PopulateDefaults()
	}
	for _, e := range t.SdpInclude {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_PwTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_PwTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PwTemplateName == nil {
		return nil, fmt.Errorf("nil value for key PwTemplateName")
	}

	return map[string]interface{}{
		"pw-template-name": *t.PwTemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate.
func (*NokiaConf_Configure_Service_PwTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_Egress represents the /nokia-conf/configure/service/pw-template/egress YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_Egress struct {
	Filter                     *NokiaConf_Configure_Service_PwTemplate_Egress_Filter                     `path:"filter" module:"nokia-conf"`
	MfibAllowedMdaDestinations *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations `path:"mfib-allowed-mda-destinations" module:"nokia-conf"`
	Qos                        *NokiaConf_Configure_Service_PwTemplate_Egress_Qos                        `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_PwTemplate_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_PwTemplate_Egress_Filter{}
	return t.Filter
}

// GetOrCreateMfibAllowedMdaDestinations retrieves the value of the MfibAllowedMdaDestinations field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress) GetOrCreateMfibAllowedMdaDestinations() *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations {
	if t.MfibAllowedMdaDestinations != nil {
		return t.MfibAllowedMdaDestinations
	}
	t.MfibAllowedMdaDestinations = &NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations{}
	return t.MfibAllowedMdaDestinations
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress) GetOrCreateQos() *NokiaConf_Configure_Service_PwTemplate_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_PwTemplate_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_PwTemplate_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress) GetFilter() *NokiaConf_Configure_Service_PwTemplate_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetMfibAllowedMdaDestinations returns the value of the MfibAllowedMdaDestinations struct pointer
// from NokiaConf_Configure_Service_PwTemplate_Egress. If the receiver or the field MfibAllowedMdaDestinations is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress) GetMfibAllowedMdaDestinations() *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations {
	if t != nil && t.MfibAllowedMdaDestinations != nil {
		return t.MfibAllowedMdaDestinations
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_PwTemplate_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress) GetQos() *NokiaConf_Configure_Service_PwTemplate_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.MfibAllowedMdaDestinations.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_Egress.
func (*NokiaConf_Configure_Service_PwTemplate_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_Egress_Filter represents the /nokia-conf/configure/service/pw-template/egress/filter YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_PwTemplate_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_PwTemplate_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_PwTemplate_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_Egress_Filter.
func (*NokiaConf_Configure_Service_PwTemplate_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations represents the /nokia-conf/configure/service/pw-template/egress/mfib-allowed-mda-destinations YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations struct {
	Mda map[string]*NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda `path:"mda" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) IsYANGGoStruct() {}

// NewMda creates a new entry in the Mda list of the
// NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) NewMda(MdaId string) (*NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[string]*NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda)
	}

	key := MdaId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mda[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mda", key)
	}

	t.Mda[key] = &NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda{
		MdaId: &MdaId,
	}

	return t.Mda[key], nil
}

// RenameMda renames an entry in the list Mda within
// the NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) RenameMda(oldK, newK string) error {
	if _, ok := t.Mda[newK]; ok {
		return fmt.Errorf("key %v already exists in Mda", newK)
	}

	e, ok := t.Mda[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mda", oldK)
	}
	e.MdaId = &newK

	t.Mda[newK] = e
	delete(t.Mda, oldK)
	return nil
}

// GetOrCreateMda retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) GetOrCreateMda(MdaId string) *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda {

	key := MdaId

	if v, ok := t.Mda[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMda(MdaId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMda got unexpected error: %v", err))
	}
	return v
}

// GetMda retrieves the value with the specified key from
// the Mda map field of NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) GetMda(MdaId string) *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda {

	if t == nil {
		return nil
	}

	key := MdaId

	if lm, ok := t.Mda[key]; ok {
		return lm
	}
	return nil
}

// DeleteMda deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) DeleteMda(MdaId string) {
	key := MdaId

	delete(t.Mda, key)
}

// AppendMda appends the supplied NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda struct to the
// list Mda of NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) AppendMda(v *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda) error {
	if v.MdaId == nil {
		return fmt.Errorf("invalid nil key received for MdaId")
	}

	key := *v.MdaId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[string]*NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda)
	}

	if _, ok := t.Mda[key]; ok {
		return fmt.Errorf("duplicate key for list Mda %v", key)
	}

	t.Mda[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mda {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations.
func (*NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda represents the /nokia-conf/configure/service/pw-template/egress/mfib-allowed-mda-destinations/mda YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda struct {
	MdaId *string `path:"mda-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda) IsYANGGoStruct() {
}

// GetMdaId retrieves the value of the leaf MdaId from the NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdaId is set, it can
// safely use t.GetMdaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda) GetMdaId() string {
	if t == nil || t.MdaId == nil {
		return ""
	}
	return *t.MdaId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MdaId == nil {
		return nil, fmt.Errorf("nil value for key MdaId")
	}

	return map[string]interface{}{
		"mda-id": *t.MdaId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda.
func (*NokiaConf_Configure_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_Egress_Qos represents the /nokia-conf/configure/service/pw-template/egress/qos YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_Egress_Qos struct {
	Network *NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Service_PwTemplate_Egress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Qos) GetNetwork() *NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_Egress_Qos.
func (*NokiaConf_Configure_Service_PwTemplate_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network represents the /nokia-conf/configure/service/pw-template/egress/qos/network YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network struct {
	PolicyName        *string                                                                      `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network) GetPortRedirectGroup() *NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network.
func (*NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup represents the /nokia-conf/configure/service/pw-template/egress/qos/network/port-redirect-group YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup.
func (*NokiaConf_Configure_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_EncryptionKeygroup represents the /nokia-conf/configure/service/pw-template/encryption-keygroup YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_EncryptionKeygroup struct {
	Inbound  *uint32 `path:"inbound" module:"nokia-conf"`
	Outbound *uint32 `path:"outbound" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_EncryptionKeygroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_EncryptionKeygroup) IsYANGGoStruct() {}

// GetInbound retrieves the value of the leaf Inbound from the NokiaConf_Configure_Service_PwTemplate_EncryptionKeygroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Inbound is set, it can
// safely use t.GetInbound() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Inbound == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_EncryptionKeygroup) GetInbound() uint32 {
	if t == nil || t.Inbound == nil {
		return 0
	}
	return *t.Inbound
}

// GetOutbound retrieves the value of the leaf Outbound from the NokiaConf_Configure_Service_PwTemplate_EncryptionKeygroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Outbound is set, it can
// safely use t.GetOutbound() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Outbound == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_EncryptionKeygroup) GetOutbound() uint32 {
	if t == nil || t.Outbound == nil {
		return 0
	}
	return *t.Outbound
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_EncryptionKeygroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_EncryptionKeygroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_EncryptionKeygroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_EncryptionKeygroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_EncryptionKeygroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_EncryptionKeygroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_EncryptionKeygroup.
func (*NokiaConf_Configure_Service_PwTemplate_EncryptionKeygroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_Fdb represents the /nokia-conf/configure/service/pw-template/fdb YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_Fdb struct {
	AutoLearnMacProtect            *bool                                                   `path:"auto-learn-mac-protect" module:"nokia-conf"`
	AutoLearnMacProtectExcludeList *string                                                 `path:"auto-learn-mac-protect-exclude-list" module:"nokia-conf"`
	DiscardUnknownSource           *bool                                                   `path:"discard-unknown-source" module:"nokia-conf"`
	LimitMacMove                   E_NokiaTypesServices_VplsLimitMacMove                   `path:"limit-mac-move" module:"nokia-conf"`
	MacLearning                    *NokiaConf_Configure_Service_PwTemplate_Fdb_MacLearning `path:"mac-learning" module:"nokia-conf"`
	MacPinning                     *bool                                                   `path:"mac-pinning" module:"nokia-conf"`
	MaximumMacAddresses            *uint32                                                 `path:"maximum-mac-addresses" module:"nokia-conf"`
	ProtectedSrcMacViolationAction E_NokiaTypesServices_SdpProtectedSrcMacViolationAction  `path:"protected-src-mac-violation-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_Fdb) IsYANGGoStruct() {}

// GetOrCreateMacLearning retrieves the value of the MacLearning field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate_Fdb) GetOrCreateMacLearning() *NokiaConf_Configure_Service_PwTemplate_Fdb_MacLearning {
	if t.MacLearning != nil {
		return t.MacLearning
	}
	t.MacLearning = &NokiaConf_Configure_Service_PwTemplate_Fdb_MacLearning{}
	return t.MacLearning
}

// GetMacLearning returns the value of the MacLearning struct pointer
// from NokiaConf_Configure_Service_PwTemplate_Fdb. If the receiver or the field MacLearning is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate_Fdb) GetMacLearning() *NokiaConf_Configure_Service_PwTemplate_Fdb_MacLearning {
	if t != nil && t.MacLearning != nil {
		return t.MacLearning
	}
	return nil
}

// GetAutoLearnMacProtect retrieves the value of the leaf AutoLearnMacProtect from the NokiaConf_Configure_Service_PwTemplate_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoLearnMacProtect is set, it can
// safely use t.GetAutoLearnMacProtect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoLearnMacProtect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Fdb) GetAutoLearnMacProtect() bool {
	if t == nil || t.AutoLearnMacProtect == nil {
		return false
	}
	return *t.AutoLearnMacProtect
}

// GetAutoLearnMacProtectExcludeList retrieves the value of the leaf AutoLearnMacProtectExcludeList from the NokiaConf_Configure_Service_PwTemplate_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoLearnMacProtectExcludeList is set, it can
// safely use t.GetAutoLearnMacProtectExcludeList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoLearnMacProtectExcludeList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Fdb) GetAutoLearnMacProtectExcludeList() string {
	if t == nil || t.AutoLearnMacProtectExcludeList == nil {
		return ""
	}
	return *t.AutoLearnMacProtectExcludeList
}

// GetDiscardUnknownSource retrieves the value of the leaf DiscardUnknownSource from the NokiaConf_Configure_Service_PwTemplate_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardUnknownSource is set, it can
// safely use t.GetDiscardUnknownSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardUnknownSource == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Fdb) GetDiscardUnknownSource() bool {
	if t == nil || t.DiscardUnknownSource == nil {
		return false
	}
	return *t.DiscardUnknownSource
}

// GetLimitMacMove retrieves the value of the leaf LimitMacMove from the NokiaConf_Configure_Service_PwTemplate_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitMacMove is set, it can
// safely use t.GetLimitMacMove() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitMacMove == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Fdb) GetLimitMacMove() E_NokiaTypesServices_VplsLimitMacMove {
	if t == nil || t.LimitMacMove == 0 {
		return NokiaTypesServices_VplsLimitMacMove_blockable
	}
	return t.LimitMacMove
}

// GetMacPinning retrieves the value of the leaf MacPinning from the NokiaConf_Configure_Service_PwTemplate_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacPinning is set, it can
// safely use t.GetMacPinning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacPinning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Fdb) GetMacPinning() bool {
	if t == nil || t.MacPinning == nil {
		return false
	}
	return *t.MacPinning
}

// GetMaximumMacAddresses retrieves the value of the leaf MaximumMacAddresses from the NokiaConf_Configure_Service_PwTemplate_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumMacAddresses is set, it can
// safely use t.GetMaximumMacAddresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumMacAddresses == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Fdb) GetMaximumMacAddresses() uint32 {
	if t == nil || t.MaximumMacAddresses == nil {
		return 0
	}
	return *t.MaximumMacAddresses
}

// GetProtectedSrcMacViolationAction retrieves the value of the leaf ProtectedSrcMacViolationAction from the NokiaConf_Configure_Service_PwTemplate_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectedSrcMacViolationAction is set, it can
// safely use t.GetProtectedSrcMacViolationAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectedSrcMacViolationAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Fdb) GetProtectedSrcMacViolationAction() E_NokiaTypesServices_SdpProtectedSrcMacViolationAction {
	if t == nil || t.ProtectedSrcMacViolationAction == 0 {
		return 0
	}
	return t.ProtectedSrcMacViolationAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_Fdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_Fdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoLearnMacProtect == nil {
		var v bool = false
		t.AutoLearnMacProtect = &v
	}
	if t.DiscardUnknownSource == nil {
		var v bool = false
		t.DiscardUnknownSource = &v
	}
	if t.LimitMacMove == 0 {
		t.LimitMacMove = NokiaTypesServices_VplsLimitMacMove_blockable
	}
	if t.MacPinning == nil {
		var v bool = false
		t.MacPinning = &v
	}
	t.MacLearning.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Fdb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_Fdb.
func (*NokiaConf_Configure_Service_PwTemplate_Fdb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_Fdb_MacLearning represents the /nokia-conf/configure/service/pw-template/fdb/mac-learning YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_Fdb_MacLearning struct {
	Aging    *bool `path:"aging" module:"nokia-conf"`
	Learning *bool `path:"learning" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_Fdb_MacLearning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_Fdb_MacLearning) IsYANGGoStruct() {}

// GetAging retrieves the value of the leaf Aging from the NokiaConf_Configure_Service_PwTemplate_Fdb_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aging is set, it can
// safely use t.GetAging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Fdb_MacLearning) GetAging() bool {
	if t == nil || t.Aging == nil {
		return true
	}
	return *t.Aging
}

// GetLearning retrieves the value of the leaf Learning from the NokiaConf_Configure_Service_PwTemplate_Fdb_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Learning is set, it can
// safely use t.GetLearning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Learning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Fdb_MacLearning) GetLearning() bool {
	if t == nil || t.Learning == nil {
		return true
	}
	return *t.Learning
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_Fdb_MacLearning
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_Fdb_MacLearning) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Aging == nil {
		var v bool = true
		t.Aging = &v
	}
	if t.Learning == nil {
		var v bool = true
		t.Learning = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Fdb_MacLearning) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_Fdb_MacLearning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Fdb_MacLearning) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_Fdb_MacLearning) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_Fdb_MacLearning.
func (*NokiaConf_Configure_Service_PwTemplate_Fdb_MacLearning) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_HashLabel represents the /nokia-conf/configure/service/pw-template/hash-label YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_HashLabel struct {
	SignalCapability YANGEmpty `path:"signal-capability" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_HashLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_HashLabel) IsYANGGoStruct() {}

// GetSignalCapability retrieves the value of the leaf SignalCapability from the NokiaConf_Configure_Service_PwTemplate_HashLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalCapability is set, it can
// safely use t.GetSignalCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_HashLabel) GetSignalCapability() YANGEmpty {
	if t == nil || t.SignalCapability == false {
		return false
	}
	return t.SignalCapability
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_HashLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_HashLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_HashLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_HashLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_HashLabel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_HashLabel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_HashLabel.
func (*NokiaConf_Configure_Service_PwTemplate_HashLabel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_IgmpSnooping represents the /nokia-conf/configure/service/pw-template/igmp-snooping YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_IgmpSnooping struct {
	FastLeave               *bool                        `path:"fast-leave" module:"nokia-conf"`
	ImportPolicy            *string                      `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroups     *uint32                      `path:"maximum-number-groups" module:"nokia-conf"`
	QueryInterval           *uint32                      `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval *uint32                      `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval   *uint32                      `path:"query-response-interval" module:"nokia-conf"`
	RobustCount             *uint32                      `path:"robust-count" module:"nokia-conf"`
	SendQueries             *bool                        `path:"send-queries" module:"nokia-conf"`
	Version                 E_NokiaTypesIgmp_IgmpVersion `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_IgmpSnooping) IsYANGGoStruct() {}

// GetFastLeave retrieves the value of the leaf FastLeave from the NokiaConf_Configure_Service_PwTemplate_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastLeave is set, it can
// safely use t.GetFastLeave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastLeave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_IgmpSnooping) GetFastLeave() bool {
	if t == nil || t.FastLeave == nil {
		return false
	}
	return *t.FastLeave
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_PwTemplate_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_IgmpSnooping) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Service_PwTemplate_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_IgmpSnooping) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Service_PwTemplate_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_IgmpSnooping) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Service_PwTemplate_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_IgmpSnooping) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 10
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Service_PwTemplate_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_IgmpSnooping) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Service_PwTemplate_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_IgmpSnooping) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// GetSendQueries retrieves the value of the leaf SendQueries from the NokiaConf_Configure_Service_PwTemplate_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendQueries is set, it can
// safely use t.GetSendQueries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendQueries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_IgmpSnooping) GetSendQueries() bool {
	if t == nil || t.SendQueries == nil {
		return false
	}
	return *t.SendQueries
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Service_PwTemplate_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_IgmpSnooping) GetVersion() E_NokiaTypesIgmp_IgmpVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_IgmpVersion_3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastLeave == nil {
		var v bool = false
		t.FastLeave = &v
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 10
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	if t.SendQueries == nil {
		var v bool = false
		t.SendQueries = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_IgmpVersion_3
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_IgmpSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_IgmpSnooping.
func (*NokiaConf_Configure_Service_PwTemplate_IgmpSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_Ingress represents the /nokia-conf/configure/service/pw-template/ingress YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_Ingress struct {
	Filter *NokiaConf_Configure_Service_PwTemplate_Ingress_Filter `path:"filter" module:"nokia-conf"`
	Qos    *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos    `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_PwTemplate_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_PwTemplate_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_PwTemplate_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_PwTemplate_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress) GetFilter() *NokiaConf_Configure_Service_PwTemplate_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_PwTemplate_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress) GetQos() *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_Ingress.
func (*NokiaConf_Configure_Service_PwTemplate_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_Ingress_Filter represents the /nokia-conf/configure/service/pw-template/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_PwTemplate_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_PwTemplate_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_PwTemplate_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_Ingress_Filter.
func (*NokiaConf_Configure_Service_PwTemplate_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_Ingress_Qos represents the /nokia-conf/configure/service/pw-template/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_Ingress_Qos struct {
	Network *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Service_PwTemplate_Ingress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos) GetNetwork() *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_Ingress_Qos.
func (*NokiaConf_Configure_Service_PwTemplate_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network represents the /nokia-conf/configure/service/pw-template/ingress/qos/network YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network struct {
	FpRedirectGroup *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	PolicyName      *string                                                                     `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network) GetFpRedirectGroup() *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network.
func (*NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup represents the /nokia-conf/configure/service/pw-template/ingress/qos/network/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup) IsYANGGoStruct() {}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup.
func (*NokiaConf_Configure_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_L2Pt represents the /nokia-conf/configure/service/pw-template/l2pt YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_L2Pt struct {
	Termination *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination `path:"termination" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_L2Pt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_L2Pt) IsYANGGoStruct() {}

// GetOrCreateTermination retrieves the value of the Termination field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt) GetOrCreateTermination() *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination {
	if t.Termination != nil {
		return t.Termination
	}
	t.Termination = &NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination{}
	return t.Termination
}

// GetTermination returns the value of the Termination struct pointer
// from NokiaConf_Configure_Service_PwTemplate_L2Pt. If the receiver or the field Termination is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt) GetTermination() *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination {
	if t != nil && t.Termination != nil {
		return t.Termination
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_L2Pt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Termination.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_L2Pt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_L2Pt.
func (*NokiaConf_Configure_Service_PwTemplate_L2Pt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination represents the /nokia-conf/configure/service/pw-template/l2pt/termination YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination struct {
	Protocols *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols `path:"protocols" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination) IsYANGGoStruct() {}

// GetOrCreateProtocols retrieves the value of the Protocols field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination) GetOrCreateProtocols() *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols {
	if t.Protocols != nil {
		return t.Protocols
	}
	t.Protocols = &NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols{}
	return t.Protocols
}

// GetProtocols returns the value of the Protocols struct pointer
// from NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination. If the receiver or the field Protocols is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination) GetProtocols() *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols {
	if t != nil && t.Protocols != nil {
		return t.Protocols
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Protocols.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination.
func (*NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols represents the /nokia-conf/configure/service/pw-template/l2pt/termination/protocols YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols struct {
	Cdp  *bool `path:"cdp" module:"nokia-conf"`
	Dtp  *bool `path:"dtp" module:"nokia-conf"`
	Pagp *bool `path:"pagp" module:"nokia-conf"`
	Stp  *bool `path:"stp" module:"nokia-conf"`
	Udld *bool `path:"udld" module:"nokia-conf"`
	Vtp  *bool `path:"vtp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols) IsYANGGoStruct() {}

// GetCdp retrieves the value of the leaf Cdp from the NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cdp is set, it can
// safely use t.GetCdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols) GetCdp() bool {
	if t == nil || t.Cdp == nil {
		return false
	}
	return *t.Cdp
}

// GetDtp retrieves the value of the leaf Dtp from the NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dtp is set, it can
// safely use t.GetDtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dtp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols) GetDtp() bool {
	if t == nil || t.Dtp == nil {
		return false
	}
	return *t.Dtp
}

// GetPagp retrieves the value of the leaf Pagp from the NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pagp is set, it can
// safely use t.GetPagp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pagp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols) GetPagp() bool {
	if t == nil || t.Pagp == nil {
		return false
	}
	return *t.Pagp
}

// GetStp retrieves the value of the leaf Stp from the NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Stp is set, it can
// safely use t.GetStp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Stp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols) GetStp() bool {
	if t == nil || t.Stp == nil {
		return true
	}
	return *t.Stp
}

// GetUdld retrieves the value of the leaf Udld from the NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Udld is set, it can
// safely use t.GetUdld() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Udld == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols) GetUdld() bool {
	if t == nil || t.Udld == nil {
		return false
	}
	return *t.Udld
}

// GetVtp retrieves the value of the leaf Vtp from the NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vtp is set, it can
// safely use t.GetVtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vtp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols) GetVtp() bool {
	if t == nil || t.Vtp == nil {
		return false
	}
	return *t.Vtp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cdp == nil {
		var v bool = false
		t.Cdp = &v
	}
	if t.Dtp == nil {
		var v bool = false
		t.Dtp = &v
	}
	if t.Pagp == nil {
		var v bool = false
		t.Pagp = &v
	}
	if t.Stp == nil {
		var v bool = true
		t.Stp = &v
	}
	if t.Udld == nil {
		var v bool = false
		t.Udld = &v
	}
	if t.Vtp == nil {
		var v bool = false
		t.Vtp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols.
func (*NokiaConf_Configure_Service_PwTemplate_L2Pt_Termination_Protocols) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_SdpExclude represents the /nokia-conf/configure/service/pw-template/sdp-exclude YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_SdpExclude struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_SdpExclude implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_SdpExclude) IsYANGGoStruct() {}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_PwTemplate_SdpExclude
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_SdpExclude) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_SdpExclude
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_SdpExclude) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_PwTemplate_SdpExclude struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_PwTemplate_SdpExclude) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_SdpExclude) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_SdpExclude"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_SdpExclude) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_SdpExclude) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_SdpExclude.
func (*NokiaConf_Configure_Service_PwTemplate_SdpExclude) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_SdpInclude represents the /nokia-conf/configure/service/pw-template/sdp-include YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_SdpInclude struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_SdpInclude implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_SdpInclude) IsYANGGoStruct() {}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_PwTemplate_SdpInclude
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_SdpInclude) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_SdpInclude
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_SdpInclude) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_PwTemplate_SdpInclude struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_PwTemplate_SdpInclude) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_SdpInclude) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_SdpInclude"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_SdpInclude) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_SdpInclude) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_SdpInclude.
func (*NokiaConf_Configure_Service_PwTemplate_SdpInclude) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup represents the /nokia-conf/configure/service/pw-template/split-horizon-group YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup struct {
	Description *string                                                       `path:"description" module:"nokia-conf"`
	Fdb         *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb `path:"fdb" module:"nokia-conf"`
	Name        *string                                                       `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup) IsYANGGoStruct() {}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup) GetOrCreateFdb() *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb{}
	return t.Fdb
}

// GetFdb returns the value of the Fdb struct pointer
// from NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup) GetFdb() *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Fdb.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup.
func (*NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb represents the /nokia-conf/configure/service/pw-template/split-horizon-group/fdb YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb struct {
	Saps *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps `path:"saps" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb) IsYANGGoStruct() {}

// GetOrCreateSaps retrieves the value of the Saps field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb) GetOrCreateSaps() *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps {
	if t.Saps != nil {
		return t.Saps
	}
	t.Saps = &NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps{}
	return t.Saps
}

// GetSaps returns the value of the Saps struct pointer
// from NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb. If the receiver or the field Saps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb) GetSaps() *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps {
	if t != nil && t.Saps != nil {
		return t.Saps
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Saps.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb.
func (*NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps represents the /nokia-conf/configure/service/pw-template/split-horizon-group/fdb/saps YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps struct {
	AutoLearnMacProtect            *bool                                                  `path:"auto-learn-mac-protect" module:"nokia-conf"`
	DiscardUnprotectedDestMac      *bool                                                  `path:"discard-unprotected-dest-mac" module:"nokia-conf"`
	ProtectedSrcMacViolationAction E_NokiaTypesServices_SapProtectedSrcMacViolationAction `path:"protected-src-mac-violation-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps) IsYANGGoStruct() {}

// GetAutoLearnMacProtect retrieves the value of the leaf AutoLearnMacProtect from the NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoLearnMacProtect is set, it can
// safely use t.GetAutoLearnMacProtect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoLearnMacProtect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps) GetAutoLearnMacProtect() bool {
	if t == nil || t.AutoLearnMacProtect == nil {
		return false
	}
	return *t.AutoLearnMacProtect
}

// GetDiscardUnprotectedDestMac retrieves the value of the leaf DiscardUnprotectedDestMac from the NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardUnprotectedDestMac is set, it can
// safely use t.GetDiscardUnprotectedDestMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardUnprotectedDestMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps) GetDiscardUnprotectedDestMac() bool {
	if t == nil || t.DiscardUnprotectedDestMac == nil {
		return false
	}
	return *t.DiscardUnprotectedDestMac
}

// GetProtectedSrcMacViolationAction retrieves the value of the leaf ProtectedSrcMacViolationAction from the NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectedSrcMacViolationAction is set, it can
// safely use t.GetProtectedSrcMacViolationAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectedSrcMacViolationAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps) GetProtectedSrcMacViolationAction() E_NokiaTypesServices_SapProtectedSrcMacViolationAction {
	if t == nil || t.ProtectedSrcMacViolationAction == 0 {
		return 0
	}
	return t.ProtectedSrcMacViolationAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoLearnMacProtect == nil {
		var v bool = false
		t.AutoLearnMacProtect = &v
	}
	if t.DiscardUnprotectedDestMac == nil {
		var v bool = false
		t.DiscardUnprotectedDestMac = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps.
func (*NokiaConf_Configure_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_PwTemplate_Stp represents the /nokia-conf/configure/service/pw-template/stp YANG schema element.
type NokiaConf_Configure_Service_PwTemplate_Stp struct {
	AdminState E_NokiaTypesSros_AdminState      `path:"admin-state" module:"nokia-conf"`
	AutoEdge   *bool                            `path:"auto-edge" module:"nokia-conf"`
	EdgePort   *bool                            `path:"edge-port" module:"nokia-conf"`
	LinkType   E_NokiaTypesServices_StpLinkType `path:"link-type" module:"nokia-conf"`
	PathCost   *int32                           `path:"path-cost" module:"nokia-conf"`
	Priority   *int32                           `path:"priority" module:"nokia-conf"`
	RootGuard  *bool                            `path:"root-guard" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_PwTemplate_Stp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_PwTemplate_Stp) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_PwTemplate_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Stp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetAutoEdge retrieves the value of the leaf AutoEdge from the NokiaConf_Configure_Service_PwTemplate_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoEdge is set, it can
// safely use t.GetAutoEdge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoEdge == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Stp) GetAutoEdge() bool {
	if t == nil || t.AutoEdge == nil {
		return true
	}
	return *t.AutoEdge
}

// GetEdgePort retrieves the value of the leaf EdgePort from the NokiaConf_Configure_Service_PwTemplate_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EdgePort is set, it can
// safely use t.GetEdgePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EdgePort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Stp) GetEdgePort() bool {
	if t == nil || t.EdgePort == nil {
		return false
	}
	return *t.EdgePort
}

// GetLinkType retrieves the value of the leaf LinkType from the NokiaConf_Configure_Service_PwTemplate_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkType is set, it can
// safely use t.GetLinkType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Stp) GetLinkType() E_NokiaTypesServices_StpLinkType {
	if t == nil || t.LinkType == 0 {
		return NokiaTypesServices_StpLinkType_pt_pt
	}
	return t.LinkType
}

// GetPathCost retrieves the value of the leaf PathCost from the NokiaConf_Configure_Service_PwTemplate_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathCost is set, it can
// safely use t.GetPathCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathCost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Stp) GetPathCost() int32 {
	if t == nil || t.PathCost == nil {
		return 10
	}
	return *t.PathCost
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_PwTemplate_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Stp) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 128
	}
	return *t.Priority
}

// GetRootGuard retrieves the value of the leaf RootGuard from the NokiaConf_Configure_Service_PwTemplate_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootGuard is set, it can
// safely use t.GetRootGuard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootGuard == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_PwTemplate_Stp) GetRootGuard() bool {
	if t == nil || t.RootGuard == nil {
		return false
	}
	return *t.RootGuard
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_PwTemplate_Stp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_PwTemplate_Stp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoEdge == nil {
		var v bool = true
		t.AutoEdge = &v
	}
	if t.EdgePort == nil {
		var v bool = false
		t.EdgePort = &v
	}
	if t.LinkType == 0 {
		t.LinkType = NokiaTypesServices_StpLinkType_pt_pt
	}
	if t.PathCost == nil {
		var v int32 = 10
		t.PathCost = &v
	}
	if t.Priority == nil {
		var v int32 = 128
		t.Priority = &v
	}
	if t.RootGuard == nil {
		var v bool = false
		t.RootGuard = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Stp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_PwTemplate_Stp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_PwTemplate_Stp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_PwTemplate_Stp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_PwTemplate_Stp.
func (*NokiaConf_Configure_Service_PwTemplate_Stp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Sdp represents the /nokia-conf/configure/service/sdp YANG schema element.
type NokiaConf_Configure_Service_Sdp struct {
	AccountingPolicy   *uint32                                              `path:"accounting-policy" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                          `path:"admin-state" module:"nokia-conf"`
	AdvMtuOverride     *bool                                                `path:"adv-mtu-override" module:"nokia-conf"`
	AllowFragmentation *bool                                                `path:"allow-fragmentation" module:"nokia-conf"`
	ApplyGroups        []string                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	BgpTunnel          *bool                                                `path:"bgp-tunnel" module:"nokia-conf"`
	BookingFactor      *uint32                                              `path:"booking-factor" module:"nokia-conf"`
	ClassForwarding    *NokiaConf_Configure_Service_Sdp_ClassForwarding     `path:"class-forwarding" module:"nokia-conf" yangPresence:"true"`
	CollectStats       *bool                                                `path:"collect-stats" module:"nokia-conf"`
	DeliveryType       E_NokiaTypesServices_SdpDeliveryType                 `path:"delivery-type" module:"nokia-conf"`
	Description        *string                                              `path:"description" module:"nokia-conf"`
	FarEnd             *NokiaConf_Configure_Service_Sdp_FarEnd              `path:"far-end" module:"nokia-conf"`
	KeepAlive          *NokiaConf_Configure_Service_Sdp_KeepAlive           `path:"keep-alive" module:"nokia-conf"`
	Ldp                *bool                                                `path:"ldp" module:"nokia-conf"`
	LocalEnd           *string                                              `path:"local-end" module:"nokia-conf"`
	Lsp                map[string]*NokiaConf_Configure_Service_Sdp_Lsp      `path:"lsp" module:"nokia-conf"`
	Metric             *uint32                                              `path:"metric" module:"nokia-conf"`
	MixedLspMode       *NokiaConf_Configure_Service_Sdp_MixedLspMode        `path:"mixed-lsp-mode" module:"nokia-conf" yangPresence:"true"`
	NetworkDomain      *string                                              `path:"network-domain" module:"nokia-conf"`
	PathMtu            *int32                                               `path:"path-mtu" module:"nokia-conf"`
	PbbEtype           *string                                              `path:"pbb-etype" module:"nokia-conf"`
	PwPort             *NokiaConf_Configure_Service_Sdp_PwPort              `path:"pw-port" module:"nokia-conf"`
	SdpGroup           map[string]*NokiaConf_Configure_Service_Sdp_SdpGroup `path:"sdp-group" module:"nokia-conf"`
	SdpId              *uint32                                              `path:"sdp-id" module:"nokia-conf"`
	Signaling          E_NokiaConf_Configure_Service_Sdp_Signaling          `path:"signaling" module:"nokia-conf"`
	SourceBmacLsb      *NokiaConf_Configure_Service_Sdp_SourceBmacLsb       `path:"source-bmac-lsb" module:"nokia-conf"`
	SrIsis             *bool                                                `path:"sr-isis" module:"nokia-conf"`
	SrOspf             *bool                                                `path:"sr-ospf" module:"nokia-conf"`
	TunnelFarEnd       *string                                              `path:"tunnel-far-end" module:"nokia-conf"`
	VlanVcEtype        *string                                              `path:"vlan-vc-etype" module:"nokia-conf"`
	WeightedEcmp       *bool                                                `path:"weighted-ecmp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Sdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Sdp) IsYANGGoStruct() {}

// NewLsp creates a new entry in the Lsp list of the
// NokiaConf_Configure_Service_Sdp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Sdp) NewLsp(LspName string) (*NokiaConf_Configure_Service_Sdp_Lsp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsp == nil {
		t.Lsp = make(map[string]*NokiaConf_Configure_Service_Sdp_Lsp)
	}

	key := LspName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lsp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lsp", key)
	}

	t.Lsp[key] = &NokiaConf_Configure_Service_Sdp_Lsp{
		LspName: &LspName,
	}

	return t.Lsp[key], nil
}

// RenameLsp renames an entry in the list Lsp within
// the NokiaConf_Configure_Service_Sdp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Sdp) RenameLsp(oldK, newK string) error {
	if _, ok := t.Lsp[newK]; ok {
		return fmt.Errorf("key %v already exists in Lsp", newK)
	}

	e, ok := t.Lsp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lsp", oldK)
	}
	e.LspName = &newK

	t.Lsp[newK] = e
	delete(t.Lsp, oldK)
	return nil
}

// GetOrCreateLsp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Sdp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Sdp) GetOrCreateLsp(LspName string) *NokiaConf_Configure_Service_Sdp_Lsp {

	key := LspName

	if v, ok := t.Lsp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLsp(LspName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLsp got unexpected error: %v", err))
	}
	return v
}

// GetLsp retrieves the value with the specified key from
// the Lsp map field of NokiaConf_Configure_Service_Sdp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Sdp) GetLsp(LspName string) *NokiaConf_Configure_Service_Sdp_Lsp {

	if t == nil {
		return nil
	}

	key := LspName

	if lm, ok := t.Lsp[key]; ok {
		return lm
	}
	return nil
}

// DeleteLsp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Sdp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Sdp) DeleteLsp(LspName string) {
	key := LspName

	delete(t.Lsp, key)
}

// AppendLsp appends the supplied NokiaConf_Configure_Service_Sdp_Lsp struct to the
// list Lsp of NokiaConf_Configure_Service_Sdp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Sdp_Lsp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Sdp) AppendLsp(v *NokiaConf_Configure_Service_Sdp_Lsp) error {
	if v.LspName == nil {
		return fmt.Errorf("invalid nil key received for LspName")
	}

	key := *v.LspName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsp == nil {
		t.Lsp = make(map[string]*NokiaConf_Configure_Service_Sdp_Lsp)
	}

	if _, ok := t.Lsp[key]; ok {
		return fmt.Errorf("duplicate key for list Lsp %v", key)
	}

	t.Lsp[key] = v
	return nil
}

// NewSdpGroup creates a new entry in the SdpGroup list of the
// NokiaConf_Configure_Service_Sdp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Sdp) NewSdpGroup(GroupName string) (*NokiaConf_Configure_Service_Sdp_SdpGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SdpGroup == nil {
		t.SdpGroup = make(map[string]*NokiaConf_Configure_Service_Sdp_SdpGroup)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SdpGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SdpGroup", key)
	}

	t.SdpGroup[key] = &NokiaConf_Configure_Service_Sdp_SdpGroup{
		GroupName: &GroupName,
	}

	return t.SdpGroup[key], nil
}

// RenameSdpGroup renames an entry in the list SdpGroup within
// the NokiaConf_Configure_Service_Sdp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Sdp) RenameSdpGroup(oldK, newK string) error {
	if _, ok := t.SdpGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in SdpGroup", newK)
	}

	e, ok := t.SdpGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SdpGroup", oldK)
	}
	e.GroupName = &newK

	t.SdpGroup[newK] = e
	delete(t.SdpGroup, oldK)
	return nil
}

// GetOrCreateSdpGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Sdp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Sdp) GetOrCreateSdpGroup(GroupName string) *NokiaConf_Configure_Service_Sdp_SdpGroup {

	key := GroupName

	if v, ok := t.SdpGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSdpGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSdpGroup got unexpected error: %v", err))
	}
	return v
}

// GetSdpGroup retrieves the value with the specified key from
// the SdpGroup map field of NokiaConf_Configure_Service_Sdp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Sdp) GetSdpGroup(GroupName string) *NokiaConf_Configure_Service_Sdp_SdpGroup {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.SdpGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteSdpGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Sdp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Sdp) DeleteSdpGroup(GroupName string) {
	key := GroupName

	delete(t.SdpGroup, key)
}

// AppendSdpGroup appends the supplied NokiaConf_Configure_Service_Sdp_SdpGroup struct to the
// list SdpGroup of NokiaConf_Configure_Service_Sdp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Sdp_SdpGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Sdp) AppendSdpGroup(v *NokiaConf_Configure_Service_Sdp_SdpGroup) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SdpGroup == nil {
		t.SdpGroup = make(map[string]*NokiaConf_Configure_Service_Sdp_SdpGroup)
	}

	if _, ok := t.SdpGroup[key]; ok {
		return fmt.Errorf("duplicate key for list SdpGroup %v", key)
	}

	t.SdpGroup[key] = v
	return nil
}

// GetOrCreateClassForwarding retrieves the value of the ClassForwarding field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Sdp) GetOrCreateClassForwarding() *NokiaConf_Configure_Service_Sdp_ClassForwarding {
	if t.ClassForwarding != nil {
		return t.ClassForwarding
	}
	t.ClassForwarding = &NokiaConf_Configure_Service_Sdp_ClassForwarding{}
	return t.ClassForwarding
}

// GetOrCreateFarEnd retrieves the value of the FarEnd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Sdp) GetOrCreateFarEnd() *NokiaConf_Configure_Service_Sdp_FarEnd {
	if t.FarEnd != nil {
		return t.FarEnd
	}
	t.FarEnd = &NokiaConf_Configure_Service_Sdp_FarEnd{}
	return t.FarEnd
}

// GetOrCreateKeepAlive retrieves the value of the KeepAlive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Sdp) GetOrCreateKeepAlive() *NokiaConf_Configure_Service_Sdp_KeepAlive {
	if t.KeepAlive != nil {
		return t.KeepAlive
	}
	t.KeepAlive = &NokiaConf_Configure_Service_Sdp_KeepAlive{}
	return t.KeepAlive
}

// GetOrCreateMixedLspMode retrieves the value of the MixedLspMode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Sdp) GetOrCreateMixedLspMode() *NokiaConf_Configure_Service_Sdp_MixedLspMode {
	if t.MixedLspMode != nil {
		return t.MixedLspMode
	}
	t.MixedLspMode = &NokiaConf_Configure_Service_Sdp_MixedLspMode{}
	return t.MixedLspMode
}

// GetOrCreatePwPort retrieves the value of the PwPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Sdp) GetOrCreatePwPort() *NokiaConf_Configure_Service_Sdp_PwPort {
	if t.PwPort != nil {
		return t.PwPort
	}
	t.PwPort = &NokiaConf_Configure_Service_Sdp_PwPort{}
	return t.PwPort
}

// GetOrCreateSourceBmacLsb retrieves the value of the SourceBmacLsb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Sdp) GetOrCreateSourceBmacLsb() *NokiaConf_Configure_Service_Sdp_SourceBmacLsb {
	if t.SourceBmacLsb != nil {
		return t.SourceBmacLsb
	}
	t.SourceBmacLsb = &NokiaConf_Configure_Service_Sdp_SourceBmacLsb{}
	return t.SourceBmacLsb
}

// GetClassForwarding returns the value of the ClassForwarding struct pointer
// from NokiaConf_Configure_Service_Sdp. If the receiver or the field ClassForwarding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Sdp) GetClassForwarding() *NokiaConf_Configure_Service_Sdp_ClassForwarding {
	if t != nil && t.ClassForwarding != nil {
		return t.ClassForwarding
	}
	return nil
}

// GetFarEnd returns the value of the FarEnd struct pointer
// from NokiaConf_Configure_Service_Sdp. If the receiver or the field FarEnd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Sdp) GetFarEnd() *NokiaConf_Configure_Service_Sdp_FarEnd {
	if t != nil && t.FarEnd != nil {
		return t.FarEnd
	}
	return nil
}

// GetKeepAlive returns the value of the KeepAlive struct pointer
// from NokiaConf_Configure_Service_Sdp. If the receiver or the field KeepAlive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Sdp) GetKeepAlive() *NokiaConf_Configure_Service_Sdp_KeepAlive {
	if t != nil && t.KeepAlive != nil {
		return t.KeepAlive
	}
	return nil
}

// GetMixedLspMode returns the value of the MixedLspMode struct pointer
// from NokiaConf_Configure_Service_Sdp. If the receiver or the field MixedLspMode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Sdp) GetMixedLspMode() *NokiaConf_Configure_Service_Sdp_MixedLspMode {
	if t != nil && t.MixedLspMode != nil {
		return t.MixedLspMode
	}
	return nil
}

// GetPwPort returns the value of the PwPort struct pointer
// from NokiaConf_Configure_Service_Sdp. If the receiver or the field PwPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Sdp) GetPwPort() *NokiaConf_Configure_Service_Sdp_PwPort {
	if t != nil && t.PwPort != nil {
		return t.PwPort
	}
	return nil
}

// GetSourceBmacLsb returns the value of the SourceBmacLsb struct pointer
// from NokiaConf_Configure_Service_Sdp. If the receiver or the field SourceBmacLsb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Sdp) GetSourceBmacLsb() *NokiaConf_Configure_Service_Sdp_SourceBmacLsb {
	if t != nil && t.SourceBmacLsb != nil {
		return t.SourceBmacLsb
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAdvMtuOverride retrieves the value of the leaf AdvMtuOverride from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvMtuOverride is set, it can
// safely use t.GetAdvMtuOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvMtuOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetAdvMtuOverride() bool {
	if t == nil || t.AdvMtuOverride == nil {
		return false
	}
	return *t.AdvMtuOverride
}

// GetAllowFragmentation retrieves the value of the leaf AllowFragmentation from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowFragmentation is set, it can
// safely use t.GetAllowFragmentation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowFragmentation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetAllowFragmentation() bool {
	if t == nil || t.AllowFragmentation == nil {
		return false
	}
	return *t.AllowFragmentation
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBgpTunnel retrieves the value of the leaf BgpTunnel from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpTunnel is set, it can
// safely use t.GetBgpTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetBgpTunnel() bool {
	if t == nil || t.BgpTunnel == nil {
		return false
	}
	return *t.BgpTunnel
}

// GetBookingFactor retrieves the value of the leaf BookingFactor from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BookingFactor is set, it can
// safely use t.GetBookingFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BookingFactor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetBookingFactor() uint32 {
	if t == nil || t.BookingFactor == nil {
		return 100
	}
	return *t.BookingFactor
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDeliveryType retrieves the value of the leaf DeliveryType from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeliveryType is set, it can
// safely use t.GetDeliveryType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeliveryType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetDeliveryType() E_NokiaTypesServices_SdpDeliveryType {
	if t == nil || t.DeliveryType == 0 {
		return 0
	}
	return t.DeliveryType
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLdp retrieves the value of the leaf Ldp from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ldp is set, it can
// safely use t.GetLdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ldp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetLdp() bool {
	if t == nil || t.Ldp == nil {
		return false
	}
	return *t.Ldp
}

// GetLocalEnd retrieves the value of the leaf LocalEnd from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalEnd is set, it can
// safely use t.GetLocalEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalEnd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetLocalEnd() string {
	if t == nil || t.LocalEnd == nil {
		return ""
	}
	return *t.LocalEnd
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetNetworkDomain retrieves the value of the leaf NetworkDomain from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkDomain is set, it can
// safely use t.GetNetworkDomain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkDomain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetNetworkDomain() string {
	if t == nil || t.NetworkDomain == nil {
		return ""
	}
	return *t.NetworkDomain
}

// GetPathMtu retrieves the value of the leaf PathMtu from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathMtu is set, it can
// safely use t.GetPathMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetPathMtu() int32 {
	if t == nil || t.PathMtu == nil {
		return 0
	}
	return *t.PathMtu
}

// GetPbbEtype retrieves the value of the leaf PbbEtype from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PbbEtype is set, it can
// safely use t.GetPbbEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PbbEtype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetPbbEtype() string {
	if t == nil || t.PbbEtype == nil {
		return "0x88E7"
	}
	return *t.PbbEtype
}

// GetSdpId retrieves the value of the leaf SdpId from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpId is set, it can
// safely use t.GetSdpId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetSdpId() uint32 {
	if t == nil || t.SdpId == nil {
		return 0
	}
	return *t.SdpId
}

// GetSignaling retrieves the value of the leaf Signaling from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Signaling is set, it can
// safely use t.GetSignaling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Signaling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetSignaling() E_NokiaConf_Configure_Service_Sdp_Signaling {
	if t == nil || t.Signaling == 0 {
		return 0
	}
	return t.Signaling
}

// GetSrIsis retrieves the value of the leaf SrIsis from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrIsis is set, it can
// safely use t.GetSrIsis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrIsis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetSrIsis() bool {
	if t == nil || t.SrIsis == nil {
		return false
	}
	return *t.SrIsis
}

// GetSrOspf retrieves the value of the leaf SrOspf from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf is set, it can
// safely use t.GetSrOspf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetSrOspf() bool {
	if t == nil || t.SrOspf == nil {
		return false
	}
	return *t.SrOspf
}

// GetTunnelFarEnd retrieves the value of the leaf TunnelFarEnd from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelFarEnd is set, it can
// safely use t.GetTunnelFarEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelFarEnd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetTunnelFarEnd() string {
	if t == nil || t.TunnelFarEnd == nil {
		return ""
	}
	return *t.TunnelFarEnd
}

// GetVlanVcEtype retrieves the value of the leaf VlanVcEtype from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanVcEtype is set, it can
// safely use t.GetVlanVcEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanVcEtype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetVlanVcEtype() string {
	if t == nil || t.VlanVcEtype == nil {
		return "0x8100"
	}
	return *t.VlanVcEtype
}

// GetWeightedEcmp retrieves the value of the leaf WeightedEcmp from the NokiaConf_Configure_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WeightedEcmp is set, it can
// safely use t.GetWeightedEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WeightedEcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp) GetWeightedEcmp() bool {
	if t == nil || t.WeightedEcmp == nil {
		return false
	}
	return *t.WeightedEcmp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Sdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Sdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AdvMtuOverride == nil {
		var v bool = false
		t.AdvMtuOverride = &v
	}
	if t.AllowFragmentation == nil {
		var v bool = false
		t.AllowFragmentation = &v
	}
	if t.BgpTunnel == nil {
		var v bool = false
		t.BgpTunnel = &v
	}
	if t.BookingFactor == nil {
		var v uint32 = 100
		t.BookingFactor = &v
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.Ldp == nil {
		var v bool = false
		t.Ldp = &v
	}
	if t.PbbEtype == nil {
		var v string = "0x88E7"
		t.PbbEtype = &v
	}
	if t.SrIsis == nil {
		var v bool = false
		t.SrIsis = &v
	}
	if t.SrOspf == nil {
		var v bool = false
		t.SrOspf = &v
	}
	if t.VlanVcEtype == nil {
		var v string = "0x8100"
		t.VlanVcEtype = &v
	}
	if t.WeightedEcmp == nil {
		var v bool = false
		t.WeightedEcmp = &v
	}
	t.ClassForwarding.PopulateDefaults()
	t.FarEnd.PopulateDefaults()
	t.KeepAlive.PopulateDefaults()
	t.MixedLspMode.PopulateDefaults()
	t.PwPort.PopulateDefaults()
	t.SourceBmacLsb.PopulateDefaults()
	for _, e := range t.Lsp {
		e.PopulateDefaults()
	}
	for _, e := range t.SdpGroup {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Sdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Sdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpId == nil {
		return nil, fmt.Errorf("nil value for key SdpId")
	}

	return map[string]interface{}{
		"sdp-id": *t.SdpId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Sdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Sdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Sdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Sdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Sdp.
func (*NokiaConf_Configure_Service_Sdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_SdpGroup represents the /nokia-conf/configure/service/sdp-group YANG schema element.
type NokiaConf_Configure_Service_SdpGroup struct {
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupName          map[string]*NokiaConf_Configure_Service_SdpGroup_GroupName `path:"group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_SdpGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_SdpGroup) IsYANGGoStruct() {}

// NewGroupName creates a new entry in the GroupName list of the
// NokiaConf_Configure_Service_SdpGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_SdpGroup) NewGroupName(GroupName string) (*NokiaConf_Configure_Service_SdpGroup_GroupName, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupName == nil {
		t.GroupName = make(map[string]*NokiaConf_Configure_Service_SdpGroup_GroupName)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupName[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupName", key)
	}

	t.GroupName[key] = &NokiaConf_Configure_Service_SdpGroup_GroupName{
		GroupName: &GroupName,
	}

	return t.GroupName[key], nil
}

// RenameGroupName renames an entry in the list GroupName within
// the NokiaConf_Configure_Service_SdpGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_SdpGroup) RenameGroupName(oldK, newK string) error {
	if _, ok := t.GroupName[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupName", newK)
	}

	e, ok := t.GroupName[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupName", oldK)
	}
	e.GroupName = &newK

	t.GroupName[newK] = e
	delete(t.GroupName, oldK)
	return nil
}

// GetOrCreateGroupName retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_SdpGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_SdpGroup) GetOrCreateGroupName(GroupName string) *NokiaConf_Configure_Service_SdpGroup_GroupName {

	key := GroupName

	if v, ok := t.GroupName[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupName(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupName got unexpected error: %v", err))
	}
	return v
}

// GetGroupName retrieves the value with the specified key from
// the GroupName map field of NokiaConf_Configure_Service_SdpGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_SdpGroup) GetGroupName(GroupName string) *NokiaConf_Configure_Service_SdpGroup_GroupName {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.GroupName[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupName deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_SdpGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_SdpGroup) DeleteGroupName(GroupName string) {
	key := GroupName

	delete(t.GroupName, key)
}

// AppendGroupName appends the supplied NokiaConf_Configure_Service_SdpGroup_GroupName struct to the
// list GroupName of NokiaConf_Configure_Service_SdpGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_SdpGroup_GroupName already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_SdpGroup) AppendGroupName(v *NokiaConf_Configure_Service_SdpGroup_GroupName) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupName == nil {
		t.GroupName = make(map[string]*NokiaConf_Configure_Service_SdpGroup_GroupName)
	}

	if _, ok := t.GroupName[key]; ok {
		return fmt.Errorf("duplicate key for list GroupName %v", key)
	}

	t.GroupName[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_SdpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_SdpGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_SdpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_SdpGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_SdpGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_SdpGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupName {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_SdpGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_SdpGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_SdpGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_SdpGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_SdpGroup.
func (*NokiaConf_Configure_Service_SdpGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_SdpGroup_GroupName represents the /nokia-conf/configure/service/sdp-group/group-name YANG schema element.
type NokiaConf_Configure_Service_SdpGroup_GroupName struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupName          *string  `path:"group-name" module:"nokia-conf"`
	Value              *uint32  `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_SdpGroup_GroupName implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_SdpGroup_GroupName) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_SdpGroup_GroupName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_SdpGroup_GroupName) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_SdpGroup_GroupName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_SdpGroup_GroupName) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_SdpGroup_GroupName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_SdpGroup_GroupName) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Service_SdpGroup_GroupName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_SdpGroup_GroupName) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_SdpGroup_GroupName
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_SdpGroup_GroupName) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_SdpGroup_GroupName struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_SdpGroup_GroupName) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_SdpGroup_GroupName) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_SdpGroup_GroupName"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_SdpGroup_GroupName) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_SdpGroup_GroupName) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_SdpGroup_GroupName.
func (*NokiaConf_Configure_Service_SdpGroup_GroupName) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Sdp_ClassForwarding represents the /nokia-conf/configure/service/sdp/class-forwarding YANG schema element.
type NokiaConf_Configure_Service_Sdp_ClassForwarding struct {
	AdminState           E_NokiaTypesSros_AdminState                                                     `path:"admin-state" module:"nokia-conf"`
	ApplyGroups          []string                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultLsp           *string                                                                         `path:"default-lsp" module:"nokia-conf"`
	EnforceDiffservLspFc *bool                                                                           `path:"enforce-diffserv-lsp-fc" module:"nokia-conf"`
	Fc                   map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc `path:"fc" module:"nokia-conf"`
	MulticastLsp         *string                                                                         `path:"multicast-lsp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Sdp_ClassForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Sdp_ClassForwarding) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Service_Sdp_ClassForwarding struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding) NewFc(FcName E_NokiaTypesSros_FcName) (*NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Service_Sdp_ClassForwarding struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding) RenameFc(oldK, newK E_NokiaTypesSros_FcName) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Sdp_ClassForwarding. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding) GetOrCreateFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Service_Sdp_ClassForwarding. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding) GetFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Sdp_ClassForwarding. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding) DeleteFc(FcName E_NokiaTypesSros_FcName) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc struct to the
// list Fc of NokiaConf_Configure_Service_Sdp_ClassForwarding. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding) AppendFc(v *NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Sdp_ClassForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Sdp_ClassForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Sdp_ClassForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDefaultLsp retrieves the value of the leaf DefaultLsp from the NokiaConf_Configure_Service_Sdp_ClassForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultLsp is set, it can
// safely use t.GetDefaultLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultLsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding) GetDefaultLsp() string {
	if t == nil || t.DefaultLsp == nil {
		return ""
	}
	return *t.DefaultLsp
}

// GetEnforceDiffservLspFc retrieves the value of the leaf EnforceDiffservLspFc from the NokiaConf_Configure_Service_Sdp_ClassForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceDiffservLspFc is set, it can
// safely use t.GetEnforceDiffservLspFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceDiffservLspFc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding) GetEnforceDiffservLspFc() bool {
	if t == nil || t.EnforceDiffservLspFc == nil {
		return false
	}
	return *t.EnforceDiffservLspFc
}

// GetMulticastLsp retrieves the value of the leaf MulticastLsp from the NokiaConf_Configure_Service_Sdp_ClassForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastLsp is set, it can
// safely use t.GetMulticastLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastLsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding) GetMulticastLsp() string {
	if t == nil || t.MulticastLsp == nil {
		return ""
	}
	return *t.MulticastLsp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Sdp_ClassForwarding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.EnforceDiffservLspFc == nil {
		var v bool = false
		t.EnforceDiffservLspFc = &v
	}
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Sdp_ClassForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Sdp_ClassForwarding.
func (*NokiaConf_Configure_Service_Sdp_ClassForwarding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc represents the /nokia-conf/configure/service/sdp/class-forwarding/fc YANG schema element.
type NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc struct {
	ApplyGroups        []string                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                `path:"apply-groups-exclude" module:"nokia-conf"`
	FcName             E_NokiaTypesSros_FcName `path:"fc-name" module:"nokia-conf"`
	Lsp                *string                 `path:"lsp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc) GetFcName() E_NokiaTypesSros_FcName {
	if t == nil || t.FcName == 0 {
		return 0
	}
	return t.FcName
}

// GetLsp retrieves the value of the leaf Lsp from the NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lsp is set, it can
// safely use t.GetLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc) GetLsp() string {
	if t == nil || t.Lsp == nil {
		return ""
	}
	return *t.Lsp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc.
func (*NokiaConf_Configure_Service_Sdp_ClassForwarding_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Sdp_FarEnd represents the /nokia-conf/configure/service/sdp/far-end YANG schema element.
type NokiaConf_Configure_Service_Sdp_FarEnd struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Sdp_FarEnd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Sdp_FarEnd) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_Sdp_FarEnd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_FarEnd) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Sdp_FarEnd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Sdp_FarEnd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Sdp_FarEnd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Sdp_FarEnd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Sdp_FarEnd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Sdp_FarEnd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Sdp_FarEnd.
func (*NokiaConf_Configure_Service_Sdp_FarEnd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Sdp_KeepAlive represents the /nokia-conf/configure/service/sdp/keep-alive YANG schema element.
type NokiaConf_Configure_Service_Sdp_KeepAlive struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	HelloTime          *int32                      `path:"hello-time" module:"nokia-conf"`
	HoldDownTime       *int32                      `path:"hold-down-time" module:"nokia-conf"`
	MaximumDropCount   *int32                      `path:"maximum-drop-count" module:"nokia-conf"`
	MessageLength      *int32                      `path:"message-length" module:"nokia-conf"`
	Timeout            *int32                      `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Sdp_KeepAlive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Sdp_KeepAlive) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Sdp_KeepAlive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_KeepAlive) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Sdp_KeepAlive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_KeepAlive) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Sdp_KeepAlive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_KeepAlive) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHelloTime retrieves the value of the leaf HelloTime from the NokiaConf_Configure_Service_Sdp_KeepAlive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloTime is set, it can
// safely use t.GetHelloTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_KeepAlive) GetHelloTime() int32 {
	if t == nil || t.HelloTime == nil {
		return 10
	}
	return *t.HelloTime
}

// GetHoldDownTime retrieves the value of the leaf HoldDownTime from the NokiaConf_Configure_Service_Sdp_KeepAlive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTime is set, it can
// safely use t.GetHoldDownTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_KeepAlive) GetHoldDownTime() int32 {
	if t == nil || t.HoldDownTime == nil {
		return 10
	}
	return *t.HoldDownTime
}

// GetMaximumDropCount retrieves the value of the leaf MaximumDropCount from the NokiaConf_Configure_Service_Sdp_KeepAlive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumDropCount is set, it can
// safely use t.GetMaximumDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumDropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_KeepAlive) GetMaximumDropCount() int32 {
	if t == nil || t.MaximumDropCount == nil {
		return 3
	}
	return *t.MaximumDropCount
}

// GetMessageLength retrieves the value of the leaf MessageLength from the NokiaConf_Configure_Service_Sdp_KeepAlive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageLength is set, it can
// safely use t.GetMessageLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_KeepAlive) GetMessageLength() int32 {
	if t == nil || t.MessageLength == nil {
		return 0
	}
	return *t.MessageLength
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Service_Sdp_KeepAlive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_KeepAlive) GetTimeout() int32 {
	if t == nil || t.Timeout == nil {
		return 5
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Sdp_KeepAlive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Sdp_KeepAlive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HelloTime == nil {
		var v int32 = 10
		t.HelloTime = &v
	}
	if t.HoldDownTime == nil {
		var v int32 = 10
		t.HoldDownTime = &v
	}
	if t.MaximumDropCount == nil {
		var v int32 = 3
		t.MaximumDropCount = &v
	}
	if t.Timeout == nil {
		var v int32 = 5
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Sdp_KeepAlive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Sdp_KeepAlive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Sdp_KeepAlive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Sdp_KeepAlive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Sdp_KeepAlive.
func (*NokiaConf_Configure_Service_Sdp_KeepAlive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Sdp_Lsp represents the /nokia-conf/configure/service/sdp/lsp YANG schema element.
type NokiaConf_Configure_Service_Sdp_Lsp struct {
	LspName *string `path:"lsp-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Sdp_Lsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Sdp_Lsp) IsYANGGoStruct() {}

// GetLspName retrieves the value of the leaf LspName from the NokiaConf_Configure_Service_Sdp_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspName is set, it can
// safely use t.GetLspName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_Lsp) GetLspName() string {
	if t == nil || t.LspName == nil {
		return ""
	}
	return *t.LspName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Sdp_Lsp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Sdp_Lsp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Sdp_Lsp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Sdp_Lsp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LspName == nil {
		return nil, fmt.Errorf("nil value for key LspName")
	}

	return map[string]interface{}{
		"lsp-name": *t.LspName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Sdp_Lsp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Sdp_Lsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Sdp_Lsp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Sdp_Lsp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Sdp_Lsp.
func (*NokiaConf_Configure_Service_Sdp_Lsp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Sdp_MixedLspMode represents the /nokia-conf/configure/service/sdp/mixed-lsp-mode YANG schema element.
type NokiaConf_Configure_Service_Sdp_MixedLspMode struct {
	RevertTime NokiaConf_Configure_Service_Sdp_MixedLspMode_RevertTime_Union `path:"revert-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Sdp_MixedLspMode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Sdp_MixedLspMode) IsYANGGoStruct() {}

// GetRevertTime retrieves the value of the leaf RevertTime from the NokiaConf_Configure_Service_Sdp_MixedLspMode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertTime is set, it can
// safely use t.GetRevertTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_MixedLspMode) GetRevertTime() NokiaConf_Configure_Service_Sdp_MixedLspMode_RevertTime_Union {
	if t == nil || t.RevertTime == nil {
		return NokiaTypesServices_RevertTime_Enum_immediate
	}
	return t.RevertTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Sdp_MixedLspMode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Sdp_MixedLspMode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RevertTime == nil {
		t.RevertTime = NokiaTypesServices_RevertTime_Enum_immediate
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Sdp_MixedLspMode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Sdp_MixedLspMode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Sdp_MixedLspMode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Sdp_MixedLspMode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Sdp_MixedLspMode.
func (*NokiaConf_Configure_Service_Sdp_MixedLspMode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Sdp_PwPort represents the /nokia-conf/configure/service/sdp/pw-port YANG schema element.
type NokiaConf_Configure_Service_Sdp_PwPort struct {
	BindingPort *string `path:"binding-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Sdp_PwPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Sdp_PwPort) IsYANGGoStruct() {}

// GetBindingPort retrieves the value of the leaf BindingPort from the NokiaConf_Configure_Service_Sdp_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BindingPort is set, it can
// safely use t.GetBindingPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BindingPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_PwPort) GetBindingPort() string {
	if t == nil || t.BindingPort == nil {
		return ""
	}
	return *t.BindingPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Sdp_PwPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Sdp_PwPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Sdp_PwPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Sdp_PwPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Sdp_PwPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Sdp_PwPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Sdp_PwPort.
func (*NokiaConf_Configure_Service_Sdp_PwPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Sdp_SdpGroup represents the /nokia-conf/configure/service/sdp/sdp-group YANG schema element.
type NokiaConf_Configure_Service_Sdp_SdpGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Sdp_SdpGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Sdp_SdpGroup) IsYANGGoStruct() {}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Sdp_SdpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_SdpGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Sdp_SdpGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Sdp_SdpGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Sdp_SdpGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Sdp_SdpGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Sdp_SdpGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Sdp_SdpGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Sdp_SdpGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Sdp_SdpGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Sdp_SdpGroup.
func (*NokiaConf_Configure_Service_Sdp_SdpGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Sdp_SourceBmacLsb represents the /nokia-conf/configure/service/sdp/source-bmac-lsb YANG schema element.
type NokiaConf_Configure_Service_Sdp_SourceBmacLsb struct {
	ControlPwVcId *uint32 `path:"control-pw-vc-id" module:"nokia-conf"`
	Value         *string `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Sdp_SourceBmacLsb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Sdp_SourceBmacLsb) IsYANGGoStruct() {}

// GetControlPwVcId retrieves the value of the leaf ControlPwVcId from the NokiaConf_Configure_Service_Sdp_SourceBmacLsb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlPwVcId is set, it can
// safely use t.GetControlPwVcId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlPwVcId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_SourceBmacLsb) GetControlPwVcId() uint32 {
	if t == nil || t.ControlPwVcId == nil {
		return 0
	}
	return *t.ControlPwVcId
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Service_Sdp_SourceBmacLsb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Sdp_SourceBmacLsb) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Sdp_SourceBmacLsb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Sdp_SourceBmacLsb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Sdp_SourceBmacLsb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Sdp_SourceBmacLsb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Sdp_SourceBmacLsb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Sdp_SourceBmacLsb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Sdp_SourceBmacLsb.
func (*NokiaConf_Configure_Service_Sdp_SourceBmacLsb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System represents the /nokia-conf/configure/service/system YANG schema element.
type NokiaConf_Configure_Service_System struct {
	ApplyGroups                  []string                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude           []string                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Bgp                          *NokiaConf_Configure_Service_System_Bgp            `path:"bgp" module:"nokia-conf"`
	BgpAutoRdRange               *NokiaConf_Configure_Service_System_BgpAutoRdRange `path:"bgp-auto-rd-range" module:"nokia-conf"`
	ExtendedDefaultQinqSapLookup *bool                                              `path:"extended-default-qinq-sap-lookup" module:"nokia-conf"`
	Fdb                          *NokiaConf_Configure_Service_System_Fdb            `path:"fdb" module:"nokia-conf"`
	GreEthBridged                *NokiaConf_Configure_Service_System_GreEthBridged  `path:"gre-eth-bridged" module:"nokia-conf"`
	PwPortList                   *NokiaConf_Configure_Service_System_PwPortList     `path:"pw-port-list" module:"nokia-conf"`
	VpnGreSourceIp               *string                                            `path:"vpn-gre-source-ip" module:"nokia-conf"`
	Vxlan                        *NokiaConf_Configure_Service_System_Vxlan          `path:"vxlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System) IsYANGGoStruct() {}

// GetOrCreateBgp retrieves the value of the Bgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System) GetOrCreateBgp() *NokiaConf_Configure_Service_System_Bgp {
	if t.Bgp != nil {
		return t.Bgp
	}
	t.Bgp = &NokiaConf_Configure_Service_System_Bgp{}
	return t.Bgp
}

// GetOrCreateBgpAutoRdRange retrieves the value of the BgpAutoRdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System) GetOrCreateBgpAutoRdRange() *NokiaConf_Configure_Service_System_BgpAutoRdRange {
	if t.BgpAutoRdRange != nil {
		return t.BgpAutoRdRange
	}
	t.BgpAutoRdRange = &NokiaConf_Configure_Service_System_BgpAutoRdRange{}
	return t.BgpAutoRdRange
}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System) GetOrCreateFdb() *NokiaConf_Configure_Service_System_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &NokiaConf_Configure_Service_System_Fdb{}
	return t.Fdb
}

// GetOrCreateGreEthBridged retrieves the value of the GreEthBridged field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System) GetOrCreateGreEthBridged() *NokiaConf_Configure_Service_System_GreEthBridged {
	if t.GreEthBridged != nil {
		return t.GreEthBridged
	}
	t.GreEthBridged = &NokiaConf_Configure_Service_System_GreEthBridged{}
	return t.GreEthBridged
}

// GetOrCreatePwPortList retrieves the value of the PwPortList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System) GetOrCreatePwPortList() *NokiaConf_Configure_Service_System_PwPortList {
	if t.PwPortList != nil {
		return t.PwPortList
	}
	t.PwPortList = &NokiaConf_Configure_Service_System_PwPortList{}
	return t.PwPortList
}

// GetOrCreateVxlan retrieves the value of the Vxlan field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System) GetOrCreateVxlan() *NokiaConf_Configure_Service_System_Vxlan {
	if t.Vxlan != nil {
		return t.Vxlan
	}
	t.Vxlan = &NokiaConf_Configure_Service_System_Vxlan{}
	return t.Vxlan
}

// GetBgp returns the value of the Bgp struct pointer
// from NokiaConf_Configure_Service_System. If the receiver or the field Bgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System) GetBgp() *NokiaConf_Configure_Service_System_Bgp {
	if t != nil && t.Bgp != nil {
		return t.Bgp
	}
	return nil
}

// GetBgpAutoRdRange returns the value of the BgpAutoRdRange struct pointer
// from NokiaConf_Configure_Service_System. If the receiver or the field BgpAutoRdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System) GetBgpAutoRdRange() *NokiaConf_Configure_Service_System_BgpAutoRdRange {
	if t != nil && t.BgpAutoRdRange != nil {
		return t.BgpAutoRdRange
	}
	return nil
}

// GetFdb returns the value of the Fdb struct pointer
// from NokiaConf_Configure_Service_System. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System) GetFdb() *NokiaConf_Configure_Service_System_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetGreEthBridged returns the value of the GreEthBridged struct pointer
// from NokiaConf_Configure_Service_System. If the receiver or the field GreEthBridged is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System) GetGreEthBridged() *NokiaConf_Configure_Service_System_GreEthBridged {
	if t != nil && t.GreEthBridged != nil {
		return t.GreEthBridged
	}
	return nil
}

// GetPwPortList returns the value of the PwPortList struct pointer
// from NokiaConf_Configure_Service_System. If the receiver or the field PwPortList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System) GetPwPortList() *NokiaConf_Configure_Service_System_PwPortList {
	if t != nil && t.PwPortList != nil {
		return t.PwPortList
	}
	return nil
}

// GetVxlan returns the value of the Vxlan struct pointer
// from NokiaConf_Configure_Service_System. If the receiver or the field Vxlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System) GetVxlan() *NokiaConf_Configure_Service_System_Vxlan {
	if t != nil && t.Vxlan != nil {
		return t.Vxlan
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetExtendedDefaultQinqSapLookup retrieves the value of the leaf ExtendedDefaultQinqSapLookup from the NokiaConf_Configure_Service_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtendedDefaultQinqSapLookup is set, it can
// safely use t.GetExtendedDefaultQinqSapLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtendedDefaultQinqSapLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System) GetExtendedDefaultQinqSapLookup() bool {
	if t == nil || t.ExtendedDefaultQinqSapLookup == nil {
		return false
	}
	return *t.ExtendedDefaultQinqSapLookup
}

// GetVpnGreSourceIp retrieves the value of the leaf VpnGreSourceIp from the NokiaConf_Configure_Service_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnGreSourceIp is set, it can
// safely use t.GetVpnGreSourceIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnGreSourceIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System) GetVpnGreSourceIp() string {
	if t == nil || t.VpnGreSourceIp == nil {
		return ""
	}
	return *t.VpnGreSourceIp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bgp.PopulateDefaults()
	t.BgpAutoRdRange.PopulateDefaults()
	t.Fdb.PopulateDefaults()
	t.GreEthBridged.PopulateDefaults()
	t.PwPortList.PopulateDefaults()
	t.Vxlan.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System.
func (*NokiaConf_Configure_Service_System) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp represents the /nokia-conf/configure/service/system/bgp YANG schema element.
type NokiaConf_Configure_Service_System_Bgp struct {
	Evpn *NokiaConf_Configure_Service_System_Bgp_Evpn `path:"evpn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp) IsYANGGoStruct() {}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_Bgp) GetOrCreateEvpn() *NokiaConf_Configure_Service_System_Bgp_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &NokiaConf_Configure_Service_System_Bgp_Evpn{}
	return t.Evpn
}

// GetEvpn returns the value of the Evpn struct pointer
// from NokiaConf_Configure_Service_System_Bgp. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp) GetEvpn() *NokiaConf_Configure_Service_System_Bgp_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Evpn.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp.
func (*NokiaConf_Configure_Service_System_Bgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_BgpAutoRdRange represents the /nokia-conf/configure/service/system/bgp-auto-rd-range YANG schema element.
type NokiaConf_Configure_Service_System_BgpAutoRdRange struct {
	ApplyGroups        []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	CommunityValue     *NokiaConf_Configure_Service_System_BgpAutoRdRange_CommunityValue `path:"community-value" module:"nokia-conf"`
	IpAddress          *string                                                           `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_BgpAutoRdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_BgpAutoRdRange) IsYANGGoStruct() {}

// GetOrCreateCommunityValue retrieves the value of the CommunityValue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_BgpAutoRdRange) GetOrCreateCommunityValue() *NokiaConf_Configure_Service_System_BgpAutoRdRange_CommunityValue {
	if t.CommunityValue != nil {
		return t.CommunityValue
	}
	t.CommunityValue = &NokiaConf_Configure_Service_System_BgpAutoRdRange_CommunityValue{}
	return t.CommunityValue
}

// GetCommunityValue returns the value of the CommunityValue struct pointer
// from NokiaConf_Configure_Service_System_BgpAutoRdRange. If the receiver or the field CommunityValue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_BgpAutoRdRange) GetCommunityValue() *NokiaConf_Configure_Service_System_BgpAutoRdRange_CommunityValue {
	if t != nil && t.CommunityValue != nil {
		return t.CommunityValue
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_BgpAutoRdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_BgpAutoRdRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_BgpAutoRdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_BgpAutoRdRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_System_BgpAutoRdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_BgpAutoRdRange) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_BgpAutoRdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_BgpAutoRdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CommunityValue.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_BgpAutoRdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_BgpAutoRdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_BgpAutoRdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_BgpAutoRdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_BgpAutoRdRange.
func (*NokiaConf_Configure_Service_System_BgpAutoRdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_BgpAutoRdRange_CommunityValue represents the /nokia-conf/configure/service/system/bgp-auto-rd-range/community-value YANG schema element.
type NokiaConf_Configure_Service_System_BgpAutoRdRange_CommunityValue struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_BgpAutoRdRange_CommunityValue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_BgpAutoRdRange_CommunityValue) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_System_BgpAutoRdRange_CommunityValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_BgpAutoRdRange_CommunityValue) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_System_BgpAutoRdRange_CommunityValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_BgpAutoRdRange_CommunityValue) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_BgpAutoRdRange_CommunityValue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_BgpAutoRdRange_CommunityValue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_BgpAutoRdRange_CommunityValue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_BgpAutoRdRange_CommunityValue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_BgpAutoRdRange_CommunityValue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_BgpAutoRdRange_CommunityValue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_BgpAutoRdRange_CommunityValue.
func (*NokiaConf_Configure_Service_System_BgpAutoRdRange_CommunityValue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn represents the /nokia-conf/configure/service/system/bgp/evpn YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn struct {
	AdPerEsRoute                    *NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute               `path:"ad-per-es-route" module:"nokia-conf"`
	EthernetSegment                 map[string]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment `path:"ethernet-segment" module:"nokia-conf"`
	EtreeLeafLabel                  *bool                                                                   `path:"etree-leaf-label" module:"nokia-conf"`
	EtreeLeafLabelValue             NokiaConf_Configure_Service_System_Bgp_Evpn_EtreeLeafLabelValue_Union   `path:"etree-leaf-label-value" module:"nokia-conf"`
	IngressReplicationBumLabelBlock *string                                                                 `path:"ingress-replication-bum-label-block" module:"nokia-conf"`
	IpPrefixRoutes                  *NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes             `path:"ip-prefix-routes" module:"nokia-conf"`
	MulticastLeaveSyncPropagation   *int32                                                                  `path:"multicast-leave-sync-propagation" module:"nokia-conf"`
	RouteDistinguisher              *string                                                                 `path:"route-distinguisher" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn) IsYANGGoStruct() {}

// NewEthernetSegment creates a new entry in the EthernetSegment list of the
// NokiaConf_Configure_Service_System_Bgp_Evpn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn) NewEthernetSegment(EthernetSegmentName string) (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EthernetSegment == nil {
		t.EthernetSegment = make(map[string]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment)
	}

	key := EthernetSegmentName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EthernetSegment[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EthernetSegment", key)
	}

	t.EthernetSegment[key] = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment{
		EthernetSegmentName: &EthernetSegmentName,
	}

	return t.EthernetSegment[key], nil
}

// RenameEthernetSegment renames an entry in the list EthernetSegment within
// the NokiaConf_Configure_Service_System_Bgp_Evpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn) RenameEthernetSegment(oldK, newK string) error {
	if _, ok := t.EthernetSegment[newK]; ok {
		return fmt.Errorf("key %v already exists in EthernetSegment", newK)
	}

	e, ok := t.EthernetSegment[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EthernetSegment", oldK)
	}
	e.EthernetSegmentName = &newK

	t.EthernetSegment[newK] = e
	delete(t.EthernetSegment, oldK)
	return nil
}

// GetOrCreateEthernetSegment retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn) GetOrCreateEthernetSegment(EthernetSegmentName string) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment {

	key := EthernetSegmentName

	if v, ok := t.EthernetSegment[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEthernetSegment(EthernetSegmentName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEthernetSegment got unexpected error: %v", err))
	}
	return v
}

// GetEthernetSegment retrieves the value with the specified key from
// the EthernetSegment map field of NokiaConf_Configure_Service_System_Bgp_Evpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn) GetEthernetSegment(EthernetSegmentName string) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment {

	if t == nil {
		return nil
	}

	key := EthernetSegmentName

	if lm, ok := t.EthernetSegment[key]; ok {
		return lm
	}
	return nil
}

// DeleteEthernetSegment deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn) DeleteEthernetSegment(EthernetSegmentName string) {
	key := EthernetSegmentName

	delete(t.EthernetSegment, key)
}

// AppendEthernetSegment appends the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment struct to the
// list EthernetSegment of NokiaConf_Configure_Service_System_Bgp_Evpn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn) AppendEthernetSegment(v *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) error {
	if v.EthernetSegmentName == nil {
		return fmt.Errorf("invalid nil key received for EthernetSegmentName")
	}

	key := *v.EthernetSegmentName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EthernetSegment == nil {
		t.EthernetSegment = make(map[string]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment)
	}

	if _, ok := t.EthernetSegment[key]; ok {
		return fmt.Errorf("duplicate key for list EthernetSegment %v", key)
	}

	t.EthernetSegment[key] = v
	return nil
}

// GetOrCreateAdPerEsRoute retrieves the value of the AdPerEsRoute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn) GetOrCreateAdPerEsRoute() *NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute {
	if t.AdPerEsRoute != nil {
		return t.AdPerEsRoute
	}
	t.AdPerEsRoute = &NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute{}
	return t.AdPerEsRoute
}

// GetOrCreateIpPrefixRoutes retrieves the value of the IpPrefixRoutes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn) GetOrCreateIpPrefixRoutes() *NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes {
	if t.IpPrefixRoutes != nil {
		return t.IpPrefixRoutes
	}
	t.IpPrefixRoutes = &NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes{}
	return t.IpPrefixRoutes
}

// GetAdPerEsRoute returns the value of the AdPerEsRoute struct pointer
// from NokiaConf_Configure_Service_System_Bgp_Evpn. If the receiver or the field AdPerEsRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn) GetAdPerEsRoute() *NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute {
	if t != nil && t.AdPerEsRoute != nil {
		return t.AdPerEsRoute
	}
	return nil
}

// GetIpPrefixRoutes returns the value of the IpPrefixRoutes struct pointer
// from NokiaConf_Configure_Service_System_Bgp_Evpn. If the receiver or the field IpPrefixRoutes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn) GetIpPrefixRoutes() *NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes {
	if t != nil && t.IpPrefixRoutes != nil {
		return t.IpPrefixRoutes
	}
	return nil
}

// GetEtreeLeafLabel retrieves the value of the leaf EtreeLeafLabel from the NokiaConf_Configure_Service_System_Bgp_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EtreeLeafLabel is set, it can
// safely use t.GetEtreeLeafLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EtreeLeafLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn) GetEtreeLeafLabel() bool {
	if t == nil || t.EtreeLeafLabel == nil {
		return false
	}
	return *t.EtreeLeafLabel
}

// GetEtreeLeafLabelValue retrieves the value of the leaf EtreeLeafLabelValue from the NokiaConf_Configure_Service_System_Bgp_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EtreeLeafLabelValue is set, it can
// safely use t.GetEtreeLeafLabelValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EtreeLeafLabelValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn) GetEtreeLeafLabelValue() NokiaConf_Configure_Service_System_Bgp_Evpn_EtreeLeafLabelValue_Union {
	if t == nil || t.EtreeLeafLabelValue == nil {
		return NokiaConf_Configure_Service_System_Bgp_Evpn_EtreeLeafLabelValue_Enum_dynamic
	}
	return t.EtreeLeafLabelValue
}

// GetIngressReplicationBumLabelBlock retrieves the value of the leaf IngressReplicationBumLabelBlock from the NokiaConf_Configure_Service_System_Bgp_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressReplicationBumLabelBlock is set, it can
// safely use t.GetIngressReplicationBumLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressReplicationBumLabelBlock == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn) GetIngressReplicationBumLabelBlock() string {
	if t == nil || t.IngressReplicationBumLabelBlock == nil {
		return ""
	}
	return *t.IngressReplicationBumLabelBlock
}

// GetMulticastLeaveSyncPropagation retrieves the value of the leaf MulticastLeaveSyncPropagation from the NokiaConf_Configure_Service_System_Bgp_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastLeaveSyncPropagation is set, it can
// safely use t.GetMulticastLeaveSyncPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastLeaveSyncPropagation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn) GetMulticastLeaveSyncPropagation() int32 {
	if t == nil || t.MulticastLeaveSyncPropagation == nil {
		return 5
	}
	return *t.MulticastLeaveSyncPropagation
}

// GetRouteDistinguisher retrieves the value of the leaf RouteDistinguisher from the NokiaConf_Configure_Service_System_Bgp_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteDistinguisher is set, it can
// safely use t.GetRouteDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteDistinguisher == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn) GetRouteDistinguisher() string {
	if t == nil || t.RouteDistinguisher == nil {
		return ""
	}
	return *t.RouteDistinguisher
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EtreeLeafLabel == nil {
		var v bool = false
		t.EtreeLeafLabel = &v
	}
	if t.EtreeLeafLabelValue == nil {
		t.EtreeLeafLabelValue = NokiaConf_Configure_Service_System_Bgp_Evpn_EtreeLeafLabelValue_Enum_dynamic
	}
	if t.MulticastLeaveSyncPropagation == nil {
		var v int32 = 5
		t.MulticastLeaveSyncPropagation = &v
	}
	t.AdPerEsRoute.PopulateDefaults()
	t.IpPrefixRoutes.PopulateDefaults()
	for _, e := range t.EthernetSegment {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute represents the /nokia-conf/configure/service/system/bgp/evpn/ad-per-es-route YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute struct {
	ExtendedEviRange            *bool                                                                      `path:"extended-evi-range" module:"nokia-conf"`
	RouteDistinguisherIpAddress *string                                                                    `path:"route-distinguisher-ip-address" module:"nokia-conf"`
	RouteTargetType             E_NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute_RouteTargetType `path:"route-target-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute) IsYANGGoStruct() {}

// GetExtendedEviRange retrieves the value of the leaf ExtendedEviRange from the NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtendedEviRange is set, it can
// safely use t.GetExtendedEviRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtendedEviRange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute) GetExtendedEviRange() bool {
	if t == nil || t.ExtendedEviRange == nil {
		return false
	}
	return *t.ExtendedEviRange
}

// GetRouteDistinguisherIpAddress retrieves the value of the leaf RouteDistinguisherIpAddress from the NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteDistinguisherIpAddress is set, it can
// safely use t.GetRouteDistinguisherIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteDistinguisherIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute) GetRouteDistinguisherIpAddress() string {
	if t == nil || t.RouteDistinguisherIpAddress == nil {
		return ""
	}
	return *t.RouteDistinguisherIpAddress
}

// GetRouteTargetType retrieves the value of the leaf RouteTargetType from the NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTargetType is set, it can
// safely use t.GetRouteTargetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTargetType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute) GetRouteTargetType() E_NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute_RouteTargetType {
	if t == nil || t.RouteTargetType == 0 {
		return NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute_RouteTargetType_evi_route_target
	}
	return t.RouteTargetType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ExtendedEviRange == nil {
		var v bool = false
		t.ExtendedEviRange = &v
	}
	if t.RouteTargetType == 0 {
		t.RouteTargetType = NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute_RouteTargetType_evi_route_target
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_AdPerEsRoute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment struct {
	AcDfCapability      E_NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_AcDfCapability  `path:"ac-df-capability" module:"nokia-conf"`
	AdminState          E_NokiaTypesSros_AdminState                                                   `path:"admin-state" module:"nokia-conf"`
	ApplyGroups         []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Association         *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association      `path:"association" module:"nokia-conf"`
	AutoEsi             E_NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_AutoEsi         `path:"auto-esi" module:"nokia-conf"`
	DfElection          *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection       `path:"df-election" module:"nokia-conf"`
	Esi                 *string                                                                       `path:"esi" module:"nokia-conf"`
	EthernetSegmentName *string                                                                       `path:"ethernet-segment-name" module:"nokia-conf"`
	MultiHomingMode     E_NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_MultiHomingMode `path:"multi-homing-mode" module:"nokia-conf"`
	OperGroup           *string                                                                       `path:"oper-group" module:"nokia-conf"`
	OrigIp              *string                                                                       `path:"orig-ip" module:"nokia-conf"`
	Pbb                 *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Pbb              `path:"pbb" module:"nokia-conf"`
	RouteNextHop        *string                                                                       `path:"route-next-hop" module:"nokia-conf"`
	Type                E_NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Type            `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) IsYANGGoStruct() {}

// GetOrCreateAssociation retrieves the value of the Association field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) GetOrCreateAssociation() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association {
	if t.Association != nil {
		return t.Association
	}
	t.Association = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association{}
	return t.Association
}

// GetOrCreateDfElection retrieves the value of the DfElection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) GetOrCreateDfElection() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection {
	if t.DfElection != nil {
		return t.DfElection
	}
	t.DfElection = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection{}
	return t.DfElection
}

// GetOrCreatePbb retrieves the value of the Pbb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) GetOrCreatePbb() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Pbb {
	if t.Pbb != nil {
		return t.Pbb
	}
	t.Pbb = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Pbb{}
	return t.Pbb
}

// GetAssociation returns the value of the Association struct pointer
// from NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment. If the receiver or the field Association is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) GetAssociation() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association {
	if t != nil && t.Association != nil {
		return t.Association
	}
	return nil
}

// GetDfElection returns the value of the DfElection struct pointer
// from NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment. If the receiver or the field DfElection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) GetDfElection() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection {
	if t != nil && t.DfElection != nil {
		return t.DfElection
	}
	return nil
}

// GetPbb returns the value of the Pbb struct pointer
// from NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment. If the receiver or the field Pbb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) GetPbb() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Pbb {
	if t != nil && t.Pbb != nil {
		return t.Pbb
	}
	return nil
}

// GetAcDfCapability retrieves the value of the leaf AcDfCapability from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcDfCapability is set, it can
// safely use t.GetAcDfCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcDfCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) GetAcDfCapability() E_NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_AcDfCapability {
	if t == nil || t.AcDfCapability == 0 {
		return NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_AcDfCapability_include
	}
	return t.AcDfCapability
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAutoEsi retrieves the value of the leaf AutoEsi from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoEsi is set, it can
// safely use t.GetAutoEsi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoEsi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) GetAutoEsi() E_NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_AutoEsi {
	if t == nil || t.AutoEsi == 0 {
		return NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_AutoEsi_none
	}
	return t.AutoEsi
}

// GetEsi retrieves the value of the leaf Esi from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Esi is set, it can
// safely use t.GetEsi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Esi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) GetEsi() string {
	if t == nil || t.Esi == nil {
		return ""
	}
	return *t.Esi
}

// GetEthernetSegmentName retrieves the value of the leaf EthernetSegmentName from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetSegmentName is set, it can
// safely use t.GetEthernetSegmentName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetSegmentName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) GetEthernetSegmentName() string {
	if t == nil || t.EthernetSegmentName == nil {
		return ""
	}
	return *t.EthernetSegmentName
}

// GetMultiHomingMode retrieves the value of the leaf MultiHomingMode from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiHomingMode is set, it can
// safely use t.GetMultiHomingMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiHomingMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) GetMultiHomingMode() E_NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_MultiHomingMode {
	if t == nil || t.MultiHomingMode == 0 {
		return NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_MultiHomingMode_none
	}
	return t.MultiHomingMode
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetOrigIp retrieves the value of the leaf OrigIp from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OrigIp is set, it can
// safely use t.GetOrigIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OrigIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) GetOrigIp() string {
	if t == nil || t.OrigIp == nil {
		return ""
	}
	return *t.OrigIp
}

// GetRouteNextHop retrieves the value of the leaf RouteNextHop from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteNextHop is set, it can
// safely use t.GetRouteNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteNextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) GetRouteNextHop() string {
	if t == nil || t.RouteNextHop == nil {
		return ""
	}
	return *t.RouteNextHop
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) GetType() E_NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Type_none
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcDfCapability == 0 {
		t.AcDfCapability = NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_AcDfCapability_include
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AutoEsi == 0 {
		t.AutoEsi = NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_AutoEsi_none
	}
	if t.MultiHomingMode == 0 {
		t.MultiHomingMode = NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_MultiHomingMode_none
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Type_none
	}
	t.Association.PopulateDefaults()
	t.DfElection.PopulateDefaults()
	t.Pbb.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EthernetSegmentName == nil {
		return nil, fmt.Errorf("nil value for key EthernetSegmentName")
	}

	return map[string]interface{}{
		"ethernet-segment-name": *t.EthernetSegmentName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association struct {
	Lag                      map[string]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag                      `path:"lag" module:"nokia-conf"`
	NetworkInterconnectVxlan map[uint32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan `path:"network-interconnect-vxlan" module:"nokia-conf"`
	Port                     map[string]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port                     `path:"port" module:"nokia-conf"`
	PwPort                   map[uint32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort                   `path:"pw-port" module:"nokia-conf"`
	Sdp                      map[uint32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp                      `path:"sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) IsYANGGoStruct() {}

// NewLag creates a new entry in the Lag list of the
// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) NewLag(LagName string) (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lag == nil {
		t.Lag = make(map[string]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag)
	}

	key := LagName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lag", key)
	}

	t.Lag[key] = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag{
		LagName: &LagName,
	}

	return t.Lag[key], nil
}

// RenameLag renames an entry in the list Lag within
// the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) RenameLag(oldK, newK string) error {
	if _, ok := t.Lag[newK]; ok {
		return fmt.Errorf("key %v already exists in Lag", newK)
	}

	e, ok := t.Lag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lag", oldK)
	}
	e.LagName = &newK

	t.Lag[newK] = e
	delete(t.Lag, oldK)
	return nil
}

// GetOrCreateLag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) GetOrCreateLag(LagName string) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag {

	key := LagName

	if v, ok := t.Lag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLag(LagName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLag got unexpected error: %v", err))
	}
	return v
}

// GetLag retrieves the value with the specified key from
// the Lag map field of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) GetLag(LagName string) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag {

	if t == nil {
		return nil
	}

	key := LagName

	if lm, ok := t.Lag[key]; ok {
		return lm
	}
	return nil
}

// DeleteLag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) DeleteLag(LagName string) {
	key := LagName

	delete(t.Lag, key)
}

// AppendLag appends the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag struct to the
// list Lag of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) AppendLag(v *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) error {
	if v.LagName == nil {
		return fmt.Errorf("invalid nil key received for LagName")
	}

	key := *v.LagName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lag == nil {
		t.Lag = make(map[string]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag)
	}

	if _, ok := t.Lag[key]; ok {
		return fmt.Errorf("duplicate key for list Lag %v", key)
	}

	t.Lag[key] = v
	return nil
}

// NewNetworkInterconnectVxlan creates a new entry in the NetworkInterconnectVxlan list of the
// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) NewNetworkInterconnectVxlan(NetworkInterconnectVxlanId uint32) (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInterconnectVxlan == nil {
		t.NetworkInterconnectVxlan = make(map[uint32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan)
	}

	key := NetworkInterconnectVxlanId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkInterconnectVxlan[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkInterconnectVxlan", key)
	}

	t.NetworkInterconnectVxlan[key] = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan{
		NetworkInterconnectVxlanId: &NetworkInterconnectVxlanId,
	}

	return t.NetworkInterconnectVxlan[key], nil
}

// RenameNetworkInterconnectVxlan renames an entry in the list NetworkInterconnectVxlan within
// the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) RenameNetworkInterconnectVxlan(oldK, newK uint32) error {
	if _, ok := t.NetworkInterconnectVxlan[newK]; ok {
		return fmt.Errorf("key %v already exists in NetworkInterconnectVxlan", newK)
	}

	e, ok := t.NetworkInterconnectVxlan[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NetworkInterconnectVxlan", oldK)
	}
	e.NetworkInterconnectVxlanId = &newK

	t.NetworkInterconnectVxlan[newK] = e
	delete(t.NetworkInterconnectVxlan, oldK)
	return nil
}

// GetOrCreateNetworkInterconnectVxlan retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) GetOrCreateNetworkInterconnectVxlan(NetworkInterconnectVxlanId uint32) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan {

	key := NetworkInterconnectVxlanId

	if v, ok := t.NetworkInterconnectVxlan[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetworkInterconnectVxlan(NetworkInterconnectVxlanId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetworkInterconnectVxlan got unexpected error: %v", err))
	}
	return v
}

// GetNetworkInterconnectVxlan retrieves the value with the specified key from
// the NetworkInterconnectVxlan map field of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) GetNetworkInterconnectVxlan(NetworkInterconnectVxlanId uint32) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan {

	if t == nil {
		return nil
	}

	key := NetworkInterconnectVxlanId

	if lm, ok := t.NetworkInterconnectVxlan[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetworkInterconnectVxlan deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) DeleteNetworkInterconnectVxlan(NetworkInterconnectVxlanId uint32) {
	key := NetworkInterconnectVxlanId

	delete(t.NetworkInterconnectVxlan, key)
}

// AppendNetworkInterconnectVxlan appends the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan struct to the
// list NetworkInterconnectVxlan of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) AppendNetworkInterconnectVxlan(v *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) error {
	if v.NetworkInterconnectVxlanId == nil {
		return fmt.Errorf("invalid nil key received for NetworkInterconnectVxlanId")
	}

	key := *v.NetworkInterconnectVxlanId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInterconnectVxlan == nil {
		t.NetworkInterconnectVxlan = make(map[uint32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan)
	}

	if _, ok := t.NetworkInterconnectVxlan[key]; ok {
		return fmt.Errorf("duplicate key for list NetworkInterconnectVxlan %v", key)
	}

	t.NetworkInterconnectVxlan[key] = v
	return nil
}

// NewPort creates a new entry in the Port list of the
// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) NewPort(PortId string) (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port)
	}

	key := PortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port{
		PortId: &PortId,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) RenamePort(oldK, newK string) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.PortId = &newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) GetOrCreatePort(PortId string) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port {

	key := PortId

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(PortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) GetPort(PortId string) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port {

	if t == nil {
		return nil
	}

	key := PortId

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) DeletePort(PortId string) {
	key := PortId

	delete(t.Port, key)
}

// AppendPort appends the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port struct to the
// list Port of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) AppendPort(v *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) error {
	if v.PortId == nil {
		return fmt.Errorf("invalid nil key received for PortId")
	}

	key := *v.PortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// NewPwPort creates a new entry in the PwPort list of the
// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) NewPwPort(PwPortId uint32) (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwPort == nil {
		t.PwPort = make(map[uint32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort)
	}

	key := PwPortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PwPort[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PwPort", key)
	}

	t.PwPort[key] = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort{
		PwPortId: &PwPortId,
	}

	return t.PwPort[key], nil
}

// RenamePwPort renames an entry in the list PwPort within
// the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) RenamePwPort(oldK, newK uint32) error {
	if _, ok := t.PwPort[newK]; ok {
		return fmt.Errorf("key %v already exists in PwPort", newK)
	}

	e, ok := t.PwPort[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PwPort", oldK)
	}
	e.PwPortId = &newK

	t.PwPort[newK] = e
	delete(t.PwPort, oldK)
	return nil
}

// GetOrCreatePwPort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) GetOrCreatePwPort(PwPortId uint32) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort {

	key := PwPortId

	if v, ok := t.PwPort[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPwPort(PwPortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePwPort got unexpected error: %v", err))
	}
	return v
}

// GetPwPort retrieves the value with the specified key from
// the PwPort map field of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) GetPwPort(PwPortId uint32) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort {

	if t == nil {
		return nil
	}

	key := PwPortId

	if lm, ok := t.PwPort[key]; ok {
		return lm
	}
	return nil
}

// DeletePwPort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) DeletePwPort(PwPortId uint32) {
	key := PwPortId

	delete(t.PwPort, key)
}

// AppendPwPort appends the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort struct to the
// list PwPort of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) AppendPwPort(v *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) error {
	if v.PwPortId == nil {
		return fmt.Errorf("invalid nil key received for PwPortId")
	}

	key := *v.PwPortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwPort == nil {
		t.PwPort = make(map[uint32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort)
	}

	if _, ok := t.PwPort[key]; ok {
		return fmt.Errorf("duplicate key for list PwPort %v", key)
	}

	t.PwPort[key] = v
	return nil
}

// NewSdp creates a new entry in the Sdp list of the
// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) NewSdp(SdpId uint32) (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sdp == nil {
		t.Sdp = make(map[uint32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp)
	}

	key := SdpId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sdp", key)
	}

	t.Sdp[key] = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp{
		SdpId: &SdpId,
	}

	return t.Sdp[key], nil
}

// RenameSdp renames an entry in the list Sdp within
// the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) RenameSdp(oldK, newK uint32) error {
	if _, ok := t.Sdp[newK]; ok {
		return fmt.Errorf("key %v already exists in Sdp", newK)
	}

	e, ok := t.Sdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sdp", oldK)
	}
	e.SdpId = &newK

	t.Sdp[newK] = e
	delete(t.Sdp, oldK)
	return nil
}

// GetOrCreateSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) GetOrCreateSdp(SdpId uint32) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp {

	key := SdpId

	if v, ok := t.Sdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSdp(SdpId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSdp got unexpected error: %v", err))
	}
	return v
}

// GetSdp retrieves the value with the specified key from
// the Sdp map field of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) GetSdp(SdpId uint32) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp {

	if t == nil {
		return nil
	}

	key := SdpId

	if lm, ok := t.Sdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) DeleteSdp(SdpId uint32) {
	key := SdpId

	delete(t.Sdp, key)
}

// AppendSdp appends the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp struct to the
// list Sdp of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) AppendSdp(v *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) error {
	if v.SdpId == nil {
		return fmt.Errorf("invalid nil key received for SdpId")
	}

	key := *v.SdpId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sdp == nil {
		t.Sdp = make(map[uint32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp)
	}

	if _, ok := t.Sdp[key]; ok {
		return fmt.Errorf("duplicate key for list Sdp %v", key)
	}

	t.Sdp[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Lag {
		e.PopulateDefaults()
	}
	for _, e := range t.NetworkInterconnectVxlan {
		e.PopulateDefaults()
	}
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
	for _, e := range t.PwPort {
		e.PopulateDefaults()
	}
	for _, e := range t.Sdp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/lag YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag struct {
	ApplyGroups        []string                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	LagName            *string                                                                                    `path:"lag-name" module:"nokia-conf"`
	VirtualRanges      *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges `path:"virtual-ranges" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) IsYANGGoStruct() {
}

// GetOrCreateVirtualRanges retrieves the value of the VirtualRanges field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) GetOrCreateVirtualRanges() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges {
	if t.VirtualRanges != nil {
		return t.VirtualRanges
	}
	t.VirtualRanges = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges{}
	return t.VirtualRanges
}

// GetVirtualRanges returns the value of the VirtualRanges struct pointer
// from NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag. If the receiver or the field VirtualRanges is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) GetVirtualRanges() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges {
	if t != nil && t.VirtualRanges != nil {
		return t.VirtualRanges
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLagName retrieves the value of the leaf LagName from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagName is set, it can
// safely use t.GetLagName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) GetLagName() string {
	if t == nil || t.LagName == nil {
		return ""
	}
	return *t.LagName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.VirtualRanges.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LagName == nil {
		return nil, fmt.Errorf("nil value for key LagName")
	}

	return map[string]interface{}{
		"lag-name": *t.LagName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/lag/virtual-ranges YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges struct {
	Dot1Q *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q `path:"dot1q" module:"nokia-conf"`
	Qinq  *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq  `path:"qinq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges) IsYANGGoStruct() {
}

// GetOrCreateDot1Q retrieves the value of the Dot1Q field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges) GetOrCreateDot1Q() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q {
	if t.Dot1Q != nil {
		return t.Dot1Q
	}
	t.Dot1Q = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q{}
	return t.Dot1Q
}

// GetOrCreateQinq retrieves the value of the Qinq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges) GetOrCreateQinq() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq {
	if t.Qinq != nil {
		return t.Qinq
	}
	t.Qinq = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq{}
	return t.Qinq
}

// GetDot1Q returns the value of the Dot1Q struct pointer
// from NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges. If the receiver or the field Dot1Q is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges) GetDot1Q() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q {
	if t != nil && t.Dot1Q != nil {
		return t.Dot1Q
	}
	return nil
}

// GetQinq returns the value of the Qinq struct pointer
// from NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges. If the receiver or the field Qinq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges) GetQinq() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq {
	if t != nil && t.Qinq != nil {
		return t.Qinq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dot1Q.PopulateDefaults()
	t.Qinq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/lag/virtual-ranges/dot1q YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q struct {
	QTag map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_Start_Union]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag `path:"q-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) IsYANGGoStruct() {
}

// NewQTag creates a new entry in the QTag list of the
// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) NewQTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_Start_Union) (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QTag == nil {
		t.QTag = make(map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_Start_Union]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QTag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QTag", key)
	}

	t.QTag[key] = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag{
		Start: Start,
	}

	return t.QTag[key], nil
}

// RenameQTag renames an entry in the list QTag within
// the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) RenameQTag(oldK, newK NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_Start_Union) error {
	if _, ok := t.QTag[newK]; ok {
		return fmt.Errorf("key %v already exists in QTag", newK)
	}

	e, ok := t.QTag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QTag", oldK)
	}
	e.Start = newK

	t.QTag[newK] = e
	delete(t.QTag, oldK)
	return nil
}

// GetOrCreateQTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) GetOrCreateQTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_Start_Union) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag {

	key := Start

	if v, ok := t.QTag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQTag(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQTag got unexpected error: %v", err))
	}
	return v
}

// GetQTag retrieves the value with the specified key from
// the QTag map field of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) GetQTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_Start_Union) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.QTag[key]; ok {
		return lm
	}
	return nil
}

// DeleteQTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) DeleteQTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_Start_Union) {
	key := Start

	delete(t.QTag, key)
}

// AppendQTag appends the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag struct to the
// list QTag of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) AppendQTag(v *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) error {
	key := v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QTag == nil {
		t.QTag = make(map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_Start_Union]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag)
	}

	if _, ok := t.QTag[key]; ok {
		return fmt.Errorf("duplicate key for list QTag %v", key)
	}

	t.QTag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.QTag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/lag/virtual-ranges/dot1q/q-tag YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag struct {
	ApplyGroups        []string                                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	End                NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_End_Union   `path:"end" module:"nokia-conf"`
	Start              NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) GetEnd() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) GetStart() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/lag/virtual-ranges/qinq YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq struct {
	STag     map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_Start_Union]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag `path:"s-tag" module:"nokia-conf"`
	STagCTag map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag `path:"s-tag-c-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) IsYANGGoStruct() {
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key represents the key for list STagCTag of element /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/lag/virtual-ranges/qinq.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key struct {
	STag      NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_STag_Union      `path:"s-tag"`
	CTagStart NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_CTagStart_Union `path:"c-tag-start"`
}

// NewSTag creates a new entry in the STag list of the
// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) NewSTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_Start_Union) (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STag == nil {
		t.STag = make(map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_Start_Union]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.STag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list STag", key)
	}

	t.STag[key] = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag{
		Start: Start,
	}

	return t.STag[key], nil
}

// RenameSTag renames an entry in the list STag within
// the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) RenameSTag(oldK, newK NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_Start_Union) error {
	if _, ok := t.STag[newK]; ok {
		return fmt.Errorf("key %v already exists in STag", newK)
	}

	e, ok := t.STag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in STag", oldK)
	}
	e.Start = newK

	t.STag[newK] = e
	delete(t.STag, oldK)
	return nil
}

// GetOrCreateSTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) GetOrCreateSTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_Start_Union) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag {

	key := Start

	if v, ok := t.STag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSTag(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSTag got unexpected error: %v", err))
	}
	return v
}

// GetSTag retrieves the value with the specified key from
// the STag map field of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) GetSTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_Start_Union) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.STag[key]; ok {
		return lm
	}
	return nil
}

// DeleteSTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) DeleteSTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_Start_Union) {
	key := Start

	delete(t.STag, key)
}

// AppendSTag appends the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag struct to the
// list STag of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) AppendSTag(v *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) error {
	key := v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STag == nil {
		t.STag = make(map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_Start_Union]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag)
	}

	if _, ok := t.STag[key]; ok {
		return fmt.Errorf("duplicate key for list STag %v", key)
	}

	t.STag[key] = v
	return nil
}

// NewSTagCTag creates a new entry in the STagCTag list of the
// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) NewSTagCTag(STag NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_CTagStart_Union) (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STagCTag == nil {
		t.STagCTag = make(map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag)
	}

	key := NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.STagCTag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list STagCTag", key)
	}

	t.STagCTag[key] = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag{
		STag:      STag,
		CTagStart: CTagStart,
	}

	return t.STagCTag[key], nil
}

// RenameSTagCTag renames an entry in the list STagCTag within
// the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) RenameSTagCTag(oldK, newK NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key) error {
	if _, ok := t.STagCTag[newK]; ok {
		return fmt.Errorf("key %v already exists in STagCTag", newK)
	}

	e, ok := t.STagCTag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in STagCTag", oldK)
	}
	e.STag = newK.STag
	e.CTagStart = newK.CTagStart

	t.STagCTag[newK] = e
	delete(t.STagCTag, oldK)
	return nil
}

// GetOrCreateSTagCTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) GetOrCreateSTagCTag(STag NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_CTagStart_Union) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag {

	key := NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	if v, ok := t.STagCTag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSTagCTag(STag, CTagStart)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSTagCTag got unexpected error: %v", err))
	}
	return v
}

// GetSTagCTag retrieves the value with the specified key from
// the STagCTag map field of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) GetSTagCTag(STag NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_CTagStart_Union) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	if lm, ok := t.STagCTag[key]; ok {
		return lm
	}
	return nil
}

// DeleteSTagCTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) DeleteSTagCTag(STag NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_CTagStart_Union) {
	key := NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	delete(t.STagCTag, key)
}

// AppendSTagCTag appends the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag struct to the
// list STagCTag of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) AppendSTagCTag(v *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) error {
	key := NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key{
		STag:      v.STag,
		CTagStart: v.CTagStart,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STagCTag == nil {
		t.STagCTag = make(map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag)
	}

	if _, ok := t.STagCTag[key]; ok {
		return fmt.Errorf("duplicate key for list STagCTag %v", key)
	}

	t.STagCTag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.STag {
		e.PopulateDefaults()
	}
	for _, e := range t.STagCTag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/lag/virtual-ranges/qinq/s-tag YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag struct {
	ApplyGroups        []string                                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	End                NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_End_Union   `path:"end" module:"nokia-conf"`
	Start              NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) GetEnd() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) GetStart() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/lag/virtual-ranges/qinq/s-tag-c-tag YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag struct {
	ApplyGroups        []string                                                                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	CTagEnd            NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_CTagEnd_Union   `path:"c-tag-end" module:"nokia-conf"`
	CTagStart          NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_CTagStart_Union `path:"c-tag-start" module:"nokia-conf"`
	STag               NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_STag_Union      `path:"s-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCTagEnd retrieves the value of the leaf CTagEnd from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CTagEnd is set, it can
// safely use t.GetCTagEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CTagEnd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) GetCTagEnd() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_CTagEnd_Union {
	if t == nil || t.CTagEnd == nil {
		return nil
	}
	return t.CTagEnd
}

// GetCTagStart retrieves the value of the leaf CTagStart from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CTagStart is set, it can
// safely use t.GetCTagStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CTagStart == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) GetCTagStart() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_CTagStart_Union {
	if t == nil || t.CTagStart == nil {
		return nil
	}
	return t.CTagStart
}

// GetSTag retrieves the value of the leaf STag from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if STag is set, it can
// safely use t.GetSTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.STag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) GetSTag() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_STag_Union {
	if t == nil || t.STag == nil {
		return nil
	}
	return t.STag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"c-tag-start": t.CTagStart,
		"s-tag":       t.STag,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/network-interconnect-vxlan YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan struct {
	ApplyGroups                []string                                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude         []string                                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	NetworkInterconnectVxlanId *uint32                                                                                                         `path:"network-interconnect-vxlan-id" module:"nokia-conf"`
	VirtualRanges              *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges `path:"virtual-ranges" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) IsYANGGoStruct() {
}

// GetOrCreateVirtualRanges retrieves the value of the VirtualRanges field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) GetOrCreateVirtualRanges() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges {
	if t.VirtualRanges != nil {
		return t.VirtualRanges
	}
	t.VirtualRanges = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges{}
	return t.VirtualRanges
}

// GetVirtualRanges returns the value of the VirtualRanges struct pointer
// from NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan. If the receiver or the field VirtualRanges is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) GetVirtualRanges() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges {
	if t != nil && t.VirtualRanges != nil {
		return t.VirtualRanges
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetNetworkInterconnectVxlanId retrieves the value of the leaf NetworkInterconnectVxlanId from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInterconnectVxlanId is set, it can
// safely use t.GetNetworkInterconnectVxlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInterconnectVxlanId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) GetNetworkInterconnectVxlanId() uint32 {
	if t == nil || t.NetworkInterconnectVxlanId == nil {
		return 0
	}
	return *t.NetworkInterconnectVxlanId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.VirtualRanges.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NetworkInterconnectVxlanId == nil {
		return nil, fmt.Errorf("nil value for key NetworkInterconnectVxlanId")
	}

	return map[string]interface{}{
		"network-interconnect-vxlan-id": *t.NetworkInterconnectVxlanId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/network-interconnect-vxlan/virtual-ranges YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges struct {
	ServiceId map[uint32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId `path:"service-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) IsYANGGoStruct() {
}

// NewServiceId creates a new entry in the ServiceId list of the
// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) NewServiceId(Start uint32) (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServiceId == nil {
		t.ServiceId = make(map[uint32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServiceId[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServiceId", key)
	}

	t.ServiceId[key] = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId{
		Start: &Start,
	}

	return t.ServiceId[key], nil
}

// RenameServiceId renames an entry in the list ServiceId within
// the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) RenameServiceId(oldK, newK uint32) error {
	if _, ok := t.ServiceId[newK]; ok {
		return fmt.Errorf("key %v already exists in ServiceId", newK)
	}

	e, ok := t.ServiceId[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServiceId", oldK)
	}
	e.Start = &newK

	t.ServiceId[newK] = e
	delete(t.ServiceId, oldK)
	return nil
}

// GetOrCreateServiceId retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) GetOrCreateServiceId(Start uint32) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId {

	key := Start

	if v, ok := t.ServiceId[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServiceId(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServiceId got unexpected error: %v", err))
	}
	return v
}

// GetServiceId retrieves the value with the specified key from
// the ServiceId map field of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) GetServiceId(Start uint32) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.ServiceId[key]; ok {
		return lm
	}
	return nil
}

// DeleteServiceId deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) DeleteServiceId(Start uint32) {
	key := Start

	delete(t.ServiceId, key)
}

// AppendServiceId appends the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId struct to the
// list ServiceId of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) AppendServiceId(v *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key received for Start")
	}

	key := *v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServiceId == nil {
		t.ServiceId = make(map[uint32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId)
	}

	if _, ok := t.ServiceId[key]; ok {
		return fmt.Errorf("duplicate key for list ServiceId %v", key)
	}

	t.ServiceId[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ServiceId {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/network-interconnect-vxlan/virtual-ranges/service-id YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *uint32  `path:"end" module:"nokia-conf"`
	Start              *uint32  `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/port YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port struct {
	ApplyGroups        []string                                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	PortId             *string                                                                                     `path:"port-id" module:"nokia-conf"`
	VirtualRanges      *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges `path:"virtual-ranges" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) IsYANGGoStruct() {
}

// GetOrCreateVirtualRanges retrieves the value of the VirtualRanges field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) GetOrCreateVirtualRanges() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges {
	if t.VirtualRanges != nil {
		return t.VirtualRanges
	}
	t.VirtualRanges = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges{}
	return t.VirtualRanges
}

// GetVirtualRanges returns the value of the VirtualRanges struct pointer
// from NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port. If the receiver or the field VirtualRanges is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) GetVirtualRanges() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges {
	if t != nil && t.VirtualRanges != nil {
		return t.VirtualRanges
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.VirtualRanges.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortId == nil {
		return nil, fmt.Errorf("nil value for key PortId")
	}

	return map[string]interface{}{
		"port-id": *t.PortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/port/virtual-ranges YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges struct {
	Dot1Q *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q `path:"dot1q" module:"nokia-conf"`
	Qinq  *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq  `path:"qinq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges) IsYANGGoStruct() {
}

// GetOrCreateDot1Q retrieves the value of the Dot1Q field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges) GetOrCreateDot1Q() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q {
	if t.Dot1Q != nil {
		return t.Dot1Q
	}
	t.Dot1Q = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q{}
	return t.Dot1Q
}

// GetOrCreateQinq retrieves the value of the Qinq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges) GetOrCreateQinq() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq {
	if t.Qinq != nil {
		return t.Qinq
	}
	t.Qinq = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq{}
	return t.Qinq
}

// GetDot1Q returns the value of the Dot1Q struct pointer
// from NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges. If the receiver or the field Dot1Q is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges) GetDot1Q() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q {
	if t != nil && t.Dot1Q != nil {
		return t.Dot1Q
	}
	return nil
}

// GetQinq returns the value of the Qinq struct pointer
// from NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges. If the receiver or the field Qinq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges) GetQinq() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq {
	if t != nil && t.Qinq != nil {
		return t.Qinq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dot1Q.PopulateDefaults()
	t.Qinq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/port/virtual-ranges/dot1q YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q struct {
	QTag map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_Start_Union]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag `path:"q-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) IsYANGGoStruct() {
}

// NewQTag creates a new entry in the QTag list of the
// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) NewQTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_Start_Union) (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QTag == nil {
		t.QTag = make(map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_Start_Union]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QTag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QTag", key)
	}

	t.QTag[key] = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag{
		Start: Start,
	}

	return t.QTag[key], nil
}

// RenameQTag renames an entry in the list QTag within
// the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) RenameQTag(oldK, newK NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_Start_Union) error {
	if _, ok := t.QTag[newK]; ok {
		return fmt.Errorf("key %v already exists in QTag", newK)
	}

	e, ok := t.QTag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QTag", oldK)
	}
	e.Start = newK

	t.QTag[newK] = e
	delete(t.QTag, oldK)
	return nil
}

// GetOrCreateQTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) GetOrCreateQTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_Start_Union) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag {

	key := Start

	if v, ok := t.QTag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQTag(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQTag got unexpected error: %v", err))
	}
	return v
}

// GetQTag retrieves the value with the specified key from
// the QTag map field of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) GetQTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_Start_Union) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.QTag[key]; ok {
		return lm
	}
	return nil
}

// DeleteQTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) DeleteQTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_Start_Union) {
	key := Start

	delete(t.QTag, key)
}

// AppendQTag appends the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag struct to the
// list QTag of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) AppendQTag(v *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) error {
	key := v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QTag == nil {
		t.QTag = make(map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_Start_Union]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag)
	}

	if _, ok := t.QTag[key]; ok {
		return fmt.Errorf("duplicate key for list QTag %v", key)
	}

	t.QTag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.QTag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/port/virtual-ranges/dot1q/q-tag YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag struct {
	ApplyGroups        []string                                                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	End                NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_End_Union   `path:"end" module:"nokia-conf"`
	Start              NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) GetEnd() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) GetStart() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/port/virtual-ranges/qinq YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq struct {
	STag     map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_Start_Union]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag `path:"s-tag" module:"nokia-conf"`
	STagCTag map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag `path:"s-tag-c-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) IsYANGGoStruct() {
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key represents the key for list STagCTag of element /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/port/virtual-ranges/qinq.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key struct {
	STag      NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_STag_Union      `path:"s-tag"`
	CTagStart NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_CTagStart_Union `path:"c-tag-start"`
}

// NewSTag creates a new entry in the STag list of the
// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) NewSTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_Start_Union) (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STag == nil {
		t.STag = make(map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_Start_Union]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.STag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list STag", key)
	}

	t.STag[key] = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag{
		Start: Start,
	}

	return t.STag[key], nil
}

// RenameSTag renames an entry in the list STag within
// the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) RenameSTag(oldK, newK NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_Start_Union) error {
	if _, ok := t.STag[newK]; ok {
		return fmt.Errorf("key %v already exists in STag", newK)
	}

	e, ok := t.STag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in STag", oldK)
	}
	e.Start = newK

	t.STag[newK] = e
	delete(t.STag, oldK)
	return nil
}

// GetOrCreateSTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) GetOrCreateSTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_Start_Union) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag {

	key := Start

	if v, ok := t.STag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSTag(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSTag got unexpected error: %v", err))
	}
	return v
}

// GetSTag retrieves the value with the specified key from
// the STag map field of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) GetSTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_Start_Union) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.STag[key]; ok {
		return lm
	}
	return nil
}

// DeleteSTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) DeleteSTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_Start_Union) {
	key := Start

	delete(t.STag, key)
}

// AppendSTag appends the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag struct to the
// list STag of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) AppendSTag(v *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) error {
	key := v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STag == nil {
		t.STag = make(map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_Start_Union]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag)
	}

	if _, ok := t.STag[key]; ok {
		return fmt.Errorf("duplicate key for list STag %v", key)
	}

	t.STag[key] = v
	return nil
}

// NewSTagCTag creates a new entry in the STagCTag list of the
// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) NewSTagCTag(STag NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_CTagStart_Union) (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STagCTag == nil {
		t.STagCTag = make(map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag)
	}

	key := NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.STagCTag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list STagCTag", key)
	}

	t.STagCTag[key] = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag{
		STag:      STag,
		CTagStart: CTagStart,
	}

	return t.STagCTag[key], nil
}

// RenameSTagCTag renames an entry in the list STagCTag within
// the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) RenameSTagCTag(oldK, newK NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key) error {
	if _, ok := t.STagCTag[newK]; ok {
		return fmt.Errorf("key %v already exists in STagCTag", newK)
	}

	e, ok := t.STagCTag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in STagCTag", oldK)
	}
	e.STag = newK.STag
	e.CTagStart = newK.CTagStart

	t.STagCTag[newK] = e
	delete(t.STagCTag, oldK)
	return nil
}

// GetOrCreateSTagCTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) GetOrCreateSTagCTag(STag NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_CTagStart_Union) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag {

	key := NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	if v, ok := t.STagCTag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSTagCTag(STag, CTagStart)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSTagCTag got unexpected error: %v", err))
	}
	return v
}

// GetSTagCTag retrieves the value with the specified key from
// the STagCTag map field of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) GetSTagCTag(STag NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_CTagStart_Union) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	if lm, ok := t.STagCTag[key]; ok {
		return lm
	}
	return nil
}

// DeleteSTagCTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) DeleteSTagCTag(STag NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_CTagStart_Union) {
	key := NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	delete(t.STagCTag, key)
}

// AppendSTagCTag appends the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag struct to the
// list STagCTag of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) AppendSTagCTag(v *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) error {
	key := NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key{
		STag:      v.STag,
		CTagStart: v.CTagStart,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STagCTag == nil {
		t.STagCTag = make(map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag)
	}

	if _, ok := t.STagCTag[key]; ok {
		return fmt.Errorf("duplicate key for list STagCTag %v", key)
	}

	t.STagCTag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.STag {
		e.PopulateDefaults()
	}
	for _, e := range t.STagCTag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/port/virtual-ranges/qinq/s-tag YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag struct {
	ApplyGroups        []string                                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	End                NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_End_Union   `path:"end" module:"nokia-conf"`
	Start              NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) GetEnd() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) GetStart() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/port/virtual-ranges/qinq/s-tag-c-tag YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag struct {
	ApplyGroups        []string                                                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	CTagEnd            NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_CTagEnd_Union   `path:"c-tag-end" module:"nokia-conf"`
	CTagStart          NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_CTagStart_Union `path:"c-tag-start" module:"nokia-conf"`
	STag               NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_STag_Union      `path:"s-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCTagEnd retrieves the value of the leaf CTagEnd from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CTagEnd is set, it can
// safely use t.GetCTagEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CTagEnd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) GetCTagEnd() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_CTagEnd_Union {
	if t == nil || t.CTagEnd == nil {
		return nil
	}
	return t.CTagEnd
}

// GetCTagStart retrieves the value of the leaf CTagStart from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CTagStart is set, it can
// safely use t.GetCTagStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CTagStart == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) GetCTagStart() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_CTagStart_Union {
	if t == nil || t.CTagStart == nil {
		return nil
	}
	return t.CTagStart
}

// GetSTag retrieves the value of the leaf STag from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if STag is set, it can
// safely use t.GetSTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.STag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) GetSTag() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_STag_Union {
	if t == nil || t.STag == nil {
		return nil
	}
	return t.STag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"c-tag-start": t.CTagStart,
		"s-tag":       t.STag,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/pw-port YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort struct {
	ApplyGroups        []string                                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	PwPortHeadend      *bool                                                                                         `path:"pw-port-headend" module:"nokia-conf"`
	PwPortId           *uint32                                                                                       `path:"pw-port-id" module:"nokia-conf"`
	VirtualRanges      *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges `path:"virtual-ranges" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) IsYANGGoStruct() {
}

// GetOrCreateVirtualRanges retrieves the value of the VirtualRanges field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) GetOrCreateVirtualRanges() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges {
	if t.VirtualRanges != nil {
		return t.VirtualRanges
	}
	t.VirtualRanges = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges{}
	return t.VirtualRanges
}

// GetVirtualRanges returns the value of the VirtualRanges struct pointer
// from NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort. If the receiver or the field VirtualRanges is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) GetVirtualRanges() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges {
	if t != nil && t.VirtualRanges != nil {
		return t.VirtualRanges
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPwPortHeadend retrieves the value of the leaf PwPortHeadend from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PwPortHeadend is set, it can
// safely use t.GetPwPortHeadend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PwPortHeadend == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) GetPwPortHeadend() bool {
	if t == nil || t.PwPortHeadend == nil {
		return false
	}
	return *t.PwPortHeadend
}

// GetPwPortId retrieves the value of the leaf PwPortId from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PwPortId is set, it can
// safely use t.GetPwPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PwPortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) GetPwPortId() uint32 {
	if t == nil || t.PwPortId == nil {
		return 0
	}
	return *t.PwPortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PwPortHeadend == nil {
		var v bool = false
		t.PwPortHeadend = &v
	}
	t.VirtualRanges.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PwPortId == nil {
		return nil, fmt.Errorf("nil value for key PwPortId")
	}

	return map[string]interface{}{
		"pw-port-id": *t.PwPortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/pw-port/virtual-ranges YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges struct {
	Dot1Q *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q `path:"dot1q" module:"nokia-conf"`
	Qinq  *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq  `path:"qinq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges) IsYANGGoStruct() {
}

// GetOrCreateDot1Q retrieves the value of the Dot1Q field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges) GetOrCreateDot1Q() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q {
	if t.Dot1Q != nil {
		return t.Dot1Q
	}
	t.Dot1Q = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q{}
	return t.Dot1Q
}

// GetOrCreateQinq retrieves the value of the Qinq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges) GetOrCreateQinq() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq {
	if t.Qinq != nil {
		return t.Qinq
	}
	t.Qinq = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq{}
	return t.Qinq
}

// GetDot1Q returns the value of the Dot1Q struct pointer
// from NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges. If the receiver or the field Dot1Q is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges) GetDot1Q() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q {
	if t != nil && t.Dot1Q != nil {
		return t.Dot1Q
	}
	return nil
}

// GetQinq returns the value of the Qinq struct pointer
// from NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges. If the receiver or the field Qinq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges) GetQinq() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq {
	if t != nil && t.Qinq != nil {
		return t.Qinq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dot1Q.PopulateDefaults()
	t.Qinq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/pw-port/virtual-ranges/dot1q YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q struct {
	QTag map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_Start_Union]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag `path:"q-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) IsYANGGoStruct() {
}

// NewQTag creates a new entry in the QTag list of the
// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) NewQTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_Start_Union) (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QTag == nil {
		t.QTag = make(map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_Start_Union]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QTag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QTag", key)
	}

	t.QTag[key] = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag{
		Start: Start,
	}

	return t.QTag[key], nil
}

// RenameQTag renames an entry in the list QTag within
// the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) RenameQTag(oldK, newK NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_Start_Union) error {
	if _, ok := t.QTag[newK]; ok {
		return fmt.Errorf("key %v already exists in QTag", newK)
	}

	e, ok := t.QTag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QTag", oldK)
	}
	e.Start = newK

	t.QTag[newK] = e
	delete(t.QTag, oldK)
	return nil
}

// GetOrCreateQTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) GetOrCreateQTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_Start_Union) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag {

	key := Start

	if v, ok := t.QTag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQTag(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQTag got unexpected error: %v", err))
	}
	return v
}

// GetQTag retrieves the value with the specified key from
// the QTag map field of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) GetQTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_Start_Union) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.QTag[key]; ok {
		return lm
	}
	return nil
}

// DeleteQTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) DeleteQTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_Start_Union) {
	key := Start

	delete(t.QTag, key)
}

// AppendQTag appends the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag struct to the
// list QTag of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) AppendQTag(v *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) error {
	key := v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QTag == nil {
		t.QTag = make(map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_Start_Union]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag)
	}

	if _, ok := t.QTag[key]; ok {
		return fmt.Errorf("duplicate key for list QTag %v", key)
	}

	t.QTag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.QTag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/pw-port/virtual-ranges/dot1q/q-tag YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag struct {
	ApplyGroups        []string                                                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	End                NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_End_Union   `path:"end" module:"nokia-conf"`
	Start              NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) GetEnd() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) GetStart() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/pw-port/virtual-ranges/qinq YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq struct {
	STag     map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_Start_Union]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag `path:"s-tag" module:"nokia-conf"`
	STagCTag map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag `path:"s-tag-c-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) IsYANGGoStruct() {
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key represents the key for list STagCTag of element /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/pw-port/virtual-ranges/qinq.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key struct {
	STag      NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_STag_Union      `path:"s-tag"`
	CTagStart NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_CTagStart_Union `path:"c-tag-start"`
}

// NewSTag creates a new entry in the STag list of the
// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) NewSTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_Start_Union) (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STag == nil {
		t.STag = make(map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_Start_Union]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.STag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list STag", key)
	}

	t.STag[key] = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag{
		Start: Start,
	}

	return t.STag[key], nil
}

// RenameSTag renames an entry in the list STag within
// the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) RenameSTag(oldK, newK NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_Start_Union) error {
	if _, ok := t.STag[newK]; ok {
		return fmt.Errorf("key %v already exists in STag", newK)
	}

	e, ok := t.STag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in STag", oldK)
	}
	e.Start = newK

	t.STag[newK] = e
	delete(t.STag, oldK)
	return nil
}

// GetOrCreateSTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) GetOrCreateSTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_Start_Union) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag {

	key := Start

	if v, ok := t.STag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSTag(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSTag got unexpected error: %v", err))
	}
	return v
}

// GetSTag retrieves the value with the specified key from
// the STag map field of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) GetSTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_Start_Union) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.STag[key]; ok {
		return lm
	}
	return nil
}

// DeleteSTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) DeleteSTag(Start NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_Start_Union) {
	key := Start

	delete(t.STag, key)
}

// AppendSTag appends the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag struct to the
// list STag of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) AppendSTag(v *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) error {
	key := v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STag == nil {
		t.STag = make(map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_Start_Union]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag)
	}

	if _, ok := t.STag[key]; ok {
		return fmt.Errorf("duplicate key for list STag %v", key)
	}

	t.STag[key] = v
	return nil
}

// NewSTagCTag creates a new entry in the STagCTag list of the
// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) NewSTagCTag(STag NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_CTagStart_Union) (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STagCTag == nil {
		t.STagCTag = make(map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag)
	}

	key := NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.STagCTag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list STagCTag", key)
	}

	t.STagCTag[key] = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag{
		STag:      STag,
		CTagStart: CTagStart,
	}

	return t.STagCTag[key], nil
}

// RenameSTagCTag renames an entry in the list STagCTag within
// the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) RenameSTagCTag(oldK, newK NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key) error {
	if _, ok := t.STagCTag[newK]; ok {
		return fmt.Errorf("key %v already exists in STagCTag", newK)
	}

	e, ok := t.STagCTag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in STagCTag", oldK)
	}
	e.STag = newK.STag
	e.CTagStart = newK.CTagStart

	t.STagCTag[newK] = e
	delete(t.STagCTag, oldK)
	return nil
}

// GetOrCreateSTagCTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) GetOrCreateSTagCTag(STag NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_CTagStart_Union) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag {

	key := NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	if v, ok := t.STagCTag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSTagCTag(STag, CTagStart)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSTagCTag got unexpected error: %v", err))
	}
	return v
}

// GetSTagCTag retrieves the value with the specified key from
// the STagCTag map field of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) GetSTagCTag(STag NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_CTagStart_Union) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	if lm, ok := t.STagCTag[key]; ok {
		return lm
	}
	return nil
}

// DeleteSTagCTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) DeleteSTagCTag(STag NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_CTagStart_Union) {
	key := NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	delete(t.STagCTag, key)
}

// AppendSTagCTag appends the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag struct to the
// list STagCTag of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) AppendSTagCTag(v *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) error {
	key := NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key{
		STag:      v.STag,
		CTagStart: v.CTagStart,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STagCTag == nil {
		t.STagCTag = make(map[NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag)
	}

	if _, ok := t.STagCTag[key]; ok {
		return fmt.Errorf("duplicate key for list STagCTag %v", key)
	}

	t.STagCTag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.STag {
		e.PopulateDefaults()
	}
	for _, e := range t.STagCTag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/pw-port/virtual-ranges/qinq/s-tag YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag struct {
	ApplyGroups        []string                                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	End                NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_End_Union   `path:"end" module:"nokia-conf"`
	Start              NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) GetEnd() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) GetStart() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/pw-port/virtual-ranges/qinq/s-tag-c-tag YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag struct {
	ApplyGroups        []string                                                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	CTagEnd            NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_CTagEnd_Union   `path:"c-tag-end" module:"nokia-conf"`
	CTagStart          NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_CTagStart_Union `path:"c-tag-start" module:"nokia-conf"`
	STag               NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_STag_Union      `path:"s-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCTagEnd retrieves the value of the leaf CTagEnd from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CTagEnd is set, it can
// safely use t.GetCTagEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CTagEnd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) GetCTagEnd() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_CTagEnd_Union {
	if t == nil || t.CTagEnd == nil {
		return nil
	}
	return t.CTagEnd
}

// GetCTagStart retrieves the value of the leaf CTagStart from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CTagStart is set, it can
// safely use t.GetCTagStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CTagStart == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) GetCTagStart() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_CTagStart_Union {
	if t == nil || t.CTagStart == nil {
		return nil
	}
	return t.CTagStart
}

// GetSTag retrieves the value of the leaf STag from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if STag is set, it can
// safely use t.GetSTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.STag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) GetSTag() NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_STag_Union {
	if t == nil || t.STag == nil {
		return nil
	}
	return t.STag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"c-tag-start": t.CTagStart,
		"s-tag":       t.STag,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/sdp YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp struct {
	ApplyGroups        []string                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	SdpId              *uint32                                                                                    `path:"sdp-id" module:"nokia-conf"`
	VirtualRanges      *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges `path:"virtual-ranges" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) IsYANGGoStruct() {
}

// GetOrCreateVirtualRanges retrieves the value of the VirtualRanges field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) GetOrCreateVirtualRanges() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges {
	if t.VirtualRanges != nil {
		return t.VirtualRanges
	}
	t.VirtualRanges = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges{}
	return t.VirtualRanges
}

// GetVirtualRanges returns the value of the VirtualRanges struct pointer
// from NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp. If the receiver or the field VirtualRanges is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) GetVirtualRanges() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges {
	if t != nil && t.VirtualRanges != nil {
		return t.VirtualRanges
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSdpId retrieves the value of the leaf SdpId from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpId is set, it can
// safely use t.GetSdpId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) GetSdpId() uint32 {
	if t == nil || t.SdpId == nil {
		return 0
	}
	return *t.SdpId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.VirtualRanges.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpId == nil {
		return nil, fmt.Errorf("nil value for key SdpId")
	}

	return map[string]interface{}{
		"sdp-id": *t.SdpId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/sdp/virtual-ranges YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges struct {
	VcId map[uint32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId `path:"vc-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) IsYANGGoStruct() {
}

// NewVcId creates a new entry in the VcId list of the
// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) NewVcId(Start uint32) (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VcId == nil {
		t.VcId = make(map[uint32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VcId[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VcId", key)
	}

	t.VcId[key] = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId{
		Start: &Start,
	}

	return t.VcId[key], nil
}

// RenameVcId renames an entry in the list VcId within
// the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) RenameVcId(oldK, newK uint32) error {
	if _, ok := t.VcId[newK]; ok {
		return fmt.Errorf("key %v already exists in VcId", newK)
	}

	e, ok := t.VcId[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VcId", oldK)
	}
	e.Start = &newK

	t.VcId[newK] = e
	delete(t.VcId, oldK)
	return nil
}

// GetOrCreateVcId retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) GetOrCreateVcId(Start uint32) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId {

	key := Start

	if v, ok := t.VcId[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVcId(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVcId got unexpected error: %v", err))
	}
	return v
}

// GetVcId retrieves the value with the specified key from
// the VcId map field of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) GetVcId(Start uint32) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.VcId[key]; ok {
		return lm
	}
	return nil
}

// DeleteVcId deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) DeleteVcId(Start uint32) {
	key := Start

	delete(t.VcId, key)
}

// AppendVcId appends the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId struct to the
// list VcId of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) AppendVcId(v *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key received for Start")
	}

	key := *v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VcId == nil {
		t.VcId = make(map[uint32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId)
	}

	if _, ok := t.VcId[key]; ok {
		return fmt.Errorf("duplicate key for list VcId %v", key)
	}

	t.VcId[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.VcId {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/association/sdp/virtual-ranges/vc-id YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *uint32  `path:"end" module:"nokia-conf"`
	Start              *uint32  `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/df-election YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection struct {
	EsActivationTimer  *int32                                                                                      `path:"es-activation-timer" module:"nokia-conf"`
	Manual             *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual              `path:"manual" module:"nokia-conf"`
	ServiceCarvingMode E_NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_ServiceCarvingMode `path:"service-carving-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection) IsYANGGoStruct() {}

// GetOrCreateManual retrieves the value of the Manual field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection) GetOrCreateManual() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual {
	if t.Manual != nil {
		return t.Manual
	}
	t.Manual = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual{}
	return t.Manual
}

// GetManual returns the value of the Manual struct pointer
// from NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection. If the receiver or the field Manual is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection) GetManual() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual {
	if t != nil && t.Manual != nil {
		return t.Manual
	}
	return nil
}

// GetEsActivationTimer retrieves the value of the leaf EsActivationTimer from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsActivationTimer is set, it can
// safely use t.GetEsActivationTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsActivationTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection) GetEsActivationTimer() int32 {
	if t == nil || t.EsActivationTimer == nil {
		return 0
	}
	return *t.EsActivationTimer
}

// GetServiceCarvingMode retrieves the value of the leaf ServiceCarvingMode from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceCarvingMode is set, it can
// safely use t.GetServiceCarvingMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceCarvingMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection) GetServiceCarvingMode() E_NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_ServiceCarvingMode {
	if t == nil || t.ServiceCarvingMode == 0 {
		return NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_ServiceCarvingMode_auto
	}
	return t.ServiceCarvingMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ServiceCarvingMode == 0 {
		t.ServiceCarvingMode = NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_ServiceCarvingMode_auto
	}
	t.Manual.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/df-election/manual YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual struct {
	Evi        map[uint32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi `path:"evi" module:"nokia-conf"`
	Isid       map[int32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid `path:"isid" module:"nokia-conf"`
	Preference *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference     `path:"preference" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) IsYANGGoStruct() {
}

// NewEvi creates a new entry in the Evi list of the
// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) NewEvi(Start uint32) (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Evi == nil {
		t.Evi = make(map[uint32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Evi[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Evi", key)
	}

	t.Evi[key] = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi{
		Start: &Start,
	}

	return t.Evi[key], nil
}

// RenameEvi renames an entry in the list Evi within
// the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) RenameEvi(oldK, newK uint32) error {
	if _, ok := t.Evi[newK]; ok {
		return fmt.Errorf("key %v already exists in Evi", newK)
	}

	e, ok := t.Evi[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Evi", oldK)
	}
	e.Start = &newK

	t.Evi[newK] = e
	delete(t.Evi, oldK)
	return nil
}

// GetOrCreateEvi retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) GetOrCreateEvi(Start uint32) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi {

	key := Start

	if v, ok := t.Evi[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvi(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvi got unexpected error: %v", err))
	}
	return v
}

// GetEvi retrieves the value with the specified key from
// the Evi map field of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) GetEvi(Start uint32) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.Evi[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvi deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) DeleteEvi(Start uint32) {
	key := Start

	delete(t.Evi, key)
}

// AppendEvi appends the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi struct to the
// list Evi of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) AppendEvi(v *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key received for Start")
	}

	key := *v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Evi == nil {
		t.Evi = make(map[uint32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi)
	}

	if _, ok := t.Evi[key]; ok {
		return fmt.Errorf("duplicate key for list Evi %v", key)
	}

	t.Evi[key] = v
	return nil
}

// NewIsid creates a new entry in the Isid list of the
// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) NewIsid(Start int32) (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Isid == nil {
		t.Isid = make(map[int32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Isid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Isid", key)
	}

	t.Isid[key] = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid{
		Start: &Start,
	}

	return t.Isid[key], nil
}

// RenameIsid renames an entry in the list Isid within
// the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) RenameIsid(oldK, newK int32) error {
	if _, ok := t.Isid[newK]; ok {
		return fmt.Errorf("key %v already exists in Isid", newK)
	}

	e, ok := t.Isid[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Isid", oldK)
	}
	e.Start = &newK

	t.Isid[newK] = e
	delete(t.Isid, oldK)
	return nil
}

// GetOrCreateIsid retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) GetOrCreateIsid(Start int32) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid {

	key := Start

	if v, ok := t.Isid[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIsid(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIsid got unexpected error: %v", err))
	}
	return v
}

// GetIsid retrieves the value with the specified key from
// the Isid map field of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) GetIsid(Start int32) *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.Isid[key]; ok {
		return lm
	}
	return nil
}

// DeleteIsid deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) DeleteIsid(Start int32) {
	key := Start

	delete(t.Isid, key)
}

// AppendIsid appends the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid struct to the
// list Isid of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) AppendIsid(v *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key received for Start")
	}

	key := *v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Isid == nil {
		t.Isid = make(map[int32]*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid)
	}

	if _, ok := t.Isid[key]; ok {
		return fmt.Errorf("duplicate key for list Isid %v", key)
	}

	t.Isid[key] = v
	return nil
}

// GetOrCreatePreference retrieves the value of the Preference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) GetOrCreatePreference() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference {
	if t.Preference != nil {
		return t.Preference
	}
	t.Preference = &NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference{}
	return t.Preference
}

// GetPreference returns the value of the Preference struct pointer
// from NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual. If the receiver or the field Preference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) GetPreference() *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference {
	if t != nil && t.Preference != nil {
		return t.Preference
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Preference.PopulateDefaults()
	for _, e := range t.Evi {
		e.PopulateDefaults()
	}
	for _, e := range t.Isid {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/df-election/manual/evi YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *uint32  `path:"end" module:"nokia-conf"`
	Start              *uint32  `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/df-election/manual/isid YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *int32   `path:"end" module:"nokia-conf"`
	Start              *int32   `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/df-election/manual/preference YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference struct {
	ApplyGroups        []string                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Mode               E_NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference_Mode `path:"mode" module:"nokia-conf"`
	Value              *uint32                                                                                         `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference) GetMode() E_NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference_Mode {
	if t == nil || t.Mode == 0 {
		return NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference_Mode_revertive
	}
	return t.Mode
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 32767
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mode == 0 {
		t.Mode = NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference_Mode_revertive
	}
	if t.Value == nil {
		var v uint32 = 32767
		t.Value = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Pbb represents the /nokia-conf/configure/service/system/bgp/evpn/ethernet-segment/pbb YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Pbb struct {
	EsBmacTableSize *uint32 `path:"es-bmac-table-size" module:"nokia-conf"`
	SourceBmacLsb   *string `path:"source-bmac-lsb" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Pbb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Pbb) IsYANGGoStruct() {}

// GetEsBmacTableSize retrieves the value of the leaf EsBmacTableSize from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Pbb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsBmacTableSize is set, it can
// safely use t.GetEsBmacTableSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsBmacTableSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Pbb) GetEsBmacTableSize() uint32 {
	if t == nil || t.EsBmacTableSize == nil {
		return 8
	}
	return *t.EsBmacTableSize
}

// GetSourceBmacLsb retrieves the value of the leaf SourceBmacLsb from the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Pbb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceBmacLsb is set, it can
// safely use t.GetSourceBmacLsb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceBmacLsb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Pbb) GetSourceBmacLsb() string {
	if t == nil || t.SourceBmacLsb == nil {
		return ""
	}
	return *t.SourceBmacLsb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Pbb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Pbb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EsBmacTableSize == nil {
		var v uint32 = 8
		t.EsBmacTableSize = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Pbb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Pbb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Pbb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Pbb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Pbb.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_EthernetSegment_Pbb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes represents the /nokia-conf/configure/service/system/bgp/evpn/ip-prefix-routes YANG schema element.
type NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes struct {
	DPathLengthIgnore              *bool `path:"d-path-length-ignore" module:"nokia-conf"`
	IffAttributeUniformPropagation *bool `path:"iff-attribute-uniform-propagation" module:"nokia-conf"`
	IffBgpPathSelection            *bool `path:"iff-bgp-path-selection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes) IsYANGGoStruct() {}

// GetDPathLengthIgnore retrieves the value of the leaf DPathLengthIgnore from the NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DPathLengthIgnore is set, it can
// safely use t.GetDPathLengthIgnore() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DPathLengthIgnore == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes) GetDPathLengthIgnore() bool {
	if t == nil || t.DPathLengthIgnore == nil {
		return false
	}
	return *t.DPathLengthIgnore
}

// GetIffAttributeUniformPropagation retrieves the value of the leaf IffAttributeUniformPropagation from the NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IffAttributeUniformPropagation is set, it can
// safely use t.GetIffAttributeUniformPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IffAttributeUniformPropagation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes) GetIffAttributeUniformPropagation() bool {
	if t == nil || t.IffAttributeUniformPropagation == nil {
		return false
	}
	return *t.IffAttributeUniformPropagation
}

// GetIffBgpPathSelection retrieves the value of the leaf IffBgpPathSelection from the NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IffBgpPathSelection is set, it can
// safely use t.GetIffBgpPathSelection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IffBgpPathSelection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes) GetIffBgpPathSelection() bool {
	if t == nil || t.IffBgpPathSelection == nil {
		return false
	}
	return *t.IffBgpPathSelection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DPathLengthIgnore == nil {
		var v bool = false
		t.DPathLengthIgnore = &v
	}
	if t.IffAttributeUniformPropagation == nil {
		var v bool = false
		t.IffAttributeUniformPropagation = &v
	}
	if t.IffBgpPathSelection == nil {
		var v bool = false
		t.IffBgpPathSelection = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes.
func (*NokiaConf_Configure_Service_System_Bgp_Evpn_IpPrefixRoutes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Fdb represents the /nokia-conf/configure/service/system/fdb YANG schema element.
type NokiaConf_Configure_Service_System_Fdb struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	TableSize          *uint32  `path:"table-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Fdb) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Fdb) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Fdb) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetTableSize retrieves the value of the leaf TableSize from the NokiaConf_Configure_Service_System_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TableSize is set, it can
// safely use t.GetTableSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TableSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Fdb) GetTableSize() uint32 {
	if t == nil || t.TableSize == nil {
		return 0
	}
	return *t.TableSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Fdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Fdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Fdb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Fdb.
func (*NokiaConf_Configure_Service_System_Fdb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_GreEthBridged represents the /nokia-conf/configure/service/system/gre-eth-bridged YANG schema element.
type NokiaConf_Configure_Service_System_GreEthBridged struct {
	TunnelTermination map[string]*NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination `path:"tunnel-termination" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_GreEthBridged implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_GreEthBridged) IsYANGGoStruct() {}

// NewTunnelTermination creates a new entry in the TunnelTermination list of the
// NokiaConf_Configure_Service_System_GreEthBridged struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_GreEthBridged) NewTunnelTermination(IpAddress string) (*NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelTermination == nil {
		t.TunnelTermination = make(map[string]*NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TunnelTermination[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TunnelTermination", key)
	}

	t.TunnelTermination[key] = &NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination{
		IpAddress: &IpAddress,
	}

	return t.TunnelTermination[key], nil
}

// RenameTunnelTermination renames an entry in the list TunnelTermination within
// the NokiaConf_Configure_Service_System_GreEthBridged struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_GreEthBridged) RenameTunnelTermination(oldK, newK string) error {
	if _, ok := t.TunnelTermination[newK]; ok {
		return fmt.Errorf("key %v already exists in TunnelTermination", newK)
	}

	e, ok := t.TunnelTermination[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TunnelTermination", oldK)
	}
	e.IpAddress = &newK

	t.TunnelTermination[newK] = e
	delete(t.TunnelTermination, oldK)
	return nil
}

// GetOrCreateTunnelTermination retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_GreEthBridged. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_GreEthBridged) GetOrCreateTunnelTermination(IpAddress string) *NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination {

	key := IpAddress

	if v, ok := t.TunnelTermination[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTunnelTermination(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTunnelTermination got unexpected error: %v", err))
	}
	return v
}

// GetTunnelTermination retrieves the value with the specified key from
// the TunnelTermination map field of NokiaConf_Configure_Service_System_GreEthBridged. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_GreEthBridged) GetTunnelTermination(IpAddress string) *NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.TunnelTermination[key]; ok {
		return lm
	}
	return nil
}

// DeleteTunnelTermination deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_GreEthBridged. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_GreEthBridged) DeleteTunnelTermination(IpAddress string) {
	key := IpAddress

	delete(t.TunnelTermination, key)
}

// AppendTunnelTermination appends the supplied NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination struct to the
// list TunnelTermination of NokiaConf_Configure_Service_System_GreEthBridged. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_GreEthBridged) AppendTunnelTermination(v *NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelTermination == nil {
		t.TunnelTermination = make(map[string]*NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination)
	}

	if _, ok := t.TunnelTermination[key]; ok {
		return fmt.Errorf("duplicate key for list TunnelTermination %v", key)
	}

	t.TunnelTermination[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_GreEthBridged
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_GreEthBridged) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.TunnelTermination {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_GreEthBridged) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_GreEthBridged"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_GreEthBridged) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_GreEthBridged) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_GreEthBridged.
func (*NokiaConf_Configure_Service_System_GreEthBridged) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination represents the /nokia-conf/configure/service/system/gre-eth-bridged/tunnel-termination YANG schema element.
type NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	FpeId              *uint32  `path:"fpe-id" module:"nokia-conf"`
	IpAddress          *string  `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFpeId retrieves the value of the leaf FpeId from the NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpeId is set, it can
// safely use t.GetFpeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpeId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination) GetFpeId() uint32 {
	if t == nil || t.FpeId == nil {
		return 0
	}
	return *t.FpeId
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination.
func (*NokiaConf_Configure_Service_System_GreEthBridged_TunnelTermination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_PwPortList represents the /nokia-conf/configure/service/system/pw-port-list YANG schema element.
type NokiaConf_Configure_Service_System_PwPortList struct {
	Port map[string]*NokiaConf_Configure_Service_System_PwPortList_Port `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_PwPortList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_PwPortList) IsYANGGoStruct() {}

// NewPort creates a new entry in the Port list of the
// NokiaConf_Configure_Service_System_PwPortList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_PwPortList) NewPort(PortId string) (*NokiaConf_Configure_Service_System_PwPortList_Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Service_System_PwPortList_Port)
	}

	key := PortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &NokiaConf_Configure_Service_System_PwPortList_Port{
		PortId: &PortId,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the NokiaConf_Configure_Service_System_PwPortList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_PwPortList) RenamePort(oldK, newK string) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.PortId = &newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_PwPortList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_PwPortList) GetOrCreatePort(PortId string) *NokiaConf_Configure_Service_System_PwPortList_Port {

	key := PortId

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(PortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of NokiaConf_Configure_Service_System_PwPortList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_PwPortList) GetPort(PortId string) *NokiaConf_Configure_Service_System_PwPortList_Port {

	if t == nil {
		return nil
	}

	key := PortId

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_PwPortList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_PwPortList) DeletePort(PortId string) {
	key := PortId

	delete(t.Port, key)
}

// AppendPort appends the supplied NokiaConf_Configure_Service_System_PwPortList_Port struct to the
// list Port of NokiaConf_Configure_Service_System_PwPortList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_PwPortList_Port already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_PwPortList) AppendPort(v *NokiaConf_Configure_Service_System_PwPortList_Port) error {
	if v.PortId == nil {
		return fmt.Errorf("invalid nil key received for PortId")
	}

	key := *v.PortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Service_System_PwPortList_Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_PwPortList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_PwPortList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_PwPortList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_PwPortList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_PwPortList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_PwPortList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_PwPortList.
func (*NokiaConf_Configure_Service_System_PwPortList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_PwPortList_Port represents the /nokia-conf/configure/service/system/pw-port-list/port YANG schema element.
type NokiaConf_Configure_Service_System_PwPortList_Port struct {
	PortId *string `path:"port-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_PwPortList_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_PwPortList_Port) IsYANGGoStruct() {}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_Service_System_PwPortList_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_PwPortList_Port) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_PwPortList_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_PwPortList_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_PwPortList_Port struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_PwPortList_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortId == nil {
		return nil, fmt.Errorf("nil value for key PortId")
	}

	return map[string]interface{}{
		"port-id": *t.PortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_PwPortList_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_PwPortList_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_PwPortList_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_PwPortList_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_PwPortList_Port.
func (*NokiaConf_Configure_Service_System_PwPortList_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Vxlan represents the /nokia-conf/configure/service/system/vxlan YANG schema element.
type NokiaConf_Configure_Service_System_Vxlan struct {
	AssistedReplication *NokiaConf_Configure_Service_System_Vxlan_AssistedReplication          `path:"assisted-replication" module:"nokia-conf"`
	TunnelTermination   map[string]*NokiaConf_Configure_Service_System_Vxlan_TunnelTermination `path:"tunnel-termination" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Vxlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Vxlan) IsYANGGoStruct() {}

// NewTunnelTermination creates a new entry in the TunnelTermination list of the
// NokiaConf_Configure_Service_System_Vxlan struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_System_Vxlan) NewTunnelTermination(IpAddress string) (*NokiaConf_Configure_Service_System_Vxlan_TunnelTermination, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelTermination == nil {
		t.TunnelTermination = make(map[string]*NokiaConf_Configure_Service_System_Vxlan_TunnelTermination)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TunnelTermination[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TunnelTermination", key)
	}

	t.TunnelTermination[key] = &NokiaConf_Configure_Service_System_Vxlan_TunnelTermination{
		IpAddress: &IpAddress,
	}

	return t.TunnelTermination[key], nil
}

// RenameTunnelTermination renames an entry in the list TunnelTermination within
// the NokiaConf_Configure_Service_System_Vxlan struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_System_Vxlan) RenameTunnelTermination(oldK, newK string) error {
	if _, ok := t.TunnelTermination[newK]; ok {
		return fmt.Errorf("key %v already exists in TunnelTermination", newK)
	}

	e, ok := t.TunnelTermination[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TunnelTermination", oldK)
	}
	e.IpAddress = &newK

	t.TunnelTermination[newK] = e
	delete(t.TunnelTermination, oldK)
	return nil
}

// GetOrCreateTunnelTermination retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Vxlan. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_System_Vxlan) GetOrCreateTunnelTermination(IpAddress string) *NokiaConf_Configure_Service_System_Vxlan_TunnelTermination {

	key := IpAddress

	if v, ok := t.TunnelTermination[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTunnelTermination(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTunnelTermination got unexpected error: %v", err))
	}
	return v
}

// GetTunnelTermination retrieves the value with the specified key from
// the TunnelTermination map field of NokiaConf_Configure_Service_System_Vxlan. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_System_Vxlan) GetTunnelTermination(IpAddress string) *NokiaConf_Configure_Service_System_Vxlan_TunnelTermination {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.TunnelTermination[key]; ok {
		return lm
	}
	return nil
}

// DeleteTunnelTermination deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_System_Vxlan. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_System_Vxlan) DeleteTunnelTermination(IpAddress string) {
	key := IpAddress

	delete(t.TunnelTermination, key)
}

// AppendTunnelTermination appends the supplied NokiaConf_Configure_Service_System_Vxlan_TunnelTermination struct to the
// list TunnelTermination of NokiaConf_Configure_Service_System_Vxlan. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_System_Vxlan_TunnelTermination already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_System_Vxlan) AppendTunnelTermination(v *NokiaConf_Configure_Service_System_Vxlan_TunnelTermination) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelTermination == nil {
		t.TunnelTermination = make(map[string]*NokiaConf_Configure_Service_System_Vxlan_TunnelTermination)
	}

	if _, ok := t.TunnelTermination[key]; ok {
		return fmt.Errorf("duplicate key for list TunnelTermination %v", key)
	}

	t.TunnelTermination[key] = v
	return nil
}

// GetOrCreateAssistedReplication retrieves the value of the AssistedReplication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_System_Vxlan) GetOrCreateAssistedReplication() *NokiaConf_Configure_Service_System_Vxlan_AssistedReplication {
	if t.AssistedReplication != nil {
		return t.AssistedReplication
	}
	t.AssistedReplication = &NokiaConf_Configure_Service_System_Vxlan_AssistedReplication{}
	return t.AssistedReplication
}

// GetAssistedReplication returns the value of the AssistedReplication struct pointer
// from NokiaConf_Configure_Service_System_Vxlan. If the receiver or the field AssistedReplication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_System_Vxlan) GetAssistedReplication() *NokiaConf_Configure_Service_System_Vxlan_AssistedReplication {
	if t != nil && t.AssistedReplication != nil {
		return t.AssistedReplication
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Vxlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Vxlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AssistedReplication.PopulateDefaults()
	for _, e := range t.TunnelTermination {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Vxlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Vxlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Vxlan) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Vxlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Vxlan.
func (*NokiaConf_Configure_Service_System_Vxlan) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Vxlan_AssistedReplication represents the /nokia-conf/configure/service/system/vxlan/assisted-replication YANG schema element.
type NokiaConf_Configure_Service_System_Vxlan_AssistedReplication struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpAddress          *string  `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Vxlan_AssistedReplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Vxlan_AssistedReplication) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Vxlan_AssistedReplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Vxlan_AssistedReplication) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Vxlan_AssistedReplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Vxlan_AssistedReplication) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_System_Vxlan_AssistedReplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Vxlan_AssistedReplication) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Vxlan_AssistedReplication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Vxlan_AssistedReplication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Vxlan_AssistedReplication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Vxlan_AssistedReplication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Vxlan_AssistedReplication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Vxlan_AssistedReplication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Vxlan_AssistedReplication.
func (*NokiaConf_Configure_Service_System_Vxlan_AssistedReplication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_System_Vxlan_TunnelTermination represents the /nokia-conf/configure/service/system/vxlan/tunnel-termination YANG schema element.
type NokiaConf_Configure_Service_System_Vxlan_TunnelTermination struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	FpeId              *uint32  `path:"fpe-id" module:"nokia-conf"`
	IpAddress          *string  `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_System_Vxlan_TunnelTermination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_System_Vxlan_TunnelTermination) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_System_Vxlan_TunnelTermination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Vxlan_TunnelTermination) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_System_Vxlan_TunnelTermination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Vxlan_TunnelTermination) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFpeId retrieves the value of the leaf FpeId from the NokiaConf_Configure_Service_System_Vxlan_TunnelTermination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpeId is set, it can
// safely use t.GetFpeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpeId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Vxlan_TunnelTermination) GetFpeId() uint32 {
	if t == nil || t.FpeId == nil {
		return 0
	}
	return *t.FpeId
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_System_Vxlan_TunnelTermination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_System_Vxlan_TunnelTermination) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_System_Vxlan_TunnelTermination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_System_Vxlan_TunnelTermination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_System_Vxlan_TunnelTermination struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_System_Vxlan_TunnelTermination) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Vxlan_TunnelTermination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_System_Vxlan_TunnelTermination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_System_Vxlan_TunnelTermination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_System_Vxlan_TunnelTermination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_System_Vxlan_TunnelTermination.
func (*NokiaConf_Configure_Service_System_Vxlan_TunnelTermination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Template represents the /nokia-conf/configure/service/template YANG schema element.
type NokiaConf_Configure_Service_Template struct {
	EpipeSapTemplate map[string]*NokiaConf_Configure_Service_Template_EpipeSapTemplate `path:"epipe-sap-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Template) IsYANGGoStruct() {}

// NewEpipeSapTemplate creates a new entry in the EpipeSapTemplate list of the
// NokiaConf_Configure_Service_Template struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Template) NewEpipeSapTemplate(Name string) (*NokiaConf_Configure_Service_Template_EpipeSapTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EpipeSapTemplate == nil {
		t.EpipeSapTemplate = make(map[string]*NokiaConf_Configure_Service_Template_EpipeSapTemplate)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EpipeSapTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EpipeSapTemplate", key)
	}

	t.EpipeSapTemplate[key] = &NokiaConf_Configure_Service_Template_EpipeSapTemplate{
		Name: &Name,
	}

	return t.EpipeSapTemplate[key], nil
}

// RenameEpipeSapTemplate renames an entry in the list EpipeSapTemplate within
// the NokiaConf_Configure_Service_Template struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Template) RenameEpipeSapTemplate(oldK, newK string) error {
	if _, ok := t.EpipeSapTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in EpipeSapTemplate", newK)
	}

	e, ok := t.EpipeSapTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EpipeSapTemplate", oldK)
	}
	e.Name = &newK

	t.EpipeSapTemplate[newK] = e
	delete(t.EpipeSapTemplate, oldK)
	return nil
}

// GetOrCreateEpipeSapTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Template. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Template) GetOrCreateEpipeSapTemplate(Name string) *NokiaConf_Configure_Service_Template_EpipeSapTemplate {

	key := Name

	if v, ok := t.EpipeSapTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEpipeSapTemplate(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEpipeSapTemplate got unexpected error: %v", err))
	}
	return v
}

// GetEpipeSapTemplate retrieves the value with the specified key from
// the EpipeSapTemplate map field of NokiaConf_Configure_Service_Template. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Template) GetEpipeSapTemplate(Name string) *NokiaConf_Configure_Service_Template_EpipeSapTemplate {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.EpipeSapTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteEpipeSapTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Template. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Template) DeleteEpipeSapTemplate(Name string) {
	key := Name

	delete(t.EpipeSapTemplate, key)
}

// AppendEpipeSapTemplate appends the supplied NokiaConf_Configure_Service_Template_EpipeSapTemplate struct to the
// list EpipeSapTemplate of NokiaConf_Configure_Service_Template. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Template_EpipeSapTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Template) AppendEpipeSapTemplate(v *NokiaConf_Configure_Service_Template_EpipeSapTemplate) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EpipeSapTemplate == nil {
		t.EpipeSapTemplate = make(map[string]*NokiaConf_Configure_Service_Template_EpipeSapTemplate)
	}

	if _, ok := t.EpipeSapTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list EpipeSapTemplate %v", key)
	}

	t.EpipeSapTemplate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Template
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Template) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.EpipeSapTemplate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Template) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Template) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Template) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Template.
func (*NokiaConf_Configure_Service_Template) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Template_EpipeSapTemplate represents the /nokia-conf/configure/service/template/epipe-sap-template YANG schema element.
type NokiaConf_Configure_Service_Template_EpipeSapTemplate struct {
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress  `path:"egress" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress `path:"ingress" module:"nokia-conf"`
	Name               *string                                                        `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Template_EpipeSapTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Template_EpipeSapTemplate) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate) GetOrCreateEgress() *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate) GetOrCreateIngress() *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Template_EpipeSapTemplate. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate) GetEgress() *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Template_EpipeSapTemplate. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate) GetIngress() *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Template_EpipeSapTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Template_EpipeSapTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Template_EpipeSapTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Template_EpipeSapTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Template_EpipeSapTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Template_EpipeSapTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Template_EpipeSapTemplate.
func (*NokiaConf_Configure_Service_Template_EpipeSapTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress represents the /nokia-conf/configure/service/template/epipe-sap-template/egress YANG schema element.
type NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress struct {
	Filter *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter `path:"filter" module:"nokia-conf"`
	Qos    *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Qos    `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress) GetOrCreateQos() *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress) GetFilter() *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress) GetQos() *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress.
func (*NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter represents the /nokia-conf/configure/service/template/epipe-sap-template/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter.
func (*NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Qos represents the /nokia-conf/configure/service/template/epipe-sap-template/egress/qos YANG schema element.
type NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Qos struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Qos) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Qos) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Qos.
func (*NokiaConf_Configure_Service_Template_EpipeSapTemplate_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress represents the /nokia-conf/configure/service/template/epipe-sap-template/ingress YANG schema element.
type NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress struct {
	Filter *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter `path:"filter" module:"nokia-conf"`
	Qos    *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Qos    `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress) GetFilter() *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress) GetQos() *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress.
func (*NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter represents the /nokia-conf/configure/service/template/epipe-sap-template/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter.
func (*NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Qos represents the /nokia-conf/configure/service/template/epipe-sap-template/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Qos struct {
	PolicyName  *string                                     `path:"policy-name" module:"nokia-conf"`
	QueuingType E_NokiaTypesServices_ServicesSapQueuingType `path:"queuing-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Qos) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Qos) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetQueuingType retrieves the value of the leaf QueuingType from the NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuingType is set, it can
// safely use t.GetQueuingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Qos) GetQueuingType() E_NokiaTypesServices_ServicesSapQueuingType {
	if t == nil || t.QueuingType == 0 {
		return 0
	}
	return t.QueuingType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Qos.
func (*NokiaConf_Configure_Service_Template_EpipeSapTemplate_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Upnp represents the /nokia-conf/configure/service/upnp YANG schema element.
type NokiaConf_Configure_Service_Upnp struct {
	Policy map[string]*NokiaConf_Configure_Service_Upnp_Policy `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Upnp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Upnp) IsYANGGoStruct() {}

// NewPolicy creates a new entry in the Policy list of the
// NokiaConf_Configure_Service_Upnp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Upnp) NewPolicy(Name string) (*NokiaConf_Configure_Service_Upnp_Policy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*NokiaConf_Configure_Service_Upnp_Policy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policy", key)
	}

	t.Policy[key] = &NokiaConf_Configure_Service_Upnp_Policy{
		Name: &Name,
	}

	return t.Policy[key], nil
}

// RenamePolicy renames an entry in the list Policy within
// the NokiaConf_Configure_Service_Upnp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Upnp) RenamePolicy(oldK, newK string) error {
	if _, ok := t.Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Policy", newK)
	}

	e, ok := t.Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policy", oldK)
	}
	e.Name = &newK

	t.Policy[newK] = e
	delete(t.Policy, oldK)
	return nil
}

// GetOrCreatePolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Upnp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Upnp) GetOrCreatePolicy(Name string) *NokiaConf_Configure_Service_Upnp_Policy {

	key := Name

	if v, ok := t.Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicy retrieves the value with the specified key from
// the Policy map field of NokiaConf_Configure_Service_Upnp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Upnp) GetPolicy(Name string) *NokiaConf_Configure_Service_Upnp_Policy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Policy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Upnp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Upnp) DeletePolicy(Name string) {
	key := Name

	delete(t.Policy, key)
}

// AppendPolicy appends the supplied NokiaConf_Configure_Service_Upnp_Policy struct to the
// list Policy of NokiaConf_Configure_Service_Upnp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Upnp_Policy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Upnp) AppendPolicy(v *NokiaConf_Configure_Service_Upnp_Policy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*NokiaConf_Configure_Service_Upnp_Policy)
	}

	if _, ok := t.Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Policy %v", key)
	}

	t.Policy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Upnp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Upnp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Upnp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Upnp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Upnp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Upnp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Upnp.
func (*NokiaConf_Configure_Service_Upnp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Upnp_Policy represents the /nokia-conf/configure/service/upnp/policy YANG schema element.
type NokiaConf_Configure_Service_Upnp_Policy struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	MappingLimit       *uint32  `path:"mapping-limit" module:"nokia-conf"`
	Name               *string  `path:"name" module:"nokia-conf"`
	Port               *int32   `path:"port" module:"nokia-conf"`
	StrictMode         *bool    `path:"strict-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Upnp_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Upnp_Policy) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Upnp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Upnp_Policy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Upnp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Upnp_Policy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Upnp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Upnp_Policy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMappingLimit retrieves the value of the leaf MappingLimit from the NokiaConf_Configure_Service_Upnp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MappingLimit is set, it can
// safely use t.GetMappingLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MappingLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Upnp_Policy) GetMappingLimit() uint32 {
	if t == nil || t.MappingLimit == nil {
		return 256
	}
	return *t.MappingLimit
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Upnp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Upnp_Policy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Service_Upnp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Upnp_Policy) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 5000
	}
	return *t.Port
}

// GetStrictMode retrieves the value of the leaf StrictMode from the NokiaConf_Configure_Service_Upnp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StrictMode is set, it can
// safely use t.GetStrictMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StrictMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Upnp_Policy) GetStrictMode() bool {
	if t == nil || t.StrictMode == nil {
		return false
	}
	return *t.StrictMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Upnp_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Upnp_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MappingLimit == nil {
		var v uint32 = 256
		t.MappingLimit = &v
	}
	if t.Port == nil {
		var v int32 = 5000
		t.Port = &v
	}
	if t.StrictMode == nil {
		var v bool = false
		t.StrictMode = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Upnp_Policy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Upnp_Policy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Upnp_Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Upnp_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Upnp_Policy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Upnp_Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Upnp_Policy.
func (*NokiaConf_Configure_Service_Upnp_Policy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls represents the /nokia-conf/configure/service/vpls YANG schema element.
type NokiaConf_Configure_Service_Vpls struct {
	AdminState             E_NokiaTypesSros_AdminState                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups            []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Bgp                    map[int32]*NokiaConf_Configure_Service_Vpls_Bgp                `path:"bgp" module:"nokia-conf"`
	BgpAd                  *NokiaConf_Configure_Service_Vpls_BgpAd                        `path:"bgp-ad" module:"nokia-conf" yangPresence:"true"`
	BgpEvpn                *NokiaConf_Configure_Service_Vpls_BgpEvpn                      `path:"bgp-evpn" module:"nokia-conf" yangPresence:"true"`
	BgpMhSite              map[string]*NokiaConf_Configure_Service_Vpls_BgpMhSite         `path:"bgp-mh-site" module:"nokia-conf"`
	BgpVpls                *NokiaConf_Configure_Service_Vpls_BgpVpls                      `path:"bgp-vpls" module:"nokia-conf" yangPresence:"true"`
	CaptureSap             map[string]*NokiaConf_Configure_Service_Vpls_CaptureSap        `path:"capture-sap" module:"nokia-conf"`
	Customer               *string                                                        `path:"customer" module:"nokia-conf"`
	Description            *string                                                        `path:"description" module:"nokia-conf"`
	Endpoint               map[string]*NokiaConf_Configure_Service_Vpls_Endpoint          `path:"endpoint" module:"nokia-conf"`
	EthCfm                 *NokiaConf_Configure_Service_Vpls_EthCfm                       `path:"eth-cfm" module:"nokia-conf"`
	Etree                  *bool                                                          `path:"etree" module:"nokia-conf"`
	Fdb                    *NokiaConf_Configure_Service_Vpls_Fdb                          `path:"fdb" module:"nokia-conf"`
	Gsmp                   *NokiaConf_Configure_Service_Vpls_Gsmp                         `path:"gsmp" module:"nokia-conf"`
	IgmpHostTracking       *NokiaConf_Configure_Service_Vpls_IgmpHostTracking             `path:"igmp-host-tracking" module:"nokia-conf"`
	IgmpSnooping           *NokiaConf_Configure_Service_Vpls_IgmpSnooping                 `path:"igmp-snooping" module:"nokia-conf"`
	IgnoreL2VpnMtuMismatch *bool                                                          `path:"ignore-l2vpn-mtu-mismatch" module:"nokia-conf"`
	Interface              map[string]*NokiaConf_Configure_Service_Vpls_Interface         `path:"interface" module:"nokia-conf"`
	IsidPolicy             *NokiaConf_Configure_Service_Vpls_IsidPolicy                   `path:"isid-policy" module:"nokia-conf"`
	LoadBalancing          *NokiaConf_Configure_Service_Vpls_LoadBalancing                `path:"load-balancing" module:"nokia-conf"`
	MVpls                  *bool                                                          `path:"m-vpls" module:"nokia-conf"`
	MacFlush               *NokiaConf_Configure_Service_Vpls_MacFlush                     `path:"mac-flush" module:"nokia-conf"`
	MacProtect             *NokiaConf_Configure_Service_Vpls_MacProtect                   `path:"mac-protect" module:"nokia-conf"`
	McastIpv6SnoopingScope E_NokiaConf_Configure_Service_Vpls_McastIpv6SnoopingScope      `path:"mcast-ipv6-snooping-scope" module:"nokia-conf"`
	McrDefaultGtw          *NokiaConf_Configure_Service_Vpls_McrDefaultGtw                `path:"mcr-default-gtw" module:"nokia-conf"`
	MeshSdp                map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp           `path:"mesh-sdp" module:"nokia-conf"`
	Mfib                   *NokiaConf_Configure_Service_Vpls_Mfib                         `path:"mfib" module:"nokia-conf"`
	MldSnooping            *NokiaConf_Configure_Service_Vpls_MldSnooping                  `path:"mld-snooping" module:"nokia-conf"`
	Mrp                    *NokiaConf_Configure_Service_Vpls_Mrp                          `path:"mrp" module:"nokia-conf"`
	MulticastInfoPolicy    *string                                                        `path:"multicast-info-policy" module:"nokia-conf"`
	Pbb                    *NokiaConf_Configure_Service_Vpls_Pbb                          `path:"pbb" module:"nokia-conf"`
	PbbType                E_NokiaTypesServices_PbbType                                   `path:"pbb-type" module:"nokia-conf"`
	PimSnooping            *NokiaConf_Configure_Service_Vpls_PimSnooping                  `path:"pim-snooping" module:"nokia-conf" yangPresence:"true"`
	ProviderTunnel         *NokiaConf_Configure_Service_Vpls_ProviderTunnel               `path:"provider-tunnel" module:"nokia-conf" yangPresence:"true"`
	ProxyArp               *NokiaConf_Configure_Service_Vpls_ProxyArp                     `path:"proxy-arp" module:"nokia-conf" yangPresence:"true"`
	ProxyNd                *NokiaConf_Configure_Service_Vpls_ProxyNd                      `path:"proxy-nd" module:"nokia-conf" yangPresence:"true"`
	RoutedVpls             *NokiaConf_Configure_Service_Vpls_RoutedVpls                   `path:"routed-vpls" module:"nokia-conf" yangPresence:"true"`
	Sap                    map[string]*NokiaConf_Configure_Service_Vpls_Sap               `path:"sap" module:"nokia-conf"`
	ServiceId              *uint32                                                        `path:"service-id" module:"nokia-conf"`
	ServiceMtu             *int32                                                         `path:"service-mtu" module:"nokia-conf"`
	ServiceName            *string                                                        `path:"service-name" module:"nokia-conf"`
	ShcvPolicyIpv4         *string                                                        `path:"shcv-policy-ipv4" module:"nokia-conf"`
	Spb                    *NokiaConf_Configure_Service_Vpls_Spb                          `path:"spb" module:"nokia-conf" yangPresence:"true"`
	SpbmControlVpls        *NokiaConf_Configure_Service_Vpls_SpbmControlVpls              `path:"spbm-control-vpls" module:"nokia-conf"`
	SplitHorizonGroup      map[string]*NokiaConf_Configure_Service_Vpls_SplitHorizonGroup `path:"split-horizon-group" module:"nokia-conf"`
	SpokeSdp               map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp          `path:"spoke-sdp" module:"nokia-conf"`
	Stp                    *NokiaConf_Configure_Service_Vpls_Stp                          `path:"stp" module:"nokia-conf"`
	TempFlooding           *int32                                                         `path:"temp-flooding" module:"nokia-conf"`
	VpnId                  *uint32                                                        `path:"vpn-id" module:"nokia-conf"`
	Vxlan                  *NokiaConf_Configure_Service_Vpls_Vxlan                        `path:"vxlan" module:"nokia-conf"`
	WlanGw                 *NokiaConf_Configure_Service_Vpls_WlanGw                       `path:"wlan-gw" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls) IsYANGGoStruct() {}

// NewBgp creates a new entry in the Bgp list of the
// NokiaConf_Configure_Service_Vpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls) NewBgp(BgpInstance int32) (*NokiaConf_Configure_Service_Vpls_Bgp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Bgp == nil {
		t.Bgp = make(map[int32]*NokiaConf_Configure_Service_Vpls_Bgp)
	}

	key := BgpInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Bgp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Bgp", key)
	}

	t.Bgp[key] = &NokiaConf_Configure_Service_Vpls_Bgp{
		BgpInstance: &BgpInstance,
	}

	return t.Bgp[key], nil
}

// RenameBgp renames an entry in the list Bgp within
// the NokiaConf_Configure_Service_Vpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls) RenameBgp(oldK, newK int32) error {
	if _, ok := t.Bgp[newK]; ok {
		return fmt.Errorf("key %v already exists in Bgp", newK)
	}

	e, ok := t.Bgp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Bgp", oldK)
	}
	e.BgpInstance = &newK

	t.Bgp[newK] = e
	delete(t.Bgp, oldK)
	return nil
}

// GetOrCreateBgp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateBgp(BgpInstance int32) *NokiaConf_Configure_Service_Vpls_Bgp {

	key := BgpInstance

	if v, ok := t.Bgp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgp(BgpInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgp got unexpected error: %v", err))
	}
	return v
}

// GetBgp retrieves the value with the specified key from
// the Bgp map field of NokiaConf_Configure_Service_Vpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetBgp(BgpInstance int32) *NokiaConf_Configure_Service_Vpls_Bgp {

	if t == nil {
		return nil
	}

	key := BgpInstance

	if lm, ok := t.Bgp[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls) DeleteBgp(BgpInstance int32) {
	key := BgpInstance

	delete(t.Bgp, key)
}

// AppendBgp appends the supplied NokiaConf_Configure_Service_Vpls_Bgp struct to the
// list Bgp of NokiaConf_Configure_Service_Vpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Bgp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls) AppendBgp(v *NokiaConf_Configure_Service_Vpls_Bgp) error {
	if v.BgpInstance == nil {
		return fmt.Errorf("invalid nil key received for BgpInstance")
	}

	key := *v.BgpInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Bgp == nil {
		t.Bgp = make(map[int32]*NokiaConf_Configure_Service_Vpls_Bgp)
	}

	if _, ok := t.Bgp[key]; ok {
		return fmt.Errorf("duplicate key for list Bgp %v", key)
	}

	t.Bgp[key] = v
	return nil
}

// NewBgpMhSite creates a new entry in the BgpMhSite list of the
// NokiaConf_Configure_Service_Vpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls) NewBgpMhSite(SiteName string) (*NokiaConf_Configure_Service_Vpls_BgpMhSite, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpMhSite == nil {
		t.BgpMhSite = make(map[string]*NokiaConf_Configure_Service_Vpls_BgpMhSite)
	}

	key := SiteName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BgpMhSite[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BgpMhSite", key)
	}

	t.BgpMhSite[key] = &NokiaConf_Configure_Service_Vpls_BgpMhSite{
		SiteName: &SiteName,
	}

	return t.BgpMhSite[key], nil
}

// RenameBgpMhSite renames an entry in the list BgpMhSite within
// the NokiaConf_Configure_Service_Vpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls) RenameBgpMhSite(oldK, newK string) error {
	if _, ok := t.BgpMhSite[newK]; ok {
		return fmt.Errorf("key %v already exists in BgpMhSite", newK)
	}

	e, ok := t.BgpMhSite[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BgpMhSite", oldK)
	}
	e.SiteName = &newK

	t.BgpMhSite[newK] = e
	delete(t.BgpMhSite, oldK)
	return nil
}

// GetOrCreateBgpMhSite retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateBgpMhSite(SiteName string) *NokiaConf_Configure_Service_Vpls_BgpMhSite {

	key := SiteName

	if v, ok := t.BgpMhSite[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgpMhSite(SiteName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgpMhSite got unexpected error: %v", err))
	}
	return v
}

// GetBgpMhSite retrieves the value with the specified key from
// the BgpMhSite map field of NokiaConf_Configure_Service_Vpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetBgpMhSite(SiteName string) *NokiaConf_Configure_Service_Vpls_BgpMhSite {

	if t == nil {
		return nil
	}

	key := SiteName

	if lm, ok := t.BgpMhSite[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgpMhSite deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls) DeleteBgpMhSite(SiteName string) {
	key := SiteName

	delete(t.BgpMhSite, key)
}

// AppendBgpMhSite appends the supplied NokiaConf_Configure_Service_Vpls_BgpMhSite struct to the
// list BgpMhSite of NokiaConf_Configure_Service_Vpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_BgpMhSite already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls) AppendBgpMhSite(v *NokiaConf_Configure_Service_Vpls_BgpMhSite) error {
	if v.SiteName == nil {
		return fmt.Errorf("invalid nil key received for SiteName")
	}

	key := *v.SiteName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpMhSite == nil {
		t.BgpMhSite = make(map[string]*NokiaConf_Configure_Service_Vpls_BgpMhSite)
	}

	if _, ok := t.BgpMhSite[key]; ok {
		return fmt.Errorf("duplicate key for list BgpMhSite %v", key)
	}

	t.BgpMhSite[key] = v
	return nil
}

// NewCaptureSap creates a new entry in the CaptureSap list of the
// NokiaConf_Configure_Service_Vpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls) NewCaptureSap(SapId string) (*NokiaConf_Configure_Service_Vpls_CaptureSap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CaptureSap == nil {
		t.CaptureSap = make(map[string]*NokiaConf_Configure_Service_Vpls_CaptureSap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CaptureSap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CaptureSap", key)
	}

	t.CaptureSap[key] = &NokiaConf_Configure_Service_Vpls_CaptureSap{
		SapId: &SapId,
	}

	return t.CaptureSap[key], nil
}

// RenameCaptureSap renames an entry in the list CaptureSap within
// the NokiaConf_Configure_Service_Vpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls) RenameCaptureSap(oldK, newK string) error {
	if _, ok := t.CaptureSap[newK]; ok {
		return fmt.Errorf("key %v already exists in CaptureSap", newK)
	}

	e, ok := t.CaptureSap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CaptureSap", oldK)
	}
	e.SapId = &newK

	t.CaptureSap[newK] = e
	delete(t.CaptureSap, oldK)
	return nil
}

// GetOrCreateCaptureSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateCaptureSap(SapId string) *NokiaConf_Configure_Service_Vpls_CaptureSap {

	key := SapId

	if v, ok := t.CaptureSap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCaptureSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCaptureSap got unexpected error: %v", err))
	}
	return v
}

// GetCaptureSap retrieves the value with the specified key from
// the CaptureSap map field of NokiaConf_Configure_Service_Vpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetCaptureSap(SapId string) *NokiaConf_Configure_Service_Vpls_CaptureSap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.CaptureSap[key]; ok {
		return lm
	}
	return nil
}

// DeleteCaptureSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls) DeleteCaptureSap(SapId string) {
	key := SapId

	delete(t.CaptureSap, key)
}

// AppendCaptureSap appends the supplied NokiaConf_Configure_Service_Vpls_CaptureSap struct to the
// list CaptureSap of NokiaConf_Configure_Service_Vpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_CaptureSap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls) AppendCaptureSap(v *NokiaConf_Configure_Service_Vpls_CaptureSap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CaptureSap == nil {
		t.CaptureSap = make(map[string]*NokiaConf_Configure_Service_Vpls_CaptureSap)
	}

	if _, ok := t.CaptureSap[key]; ok {
		return fmt.Errorf("duplicate key for list CaptureSap %v", key)
	}

	t.CaptureSap[key] = v
	return nil
}

// NewEndpoint creates a new entry in the Endpoint list of the
// NokiaConf_Configure_Service_Vpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls) NewEndpoint(Name string) (*NokiaConf_Configure_Service_Vpls_Endpoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*NokiaConf_Configure_Service_Vpls_Endpoint)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Endpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Endpoint", key)
	}

	t.Endpoint[key] = &NokiaConf_Configure_Service_Vpls_Endpoint{
		Name: &Name,
	}

	return t.Endpoint[key], nil
}

// RenameEndpoint renames an entry in the list Endpoint within
// the NokiaConf_Configure_Service_Vpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls) RenameEndpoint(oldK, newK string) error {
	if _, ok := t.Endpoint[newK]; ok {
		return fmt.Errorf("key %v already exists in Endpoint", newK)
	}

	e, ok := t.Endpoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Endpoint", oldK)
	}
	e.Name = &newK

	t.Endpoint[newK] = e
	delete(t.Endpoint, oldK)
	return nil
}

// GetOrCreateEndpoint retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateEndpoint(Name string) *NokiaConf_Configure_Service_Vpls_Endpoint {

	key := Name

	if v, ok := t.Endpoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEndpoint(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEndpoint got unexpected error: %v", err))
	}
	return v
}

// GetEndpoint retrieves the value with the specified key from
// the Endpoint map field of NokiaConf_Configure_Service_Vpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetEndpoint(Name string) *NokiaConf_Configure_Service_Vpls_Endpoint {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Endpoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteEndpoint deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls) DeleteEndpoint(Name string) {
	key := Name

	delete(t.Endpoint, key)
}

// AppendEndpoint appends the supplied NokiaConf_Configure_Service_Vpls_Endpoint struct to the
// list Endpoint of NokiaConf_Configure_Service_Vpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Endpoint already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls) AppendEndpoint(v *NokiaConf_Configure_Service_Vpls_Endpoint) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*NokiaConf_Configure_Service_Vpls_Endpoint)
	}

	if _, ok := t.Endpoint[key]; ok {
		return fmt.Errorf("duplicate key for list Endpoint %v", key)
	}

	t.Endpoint[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Service_Vpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls) NewInterface(InterfaceName string) (*NokiaConf_Configure_Service_Vpls_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vpls_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Service_Vpls_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Service_Vpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Service_Vpls_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Service_Vpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetInterface(InterfaceName string) *NokiaConf_Configure_Service_Vpls_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Service_Vpls_Interface struct to the
// list Interface of NokiaConf_Configure_Service_Vpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls) AppendInterface(v *NokiaConf_Configure_Service_Vpls_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vpls_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewMeshSdp creates a new entry in the MeshSdp list of the
// NokiaConf_Configure_Service_Vpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls) NewMeshSdp(SdpBindId string) (*NokiaConf_Configure_Service_Vpls_MeshSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MeshSdp == nil {
		t.MeshSdp = make(map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MeshSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MeshSdp", key)
	}

	t.MeshSdp[key] = &NokiaConf_Configure_Service_Vpls_MeshSdp{
		SdpBindId: &SdpBindId,
	}

	return t.MeshSdp[key], nil
}

// RenameMeshSdp renames an entry in the list MeshSdp within
// the NokiaConf_Configure_Service_Vpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls) RenameMeshSdp(oldK, newK string) error {
	if _, ok := t.MeshSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in MeshSdp", newK)
	}

	e, ok := t.MeshSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MeshSdp", oldK)
	}
	e.SdpBindId = &newK

	t.MeshSdp[newK] = e
	delete(t.MeshSdp, oldK)
	return nil
}

// GetOrCreateMeshSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateMeshSdp(SdpBindId string) *NokiaConf_Configure_Service_Vpls_MeshSdp {

	key := SdpBindId

	if v, ok := t.MeshSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMeshSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMeshSdp got unexpected error: %v", err))
	}
	return v
}

// GetMeshSdp retrieves the value with the specified key from
// the MeshSdp map field of NokiaConf_Configure_Service_Vpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetMeshSdp(SdpBindId string) *NokiaConf_Configure_Service_Vpls_MeshSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.MeshSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteMeshSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls) DeleteMeshSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.MeshSdp, key)
}

// AppendMeshSdp appends the supplied NokiaConf_Configure_Service_Vpls_MeshSdp struct to the
// list MeshSdp of NokiaConf_Configure_Service_Vpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_MeshSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls) AppendMeshSdp(v *NokiaConf_Configure_Service_Vpls_MeshSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MeshSdp == nil {
		t.MeshSdp = make(map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp)
	}

	if _, ok := t.MeshSdp[key]; ok {
		return fmt.Errorf("duplicate key for list MeshSdp %v", key)
	}

	t.MeshSdp[key] = v
	return nil
}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Service_Vpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls) NewSap(SapId string) (*NokiaConf_Configure_Service_Vpls_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Vpls_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Service_Vpls_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Service_Vpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateSap(SapId string) *NokiaConf_Configure_Service_Vpls_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Service_Vpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetSap(SapId string) *NokiaConf_Configure_Service_Vpls_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Service_Vpls_Sap struct to the
// list Sap of NokiaConf_Configure_Service_Vpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls) AppendSap(v *NokiaConf_Configure_Service_Vpls_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Vpls_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSplitHorizonGroup creates a new entry in the SplitHorizonGroup list of the
// NokiaConf_Configure_Service_Vpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls) NewSplitHorizonGroup(ShgName string) (*NokiaConf_Configure_Service_Vpls_SplitHorizonGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SplitHorizonGroup == nil {
		t.SplitHorizonGroup = make(map[string]*NokiaConf_Configure_Service_Vpls_SplitHorizonGroup)
	}

	key := ShgName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SplitHorizonGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SplitHorizonGroup", key)
	}

	t.SplitHorizonGroup[key] = &NokiaConf_Configure_Service_Vpls_SplitHorizonGroup{
		ShgName: &ShgName,
	}

	return t.SplitHorizonGroup[key], nil
}

// RenameSplitHorizonGroup renames an entry in the list SplitHorizonGroup within
// the NokiaConf_Configure_Service_Vpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls) RenameSplitHorizonGroup(oldK, newK string) error {
	if _, ok := t.SplitHorizonGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in SplitHorizonGroup", newK)
	}

	e, ok := t.SplitHorizonGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SplitHorizonGroup", oldK)
	}
	e.ShgName = &newK

	t.SplitHorizonGroup[newK] = e
	delete(t.SplitHorizonGroup, oldK)
	return nil
}

// GetOrCreateSplitHorizonGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateSplitHorizonGroup(ShgName string) *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup {

	key := ShgName

	if v, ok := t.SplitHorizonGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSplitHorizonGroup(ShgName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSplitHorizonGroup got unexpected error: %v", err))
	}
	return v
}

// GetSplitHorizonGroup retrieves the value with the specified key from
// the SplitHorizonGroup map field of NokiaConf_Configure_Service_Vpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetSplitHorizonGroup(ShgName string) *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup {

	if t == nil {
		return nil
	}

	key := ShgName

	if lm, ok := t.SplitHorizonGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteSplitHorizonGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls) DeleteSplitHorizonGroup(ShgName string) {
	key := ShgName

	delete(t.SplitHorizonGroup, key)
}

// AppendSplitHorizonGroup appends the supplied NokiaConf_Configure_Service_Vpls_SplitHorizonGroup struct to the
// list SplitHorizonGroup of NokiaConf_Configure_Service_Vpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_SplitHorizonGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls) AppendSplitHorizonGroup(v *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup) error {
	if v.ShgName == nil {
		return fmt.Errorf("invalid nil key received for ShgName")
	}

	key := *v.ShgName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SplitHorizonGroup == nil {
		t.SplitHorizonGroup = make(map[string]*NokiaConf_Configure_Service_Vpls_SplitHorizonGroup)
	}

	if _, ok := t.SplitHorizonGroup[key]; ok {
		return fmt.Errorf("duplicate key for list SplitHorizonGroup %v", key)
	}

	t.SplitHorizonGroup[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Service_Vpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Service_Vpls_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Service_Vpls_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Service_Vpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Vpls_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Service_Vpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Vpls_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Service_Vpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls) AppendSpokeSdp(v *NokiaConf_Configure_Service_Vpls_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// GetOrCreateBgpAd retrieves the value of the BgpAd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateBgpAd() *NokiaConf_Configure_Service_Vpls_BgpAd {
	if t.BgpAd != nil {
		return t.BgpAd
	}
	t.BgpAd = &NokiaConf_Configure_Service_Vpls_BgpAd{}
	return t.BgpAd
}

// GetOrCreateBgpEvpn retrieves the value of the BgpEvpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateBgpEvpn() *NokiaConf_Configure_Service_Vpls_BgpEvpn {
	if t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	t.BgpEvpn = &NokiaConf_Configure_Service_Vpls_BgpEvpn{}
	return t.BgpEvpn
}

// GetOrCreateBgpVpls retrieves the value of the BgpVpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateBgpVpls() *NokiaConf_Configure_Service_Vpls_BgpVpls {
	if t.BgpVpls != nil {
		return t.BgpVpls
	}
	t.BgpVpls = &NokiaConf_Configure_Service_Vpls_BgpVpls{}
	return t.BgpVpls
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateEthCfm() *NokiaConf_Configure_Service_Vpls_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Service_Vpls_EthCfm{}
	return t.EthCfm
}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateFdb() *NokiaConf_Configure_Service_Vpls_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &NokiaConf_Configure_Service_Vpls_Fdb{}
	return t.Fdb
}

// GetOrCreateGsmp retrieves the value of the Gsmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateGsmp() *NokiaConf_Configure_Service_Vpls_Gsmp {
	if t.Gsmp != nil {
		return t.Gsmp
	}
	t.Gsmp = &NokiaConf_Configure_Service_Vpls_Gsmp{}
	return t.Gsmp
}

// GetOrCreateIgmpHostTracking retrieves the value of the IgmpHostTracking field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateIgmpHostTracking() *NokiaConf_Configure_Service_Vpls_IgmpHostTracking {
	if t.IgmpHostTracking != nil {
		return t.IgmpHostTracking
	}
	t.IgmpHostTracking = &NokiaConf_Configure_Service_Vpls_IgmpHostTracking{}
	return t.IgmpHostTracking
}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateIgmpSnooping() *NokiaConf_Configure_Service_Vpls_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &NokiaConf_Configure_Service_Vpls_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetOrCreateIsidPolicy retrieves the value of the IsidPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateIsidPolicy() *NokiaConf_Configure_Service_Vpls_IsidPolicy {
	if t.IsidPolicy != nil {
		return t.IsidPolicy
	}
	t.IsidPolicy = &NokiaConf_Configure_Service_Vpls_IsidPolicy{}
	return t.IsidPolicy
}

// GetOrCreateLoadBalancing retrieves the value of the LoadBalancing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateLoadBalancing() *NokiaConf_Configure_Service_Vpls_LoadBalancing {
	if t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	t.LoadBalancing = &NokiaConf_Configure_Service_Vpls_LoadBalancing{}
	return t.LoadBalancing
}

// GetOrCreateMacFlush retrieves the value of the MacFlush field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateMacFlush() *NokiaConf_Configure_Service_Vpls_MacFlush {
	if t.MacFlush != nil {
		return t.MacFlush
	}
	t.MacFlush = &NokiaConf_Configure_Service_Vpls_MacFlush{}
	return t.MacFlush
}

// GetOrCreateMacProtect retrieves the value of the MacProtect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateMacProtect() *NokiaConf_Configure_Service_Vpls_MacProtect {
	if t.MacProtect != nil {
		return t.MacProtect
	}
	t.MacProtect = &NokiaConf_Configure_Service_Vpls_MacProtect{}
	return t.MacProtect
}

// GetOrCreateMcrDefaultGtw retrieves the value of the McrDefaultGtw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateMcrDefaultGtw() *NokiaConf_Configure_Service_Vpls_McrDefaultGtw {
	if t.McrDefaultGtw != nil {
		return t.McrDefaultGtw
	}
	t.McrDefaultGtw = &NokiaConf_Configure_Service_Vpls_McrDefaultGtw{}
	return t.McrDefaultGtw
}

// GetOrCreateMfib retrieves the value of the Mfib field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateMfib() *NokiaConf_Configure_Service_Vpls_Mfib {
	if t.Mfib != nil {
		return t.Mfib
	}
	t.Mfib = &NokiaConf_Configure_Service_Vpls_Mfib{}
	return t.Mfib
}

// GetOrCreateMldSnooping retrieves the value of the MldSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateMldSnooping() *NokiaConf_Configure_Service_Vpls_MldSnooping {
	if t.MldSnooping != nil {
		return t.MldSnooping
	}
	t.MldSnooping = &NokiaConf_Configure_Service_Vpls_MldSnooping{}
	return t.MldSnooping
}

// GetOrCreateMrp retrieves the value of the Mrp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateMrp() *NokiaConf_Configure_Service_Vpls_Mrp {
	if t.Mrp != nil {
		return t.Mrp
	}
	t.Mrp = &NokiaConf_Configure_Service_Vpls_Mrp{}
	return t.Mrp
}

// GetOrCreatePbb retrieves the value of the Pbb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreatePbb() *NokiaConf_Configure_Service_Vpls_Pbb {
	if t.Pbb != nil {
		return t.Pbb
	}
	t.Pbb = &NokiaConf_Configure_Service_Vpls_Pbb{}
	return t.Pbb
}

// GetOrCreatePimSnooping retrieves the value of the PimSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreatePimSnooping() *NokiaConf_Configure_Service_Vpls_PimSnooping {
	if t.PimSnooping != nil {
		return t.PimSnooping
	}
	t.PimSnooping = &NokiaConf_Configure_Service_Vpls_PimSnooping{}
	return t.PimSnooping
}

// GetOrCreateProviderTunnel retrieves the value of the ProviderTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateProviderTunnel() *NokiaConf_Configure_Service_Vpls_ProviderTunnel {
	if t.ProviderTunnel != nil {
		return t.ProviderTunnel
	}
	t.ProviderTunnel = &NokiaConf_Configure_Service_Vpls_ProviderTunnel{}
	return t.ProviderTunnel
}

// GetOrCreateProxyArp retrieves the value of the ProxyArp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateProxyArp() *NokiaConf_Configure_Service_Vpls_ProxyArp {
	if t.ProxyArp != nil {
		return t.ProxyArp
	}
	t.ProxyArp = &NokiaConf_Configure_Service_Vpls_ProxyArp{}
	return t.ProxyArp
}

// GetOrCreateProxyNd retrieves the value of the ProxyNd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateProxyNd() *NokiaConf_Configure_Service_Vpls_ProxyNd {
	if t.ProxyNd != nil {
		return t.ProxyNd
	}
	t.ProxyNd = &NokiaConf_Configure_Service_Vpls_ProxyNd{}
	return t.ProxyNd
}

// GetOrCreateRoutedVpls retrieves the value of the RoutedVpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateRoutedVpls() *NokiaConf_Configure_Service_Vpls_RoutedVpls {
	if t.RoutedVpls != nil {
		return t.RoutedVpls
	}
	t.RoutedVpls = &NokiaConf_Configure_Service_Vpls_RoutedVpls{}
	return t.RoutedVpls
}

// GetOrCreateSpb retrieves the value of the Spb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateSpb() *NokiaConf_Configure_Service_Vpls_Spb {
	if t.Spb != nil {
		return t.Spb
	}
	t.Spb = &NokiaConf_Configure_Service_Vpls_Spb{}
	return t.Spb
}

// GetOrCreateSpbmControlVpls retrieves the value of the SpbmControlVpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateSpbmControlVpls() *NokiaConf_Configure_Service_Vpls_SpbmControlVpls {
	if t.SpbmControlVpls != nil {
		return t.SpbmControlVpls
	}
	t.SpbmControlVpls = &NokiaConf_Configure_Service_Vpls_SpbmControlVpls{}
	return t.SpbmControlVpls
}

// GetOrCreateStp retrieves the value of the Stp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateStp() *NokiaConf_Configure_Service_Vpls_Stp {
	if t.Stp != nil {
		return t.Stp
	}
	t.Stp = &NokiaConf_Configure_Service_Vpls_Stp{}
	return t.Stp
}

// GetOrCreateVxlan retrieves the value of the Vxlan field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateVxlan() *NokiaConf_Configure_Service_Vpls_Vxlan {
	if t.Vxlan != nil {
		return t.Vxlan
	}
	t.Vxlan = &NokiaConf_Configure_Service_Vpls_Vxlan{}
	return t.Vxlan
}

// GetOrCreateWlanGw retrieves the value of the WlanGw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls) GetOrCreateWlanGw() *NokiaConf_Configure_Service_Vpls_WlanGw {
	if t.WlanGw != nil {
		return t.WlanGw
	}
	t.WlanGw = &NokiaConf_Configure_Service_Vpls_WlanGw{}
	return t.WlanGw
}

// GetBgpAd returns the value of the BgpAd struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field BgpAd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetBgpAd() *NokiaConf_Configure_Service_Vpls_BgpAd {
	if t != nil && t.BgpAd != nil {
		return t.BgpAd
	}
	return nil
}

// GetBgpEvpn returns the value of the BgpEvpn struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field BgpEvpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetBgpEvpn() *NokiaConf_Configure_Service_Vpls_BgpEvpn {
	if t != nil && t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	return nil
}

// GetBgpVpls returns the value of the BgpVpls struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field BgpVpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetBgpVpls() *NokiaConf_Configure_Service_Vpls_BgpVpls {
	if t != nil && t.BgpVpls != nil {
		return t.BgpVpls
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetEthCfm() *NokiaConf_Configure_Service_Vpls_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetFdb returns the value of the Fdb struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetFdb() *NokiaConf_Configure_Service_Vpls_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetGsmp returns the value of the Gsmp struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field Gsmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetGsmp() *NokiaConf_Configure_Service_Vpls_Gsmp {
	if t != nil && t.Gsmp != nil {
		return t.Gsmp
	}
	return nil
}

// GetIgmpHostTracking returns the value of the IgmpHostTracking struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field IgmpHostTracking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetIgmpHostTracking() *NokiaConf_Configure_Service_Vpls_IgmpHostTracking {
	if t != nil && t.IgmpHostTracking != nil {
		return t.IgmpHostTracking
	}
	return nil
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetIgmpSnooping() *NokiaConf_Configure_Service_Vpls_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetIsidPolicy returns the value of the IsidPolicy struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field IsidPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetIsidPolicy() *NokiaConf_Configure_Service_Vpls_IsidPolicy {
	if t != nil && t.IsidPolicy != nil {
		return t.IsidPolicy
	}
	return nil
}

// GetLoadBalancing returns the value of the LoadBalancing struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field LoadBalancing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetLoadBalancing() *NokiaConf_Configure_Service_Vpls_LoadBalancing {
	if t != nil && t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	return nil
}

// GetMacFlush returns the value of the MacFlush struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field MacFlush is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetMacFlush() *NokiaConf_Configure_Service_Vpls_MacFlush {
	if t != nil && t.MacFlush != nil {
		return t.MacFlush
	}
	return nil
}

// GetMacProtect returns the value of the MacProtect struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field MacProtect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetMacProtect() *NokiaConf_Configure_Service_Vpls_MacProtect {
	if t != nil && t.MacProtect != nil {
		return t.MacProtect
	}
	return nil
}

// GetMcrDefaultGtw returns the value of the McrDefaultGtw struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field McrDefaultGtw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetMcrDefaultGtw() *NokiaConf_Configure_Service_Vpls_McrDefaultGtw {
	if t != nil && t.McrDefaultGtw != nil {
		return t.McrDefaultGtw
	}
	return nil
}

// GetMfib returns the value of the Mfib struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field Mfib is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetMfib() *NokiaConf_Configure_Service_Vpls_Mfib {
	if t != nil && t.Mfib != nil {
		return t.Mfib
	}
	return nil
}

// GetMldSnooping returns the value of the MldSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field MldSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetMldSnooping() *NokiaConf_Configure_Service_Vpls_MldSnooping {
	if t != nil && t.MldSnooping != nil {
		return t.MldSnooping
	}
	return nil
}

// GetMrp returns the value of the Mrp struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field Mrp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetMrp() *NokiaConf_Configure_Service_Vpls_Mrp {
	if t != nil && t.Mrp != nil {
		return t.Mrp
	}
	return nil
}

// GetPbb returns the value of the Pbb struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field Pbb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetPbb() *NokiaConf_Configure_Service_Vpls_Pbb {
	if t != nil && t.Pbb != nil {
		return t.Pbb
	}
	return nil
}

// GetPimSnooping returns the value of the PimSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field PimSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetPimSnooping() *NokiaConf_Configure_Service_Vpls_PimSnooping {
	if t != nil && t.PimSnooping != nil {
		return t.PimSnooping
	}
	return nil
}

// GetProviderTunnel returns the value of the ProviderTunnel struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field ProviderTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetProviderTunnel() *NokiaConf_Configure_Service_Vpls_ProviderTunnel {
	if t != nil && t.ProviderTunnel != nil {
		return t.ProviderTunnel
	}
	return nil
}

// GetProxyArp returns the value of the ProxyArp struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field ProxyArp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetProxyArp() *NokiaConf_Configure_Service_Vpls_ProxyArp {
	if t != nil && t.ProxyArp != nil {
		return t.ProxyArp
	}
	return nil
}

// GetProxyNd returns the value of the ProxyNd struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field ProxyNd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetProxyNd() *NokiaConf_Configure_Service_Vpls_ProxyNd {
	if t != nil && t.ProxyNd != nil {
		return t.ProxyNd
	}
	return nil
}

// GetRoutedVpls returns the value of the RoutedVpls struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field RoutedVpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetRoutedVpls() *NokiaConf_Configure_Service_Vpls_RoutedVpls {
	if t != nil && t.RoutedVpls != nil {
		return t.RoutedVpls
	}
	return nil
}

// GetSpb returns the value of the Spb struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field Spb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetSpb() *NokiaConf_Configure_Service_Vpls_Spb {
	if t != nil && t.Spb != nil {
		return t.Spb
	}
	return nil
}

// GetSpbmControlVpls returns the value of the SpbmControlVpls struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field SpbmControlVpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetSpbmControlVpls() *NokiaConf_Configure_Service_Vpls_SpbmControlVpls {
	if t != nil && t.SpbmControlVpls != nil {
		return t.SpbmControlVpls
	}
	return nil
}

// GetStp returns the value of the Stp struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field Stp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetStp() *NokiaConf_Configure_Service_Vpls_Stp {
	if t != nil && t.Stp != nil {
		return t.Stp
	}
	return nil
}

// GetVxlan returns the value of the Vxlan struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field Vxlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetVxlan() *NokiaConf_Configure_Service_Vpls_Vxlan {
	if t != nil && t.Vxlan != nil {
		return t.Vxlan
	}
	return nil
}

// GetWlanGw returns the value of the WlanGw struct pointer
// from NokiaConf_Configure_Service_Vpls. If the receiver or the field WlanGw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls) GetWlanGw() *NokiaConf_Configure_Service_Vpls_WlanGw {
	if t != nil && t.WlanGw != nil {
		return t.WlanGw
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCustomer retrieves the value of the leaf Customer from the NokiaConf_Configure_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Customer is set, it can
// safely use t.GetCustomer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Customer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls) GetCustomer() string {
	if t == nil || t.Customer == nil {
		return ""
	}
	return *t.Customer
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEtree retrieves the value of the leaf Etree from the NokiaConf_Configure_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Etree is set, it can
// safely use t.GetEtree() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Etree == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls) GetEtree() bool {
	if t == nil || t.Etree == nil {
		return false
	}
	return *t.Etree
}

// GetIgnoreL2VpnMtuMismatch retrieves the value of the leaf IgnoreL2VpnMtuMismatch from the NokiaConf_Configure_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreL2VpnMtuMismatch is set, it can
// safely use t.GetIgnoreL2VpnMtuMismatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreL2VpnMtuMismatch == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls) GetIgnoreL2VpnMtuMismatch() bool {
	if t == nil || t.IgnoreL2VpnMtuMismatch == nil {
		return false
	}
	return *t.IgnoreL2VpnMtuMismatch
}

// GetMVpls retrieves the value of the leaf MVpls from the NokiaConf_Configure_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MVpls is set, it can
// safely use t.GetMVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MVpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls) GetMVpls() bool {
	if t == nil || t.MVpls == nil {
		return false
	}
	return *t.MVpls
}

// GetMcastIpv6SnoopingScope retrieves the value of the leaf McastIpv6SnoopingScope from the NokiaConf_Configure_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv6SnoopingScope is set, it can
// safely use t.GetMcastIpv6SnoopingScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv6SnoopingScope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls) GetMcastIpv6SnoopingScope() E_NokiaConf_Configure_Service_Vpls_McastIpv6SnoopingScope {
	if t == nil || t.McastIpv6SnoopingScope == 0 {
		return NokiaConf_Configure_Service_Vpls_McastIpv6SnoopingScope_mac_based
	}
	return t.McastIpv6SnoopingScope
}

// GetMulticastInfoPolicy retrieves the value of the leaf MulticastInfoPolicy from the NokiaConf_Configure_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastInfoPolicy is set, it can
// safely use t.GetMulticastInfoPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastInfoPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls) GetMulticastInfoPolicy() string {
	if t == nil || t.MulticastInfoPolicy == nil {
		return ""
	}
	return *t.MulticastInfoPolicy
}

// GetPbbType retrieves the value of the leaf PbbType from the NokiaConf_Configure_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PbbType is set, it can
// safely use t.GetPbbType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PbbType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls) GetPbbType() E_NokiaTypesServices_PbbType {
	if t == nil || t.PbbType == 0 {
		return 0
	}
	return t.PbbType
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls) GetServiceId() uint32 {
	if t == nil || t.ServiceId == nil {
		return 0
	}
	return *t.ServiceId
}

// GetServiceMtu retrieves the value of the leaf ServiceMtu from the NokiaConf_Configure_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceMtu is set, it can
// safely use t.GetServiceMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls) GetServiceMtu() int32 {
	if t == nil || t.ServiceMtu == nil {
		return 0
	}
	return *t.ServiceMtu
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetShcvPolicyIpv4 retrieves the value of the leaf ShcvPolicyIpv4 from the NokiaConf_Configure_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShcvPolicyIpv4 is set, it can
// safely use t.GetShcvPolicyIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShcvPolicyIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls) GetShcvPolicyIpv4() string {
	if t == nil || t.ShcvPolicyIpv4 == nil {
		return ""
	}
	return *t.ShcvPolicyIpv4
}

// GetTempFlooding retrieves the value of the leaf TempFlooding from the NokiaConf_Configure_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TempFlooding is set, it can
// safely use t.GetTempFlooding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TempFlooding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls) GetTempFlooding() int32 {
	if t == nil || t.TempFlooding == nil {
		return 0
	}
	return *t.TempFlooding
}

// GetVpnId retrieves the value of the leaf VpnId from the NokiaConf_Configure_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnId is set, it can
// safely use t.GetVpnId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls) GetVpnId() uint32 {
	if t == nil || t.VpnId == nil {
		return 0
	}
	return *t.VpnId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Etree == nil {
		var v bool = false
		t.Etree = &v
	}
	if t.IgnoreL2VpnMtuMismatch == nil {
		var v bool = false
		t.IgnoreL2VpnMtuMismatch = &v
	}
	if t.MVpls == nil {
		var v bool = false
		t.MVpls = &v
	}
	if t.McastIpv6SnoopingScope == 0 {
		t.McastIpv6SnoopingScope = NokiaConf_Configure_Service_Vpls_McastIpv6SnoopingScope_mac_based
	}
	t.BgpAd.PopulateDefaults()
	t.BgpEvpn.PopulateDefaults()
	t.BgpVpls.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.Fdb.PopulateDefaults()
	t.Gsmp.PopulateDefaults()
	t.IgmpHostTracking.PopulateDefaults()
	t.IgmpSnooping.PopulateDefaults()
	t.IsidPolicy.PopulateDefaults()
	t.LoadBalancing.PopulateDefaults()
	t.MacFlush.PopulateDefaults()
	t.MacProtect.PopulateDefaults()
	t.McrDefaultGtw.PopulateDefaults()
	t.Mfib.PopulateDefaults()
	t.MldSnooping.PopulateDefaults()
	t.Mrp.PopulateDefaults()
	t.Pbb.PopulateDefaults()
	t.PimSnooping.PopulateDefaults()
	t.ProviderTunnel.PopulateDefaults()
	t.ProxyArp.PopulateDefaults()
	t.ProxyNd.PopulateDefaults()
	t.RoutedVpls.PopulateDefaults()
	t.Spb.PopulateDefaults()
	t.SpbmControlVpls.PopulateDefaults()
	t.Stp.PopulateDefaults()
	t.Vxlan.PopulateDefaults()
	t.WlanGw.PopulateDefaults()
	for _, e := range t.Bgp {
		e.PopulateDefaults()
	}
	for _, e := range t.BgpMhSite {
		e.PopulateDefaults()
	}
	for _, e := range t.CaptureSap {
		e.PopulateDefaults()
	}
	for _, e := range t.Endpoint {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.MeshSdp {
		e.PopulateDefaults()
	}
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.SplitHorizonGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"service-name": *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls.
func (*NokiaConf_Configure_Service_Vpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Bgp represents the /nokia-conf/configure/service/vpls/bgp YANG schema element.
type NokiaConf_Configure_Service_Vpls_Bgp struct {
	AdvServiceMtu      *int32                                                             `path:"adv-service-mtu" module:"nokia-conf"`
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	BgpInstance        *int32                                                             `path:"bgp-instance" module:"nokia-conf"`
	PwTemplateBinding  map[string]*NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding `path:"pw-template-binding" module:"nokia-conf"`
	RouteDistinguisher NokiaConf_Configure_Service_Vpls_Bgp_RouteDistinguisher_Union      `path:"route-distinguisher" module:"nokia-conf"`
	RouteTarget        *NokiaConf_Configure_Service_Vpls_Bgp_RouteTarget                  `path:"route-target" module:"nokia-conf"`
	VsiExport          []string                                                           `path:"vsi-export" module:"nokia-conf"`
	VsiImport          []string                                                           `path:"vsi-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Bgp) IsYANGGoStruct() {}

// NewPwTemplateBinding creates a new entry in the PwTemplateBinding list of the
// NokiaConf_Configure_Service_Vpls_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Bgp) NewPwTemplateBinding(PwTemplateName string) (*NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwTemplateBinding == nil {
		t.PwTemplateBinding = make(map[string]*NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding)
	}

	key := PwTemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PwTemplateBinding[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PwTemplateBinding", key)
	}

	t.PwTemplateBinding[key] = &NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding{
		PwTemplateName: &PwTemplateName,
	}

	return t.PwTemplateBinding[key], nil
}

// RenamePwTemplateBinding renames an entry in the list PwTemplateBinding within
// the NokiaConf_Configure_Service_Vpls_Bgp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Bgp) RenamePwTemplateBinding(oldK, newK string) error {
	if _, ok := t.PwTemplateBinding[newK]; ok {
		return fmt.Errorf("key %v already exists in PwTemplateBinding", newK)
	}

	e, ok := t.PwTemplateBinding[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PwTemplateBinding", oldK)
	}
	e.PwTemplateName = &newK

	t.PwTemplateBinding[newK] = e
	delete(t.PwTemplateBinding, oldK)
	return nil
}

// GetOrCreatePwTemplateBinding retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Bgp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Bgp) GetOrCreatePwTemplateBinding(PwTemplateName string) *NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding {

	key := PwTemplateName

	if v, ok := t.PwTemplateBinding[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPwTemplateBinding(PwTemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePwTemplateBinding got unexpected error: %v", err))
	}
	return v
}

// GetPwTemplateBinding retrieves the value with the specified key from
// the PwTemplateBinding map field of NokiaConf_Configure_Service_Vpls_Bgp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Bgp) GetPwTemplateBinding(PwTemplateName string) *NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding {

	if t == nil {
		return nil
	}

	key := PwTemplateName

	if lm, ok := t.PwTemplateBinding[key]; ok {
		return lm
	}
	return nil
}

// DeletePwTemplateBinding deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Bgp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Bgp) DeletePwTemplateBinding(PwTemplateName string) {
	key := PwTemplateName

	delete(t.PwTemplateBinding, key)
}

// AppendPwTemplateBinding appends the supplied NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding struct to the
// list PwTemplateBinding of NokiaConf_Configure_Service_Vpls_Bgp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Bgp) AppendPwTemplateBinding(v *NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding) error {
	if v.PwTemplateName == nil {
		return fmt.Errorf("invalid nil key received for PwTemplateName")
	}

	key := *v.PwTemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwTemplateBinding == nil {
		t.PwTemplateBinding = make(map[string]*NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding)
	}

	if _, ok := t.PwTemplateBinding[key]; ok {
		return fmt.Errorf("duplicate key for list PwTemplateBinding %v", key)
	}

	t.PwTemplateBinding[key] = v
	return nil
}

// GetOrCreateRouteTarget retrieves the value of the RouteTarget field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Bgp) GetOrCreateRouteTarget() *NokiaConf_Configure_Service_Vpls_Bgp_RouteTarget {
	if t.RouteTarget != nil {
		return t.RouteTarget
	}
	t.RouteTarget = &NokiaConf_Configure_Service_Vpls_Bgp_RouteTarget{}
	return t.RouteTarget
}

// GetRouteTarget returns the value of the RouteTarget struct pointer
// from NokiaConf_Configure_Service_Vpls_Bgp. If the receiver or the field RouteTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Bgp) GetRouteTarget() *NokiaConf_Configure_Service_Vpls_Bgp_RouteTarget {
	if t != nil && t.RouteTarget != nil {
		return t.RouteTarget
	}
	return nil
}

// GetAdvServiceMtu retrieves the value of the leaf AdvServiceMtu from the NokiaConf_Configure_Service_Vpls_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvServiceMtu is set, it can
// safely use t.GetAdvServiceMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvServiceMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Bgp) GetAdvServiceMtu() int32 {
	if t == nil || t.AdvServiceMtu == nil {
		return 0
	}
	return *t.AdvServiceMtu
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Bgp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Bgp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBgpInstance retrieves the value of the leaf BgpInstance from the NokiaConf_Configure_Service_Vpls_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpInstance is set, it can
// safely use t.GetBgpInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Bgp) GetBgpInstance() int32 {
	if t == nil || t.BgpInstance == nil {
		return 0
	}
	return *t.BgpInstance
}

// GetRouteDistinguisher retrieves the value of the leaf RouteDistinguisher from the NokiaConf_Configure_Service_Vpls_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteDistinguisher is set, it can
// safely use t.GetRouteDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteDistinguisher == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Bgp) GetRouteDistinguisher() NokiaConf_Configure_Service_Vpls_Bgp_RouteDistinguisher_Union {
	if t == nil || t.RouteDistinguisher == nil {
		return nil
	}
	return t.RouteDistinguisher
}

// GetVsiExport retrieves the value of the leaf VsiExport from the NokiaConf_Configure_Service_Vpls_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VsiExport is set, it can
// safely use t.GetVsiExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VsiExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Bgp) GetVsiExport() []string {
	if t == nil || t.VsiExport == nil {
		return nil
	}
	return t.VsiExport
}

// GetVsiImport retrieves the value of the leaf VsiImport from the NokiaConf_Configure_Service_Vpls_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VsiImport is set, it can
// safely use t.GetVsiImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VsiImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Bgp) GetVsiImport() []string {
	if t == nil || t.VsiImport == nil {
		return nil
	}
	return t.VsiImport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Bgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Bgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteTarget.PopulateDefaults()
	for _, e := range t.PwTemplateBinding {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Bgp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Bgp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BgpInstance == nil {
		return nil, fmt.Errorf("nil value for key BgpInstance")
	}

	return map[string]interface{}{
		"bgp-instance": *t.BgpInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Bgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Bgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Bgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Bgp.
func (*NokiaConf_Configure_Service_Vpls_Bgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpAd represents the /nokia-conf/configure/service/vpls/bgp-ad YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpAd struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	VplsId             *string                     `path:"vpls-id" module:"nokia-conf"`
	VsiIdPrefix        *string                     `path:"vsi-id-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpAd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpAd) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_BgpAd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpAd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_BgpAd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpAd) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_BgpAd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpAd) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetVplsId retrieves the value of the leaf VplsId from the NokiaConf_Configure_Service_Vpls_BgpAd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VplsId is set, it can
// safely use t.GetVplsId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VplsId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpAd) GetVplsId() string {
	if t == nil || t.VplsId == nil {
		return ""
	}
	return *t.VplsId
}

// GetVsiIdPrefix retrieves the value of the leaf VsiIdPrefix from the NokiaConf_Configure_Service_Vpls_BgpAd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VsiIdPrefix is set, it can
// safely use t.GetVsiIdPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VsiIdPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpAd) GetVsiIdPrefix() string {
	if t == nil || t.VsiIdPrefix == nil {
		return ""
	}
	return *t.VsiIdPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpAd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpAd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpAd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpAd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpAd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpAd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpAd.
func (*NokiaConf_Configure_Service_Vpls_BgpAd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpEvpn represents the /nokia-conf/configure/service/vpls/bgp-evpn YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpEvpn struct {
	AcceptIvplsEvpnFlush *bool                                                     `path:"accept-ivpls-evpn-flush" module:"nokia-conf"`
	ApplyGroups          []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Evi                  *uint32                                                   `path:"evi" module:"nokia-conf"`
	InclMcastOrigIp      *string                                                   `path:"incl-mcast-orig-ip" module:"nokia-conf"`
	IsidRouteTarget      *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget `path:"isid-route-target" module:"nokia-conf"`
	MacDuplication       *NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication  `path:"mac-duplication" module:"nokia-conf"`
	Mpls                 map[int32]*NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls  `path:"mpls" module:"nokia-conf"`
	Routes               *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes          `path:"routes" module:"nokia-conf"`
	Vxlan                map[int32]*NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan `path:"vxlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpEvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn) IsYANGGoStruct() {}

// NewMpls creates a new entry in the Mpls list of the
// NokiaConf_Configure_Service_Vpls_BgpEvpn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) NewMpls(BgpInstance int32) (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mpls == nil {
		t.Mpls = make(map[int32]*NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls)
	}

	key := BgpInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mpls[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mpls", key)
	}

	t.Mpls[key] = &NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls{
		BgpInstance: &BgpInstance,
	}

	return t.Mpls[key], nil
}

// RenameMpls renames an entry in the list Mpls within
// the NokiaConf_Configure_Service_Vpls_BgpEvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) RenameMpls(oldK, newK int32) error {
	if _, ok := t.Mpls[newK]; ok {
		return fmt.Errorf("key %v already exists in Mpls", newK)
	}

	e, ok := t.Mpls[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mpls", oldK)
	}
	e.BgpInstance = &newK

	t.Mpls[newK] = e
	delete(t.Mpls, oldK)
	return nil
}

// GetOrCreateMpls retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_BgpEvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) GetOrCreateMpls(BgpInstance int32) *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls {

	key := BgpInstance

	if v, ok := t.Mpls[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMpls(BgpInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMpls got unexpected error: %v", err))
	}
	return v
}

// GetMpls retrieves the value with the specified key from
// the Mpls map field of NokiaConf_Configure_Service_Vpls_BgpEvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) GetMpls(BgpInstance int32) *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls {

	if t == nil {
		return nil
	}

	key := BgpInstance

	if lm, ok := t.Mpls[key]; ok {
		return lm
	}
	return nil
}

// DeleteMpls deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_BgpEvpn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) DeleteMpls(BgpInstance int32) {
	key := BgpInstance

	delete(t.Mpls, key)
}

// AppendMpls appends the supplied NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls struct to the
// list Mpls of NokiaConf_Configure_Service_Vpls_BgpEvpn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) AppendMpls(v *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) error {
	if v.BgpInstance == nil {
		return fmt.Errorf("invalid nil key received for BgpInstance")
	}

	key := *v.BgpInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mpls == nil {
		t.Mpls = make(map[int32]*NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls)
	}

	if _, ok := t.Mpls[key]; ok {
		return fmt.Errorf("duplicate key for list Mpls %v", key)
	}

	t.Mpls[key] = v
	return nil
}

// NewVxlan creates a new entry in the Vxlan list of the
// NokiaConf_Configure_Service_Vpls_BgpEvpn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) NewVxlan(BgpInstance int32) (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vxlan == nil {
		t.Vxlan = make(map[int32]*NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan)
	}

	key := BgpInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vxlan[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vxlan", key)
	}

	t.Vxlan[key] = &NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan{
		BgpInstance: &BgpInstance,
	}

	return t.Vxlan[key], nil
}

// RenameVxlan renames an entry in the list Vxlan within
// the NokiaConf_Configure_Service_Vpls_BgpEvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) RenameVxlan(oldK, newK int32) error {
	if _, ok := t.Vxlan[newK]; ok {
		return fmt.Errorf("key %v already exists in Vxlan", newK)
	}

	e, ok := t.Vxlan[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vxlan", oldK)
	}
	e.BgpInstance = &newK

	t.Vxlan[newK] = e
	delete(t.Vxlan, oldK)
	return nil
}

// GetOrCreateVxlan retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_BgpEvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) GetOrCreateVxlan(BgpInstance int32) *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan {

	key := BgpInstance

	if v, ok := t.Vxlan[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVxlan(BgpInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVxlan got unexpected error: %v", err))
	}
	return v
}

// GetVxlan retrieves the value with the specified key from
// the Vxlan map field of NokiaConf_Configure_Service_Vpls_BgpEvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) GetVxlan(BgpInstance int32) *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan {

	if t == nil {
		return nil
	}

	key := BgpInstance

	if lm, ok := t.Vxlan[key]; ok {
		return lm
	}
	return nil
}

// DeleteVxlan deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_BgpEvpn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) DeleteVxlan(BgpInstance int32) {
	key := BgpInstance

	delete(t.Vxlan, key)
}

// AppendVxlan appends the supplied NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan struct to the
// list Vxlan of NokiaConf_Configure_Service_Vpls_BgpEvpn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) AppendVxlan(v *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) error {
	if v.BgpInstance == nil {
		return fmt.Errorf("invalid nil key received for BgpInstance")
	}

	key := *v.BgpInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vxlan == nil {
		t.Vxlan = make(map[int32]*NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan)
	}

	if _, ok := t.Vxlan[key]; ok {
		return fmt.Errorf("duplicate key for list Vxlan %v", key)
	}

	t.Vxlan[key] = v
	return nil
}

// GetOrCreateIsidRouteTarget retrieves the value of the IsidRouteTarget field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) GetOrCreateIsidRouteTarget() *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget {
	if t.IsidRouteTarget != nil {
		return t.IsidRouteTarget
	}
	t.IsidRouteTarget = &NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget{}
	return t.IsidRouteTarget
}

// GetOrCreateMacDuplication retrieves the value of the MacDuplication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) GetOrCreateMacDuplication() *NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication {
	if t.MacDuplication != nil {
		return t.MacDuplication
	}
	t.MacDuplication = &NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication{}
	return t.MacDuplication
}

// GetOrCreateRoutes retrieves the value of the Routes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) GetOrCreateRoutes() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes {
	if t.Routes != nil {
		return t.Routes
	}
	t.Routes = &NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes{}
	return t.Routes
}

// GetIsidRouteTarget returns the value of the IsidRouteTarget struct pointer
// from NokiaConf_Configure_Service_Vpls_BgpEvpn. If the receiver or the field IsidRouteTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) GetIsidRouteTarget() *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget {
	if t != nil && t.IsidRouteTarget != nil {
		return t.IsidRouteTarget
	}
	return nil
}

// GetMacDuplication returns the value of the MacDuplication struct pointer
// from NokiaConf_Configure_Service_Vpls_BgpEvpn. If the receiver or the field MacDuplication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) GetMacDuplication() *NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication {
	if t != nil && t.MacDuplication != nil {
		return t.MacDuplication
	}
	return nil
}

// GetRoutes returns the value of the Routes struct pointer
// from NokiaConf_Configure_Service_Vpls_BgpEvpn. If the receiver or the field Routes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) GetRoutes() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes {
	if t != nil && t.Routes != nil {
		return t.Routes
	}
	return nil
}

// GetAcceptIvplsEvpnFlush retrieves the value of the leaf AcceptIvplsEvpnFlush from the NokiaConf_Configure_Service_Vpls_BgpEvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptIvplsEvpnFlush is set, it can
// safely use t.GetAcceptIvplsEvpnFlush() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptIvplsEvpnFlush == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) GetAcceptIvplsEvpnFlush() bool {
	if t == nil || t.AcceptIvplsEvpnFlush == nil {
		return false
	}
	return *t.AcceptIvplsEvpnFlush
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_BgpEvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_BgpEvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEvi retrieves the value of the leaf Evi from the NokiaConf_Configure_Service_Vpls_BgpEvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evi is set, it can
// safely use t.GetEvi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) GetEvi() uint32 {
	if t == nil || t.Evi == nil {
		return 0
	}
	return *t.Evi
}

// GetInclMcastOrigIp retrieves the value of the leaf InclMcastOrigIp from the NokiaConf_Configure_Service_Vpls_BgpEvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InclMcastOrigIp is set, it can
// safely use t.GetInclMcastOrigIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InclMcastOrigIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) GetInclMcastOrigIp() string {
	if t == nil || t.InclMcastOrigIp == nil {
		return ""
	}
	return *t.InclMcastOrigIp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpEvpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcceptIvplsEvpnFlush == nil {
		var v bool = false
		t.AcceptIvplsEvpnFlush = &v
	}
	t.IsidRouteTarget.PopulateDefaults()
	t.MacDuplication.PopulateDefaults()
	t.Routes.PopulateDefaults()
	for _, e := range t.Mpls {
		e.PopulateDefaults()
	}
	for _, e := range t.Vxlan {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpEvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpEvpn.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget represents the /nokia-conf/configure/service/vpls/bgp-evpn/isid-route-target YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget struct {
	Range map[int32]*NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget) IsYANGGoStruct() {}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget) NewRange(Start int32) (*NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[int32]*NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range{
		Start: &Start,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget) RenameRange(oldK, newK int32) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.Start = &newK

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget) GetOrCreateRange(Start int32) *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range {

	key := Start

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget) GetRange(Start int32) *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget) DeleteRange(Start int32) {
	key := Start

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range struct to the
// list Range of NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget) AppendRange(v *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key received for Start")
	}

	key := *v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[int32]*NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range represents the /nokia-conf/configure/service/vpls/bgp-evpn/isid-route-target/range YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range struct {
	ApplyGroups        []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *int32                                                                `path:"end" module:"nokia-conf"`
	RouteTarget        *string                                                               `path:"route-target" module:"nokia-conf"`
	Start              *int32                                                                `path:"start" module:"nokia-conf"`
	Type               E_NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetRouteTarget retrieves the value of the leaf RouteTarget from the NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTarget is set, it can
// safely use t.GetRouteTarget() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTarget == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) GetRouteTarget() string {
	if t == nil || t.RouteTarget == nil {
		return ""
	}
	return *t.RouteTarget
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) GetType() E_NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range_Type_auto
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range_Type_auto
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication represents the /nokia-conf/configure/service/vpls/bgp-evpn/mac-duplication YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication struct {
	Blackhole *bool                                                               `path:"blackhole" module:"nokia-conf"`
	Detect    *NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Detect     `path:"detect" module:"nokia-conf"`
	Retry     NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Retry_Union `path:"retry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication) IsYANGGoStruct() {}

// GetOrCreateDetect retrieves the value of the Detect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication) GetOrCreateDetect() *NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Detect {
	if t.Detect != nil {
		return t.Detect
	}
	t.Detect = &NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Detect{}
	return t.Detect
}

// GetDetect returns the value of the Detect struct pointer
// from NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication. If the receiver or the field Detect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication) GetDetect() *NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Detect {
	if t != nil && t.Detect != nil {
		return t.Detect
	}
	return nil
}

// GetBlackhole retrieves the value of the leaf Blackhole from the NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Blackhole is set, it can
// safely use t.GetBlackhole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Blackhole == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication) GetBlackhole() bool {
	if t == nil || t.Blackhole == nil {
		return false
	}
	return *t.Blackhole
}

// GetRetry retrieves the value of the leaf Retry from the NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Retry is set, it can
// safely use t.GetRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Retry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication) GetRetry() NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Retry_Union {
	if t == nil || t.Retry == nil {
		return UnionUint32(9)
	}
	return t.Retry
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Blackhole == nil {
		var v bool = false
		t.Blackhole = &v
	}
	if t.Retry == nil {
		t.Retry = UnionUint32(9)
	}
	t.Detect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Detect represents the /nokia-conf/configure/service/vpls/bgp-evpn/mac-duplication/detect YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Detect struct {
	NumMoves *uint32 `path:"num-moves" module:"nokia-conf"`
	Window   *uint32 `path:"window" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Detect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Detect) IsYANGGoStruct() {}

// GetNumMoves retrieves the value of the leaf NumMoves from the NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Detect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumMoves is set, it can
// safely use t.GetNumMoves() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumMoves == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Detect) GetNumMoves() uint32 {
	if t == nil || t.NumMoves == nil {
		return 5
	}
	return *t.NumMoves
}

// GetWindow retrieves the value of the leaf Window from the NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Detect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Window is set, it can
// safely use t.GetWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Window == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Detect) GetWindow() uint32 {
	if t == nil || t.Window == nil {
		return 3
	}
	return *t.Window
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Detect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Detect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NumMoves == nil {
		var v uint32 = 5
		t.NumMoves = &v
	}
	if t.Window == nil {
		var v uint32 = 3
		t.Window = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Detect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Detect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Detect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Detect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Detect.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_MacDuplication_Detect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls represents the /nokia-conf/configure/service/vpls/bgp-evpn/mpls YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls struct {
	AdminState                 E_NokiaTypesSros_AdminState                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups                []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude         []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	AutoBindTunnel             *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel  `path:"auto-bind-tunnel" module:"nokia-conf"`
	BgpInstance                *int32                                                         `path:"bgp-instance" module:"nokia-conf"`
	ControlWord                *bool                                                          `path:"control-word" module:"nokia-conf"`
	DefaultRouteTag            *string                                                        `path:"default-route-tag" module:"nokia-conf"`
	DynamicEgressLabelLimit    *bool                                                          `path:"dynamic-egress-label-limit" module:"nokia-conf"`
	Ecmp                       *int32                                                         `path:"ecmp" module:"nokia-conf"`
	EntropyLabel               *bool                                                          `path:"entropy-label" module:"nokia-conf"`
	EviThreeByteAutoRt         *bool                                                          `path:"evi-three-byte-auto-rt" module:"nokia-conf"`
	Fdb                        *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_Fdb             `path:"fdb" module:"nokia-conf"`
	ForceVcForwarding          E_NokiaTypesServices_BgpEvpnForceVcForwarding                  `path:"force-vc-forwarding" module:"nokia-conf"`
	IngressReplicationBumLabel *bool                                                          `path:"ingress-replication-bum-label" module:"nokia-conf"`
	MhMode                     E_NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_MhMode         `path:"mh-mode" module:"nokia-conf"`
	OperGroup                  *string                                                        `path:"oper-group" module:"nokia-conf"`
	RouteNextHop               *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop    `path:"route-next-hop" module:"nokia-conf"`
	SendTunnelEncap            *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap `path:"send-tunnel-encap" module:"nokia-conf"`
	SplitHorizonGroup          *string                                                        `path:"split-horizon-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) IsYANGGoStruct() {}

// GetOrCreateAutoBindTunnel retrieves the value of the AutoBindTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetOrCreateAutoBindTunnel() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel {
	if t.AutoBindTunnel != nil {
		return t.AutoBindTunnel
	}
	t.AutoBindTunnel = &NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel{}
	return t.AutoBindTunnel
}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetOrCreateFdb() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_Fdb{}
	return t.Fdb
}

// GetOrCreateRouteNextHop retrieves the value of the RouteNextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetOrCreateRouteNextHop() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop {
	if t.RouteNextHop != nil {
		return t.RouteNextHop
	}
	t.RouteNextHop = &NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop{}
	return t.RouteNextHop
}

// GetOrCreateSendTunnelEncap retrieves the value of the SendTunnelEncap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetOrCreateSendTunnelEncap() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap {
	if t.SendTunnelEncap != nil {
		return t.SendTunnelEncap
	}
	t.SendTunnelEncap = &NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap{}
	return t.SendTunnelEncap
}

// GetAutoBindTunnel returns the value of the AutoBindTunnel struct pointer
// from NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls. If the receiver or the field AutoBindTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetAutoBindTunnel() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel {
	if t != nil && t.AutoBindTunnel != nil {
		return t.AutoBindTunnel
	}
	return nil
}

// GetFdb returns the value of the Fdb struct pointer
// from NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetFdb() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetRouteNextHop returns the value of the RouteNextHop struct pointer
// from NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls. If the receiver or the field RouteNextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetRouteNextHop() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop {
	if t != nil && t.RouteNextHop != nil {
		return t.RouteNextHop
	}
	return nil
}

// GetSendTunnelEncap returns the value of the SendTunnelEncap struct pointer
// from NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls. If the receiver or the field SendTunnelEncap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetSendTunnelEncap() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap {
	if t != nil && t.SendTunnelEncap != nil {
		return t.SendTunnelEncap
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBgpInstance retrieves the value of the leaf BgpInstance from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpInstance is set, it can
// safely use t.GetBgpInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetBgpInstance() int32 {
	if t == nil || t.BgpInstance == nil {
		return 0
	}
	return *t.BgpInstance
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// GetDefaultRouteTag retrieves the value of the leaf DefaultRouteTag from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultRouteTag is set, it can
// safely use t.GetDefaultRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultRouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetDefaultRouteTag() string {
	if t == nil || t.DefaultRouteTag == nil {
		return ""
	}
	return *t.DefaultRouteTag
}

// GetDynamicEgressLabelLimit retrieves the value of the leaf DynamicEgressLabelLimit from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicEgressLabelLimit is set, it can
// safely use t.GetDynamicEgressLabelLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicEgressLabelLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetDynamicEgressLabelLimit() bool {
	if t == nil || t.DynamicEgressLabelLimit == nil {
		return false
	}
	return *t.DynamicEgressLabelLimit
}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetEcmp() int32 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetEntropyLabel() bool {
	if t == nil || t.EntropyLabel == nil {
		return false
	}
	return *t.EntropyLabel
}

// GetEviThreeByteAutoRt retrieves the value of the leaf EviThreeByteAutoRt from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EviThreeByteAutoRt is set, it can
// safely use t.GetEviThreeByteAutoRt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EviThreeByteAutoRt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetEviThreeByteAutoRt() bool {
	if t == nil || t.EviThreeByteAutoRt == nil {
		return false
	}
	return *t.EviThreeByteAutoRt
}

// GetForceVcForwarding retrieves the value of the leaf ForceVcForwarding from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceVcForwarding is set, it can
// safely use t.GetForceVcForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceVcForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetForceVcForwarding() E_NokiaTypesServices_BgpEvpnForceVcForwarding {
	if t == nil || t.ForceVcForwarding == 0 {
		return 0
	}
	return t.ForceVcForwarding
}

// GetIngressReplicationBumLabel retrieves the value of the leaf IngressReplicationBumLabel from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressReplicationBumLabel is set, it can
// safely use t.GetIngressReplicationBumLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressReplicationBumLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetIngressReplicationBumLabel() bool {
	if t == nil || t.IngressReplicationBumLabel == nil {
		return false
	}
	return *t.IngressReplicationBumLabel
}

// GetMhMode retrieves the value of the leaf MhMode from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MhMode is set, it can
// safely use t.GetMhMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MhMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetMhMode() E_NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_MhMode {
	if t == nil || t.MhMode == 0 {
		return NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_MhMode_network
	}
	return t.MhMode
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetSplitHorizonGroup retrieves the value of the leaf SplitHorizonGroup from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizonGroup is set, it can
// safely use t.GetSplitHorizonGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizonGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) GetSplitHorizonGroup() string {
	if t == nil || t.SplitHorizonGroup == nil {
		return ""
	}
	return *t.SplitHorizonGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	if t.DynamicEgressLabelLimit == nil {
		var v bool = false
		t.DynamicEgressLabelLimit = &v
	}
	if t.Ecmp == nil {
		var v int32 = 1
		t.Ecmp = &v
	}
	if t.EntropyLabel == nil {
		var v bool = false
		t.EntropyLabel = &v
	}
	if t.EviThreeByteAutoRt == nil {
		var v bool = false
		t.EviThreeByteAutoRt = &v
	}
	if t.IngressReplicationBumLabel == nil {
		var v bool = false
		t.IngressReplicationBumLabel = &v
	}
	if t.MhMode == 0 {
		t.MhMode = NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_MhMode_network
	}
	t.AutoBindTunnel.PopulateDefaults()
	t.Fdb.PopulateDefaults()
	t.RouteNextHop.PopulateDefaults()
	t.SendTunnelEncap.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BgpInstance == nil {
		return nil, fmt.Errorf("nil value for key BgpInstance")
	}

	return map[string]interface{}{
		"bgp-instance": *t.BgpInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel represents the /nokia-conf/configure/service/vpls/bgp-evpn/mpls/auto-bind-tunnel YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel struct {
	AllowFlexAlgoFallback      *bool                                                                          `path:"allow-flex-algo-fallback" module:"nokia-conf"`
	Ecmp                       *uint32                                                                        `path:"ecmp" module:"nokia-conf"`
	EnforceStrictTunnelTagging *bool                                                                          `path:"enforce-strict-tunnel-tagging" module:"nokia-conf"`
	Resolution                 E_NokiaTypesServices_ResolveStatus                                             `path:"resolution" module:"nokia-conf"`
	ResolutionFilter           *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter `path:"resolution-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) IsYANGGoStruct() {}

// GetOrCreateResolutionFilter retrieves the value of the ResolutionFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) GetOrCreateResolutionFilter() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter {
	if t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	t.ResolutionFilter = &NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter{}
	return t.ResolutionFilter
}

// GetResolutionFilter returns the value of the ResolutionFilter struct pointer
// from NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel. If the receiver or the field ResolutionFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) GetResolutionFilter() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter {
	if t != nil && t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	return nil
}

// GetAllowFlexAlgoFallback retrieves the value of the leaf AllowFlexAlgoFallback from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowFlexAlgoFallback is set, it can
// safely use t.GetAllowFlexAlgoFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowFlexAlgoFallback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) GetAllowFlexAlgoFallback() bool {
	if t == nil || t.AllowFlexAlgoFallback == nil {
		return false
	}
	return *t.AllowFlexAlgoFallback
}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) GetEcmp() uint32 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEnforceStrictTunnelTagging retrieves the value of the leaf EnforceStrictTunnelTagging from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceStrictTunnelTagging is set, it can
// safely use t.GetEnforceStrictTunnelTagging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceStrictTunnelTagging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) GetEnforceStrictTunnelTagging() bool {
	if t == nil || t.EnforceStrictTunnelTagging == nil {
		return false
	}
	return *t.EnforceStrictTunnelTagging
}

// GetResolution retrieves the value of the leaf Resolution from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resolution is set, it can
// safely use t.GetResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) GetResolution() E_NokiaTypesServices_ResolveStatus {
	if t == nil || t.Resolution == 0 {
		return NokiaTypesServices_ResolveStatus_none
	}
	return t.Resolution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowFlexAlgoFallback == nil {
		var v bool = false
		t.AllowFlexAlgoFallback = &v
	}
	if t.Ecmp == nil {
		var v uint32 = 1
		t.Ecmp = &v
	}
	if t.EnforceStrictTunnelTagging == nil {
		var v bool = false
		t.EnforceStrictTunnelTagging = &v
	}
	if t.Resolution == 0 {
		t.Resolution = NokiaTypesServices_ResolveStatus_none
	}
	t.ResolutionFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter represents the /nokia-conf/configure/service/vpls/bgp-evpn/mpls/auto-bind-tunnel/resolution-filter YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter struct {
	Bgp           *bool `path:"bgp" module:"nokia-conf"`
	Ldp           *bool `path:"ldp" module:"nokia-conf"`
	MplsFwdPolicy *bool `path:"mpls-fwd-policy" module:"nokia-conf"`
	RibApi        *bool `path:"rib-api" module:"nokia-conf"`
	Rsvp          *bool `path:"rsvp" module:"nokia-conf"`
	SrIsis        *bool `path:"sr-isis" module:"nokia-conf"`
	SrOspf        *bool `path:"sr-ospf" module:"nokia-conf"`
	SrOspf3       *bool `path:"sr-ospf3" module:"nokia-conf"`
	SrPolicy      *bool `path:"sr-policy" module:"nokia-conf"`
	SrTe          *bool `path:"sr-te" module:"nokia-conf"`
	Udp           *bool `path:"udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) IsYANGGoStruct() {
}

// GetBgp retrieves the value of the leaf Bgp from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bgp is set, it can
// safely use t.GetBgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetBgp() bool {
	if t == nil || t.Bgp == nil {
		return false
	}
	return *t.Bgp
}

// GetLdp retrieves the value of the leaf Ldp from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ldp is set, it can
// safely use t.GetLdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ldp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetLdp() bool {
	if t == nil || t.Ldp == nil {
		return false
	}
	return *t.Ldp
}

// GetMplsFwdPolicy retrieves the value of the leaf MplsFwdPolicy from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsFwdPolicy is set, it can
// safely use t.GetMplsFwdPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsFwdPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetMplsFwdPolicy() bool {
	if t == nil || t.MplsFwdPolicy == nil {
		return false
	}
	return *t.MplsFwdPolicy
}

// GetRibApi retrieves the value of the leaf RibApi from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibApi is set, it can
// safely use t.GetRibApi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibApi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetRibApi() bool {
	if t == nil || t.RibApi == nil {
		return false
	}
	return *t.RibApi
}

// GetRsvp retrieves the value of the leaf Rsvp from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rsvp is set, it can
// safely use t.GetRsvp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rsvp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetRsvp() bool {
	if t == nil || t.Rsvp == nil {
		return false
	}
	return *t.Rsvp
}

// GetSrIsis retrieves the value of the leaf SrIsis from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrIsis is set, it can
// safely use t.GetSrIsis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrIsis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrIsis() bool {
	if t == nil || t.SrIsis == nil {
		return false
	}
	return *t.SrIsis
}

// GetSrOspf retrieves the value of the leaf SrOspf from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf is set, it can
// safely use t.GetSrOspf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrOspf() bool {
	if t == nil || t.SrOspf == nil {
		return false
	}
	return *t.SrOspf
}

// GetSrOspf3 retrieves the value of the leaf SrOspf3 from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf3 is set, it can
// safely use t.GetSrOspf3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf3 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrOspf3() bool {
	if t == nil || t.SrOspf3 == nil {
		return false
	}
	return *t.SrOspf3
}

// GetSrPolicy retrieves the value of the leaf SrPolicy from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicy is set, it can
// safely use t.GetSrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrPolicy() bool {
	if t == nil || t.SrPolicy == nil {
		return false
	}
	return *t.SrPolicy
}

// GetSrTe retrieves the value of the leaf SrTe from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrTe is set, it can
// safely use t.GetSrTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrTe() bool {
	if t == nil || t.SrTe == nil {
		return false
	}
	return *t.SrTe
}

// GetUdp retrieves the value of the leaf Udp from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Udp is set, it can
// safely use t.GetUdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Udp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetUdp() bool {
	if t == nil || t.Udp == nil {
		return false
	}
	return *t.Udp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Bgp == nil {
		var v bool = false
		t.Bgp = &v
	}
	if t.Ldp == nil {
		var v bool = false
		t.Ldp = &v
	}
	if t.MplsFwdPolicy == nil {
		var v bool = false
		t.MplsFwdPolicy = &v
	}
	if t.RibApi == nil {
		var v bool = false
		t.RibApi = &v
	}
	if t.Rsvp == nil {
		var v bool = false
		t.Rsvp = &v
	}
	if t.SrIsis == nil {
		var v bool = false
		t.SrIsis = &v
	}
	if t.SrOspf == nil {
		var v bool = false
		t.SrOspf = &v
	}
	if t.SrOspf3 == nil {
		var v bool = false
		t.SrOspf3 = &v
	}
	if t.SrPolicy == nil {
		var v bool = false
		t.SrPolicy = &v
	}
	if t.SrTe == nil {
		var v bool = false
		t.SrTe = &v
	}
	if t.Udp == nil {
		var v bool = false
		t.Udp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_Fdb represents the /nokia-conf/configure/service/vpls/bgp-evpn/mpls/fdb YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_Fdb struct {
	ProtectedSrcMacViolationAction E_NokiaTypesServices_ProtectedSrcMacViolationDfAction `path:"protected-src-mac-violation-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_Fdb) IsYANGGoStruct() {}

// GetProtectedSrcMacViolationAction retrieves the value of the leaf ProtectedSrcMacViolationAction from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectedSrcMacViolationAction is set, it can
// safely use t.GetProtectedSrcMacViolationAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectedSrcMacViolationAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_Fdb) GetProtectedSrcMacViolationAction() E_NokiaTypesServices_ProtectedSrcMacViolationDfAction {
	if t == nil || t.ProtectedSrcMacViolationAction == 0 {
		return 0
	}
	return t.ProtectedSrcMacViolationAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_Fdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_Fdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_Fdb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_Fdb.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_Fdb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop represents the /nokia-conf/configure/service/vpls/bgp-evpn/mpls/route-next-hop YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop struct {
	IpAddress  *string   `path:"ip-address" module:"nokia-conf"`
	SystemIpv4 YANGEmpty `path:"system-ipv4" module:"nokia-conf"`
	SystemIpv6 YANGEmpty `path:"system-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetSystemIpv4 retrieves the value of the leaf SystemIpv4 from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemIpv4 is set, it can
// safely use t.GetSystemIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop) GetSystemIpv4() YANGEmpty {
	if t == nil || t.SystemIpv4 == false {
		return false
	}
	return t.SystemIpv4
}

// GetSystemIpv6 retrieves the value of the leaf SystemIpv6 from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemIpv6 is set, it can
// safely use t.GetSystemIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop) GetSystemIpv6() YANGEmpty {
	if t == nil || t.SystemIpv6 == false {
		return false
	}
	return t.SystemIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_RouteNextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap represents the /nokia-conf/configure/service/vpls/bgp-evpn/mpls/send-tunnel-encap YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap struct {
	Mpls        *bool `path:"mpls" module:"nokia-conf"`
	MplsOverUdp *bool `path:"mpls-over-udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap) IsYANGGoStruct() {}

// GetMpls retrieves the value of the leaf Mpls from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mpls is set, it can
// safely use t.GetMpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap) GetMpls() bool {
	if t == nil || t.Mpls == nil {
		return true
	}
	return *t.Mpls
}

// GetMplsOverUdp retrieves the value of the leaf MplsOverUdp from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsOverUdp is set, it can
// safely use t.GetMplsOverUdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsOverUdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap) GetMplsOverUdp() bool {
	if t == nil || t.MplsOverUdp == nil {
		return false
	}
	return *t.MplsOverUdp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mpls == nil {
		var v bool = true
		t.Mpls = &v
	}
	if t.MplsOverUdp == nil {
		var v bool = false
		t.MplsOverUdp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes represents the /nokia-conf/configure/service/vpls/bgp-evpn/routes YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes struct {
	InclMcast *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_InclMcast `path:"incl-mcast" module:"nokia-conf"`
	IpPrefix  *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix  `path:"ip-prefix" module:"nokia-conf"`
	MacIp     *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp     `path:"mac-ip" module:"nokia-conf"`
	SelMcast  *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_SelMcast  `path:"sel-mcast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes) IsYANGGoStruct() {}

// GetOrCreateInclMcast retrieves the value of the InclMcast field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes) GetOrCreateInclMcast() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_InclMcast {
	if t.InclMcast != nil {
		return t.InclMcast
	}
	t.InclMcast = &NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_InclMcast{}
	return t.InclMcast
}

// GetOrCreateIpPrefix retrieves the value of the IpPrefix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes) GetOrCreateIpPrefix() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix {
	if t.IpPrefix != nil {
		return t.IpPrefix
	}
	t.IpPrefix = &NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix{}
	return t.IpPrefix
}

// GetOrCreateMacIp retrieves the value of the MacIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes) GetOrCreateMacIp() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp {
	if t.MacIp != nil {
		return t.MacIp
	}
	t.MacIp = &NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp{}
	return t.MacIp
}

// GetOrCreateSelMcast retrieves the value of the SelMcast field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes) GetOrCreateSelMcast() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_SelMcast {
	if t.SelMcast != nil {
		return t.SelMcast
	}
	t.SelMcast = &NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_SelMcast{}
	return t.SelMcast
}

// GetInclMcast returns the value of the InclMcast struct pointer
// from NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes. If the receiver or the field InclMcast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes) GetInclMcast() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_InclMcast {
	if t != nil && t.InclMcast != nil {
		return t.InclMcast
	}
	return nil
}

// GetIpPrefix returns the value of the IpPrefix struct pointer
// from NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes. If the receiver or the field IpPrefix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes) GetIpPrefix() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix {
	if t != nil && t.IpPrefix != nil {
		return t.IpPrefix
	}
	return nil
}

// GetMacIp returns the value of the MacIp struct pointer
// from NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes. If the receiver or the field MacIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes) GetMacIp() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp {
	if t != nil && t.MacIp != nil {
		return t.MacIp
	}
	return nil
}

// GetSelMcast returns the value of the SelMcast struct pointer
// from NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes. If the receiver or the field SelMcast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes) GetSelMcast() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_SelMcast {
	if t != nil && t.SelMcast != nil {
		return t.SelMcast
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.InclMcast.PopulateDefaults()
	t.IpPrefix.PopulateDefaults()
	t.MacIp.PopulateDefaults()
	t.SelMcast.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_InclMcast represents the /nokia-conf/configure/service/vpls/bgp-evpn/routes/incl-mcast YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_InclMcast struct {
	AdvertiseIngressReplication *bool `path:"advertise-ingress-replication" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_InclMcast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_InclMcast) IsYANGGoStruct() {}

// GetAdvertiseIngressReplication retrieves the value of the leaf AdvertiseIngressReplication from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_InclMcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseIngressReplication is set, it can
// safely use t.GetAdvertiseIngressReplication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseIngressReplication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_InclMcast) GetAdvertiseIngressReplication() bool {
	if t == nil || t.AdvertiseIngressReplication == nil {
		return true
	}
	return *t.AdvertiseIngressReplication
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_InclMcast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_InclMcast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseIngressReplication == nil {
		var v bool = true
		t.AdvertiseIngressReplication = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_InclMcast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_InclMcast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_InclMcast) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_InclMcast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_InclMcast.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_InclMcast) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix represents the /nokia-conf/configure/service/vpls/bgp-evpn/routes/ip-prefix YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix struct {
	Advertise                  *bool   `path:"advertise" module:"nokia-conf"`
	DomainId                   *string `path:"domain-id" module:"nokia-conf"`
	IncludeDirectInterfaceHost *bool   `path:"include-direct-interface-host" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix) IsYANGGoStruct() {}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return false
	}
	return *t.Advertise
}

// GetDomainId retrieves the value of the leaf DomainId from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainId is set, it can
// safely use t.GetDomainId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix) GetDomainId() string {
	if t == nil || t.DomainId == nil {
		return ""
	}
	return *t.DomainId
}

// GetIncludeDirectInterfaceHost retrieves the value of the leaf IncludeDirectInterfaceHost from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeDirectInterfaceHost is set, it can
// safely use t.GetIncludeDirectInterfaceHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeDirectInterfaceHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix) GetIncludeDirectInterfaceHost() bool {
	if t == nil || t.IncludeDirectInterfaceHost == nil {
		return false
	}
	return *t.IncludeDirectInterfaceHost
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = false
		t.Advertise = &v
	}
	if t.IncludeDirectInterfaceHost == nil {
		var v bool = false
		t.IncludeDirectInterfaceHost = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_IpPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp represents the /nokia-conf/configure/service/vpls/bgp-evpn/routes/mac-ip YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp struct {
	Advertise  *bool `path:"advertise" module:"nokia-conf"`
	CfmMac     *bool `path:"cfm-mac" module:"nokia-conf"`
	UnknownMac *bool `path:"unknown-mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp) IsYANGGoStruct() {}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetCfmMac retrieves the value of the leaf CfmMac from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CfmMac is set, it can
// safely use t.GetCfmMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CfmMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp) GetCfmMac() bool {
	if t == nil || t.CfmMac == nil {
		return false
	}
	return *t.CfmMac
}

// GetUnknownMac retrieves the value of the leaf UnknownMac from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownMac is set, it can
// safely use t.GetUnknownMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp) GetUnknownMac() bool {
	if t == nil || t.UnknownMac == nil {
		return false
	}
	return *t.UnknownMac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
	if t.CfmMac == nil {
		var v bool = false
		t.CfmMac = &v
	}
	if t.UnknownMac == nil {
		var v bool = false
		t.UnknownMac = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_MacIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_SelMcast represents the /nokia-conf/configure/service/vpls/bgp-evpn/routes/sel-mcast YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_SelMcast struct {
	Advertise *bool `path:"advertise" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_SelMcast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_SelMcast) IsYANGGoStruct() {}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_SelMcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_SelMcast) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return false
	}
	return *t.Advertise
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_SelMcast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_SelMcast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = false
		t.Advertise = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_SelMcast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_SelMcast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_SelMcast) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_SelMcast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_SelMcast.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Routes_SelMcast) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan represents the /nokia-conf/configure/service/vpls/bgp-evpn/vxlan YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan struct {
	AdminState           E_NokiaTypesSros_AdminState                             `path:"admin-state" module:"nokia-conf"`
	ApplyGroups          []string                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	BgpInstance          *int32                                                  `path:"bgp-instance" module:"nokia-conf"`
	DefaultRouteTag      *string                                                 `path:"default-route-tag" module:"nokia-conf"`
	Ecmp                 *int32                                                  `path:"ecmp" module:"nokia-conf"`
	EviThreeByteAutoRt   *bool                                                   `path:"evi-three-byte-auto-rt" module:"nokia-conf"`
	MhMode               E_NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_MhMode `path:"mh-mode" module:"nokia-conf"`
	OperGroup            *string                                                 `path:"oper-group" module:"nokia-conf"`
	Routes               *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes  `path:"routes" module:"nokia-conf"`
	SendInclMcastIrOnNdf *bool                                                   `path:"send-incl-mcast-ir-on-ndf" module:"nokia-conf"`
	SendTunnelEncap      *bool                                                   `path:"send-tunnel-encap" module:"nokia-conf"`
	VxlanInstance        *uint32                                                 `path:"vxlan-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) IsYANGGoStruct() {}

// GetOrCreateRoutes retrieves the value of the Routes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) GetOrCreateRoutes() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes {
	if t.Routes != nil {
		return t.Routes
	}
	t.Routes = &NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes{}
	return t.Routes
}

// GetRoutes returns the value of the Routes struct pointer
// from NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan. If the receiver or the field Routes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) GetRoutes() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes {
	if t != nil && t.Routes != nil {
		return t.Routes
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBgpInstance retrieves the value of the leaf BgpInstance from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpInstance is set, it can
// safely use t.GetBgpInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) GetBgpInstance() int32 {
	if t == nil || t.BgpInstance == nil {
		return 0
	}
	return *t.BgpInstance
}

// GetDefaultRouteTag retrieves the value of the leaf DefaultRouteTag from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultRouteTag is set, it can
// safely use t.GetDefaultRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultRouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) GetDefaultRouteTag() string {
	if t == nil || t.DefaultRouteTag == nil {
		return ""
	}
	return *t.DefaultRouteTag
}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) GetEcmp() int32 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEviThreeByteAutoRt retrieves the value of the leaf EviThreeByteAutoRt from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EviThreeByteAutoRt is set, it can
// safely use t.GetEviThreeByteAutoRt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EviThreeByteAutoRt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) GetEviThreeByteAutoRt() bool {
	if t == nil || t.EviThreeByteAutoRt == nil {
		return false
	}
	return *t.EviThreeByteAutoRt
}

// GetMhMode retrieves the value of the leaf MhMode from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MhMode is set, it can
// safely use t.GetMhMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MhMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) GetMhMode() E_NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_MhMode {
	if t == nil || t.MhMode == 0 {
		return NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_MhMode_access
	}
	return t.MhMode
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetSendInclMcastIrOnNdf retrieves the value of the leaf SendInclMcastIrOnNdf from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendInclMcastIrOnNdf is set, it can
// safely use t.GetSendInclMcastIrOnNdf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendInclMcastIrOnNdf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) GetSendInclMcastIrOnNdf() bool {
	if t == nil || t.SendInclMcastIrOnNdf == nil {
		return true
	}
	return *t.SendInclMcastIrOnNdf
}

// GetSendTunnelEncap retrieves the value of the leaf SendTunnelEncap from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendTunnelEncap is set, it can
// safely use t.GetSendTunnelEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendTunnelEncap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) GetSendTunnelEncap() bool {
	if t == nil || t.SendTunnelEncap == nil {
		return true
	}
	return *t.SendTunnelEncap
}

// GetVxlanInstance retrieves the value of the leaf VxlanInstance from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VxlanInstance is set, it can
// safely use t.GetVxlanInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VxlanInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) GetVxlanInstance() uint32 {
	if t == nil || t.VxlanInstance == nil {
		return 0
	}
	return *t.VxlanInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ecmp == nil {
		var v int32 = 1
		t.Ecmp = &v
	}
	if t.EviThreeByteAutoRt == nil {
		var v bool = false
		t.EviThreeByteAutoRt = &v
	}
	if t.MhMode == 0 {
		t.MhMode = NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_MhMode_access
	}
	if t.SendInclMcastIrOnNdf == nil {
		var v bool = true
		t.SendInclMcastIrOnNdf = &v
	}
	if t.SendTunnelEncap == nil {
		var v bool = true
		t.SendTunnelEncap = &v
	}
	t.Routes.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BgpInstance == nil {
		return nil, fmt.Errorf("nil value for key BgpInstance")
	}

	return map[string]interface{}{
		"bgp-instance": *t.BgpInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes represents the /nokia-conf/configure/service/vpls/bgp-evpn/vxlan/routes YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes struct {
	AutoDisc *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc `path:"auto-disc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes) IsYANGGoStruct() {}

// GetOrCreateAutoDisc retrieves the value of the AutoDisc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes) GetOrCreateAutoDisc() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc {
	if t.AutoDisc != nil {
		return t.AutoDisc
	}
	t.AutoDisc = &NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc{}
	return t.AutoDisc
}

// GetAutoDisc returns the value of the AutoDisc struct pointer
// from NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes. If the receiver or the field AutoDisc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes) GetAutoDisc() *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc {
	if t != nil && t.AutoDisc != nil {
		return t.AutoDisc
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AutoDisc.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc represents the /nokia-conf/configure/service/vpls/bgp-evpn/vxlan/routes/auto-disc YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc struct {
	Advertise *bool `path:"advertise" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc) IsYANGGoStruct() {}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return false
	}
	return *t.Advertise
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = false
		t.Advertise = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc.
func (*NokiaConf_Configure_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpMhSite represents the /nokia-conf/configure/service/vpls/bgp-mh-site YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpMhSite struct {
	ActivationTimer    *int32                                                           `path:"activation-timer" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                      `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	BootTimer          *int32                                                           `path:"boot-timer" module:"nokia-conf"`
	FailedThreshold    NokiaConf_Configure_Service_Vpls_BgpMhSite_FailedThreshold_Union `path:"failed-threshold" module:"nokia-conf"`
	Id                 *int32                                                           `path:"id" module:"nokia-conf"`
	MeshSdpBinds       YANGEmpty                                                        `path:"mesh-sdp-binds" module:"nokia-conf"`
	MinDownTimer       *int32                                                           `path:"min-down-timer" module:"nokia-conf"`
	MonitorOperGroup   *string                                                          `path:"monitor-oper-group" module:"nokia-conf"`
	Sap                *string                                                          `path:"sap" module:"nokia-conf"`
	ShgName            *string                                                          `path:"shg-name" module:"nokia-conf"`
	SiteName           *string                                                          `path:"site-name" module:"nokia-conf"`
	SpokeSdp           *string                                                          `path:"spoke-sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpMhSite implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpMhSite) IsYANGGoStruct() {}

// GetActivationTimer retrieves the value of the leaf ActivationTimer from the NokiaConf_Configure_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivationTimer is set, it can
// safely use t.GetActivationTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivationTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpMhSite) GetActivationTimer() int32 {
	if t == nil || t.ActivationTimer == nil {
		return 0
	}
	return *t.ActivationTimer
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpMhSite) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpMhSite) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpMhSite) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBootTimer retrieves the value of the leaf BootTimer from the NokiaConf_Configure_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootTimer is set, it can
// safely use t.GetBootTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpMhSite) GetBootTimer() int32 {
	if t == nil || t.BootTimer == nil {
		return 0
	}
	return *t.BootTimer
}

// GetFailedThreshold retrieves the value of the leaf FailedThreshold from the NokiaConf_Configure_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailedThreshold is set, it can
// safely use t.GetFailedThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailedThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpMhSite) GetFailedThreshold() NokiaConf_Configure_Service_Vpls_BgpMhSite_FailedThreshold_Union {
	if t == nil || t.FailedThreshold == nil {
		return NokiaTypesServices_FailedThreshold_Enum_all
	}
	return t.FailedThreshold
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpMhSite) GetId() int32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetMeshSdpBinds retrieves the value of the leaf MeshSdpBinds from the NokiaConf_Configure_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MeshSdpBinds is set, it can
// safely use t.GetMeshSdpBinds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MeshSdpBinds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpMhSite) GetMeshSdpBinds() YANGEmpty {
	if t == nil || t.MeshSdpBinds == false {
		return false
	}
	return t.MeshSdpBinds
}

// GetMinDownTimer retrieves the value of the leaf MinDownTimer from the NokiaConf_Configure_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinDownTimer is set, it can
// safely use t.GetMinDownTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinDownTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpMhSite) GetMinDownTimer() int32 {
	if t == nil || t.MinDownTimer == nil {
		return 0
	}
	return *t.MinDownTimer
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpMhSite) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetSap retrieves the value of the leaf Sap from the NokiaConf_Configure_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sap is set, it can
// safely use t.GetSap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpMhSite) GetSap() string {
	if t == nil || t.Sap == nil {
		return ""
	}
	return *t.Sap
}

// GetShgName retrieves the value of the leaf ShgName from the NokiaConf_Configure_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShgName is set, it can
// safely use t.GetShgName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShgName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpMhSite) GetShgName() string {
	if t == nil || t.ShgName == nil {
		return ""
	}
	return *t.ShgName
}

// GetSiteName retrieves the value of the leaf SiteName from the NokiaConf_Configure_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SiteName is set, it can
// safely use t.GetSiteName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SiteName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpMhSite) GetSiteName() string {
	if t == nil || t.SiteName == nil {
		return ""
	}
	return *t.SiteName
}

// GetSpokeSdp retrieves the value of the leaf SpokeSdp from the NokiaConf_Configure_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpokeSdp is set, it can
// safely use t.GetSpokeSdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpokeSdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpMhSite) GetSpokeSdp() string {
	if t == nil || t.SpokeSdp == nil {
		return ""
	}
	return *t.SpokeSdp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpMhSite
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpMhSite) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.FailedThreshold == nil {
		t.FailedThreshold = NokiaTypesServices_FailedThreshold_Enum_all
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_BgpMhSite struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_BgpMhSite) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SiteName == nil {
		return nil, fmt.Errorf("nil value for key SiteName")
	}

	return map[string]interface{}{
		"site-name": *t.SiteName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpMhSite) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpMhSite"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpMhSite) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpMhSite) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpMhSite.
func (*NokiaConf_Configure_Service_Vpls_BgpMhSite) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpVpls represents the /nokia-conf/configure/service/vpls/bgp-vpls YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpVpls struct {
	AdminState         E_NokiaTypesSros_AdminState                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	MaximumVeId        *int32                                       `path:"maximum-ve-id" module:"nokia-conf"`
	Ve                 *NokiaConf_Configure_Service_Vpls_BgpVpls_Ve `path:"ve" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpVpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpVpls) IsYANGGoStruct() {}

// GetOrCreateVe retrieves the value of the Ve field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_BgpVpls) GetOrCreateVe() *NokiaConf_Configure_Service_Vpls_BgpVpls_Ve {
	if t.Ve != nil {
		return t.Ve
	}
	t.Ve = &NokiaConf_Configure_Service_Vpls_BgpVpls_Ve{}
	return t.Ve
}

// GetVe returns the value of the Ve struct pointer
// from NokiaConf_Configure_Service_Vpls_BgpVpls. If the receiver or the field Ve is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_BgpVpls) GetVe() *NokiaConf_Configure_Service_Vpls_BgpVpls_Ve {
	if t != nil && t.Ve != nil {
		return t.Ve
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_BgpVpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpVpls) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_BgpVpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpVpls) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_BgpVpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpVpls) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMaximumVeId retrieves the value of the leaf MaximumVeId from the NokiaConf_Configure_Service_Vpls_BgpVpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumVeId is set, it can
// safely use t.GetMaximumVeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumVeId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpVpls) GetMaximumVeId() int32 {
	if t == nil || t.MaximumVeId == nil {
		return 0
	}
	return *t.MaximumVeId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpVpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpVpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Ve.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpVpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpVpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpVpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpVpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpVpls.
func (*NokiaConf_Configure_Service_Vpls_BgpVpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_BgpVpls_Ve represents the /nokia-conf/configure/service/vpls/bgp-vpls/ve YANG schema element.
type NokiaConf_Configure_Service_Vpls_BgpVpls_Ve struct {
	Id   *int32  `path:"id" module:"nokia-conf"`
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_BgpVpls_Ve implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_BgpVpls_Ve) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Vpls_BgpVpls_Ve
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpVpls_Ve) GetId() int32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vpls_BgpVpls_Ve
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_BgpVpls_Ve) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_BgpVpls_Ve
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_BgpVpls_Ve) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpVpls_Ve) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_BgpVpls_Ve"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_BgpVpls_Ve) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_BgpVpls_Ve) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_BgpVpls_Ve.
func (*NokiaConf_Configure_Service_Vpls_BgpVpls_Ve) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding represents the /nokia-conf/configure/service/vpls/bgp/pw-template-binding YANG schema element.
type NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	BfdLiveness        *bool    `path:"bfd-liveness" module:"nokia-conf"`
	BfdTemplate        *string  `path:"bfd-template" module:"nokia-conf"`
	ImportRt           []string `path:"import-rt" module:"nokia-conf"`
	MonitorOperGroup   *string  `path:"monitor-oper-group" module:"nokia-conf"`
	OperGroup          *string  `path:"oper-group" module:"nokia-conf"`
	PwTemplateName     *string  `path:"pw-template-name" module:"nokia-conf"`
	SplitHorizonGroup  *string  `path:"split-horizon-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetImportRt retrieves the value of the leaf ImportRt from the NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportRt is set, it can
// safely use t.GetImportRt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportRt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding) GetImportRt() []string {
	if t == nil || t.ImportRt == nil {
		return nil
	}
	return t.ImportRt
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetPwTemplateName retrieves the value of the leaf PwTemplateName from the NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PwTemplateName is set, it can
// safely use t.GetPwTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PwTemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding) GetPwTemplateName() string {
	if t == nil || t.PwTemplateName == nil {
		return ""
	}
	return *t.PwTemplateName
}

// GetSplitHorizonGroup retrieves the value of the leaf SplitHorizonGroup from the NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizonGroup is set, it can
// safely use t.GetSplitHorizonGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizonGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding) GetSplitHorizonGroup() string {
	if t == nil || t.SplitHorizonGroup == nil {
		return ""
	}
	return *t.SplitHorizonGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PwTemplateName == nil {
		return nil, fmt.Errorf("nil value for key PwTemplateName")
	}

	return map[string]interface{}{
		"pw-template-name": *t.PwTemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding.
func (*NokiaConf_Configure_Service_Vpls_Bgp_PwTemplateBinding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Bgp_RouteTarget represents the /nokia-conf/configure/service/vpls/bgp/route-target YANG schema element.
type NokiaConf_Configure_Service_Vpls_Bgp_RouteTarget struct {
	Export *string `path:"export" module:"nokia-conf"`
	Import *string `path:"import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Bgp_RouteTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Bgp_RouteTarget) IsYANGGoStruct() {}

// GetExport retrieves the value of the leaf Export from the NokiaConf_Configure_Service_Vpls_Bgp_RouteTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Export is set, it can
// safely use t.GetExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Export == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Bgp_RouteTarget) GetExport() string {
	if t == nil || t.Export == nil {
		return ""
	}
	return *t.Export
}

// GetImport retrieves the value of the leaf Import from the NokiaConf_Configure_Service_Vpls_Bgp_RouteTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Import is set, it can
// safely use t.GetImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Import == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Bgp_RouteTarget) GetImport() string {
	if t == nil || t.Import == nil {
		return ""
	}
	return *t.Import
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Bgp_RouteTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Bgp_RouteTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Bgp_RouteTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Bgp_RouteTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Bgp_RouteTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Bgp_RouteTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Bgp_RouteTarget.
func (*NokiaConf_Configure_Service_Vpls_Bgp_RouteTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_CaptureSap represents the /nokia-conf/configure/service/vpls/capture-sap YANG schema element.
type NokiaConf_Configure_Service_Vpls_CaptureSap struct {
	AdminState         E_NokiaTypesSros_AdminState                                `path:"admin-state" module:"nokia-conf"`
	AllowDot1QMsaps    *bool                                                      `path:"allow-dot1q-msaps" module:"nokia-conf"`
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Bandwidth          *uint64                                                    `path:"bandwidth" module:"nokia-conf"`
	CpuProtection      *NokiaConf_Configure_Service_Vpls_CaptureSap_CpuProtection `path:"cpu-protection" module:"nokia-conf"`
	Description        *string                                                    `path:"description" module:"nokia-conf"`
	Dhcp               *NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp          `path:"dhcp" module:"nokia-conf"`
	Dhcp6              *NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp6         `path:"dhcp6" module:"nokia-conf"`
	DistCpuProtection  *string                                                    `path:"dist-cpu-protection" module:"nokia-conf"`
	HostLockoutPolicy  *string                                                    `path:"host-lockout-policy" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress       `path:"ingress" module:"nokia-conf"`
	IpoeSession        *NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession   `path:"ipoe-session" module:"nokia-conf"`
	MsapDefaults       *NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults  `path:"msap-defaults" module:"nokia-conf"`
	NasreqAuthPolicy   *string                                                    `path:"nasreq-auth-policy" module:"nokia-conf"`
	Pfcp               *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp          `path:"pfcp" module:"nokia-conf"`
	Pppoe              *NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe         `path:"pppoe" module:"nokia-conf"`
	RadiusAuthPolicy   *string                                                    `path:"radius-auth-policy" module:"nokia-conf"`
	RouterSolicit      *NokiaConf_Configure_Service_Vpls_CaptureSap_RouterSolicit `path:"router-solicit" module:"nokia-conf"`
	SapId              *string                                                    `path:"sap-id" module:"nokia-conf"`
	TrackSrrp          *uint32                                                    `path:"track-srrp" module:"nokia-conf"`
	TriggerPacket      *NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket `path:"trigger-packet" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_CaptureSap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap) IsYANGGoStruct() {}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetOrCreateCpuProtection() *NokiaConf_Configure_Service_Vpls_CaptureSap_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Service_Vpls_CaptureSap_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetOrCreateDhcp() *NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp{}
	return t.Dhcp
}

// GetOrCreateDhcp6 retrieves the value of the Dhcp6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetOrCreateDhcp6() *NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp6 {
	if t.Dhcp6 != nil {
		return t.Dhcp6
	}
	t.Dhcp6 = &NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp6{}
	return t.Dhcp6
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetOrCreateIngress() *NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress{}
	return t.Ingress
}

// GetOrCreateIpoeSession retrieves the value of the IpoeSession field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetOrCreateIpoeSession() *NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession {
	if t.IpoeSession != nil {
		return t.IpoeSession
	}
	t.IpoeSession = &NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession{}
	return t.IpoeSession
}

// GetOrCreateMsapDefaults retrieves the value of the MsapDefaults field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetOrCreateMsapDefaults() *NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults {
	if t.MsapDefaults != nil {
		return t.MsapDefaults
	}
	t.MsapDefaults = &NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults{}
	return t.MsapDefaults
}

// GetOrCreatePfcp retrieves the value of the Pfcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetOrCreatePfcp() *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp {
	if t.Pfcp != nil {
		return t.Pfcp
	}
	t.Pfcp = &NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp{}
	return t.Pfcp
}

// GetOrCreatePppoe retrieves the value of the Pppoe field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetOrCreatePppoe() *NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe {
	if t.Pppoe != nil {
		return t.Pppoe
	}
	t.Pppoe = &NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe{}
	return t.Pppoe
}

// GetOrCreateRouterSolicit retrieves the value of the RouterSolicit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetOrCreateRouterSolicit() *NokiaConf_Configure_Service_Vpls_CaptureSap_RouterSolicit {
	if t.RouterSolicit != nil {
		return t.RouterSolicit
	}
	t.RouterSolicit = &NokiaConf_Configure_Service_Vpls_CaptureSap_RouterSolicit{}
	return t.RouterSolicit
}

// GetOrCreateTriggerPacket retrieves the value of the TriggerPacket field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetOrCreateTriggerPacket() *NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket {
	if t.TriggerPacket != nil {
		return t.TriggerPacket
	}
	t.TriggerPacket = &NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket{}
	return t.TriggerPacket
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Service_Vpls_CaptureSap. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetCpuProtection() *NokiaConf_Configure_Service_Vpls_CaptureSap_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetDhcp returns the value of the Dhcp struct pointer
// from NokiaConf_Configure_Service_Vpls_CaptureSap. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetDhcp() *NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetDhcp6 returns the value of the Dhcp6 struct pointer
// from NokiaConf_Configure_Service_Vpls_CaptureSap. If the receiver or the field Dhcp6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetDhcp6() *NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp6 {
	if t != nil && t.Dhcp6 != nil {
		return t.Dhcp6
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Vpls_CaptureSap. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetIngress() *NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetIpoeSession returns the value of the IpoeSession struct pointer
// from NokiaConf_Configure_Service_Vpls_CaptureSap. If the receiver or the field IpoeSession is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetIpoeSession() *NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession {
	if t != nil && t.IpoeSession != nil {
		return t.IpoeSession
	}
	return nil
}

// GetMsapDefaults returns the value of the MsapDefaults struct pointer
// from NokiaConf_Configure_Service_Vpls_CaptureSap. If the receiver or the field MsapDefaults is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetMsapDefaults() *NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults {
	if t != nil && t.MsapDefaults != nil {
		return t.MsapDefaults
	}
	return nil
}

// GetPfcp returns the value of the Pfcp struct pointer
// from NokiaConf_Configure_Service_Vpls_CaptureSap. If the receiver or the field Pfcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetPfcp() *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp {
	if t != nil && t.Pfcp != nil {
		return t.Pfcp
	}
	return nil
}

// GetPppoe returns the value of the Pppoe struct pointer
// from NokiaConf_Configure_Service_Vpls_CaptureSap. If the receiver or the field Pppoe is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetPppoe() *NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe {
	if t != nil && t.Pppoe != nil {
		return t.Pppoe
	}
	return nil
}

// GetRouterSolicit returns the value of the RouterSolicit struct pointer
// from NokiaConf_Configure_Service_Vpls_CaptureSap. If the receiver or the field RouterSolicit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetRouterSolicit() *NokiaConf_Configure_Service_Vpls_CaptureSap_RouterSolicit {
	if t != nil && t.RouterSolicit != nil {
		return t.RouterSolicit
	}
	return nil
}

// GetTriggerPacket returns the value of the TriggerPacket struct pointer
// from NokiaConf_Configure_Service_Vpls_CaptureSap. If the receiver or the field TriggerPacket is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetTriggerPacket() *NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket {
	if t != nil && t.TriggerPacket != nil {
		return t.TriggerPacket
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAllowDot1QMsaps retrieves the value of the leaf AllowDot1QMsaps from the NokiaConf_Configure_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowDot1QMsaps is set, it can
// safely use t.GetAllowDot1QMsaps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowDot1QMsaps == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetAllowDot1QMsaps() bool {
	if t == nil || t.AllowDot1QMsaps == nil {
		return false
	}
	return *t.AllowDot1QMsaps
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetBandwidth() uint64 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDistCpuProtection retrieves the value of the leaf DistCpuProtection from the NokiaConf_Configure_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DistCpuProtection is set, it can
// safely use t.GetDistCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DistCpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetDistCpuProtection() string {
	if t == nil || t.DistCpuProtection == nil {
		return ""
	}
	return *t.DistCpuProtection
}

// GetHostLockoutPolicy retrieves the value of the leaf HostLockoutPolicy from the NokiaConf_Configure_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostLockoutPolicy is set, it can
// safely use t.GetHostLockoutPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostLockoutPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetHostLockoutPolicy() string {
	if t == nil || t.HostLockoutPolicy == nil {
		return ""
	}
	return *t.HostLockoutPolicy
}

// GetNasreqAuthPolicy retrieves the value of the leaf NasreqAuthPolicy from the NokiaConf_Configure_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasreqAuthPolicy is set, it can
// safely use t.GetNasreqAuthPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasreqAuthPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetNasreqAuthPolicy() string {
	if t == nil || t.NasreqAuthPolicy == nil {
		return ""
	}
	return *t.NasreqAuthPolicy
}

// GetRadiusAuthPolicy retrieves the value of the leaf RadiusAuthPolicy from the NokiaConf_Configure_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAuthPolicy is set, it can
// safely use t.GetRadiusAuthPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAuthPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetRadiusAuthPolicy() string {
	if t == nil || t.RadiusAuthPolicy == nil {
		return ""
	}
	return *t.RadiusAuthPolicy
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// GetTrackSrrp retrieves the value of the leaf TrackSrrp from the NokiaConf_Configure_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackSrrp is set, it can
// safely use t.GetTrackSrrp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackSrrp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) GetTrackSrrp() uint32 {
	if t == nil || t.TrackSrrp == nil {
		return 0
	}
	return *t.TrackSrrp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_CaptureSap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AllowDot1QMsaps == nil {
		var v bool = false
		t.AllowDot1QMsaps = &v
	}
	t.CpuProtection.PopulateDefaults()
	t.Dhcp.PopulateDefaults()
	t.Dhcp6.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.IpoeSession.PopulateDefaults()
	t.MsapDefaults.PopulateDefaults()
	t.Pfcp.PopulateDefaults()
	t.Pppoe.PopulateDefaults()
	t.RouterSolicit.PopulateDefaults()
	t.TriggerPacket.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_CaptureSap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_CaptureSap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_CaptureSap.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_CaptureSap_CpuProtection represents the /nokia-conf/configure/service/vpls/capture-sap/cpu-protection YANG schema element.
type NokiaConf_Configure_Service_Vpls_CaptureSap_CpuProtection struct {
	MacMonitoring YANGEmpty `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId      *uint32   `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_CaptureSap_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_CpuProtection) IsYANGGoStruct() {}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Service_Vpls_CaptureSap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Service_Vpls_CaptureSap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_CaptureSap_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_CaptureSap_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_CaptureSap_CpuProtection.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp represents the /nokia-conf/configure/service/vpls/capture-sap/dhcp YANG schema element.
type NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp struct {
	PythonPolicy *string `path:"python-policy" module:"nokia-conf"`
	UserDb       *string `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp) IsYANGGoStruct() {}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp6 represents the /nokia-conf/configure/service/vpls/capture-sap/dhcp6 YANG schema element.
type NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp6 struct {
	PythonPolicy *string `path:"python-policy" module:"nokia-conf"`
	UserDb       *string `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp6) IsYANGGoStruct() {}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp6) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp6) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp6.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_Dhcp6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress represents the /nokia-conf/configure/service/vpls/capture-sap/ingress YANG schema element.
type NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress struct {
	Filter       *NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress_Filter `path:"filter" module:"nokia-conf"`
	IpFilterPair *bool                                                       `path:"ip-filter-pair" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress_Filter{}
	return t.Filter
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress) GetFilter() *NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetIpFilterPair retrieves the value of the leaf IpFilterPair from the NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilterPair is set, it can
// safely use t.GetIpFilterPair() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilterPair == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress) GetIpFilterPair() bool {
	if t == nil || t.IpFilterPair == nil {
		return false
	}
	return *t.IpFilterPair
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IpFilterPair == nil {
		var v bool = false
		t.IpFilterPair = &v
	}
	t.Filter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress_Filter represents the /nokia-conf/configure/service/vpls/capture-sap/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress_Filter struct {
	Mac *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress_Filter) IsYANGGoStruct() {}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress_Filter.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession represents the /nokia-conf/configure/service/vpls/capture-sap/ipoe-session YANG schema element.
type NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                     `path:"description" module:"nokia-conf"`
	IpoeSessionPolicy  *string                     `path:"ipoe-session-policy" module:"nokia-conf"`
	UserDb             *string                     `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpoeSessionPolicy retrieves the value of the leaf IpoeSessionPolicy from the NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpoeSessionPolicy is set, it can
// safely use t.GetIpoeSessionPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpoeSessionPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession) GetIpoeSessionPolicy() string {
	if t == nil || t.IpoeSessionPolicy == nil {
		return ""
	}
	return *t.IpoeSessionPolicy
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_IpoeSession) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults represents the /nokia-conf/configure/service/vpls/capture-sap/msap-defaults YANG schema element.
type NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults struct {
	GroupInterface *string `path:"group-interface" module:"nokia-conf"`
	Policy         *string `path:"policy" module:"nokia-conf"`
	ServiceName    *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults) IsYANGGoStruct() {}

// GetGroupInterface retrieves the value of the leaf GroupInterface from the NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterface is set, it can
// safely use t.GetGroupInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults) GetGroupInterface() string {
	if t == nil || t.GroupInterface == nil {
		return ""
	}
	return *t.GroupInterface
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_MsapDefaults) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp represents the /nokia-conf/configure/service/vpls/capture-sap/pfcp YANG schema element.
type NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp struct {
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Association        *string                                                        `path:"association" module:"nokia-conf"`
	L2AccessIdAlias    *string                                                        `path:"l2-access-id-alias" module:"nokia-conf"`
	UpResiliency       *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency `path:"up-resiliency" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp) IsYANGGoStruct() {}

// GetOrCreateUpResiliency retrieves the value of the UpResiliency field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp) GetOrCreateUpResiliency() *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency {
	if t.UpResiliency != nil {
		return t.UpResiliency
	}
	t.UpResiliency = &NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency{}
	return t.UpResiliency
}

// GetUpResiliency returns the value of the UpResiliency struct pointer
// from NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp. If the receiver or the field UpResiliency is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp) GetUpResiliency() *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency {
	if t != nil && t.UpResiliency != nil {
		return t.UpResiliency
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAssociation retrieves the value of the leaf Association from the NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Association is set, it can
// safely use t.GetAssociation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Association == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp) GetAssociation() string {
	if t == nil || t.Association == nil {
		return ""
	}
	return *t.Association
}

// GetL2AccessIdAlias retrieves the value of the leaf L2AccessIdAlias from the NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2AccessIdAlias is set, it can
// safely use t.GetL2AccessIdAlias() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2AccessIdAlias == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp) GetL2AccessIdAlias() string {
	if t == nil || t.L2AccessIdAlias == nil {
		return ""
	}
	return *t.L2AccessIdAlias
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.UpResiliency.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency represents the /nokia-conf/configure/service/vpls/capture-sap/pfcp/up-resiliency YANG schema element.
type NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency struct {
	MonitorOperGroup map[string]*NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup `path:"monitor-oper-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency) IsYANGGoStruct() {}

// NewMonitorOperGroup creates a new entry in the MonitorOperGroup list of the
// NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency) NewMonitorOperGroup(OperGroup string) (*NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MonitorOperGroup == nil {
		t.MonitorOperGroup = make(map[string]*NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup)
	}

	key := OperGroup

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MonitorOperGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MonitorOperGroup", key)
	}

	t.MonitorOperGroup[key] = &NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup{
		OperGroup: &OperGroup,
	}

	return t.MonitorOperGroup[key], nil
}

// RenameMonitorOperGroup renames an entry in the list MonitorOperGroup within
// the NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency) RenameMonitorOperGroup(oldK, newK string) error {
	if _, ok := t.MonitorOperGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in MonitorOperGroup", newK)
	}

	e, ok := t.MonitorOperGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MonitorOperGroup", oldK)
	}
	e.OperGroup = &newK

	t.MonitorOperGroup[newK] = e
	delete(t.MonitorOperGroup, oldK)
	return nil
}

// GetOrCreateMonitorOperGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency) GetOrCreateMonitorOperGroup(OperGroup string) *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup {

	key := OperGroup

	if v, ok := t.MonitorOperGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMonitorOperGroup(OperGroup)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMonitorOperGroup got unexpected error: %v", err))
	}
	return v
}

// GetMonitorOperGroup retrieves the value with the specified key from
// the MonitorOperGroup map field of NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency) GetMonitorOperGroup(OperGroup string) *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup {

	if t == nil {
		return nil
	}

	key := OperGroup

	if lm, ok := t.MonitorOperGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteMonitorOperGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency) DeleteMonitorOperGroup(OperGroup string) {
	key := OperGroup

	delete(t.MonitorOperGroup, key)
}

// AppendMonitorOperGroup appends the supplied NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup struct to the
// list MonitorOperGroup of NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency) AppendMonitorOperGroup(v *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) error {
	if v.OperGroup == nil {
		return fmt.Errorf("invalid nil key received for OperGroup")
	}

	key := *v.OperGroup

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MonitorOperGroup == nil {
		t.MonitorOperGroup = make(map[string]*NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup)
	}

	if _, ok := t.MonitorOperGroup[key]; ok {
		return fmt.Errorf("duplicate key for list MonitorOperGroup %v", key)
	}

	t.MonitorOperGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MonitorOperGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup represents the /nokia-conf/configure/service/vpls/capture-sap/pfcp/up-resiliency/monitor-oper-group YANG schema element.
type NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	HealthDrop         *uint32  `path:"health-drop" module:"nokia-conf"`
	OperGroup          *string  `path:"oper-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHealthDrop retrieves the value of the leaf HealthDrop from the NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HealthDrop is set, it can
// safely use t.GetHealthDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HealthDrop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) GetHealthDrop() uint32 {
	if t == nil || t.HealthDrop == nil {
		return 1
	}
	return *t.HealthDrop
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HealthDrop == nil {
		var v uint32 = 1
		t.HealthDrop = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.OperGroup == nil {
		return nil, fmt.Errorf("nil value for key OperGroup")
	}

	return map[string]interface{}{
		"oper-group": *t.OperGroup,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe represents the /nokia-conf/configure/service/vpls/capture-sap/pppoe YANG schema element.
type NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe struct {
	Policy       *string `path:"policy" module:"nokia-conf"`
	PythonPolicy *string `path:"python-policy" module:"nokia-conf"`
	UserDb       *string `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_Pppoe) ΛBelongingModule() string {
	return "nokia-conf"
}
