/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_FdAvg represents the /nokia-conf/configure/groups/group/oam-pm/streaming/delay-template/fd-avg YANG schema element.
type NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_FdAvg struct {
	Direction NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_FdAvg_Direction_Union `path:"direction" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_FdAvg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_FdAvg) IsYANGGoStruct() {}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_FdAvg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_FdAvg) GetDirection() NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_FdAvg_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_FdAvg
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_FdAvg) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_FdAvg struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_FdAvg) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_FdAvg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_FdAvg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_FdAvg) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_FdAvg) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_FdAvg.
func (*NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_FdAvg) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_IfdvAvg represents the /nokia-conf/configure/groups/group/oam-pm/streaming/delay-template/ifdv-avg YANG schema element.
type NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_IfdvAvg struct {
	Direction NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_IfdvAvg_Direction_Union `path:"direction" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_IfdvAvg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_IfdvAvg) IsYANGGoStruct() {}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_IfdvAvg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_IfdvAvg) GetDirection() NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_IfdvAvg_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_IfdvAvg
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_IfdvAvg) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_IfdvAvg struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_IfdvAvg) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_IfdvAvg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_IfdvAvg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_IfdvAvg) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_IfdvAvg) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_IfdvAvg.
func (*NokiaConf_Configure_Groups_Group_OamPm_Streaming_DelayTemplate_IfdvAvg) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Openflow represents the /nokia-conf/configure/groups/group/openflow YANG schema element.
type NokiaConf_Configure_Groups_Group_Openflow struct {
	OfController map[NokiaConf_Configure_Groups_Group_Openflow_OfController_ControllerId_Union]*NokiaConf_Configure_Groups_Group_Openflow_OfController `path:"of-controller" module:"nokia-conf"`
	OfSwitch     map[string]*NokiaConf_Configure_Groups_Group_Openflow_OfSwitch                                                                        `path:"of-switch" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Openflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Openflow) IsYANGGoStruct() {}

// NewOfController creates a new entry in the OfController list of the
// NokiaConf_Configure_Groups_Group_Openflow struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Openflow) NewOfController(ControllerId NokiaConf_Configure_Groups_Group_Openflow_OfController_ControllerId_Union) (*NokiaConf_Configure_Groups_Group_Openflow_OfController, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OfController == nil {
		t.OfController = make(map[NokiaConf_Configure_Groups_Group_Openflow_OfController_ControllerId_Union]*NokiaConf_Configure_Groups_Group_Openflow_OfController)
	}

	key := ControllerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.OfController[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list OfController", key)
	}

	t.OfController[key] = &NokiaConf_Configure_Groups_Group_Openflow_OfController{
		ControllerId: ControllerId,
	}

	return t.OfController[key], nil
}

// RenameOfController renames an entry in the list OfController within
// the NokiaConf_Configure_Groups_Group_Openflow struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Openflow) RenameOfController(oldK, newK NokiaConf_Configure_Groups_Group_Openflow_OfController_ControllerId_Union) error {
	if _, ok := t.OfController[newK]; ok {
		return fmt.Errorf("key %v already exists in OfController", newK)
	}

	e, ok := t.OfController[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in OfController", oldK)
	}
	e.ControllerId = newK

	t.OfController[newK] = e
	delete(t.OfController, oldK)
	return nil
}

// GetOrCreateOfController retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Openflow. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Openflow) GetOrCreateOfController(ControllerId NokiaConf_Configure_Groups_Group_Openflow_OfController_ControllerId_Union) *NokiaConf_Configure_Groups_Group_Openflow_OfController {

	key := ControllerId

	if v, ok := t.OfController[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOfController(ControllerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOfController got unexpected error: %v", err))
	}
	return v
}

// GetOfController retrieves the value with the specified key from
// the OfController map field of NokiaConf_Configure_Groups_Group_Openflow. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Openflow) GetOfController(ControllerId NokiaConf_Configure_Groups_Group_Openflow_OfController_ControllerId_Union) *NokiaConf_Configure_Groups_Group_Openflow_OfController {

	if t == nil {
		return nil
	}

	key := ControllerId

	if lm, ok := t.OfController[key]; ok {
		return lm
	}
	return nil
}

// DeleteOfController deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Openflow. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Openflow) DeleteOfController(ControllerId NokiaConf_Configure_Groups_Group_Openflow_OfController_ControllerId_Union) {
	key := ControllerId

	delete(t.OfController, key)
}

// AppendOfController appends the supplied NokiaConf_Configure_Groups_Group_Openflow_OfController struct to the
// list OfController of NokiaConf_Configure_Groups_Group_Openflow. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Openflow_OfController already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Openflow) AppendOfController(v *NokiaConf_Configure_Groups_Group_Openflow_OfController) error {
	key := v.ControllerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OfController == nil {
		t.OfController = make(map[NokiaConf_Configure_Groups_Group_Openflow_OfController_ControllerId_Union]*NokiaConf_Configure_Groups_Group_Openflow_OfController)
	}

	if _, ok := t.OfController[key]; ok {
		return fmt.Errorf("duplicate key for list OfController %v", key)
	}

	t.OfController[key] = v
	return nil
}

// NewOfSwitch creates a new entry in the OfSwitch list of the
// NokiaConf_Configure_Groups_Group_Openflow struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Openflow) NewOfSwitch(Name string) (*NokiaConf_Configure_Groups_Group_Openflow_OfSwitch, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OfSwitch == nil {
		t.OfSwitch = make(map[string]*NokiaConf_Configure_Groups_Group_Openflow_OfSwitch)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.OfSwitch[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list OfSwitch", key)
	}

	t.OfSwitch[key] = &NokiaConf_Configure_Groups_Group_Openflow_OfSwitch{
		Name: &Name,
	}

	return t.OfSwitch[key], nil
}

// RenameOfSwitch renames an entry in the list OfSwitch within
// the NokiaConf_Configure_Groups_Group_Openflow struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Openflow) RenameOfSwitch(oldK, newK string) error {
	if _, ok := t.OfSwitch[newK]; ok {
		return fmt.Errorf("key %v already exists in OfSwitch", newK)
	}

	e, ok := t.OfSwitch[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in OfSwitch", oldK)
	}
	e.Name = &newK

	t.OfSwitch[newK] = e
	delete(t.OfSwitch, oldK)
	return nil
}

// GetOrCreateOfSwitch retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Openflow. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Openflow) GetOrCreateOfSwitch(Name string) *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch {

	key := Name

	if v, ok := t.OfSwitch[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOfSwitch(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOfSwitch got unexpected error: %v", err))
	}
	return v
}

// GetOfSwitch retrieves the value with the specified key from
// the OfSwitch map field of NokiaConf_Configure_Groups_Group_Openflow. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Openflow) GetOfSwitch(Name string) *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.OfSwitch[key]; ok {
		return lm
	}
	return nil
}

// DeleteOfSwitch deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Openflow. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Openflow) DeleteOfSwitch(Name string) {
	key := Name

	delete(t.OfSwitch, key)
}

// AppendOfSwitch appends the supplied NokiaConf_Configure_Groups_Group_Openflow_OfSwitch struct to the
// list OfSwitch of NokiaConf_Configure_Groups_Group_Openflow. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Openflow_OfSwitch already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Openflow) AppendOfSwitch(v *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OfSwitch == nil {
		t.OfSwitch = make(map[string]*NokiaConf_Configure_Groups_Group_Openflow_OfSwitch)
	}

	if _, ok := t.OfSwitch[key]; ok {
		return fmt.Errorf("duplicate key for list OfSwitch %v", key)
	}

	t.OfSwitch[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Openflow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Openflow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.OfController {
		e.PopulateDefaults()
	}
	for _, e := range t.OfSwitch {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Openflow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Openflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Openflow) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Openflow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Openflow.
func (*NokiaConf_Configure_Groups_Group_Openflow) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Openflow_OfController represents the /nokia-conf/configure/groups/group/openflow/of-controller YANG schema element.
type NokiaConf_Configure_Groups_Group_Openflow_OfController struct {
	Address          *string                                                                   `path:"address" module:"nokia-conf"`
	AdminState       E_NokiaTypesSros_AdminState                                               `path:"admin-state" module:"nokia-conf"`
	ControllerId     NokiaConf_Configure_Groups_Group_Openflow_OfController_ControllerId_Union `path:"controller-id" module:"nokia-conf"`
	Description      *string                                                                   `path:"description" module:"nokia-conf"`
	EchoInterval     *uint32                                                                   `path:"echo-interval" module:"nokia-conf"`
	EchoMultiple     *uint32                                                                   `path:"echo-multiple" module:"nokia-conf"`
	Ipv6Address      *string                                                                   `path:"ipv6-address" module:"nokia-conf"`
	Role             E_NokiaConf_Configure_Groups_Group_Openflow_OfController_Role             `path:"role" module:"nokia-conf"`
	TlsServerProfile *string                                                                   `path:"tls-server-profile" module:"nokia-conf"`
	Version          E_NokiaConf_Configure_Groups_Group_Openflow_OfController_Version          `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Openflow_OfController implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Openflow_OfController) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfController) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfController) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetControllerId retrieves the value of the leaf ControllerId from the NokiaConf_Configure_Groups_Group_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControllerId is set, it can
// safely use t.GetControllerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControllerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfController) GetControllerId() NokiaConf_Configure_Groups_Group_Openflow_OfController_ControllerId_Union {
	if t == nil || t.ControllerId == nil {
		return nil
	}
	return t.ControllerId
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfController) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEchoInterval retrieves the value of the leaf EchoInterval from the NokiaConf_Configure_Groups_Group_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoInterval is set, it can
// safely use t.GetEchoInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfController) GetEchoInterval() uint32 {
	if t == nil || t.EchoInterval == nil {
		return 10
	}
	return *t.EchoInterval
}

// GetEchoMultiple retrieves the value of the leaf EchoMultiple from the NokiaConf_Configure_Groups_Group_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoMultiple is set, it can
// safely use t.GetEchoMultiple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoMultiple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfController) GetEchoMultiple() uint32 {
	if t == nil || t.EchoMultiple == nil {
		return 3
	}
	return *t.EchoMultiple
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfController) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetRole retrieves the value of the leaf Role from the NokiaConf_Configure_Groups_Group_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Role is set, it can
// safely use t.GetRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Role == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfController) GetRole() E_NokiaConf_Configure_Groups_Group_Openflow_OfController_Role {
	if t == nil || t.Role == 0 {
		return NokiaConf_Configure_Groups_Group_Openflow_OfController_Role_equal
	}
	return t.Role
}

// GetTlsServerProfile retrieves the value of the leaf TlsServerProfile from the NokiaConf_Configure_Groups_Group_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsServerProfile is set, it can
// safely use t.GetTlsServerProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsServerProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfController) GetTlsServerProfile() string {
	if t == nil || t.TlsServerProfile == nil {
		return ""
	}
	return *t.TlsServerProfile
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfController) GetVersion() E_NokiaConf_Configure_Groups_Group_Openflow_OfController_Version {
	if t == nil || t.Version == 0 {
		return NokiaConf_Configure_Groups_Group_Openflow_OfController_Version_version_1_3_1
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Openflow_OfController
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfController) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.EchoInterval == nil {
		var v uint32 = 10
		t.EchoInterval = &v
	}
	if t.EchoMultiple == nil {
		var v uint32 = 3
		t.EchoMultiple = &v
	}
	if t.Role == 0 {
		t.Role = NokiaConf_Configure_Groups_Group_Openflow_OfController_Role_equal
	}
	if t.Version == 0 {
		t.Version = NokiaConf_Configure_Groups_Group_Openflow_OfController_Version_version_1_3_1
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Openflow_OfController struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfController) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"controller-id": t.ControllerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfController) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Openflow_OfController"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfController) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfController) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Openflow_OfController.
func (*NokiaConf_Configure_Groups_Group_Openflow_OfController) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Openflow_OfSwitch represents the /nokia-conf/configure/groups/group/openflow/of-switch YANG schema element.
type NokiaConf_Configure_Groups_Group_Openflow_OfSwitch struct {
	AdminState        E_NokiaTypesSros_AdminState                                                                                                                  `path:"admin-state" module:"nokia-conf"`
	AuxChannel        *bool                                                                                                                                        `path:"aux-channel" module:"nokia-conf"`
	Controller        map[NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller_Key]*NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller         `path:"controller" module:"nokia-conf"`
	Description       *string                                                                                                                                      `path:"description" module:"nokia-conf"`
	EchoInterval      *uint32                                                                                                                                      `path:"echo-interval" module:"nokia-conf"`
	EchoMultiple      *uint32                                                                                                                                      `path:"echo-multiple" module:"nokia-conf"`
	Flowtable         map[NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable_TableId_Union]*NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable `path:"flowtable" module:"nokia-conf"`
	LogicalPortStatus []E_NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_LogicalPortStatus                                                                     `path:"logical-port-status" module:"nokia-conf"`
	Name              *string                                                                                                                                      `path:"name" module:"nokia-conf"`
	OfsId             *uint32                                                                                                                                      `path:"ofs-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Openflow_OfSwitch implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller_Key represents the key for list Controller of element /nokia-conf/configure/groups/group/openflow/of-switch.
type NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller_Key struct {
	Address string                                                                   `path:"address"`
	Port    NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller_Port_Union `path:"port"`
}

// NewController creates a new entry in the Controller list of the
// NokiaConf_Configure_Groups_Group_Openflow_OfSwitch struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) NewController(Address string, Port NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller_Port_Union) (*NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Controller == nil {
		t.Controller = make(map[NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller_Key]*NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller)
	}

	key := NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller_Key{
		Address: Address,
		Port:    Port,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Controller[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Controller", key)
	}

	t.Controller[key] = &NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller{
		Address: &Address,
		Port:    Port,
	}

	return t.Controller[key], nil
}

// RenameController renames an entry in the list Controller within
// the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) RenameController(oldK, newK NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller_Key) error {
	if _, ok := t.Controller[newK]; ok {
		return fmt.Errorf("key %v already exists in Controller", newK)
	}

	e, ok := t.Controller[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Controller", oldK)
	}
	e.Address = &newK.Address
	e.Port = newK.Port

	t.Controller[newK] = e
	delete(t.Controller, oldK)
	return nil
}

// GetOrCreateController retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Openflow_OfSwitch. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) GetOrCreateController(Address string, Port NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller_Port_Union) *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller {

	key := NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller_Key{
		Address: Address,
		Port:    Port,
	}

	if v, ok := t.Controller[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewController(Address, Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateController got unexpected error: %v", err))
	}
	return v
}

// GetController retrieves the value with the specified key from
// the Controller map field of NokiaConf_Configure_Groups_Group_Openflow_OfSwitch. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) GetController(Address string, Port NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller_Port_Union) *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller_Key{
		Address: Address,
		Port:    Port,
	}

	if lm, ok := t.Controller[key]; ok {
		return lm
	}
	return nil
}

// DeleteController deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Openflow_OfSwitch. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) DeleteController(Address string, Port NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller_Port_Union) {
	key := NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller_Key{
		Address: Address,
		Port:    Port,
	}

	delete(t.Controller, key)
}

// AppendController appends the supplied NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller struct to the
// list Controller of NokiaConf_Configure_Groups_Group_Openflow_OfSwitch. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) AppendController(v *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key for Address")
	}

	key := NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller_Key{
		Address: *v.Address,
		Port:    v.Port,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Controller == nil {
		t.Controller = make(map[NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller_Key]*NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller)
	}

	if _, ok := t.Controller[key]; ok {
		return fmt.Errorf("duplicate key for list Controller %v", key)
	}

	t.Controller[key] = v
	return nil
}

// NewFlowtable creates a new entry in the Flowtable list of the
// NokiaConf_Configure_Groups_Group_Openflow_OfSwitch struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) NewFlowtable(TableId NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable_TableId_Union) (*NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flowtable == nil {
		t.Flowtable = make(map[NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable_TableId_Union]*NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable)
	}

	key := TableId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Flowtable[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Flowtable", key)
	}

	t.Flowtable[key] = &NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable{
		TableId: TableId,
	}

	return t.Flowtable[key], nil
}

// RenameFlowtable renames an entry in the list Flowtable within
// the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) RenameFlowtable(oldK, newK NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable_TableId_Union) error {
	if _, ok := t.Flowtable[newK]; ok {
		return fmt.Errorf("key %v already exists in Flowtable", newK)
	}

	e, ok := t.Flowtable[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Flowtable", oldK)
	}
	e.TableId = newK

	t.Flowtable[newK] = e
	delete(t.Flowtable, oldK)
	return nil
}

// GetOrCreateFlowtable retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Openflow_OfSwitch. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) GetOrCreateFlowtable(TableId NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable_TableId_Union) *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable {

	key := TableId

	if v, ok := t.Flowtable[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlowtable(TableId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlowtable got unexpected error: %v", err))
	}
	return v
}

// GetFlowtable retrieves the value with the specified key from
// the Flowtable map field of NokiaConf_Configure_Groups_Group_Openflow_OfSwitch. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) GetFlowtable(TableId NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable_TableId_Union) *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable {

	if t == nil {
		return nil
	}

	key := TableId

	if lm, ok := t.Flowtable[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlowtable deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Openflow_OfSwitch. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) DeleteFlowtable(TableId NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable_TableId_Union) {
	key := TableId

	delete(t.Flowtable, key)
}

// AppendFlowtable appends the supplied NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable struct to the
// list Flowtable of NokiaConf_Configure_Groups_Group_Openflow_OfSwitch. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) AppendFlowtable(v *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable) error {
	key := v.TableId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flowtable == nil {
		t.Flowtable = make(map[NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable_TableId_Union]*NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable)
	}

	if _, ok := t.Flowtable[key]; ok {
		return fmt.Errorf("duplicate key for list Flowtable %v", key)
	}

	t.Flowtable[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAuxChannel retrieves the value of the leaf AuxChannel from the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuxChannel is set, it can
// safely use t.GetAuxChannel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuxChannel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) GetAuxChannel() bool {
	if t == nil || t.AuxChannel == nil {
		return false
	}
	return *t.AuxChannel
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEchoInterval retrieves the value of the leaf EchoInterval from the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoInterval is set, it can
// safely use t.GetEchoInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) GetEchoInterval() uint32 {
	if t == nil || t.EchoInterval == nil {
		return 10
	}
	return *t.EchoInterval
}

// GetEchoMultiple retrieves the value of the leaf EchoMultiple from the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoMultiple is set, it can
// safely use t.GetEchoMultiple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoMultiple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) GetEchoMultiple() uint32 {
	if t == nil || t.EchoMultiple == nil {
		return 3
	}
	return *t.EchoMultiple
}

// GetLogicalPortStatus retrieves the value of the leaf LogicalPortStatus from the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogicalPortStatus is set, it can
// safely use t.GetLogicalPortStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogicalPortStatus == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) GetLogicalPortStatus() []E_NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_LogicalPortStatus {
	if t == nil || t.LogicalPortStatus == nil {
		return nil
	}
	return t.LogicalPortStatus
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOfsId retrieves the value of the leaf OfsId from the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OfsId is set, it can
// safely use t.GetOfsId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OfsId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) GetOfsId() uint32 {
	if t == nil || t.OfsId == nil {
		return 0
	}
	return *t.OfsId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AuxChannel == nil {
		var v bool = false
		t.AuxChannel = &v
	}
	if t.EchoInterval == nil {
		var v uint32 = 10
		t.EchoInterval = &v
	}
	if t.EchoMultiple == nil {
		var v uint32 = 3
		t.EchoMultiple = &v
	}
	for _, e := range t.Controller {
		e.PopulateDefaults()
	}
	for _, e := range t.Flowtable {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Openflow_OfSwitch"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Openflow_OfSwitch.
func (*NokiaConf_Configure_Groups_Group_Openflow_OfSwitch) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller represents the /nokia-conf/configure/groups/group/openflow/of-switch/controller YANG schema element.
type NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller struct {
	Address          *string                                                                  `path:"address" module:"nokia-conf"`
	OfcLoopback      *string                                                                  `path:"ofc-loopback" module:"nokia-conf"`
	Port             NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller_Port_Union `path:"port" module:"nokia-conf"`
	ServiceName      *string                                                                  `path:"service-name" module:"nokia-conf"`
	TlsClientProfile *string                                                                  `path:"tls-client-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetOfcLoopback retrieves the value of the leaf OfcLoopback from the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OfcLoopback is set, it can
// safely use t.GetOfcLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OfcLoopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller) GetOfcLoopback() string {
	if t == nil || t.OfcLoopback == nil {
		return ""
	}
	return *t.OfcLoopback
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller) GetPort() NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller_Port_Union {
	if t == nil || t.Port == nil {
		return nil
	}
	return t.Port
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetTlsClientProfile retrieves the value of the leaf TlsClientProfile from the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsClientProfile is set, it can
// safely use t.GetTlsClientProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsClientProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller) GetTlsClientProfile() string {
	if t == nil || t.TlsClientProfile == nil {
		return ""
	}
	return *t.TlsClientProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
		"port":    t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller.
func (*NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Controller) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable represents the /nokia-conf/configure/groups/group/openflow/of-switch/flowtable YANG schema element.
type NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable struct {
	MaxSize             *uint32                                                                       `path:"max-size" module:"nokia-conf"`
	MismatchAction      E_NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable_MismatchAction `path:"mismatch-action" module:"nokia-conf"`
	SwitchDefinedCookie *bool                                                                         `path:"switch-defined-cookie" module:"nokia-conf"`
	TableId             NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable_TableId_Union    `path:"table-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable) IsYANGGoStruct() {}

// GetMaxSize retrieves the value of the leaf MaxSize from the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSize is set, it can
// safely use t.GetMaxSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable) GetMaxSize() uint32 {
	if t == nil || t.MaxSize == nil {
		return 1000
	}
	return *t.MaxSize
}

// GetMismatchAction retrieves the value of the leaf MismatchAction from the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MismatchAction is set, it can
// safely use t.GetMismatchAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MismatchAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable) GetMismatchAction() E_NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable_MismatchAction {
	if t == nil || t.MismatchAction == 0 {
		return NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable_MismatchAction_fall_through
	}
	return t.MismatchAction
}

// GetSwitchDefinedCookie retrieves the value of the leaf SwitchDefinedCookie from the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SwitchDefinedCookie is set, it can
// safely use t.GetSwitchDefinedCookie() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SwitchDefinedCookie == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable) GetSwitchDefinedCookie() bool {
	if t == nil || t.SwitchDefinedCookie == nil {
		return false
	}
	return *t.SwitchDefinedCookie
}

// GetTableId retrieves the value of the leaf TableId from the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TableId is set, it can
// safely use t.GetTableId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TableId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable) GetTableId() NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable_TableId_Union {
	if t == nil || t.TableId == nil {
		return nil
	}
	return t.TableId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxSize == nil {
		var v uint32 = 1000
		t.MaxSize = &v
	}
	if t.MismatchAction == 0 {
		t.MismatchAction = NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable_MismatchAction_fall_through
	}
	if t.SwitchDefinedCookie == nil {
		var v bool = false
		t.SwitchDefinedCookie = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"table-id": t.TableId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable.
func (*NokiaConf_Configure_Groups_Group_Openflow_OfSwitch_Flowtable) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions represents the /nokia-conf/configure/groups/group/policy-options YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions struct {
	AsPath          map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath          `path:"as-path" module:"nokia-conf"`
	AsPathGroup     map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup     `path:"as-path-group" module:"nokia-conf"`
	Community       map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_Community       `path:"community" module:"nokia-conf"`
	Damping         map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_Damping         `path:"damping" module:"nokia-conf"`
	GlobalVariables *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables            `path:"global-variables" module:"nokia-conf"`
	PolicyStatement map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement `path:"policy-statement" module:"nokia-conf"`
	PrefixList      map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList      `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions) IsYANGGoStruct() {}

// NewAsPath creates a new entry in the AsPath list of the
// NokiaConf_Configure_Groups_Group_PolicyOptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) NewAsPath(Name string) (*NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsPath == nil {
		t.AsPath = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AsPath[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AsPath", key)
	}

	t.AsPath[key] = &NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath{
		Name: &Name,
	}

	return t.AsPath[key], nil
}

// RenameAsPath renames an entry in the list AsPath within
// the NokiaConf_Configure_Groups_Group_PolicyOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) RenameAsPath(oldK, newK string) error {
	if _, ok := t.AsPath[newK]; ok {
		return fmt.Errorf("key %v already exists in AsPath", newK)
	}

	e, ok := t.AsPath[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AsPath", oldK)
	}
	e.Name = &newK

	t.AsPath[newK] = e
	delete(t.AsPath, oldK)
	return nil
}

// GetOrCreateAsPath retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) GetOrCreateAsPath(Name string) *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath {

	key := Name

	if v, ok := t.AsPath[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAsPath(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAsPath got unexpected error: %v", err))
	}
	return v
}

// GetAsPath retrieves the value with the specified key from
// the AsPath map field of NokiaConf_Configure_Groups_Group_PolicyOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) GetAsPath(Name string) *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.AsPath[key]; ok {
		return lm
	}
	return nil
}

// DeleteAsPath deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) DeleteAsPath(Name string) {
	key := Name

	delete(t.AsPath, key)
}

// AppendAsPath appends the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath struct to the
// list AsPath of NokiaConf_Configure_Groups_Group_PolicyOptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) AppendAsPath(v *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsPath == nil {
		t.AsPath = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath)
	}

	if _, ok := t.AsPath[key]; ok {
		return fmt.Errorf("duplicate key for list AsPath %v", key)
	}

	t.AsPath[key] = v
	return nil
}

// NewAsPathGroup creates a new entry in the AsPathGroup list of the
// NokiaConf_Configure_Groups_Group_PolicyOptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) NewAsPathGroup(Name string) (*NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsPathGroup == nil {
		t.AsPathGroup = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AsPathGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AsPathGroup", key)
	}

	t.AsPathGroup[key] = &NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup{
		Name: &Name,
	}

	return t.AsPathGroup[key], nil
}

// RenameAsPathGroup renames an entry in the list AsPathGroup within
// the NokiaConf_Configure_Groups_Group_PolicyOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) RenameAsPathGroup(oldK, newK string) error {
	if _, ok := t.AsPathGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AsPathGroup", newK)
	}

	e, ok := t.AsPathGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AsPathGroup", oldK)
	}
	e.Name = &newK

	t.AsPathGroup[newK] = e
	delete(t.AsPathGroup, oldK)
	return nil
}

// GetOrCreateAsPathGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) GetOrCreateAsPathGroup(Name string) *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup {

	key := Name

	if v, ok := t.AsPathGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAsPathGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAsPathGroup got unexpected error: %v", err))
	}
	return v
}

// GetAsPathGroup retrieves the value with the specified key from
// the AsPathGroup map field of NokiaConf_Configure_Groups_Group_PolicyOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) GetAsPathGroup(Name string) *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.AsPathGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAsPathGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) DeleteAsPathGroup(Name string) {
	key := Name

	delete(t.AsPathGroup, key)
}

// AppendAsPathGroup appends the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup struct to the
// list AsPathGroup of NokiaConf_Configure_Groups_Group_PolicyOptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) AppendAsPathGroup(v *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsPathGroup == nil {
		t.AsPathGroup = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup)
	}

	if _, ok := t.AsPathGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AsPathGroup %v", key)
	}

	t.AsPathGroup[key] = v
	return nil
}

// NewCommunity creates a new entry in the Community list of the
// NokiaConf_Configure_Groups_Group_PolicyOptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) NewCommunity(Name string) (*NokiaConf_Configure_Groups_Group_PolicyOptions_Community, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Community == nil {
		t.Community = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_Community)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Community[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Community", key)
	}

	t.Community[key] = &NokiaConf_Configure_Groups_Group_PolicyOptions_Community{
		Name: &Name,
	}

	return t.Community[key], nil
}

// RenameCommunity renames an entry in the list Community within
// the NokiaConf_Configure_Groups_Group_PolicyOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) RenameCommunity(oldK, newK string) error {
	if _, ok := t.Community[newK]; ok {
		return fmt.Errorf("key %v already exists in Community", newK)
	}

	e, ok := t.Community[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Community", oldK)
	}
	e.Name = &newK

	t.Community[newK] = e
	delete(t.Community, oldK)
	return nil
}

// GetOrCreateCommunity retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) GetOrCreateCommunity(Name string) *NokiaConf_Configure_Groups_Group_PolicyOptions_Community {

	key := Name

	if v, ok := t.Community[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCommunity(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCommunity got unexpected error: %v", err))
	}
	return v
}

// GetCommunity retrieves the value with the specified key from
// the Community map field of NokiaConf_Configure_Groups_Group_PolicyOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) GetCommunity(Name string) *NokiaConf_Configure_Groups_Group_PolicyOptions_Community {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Community[key]; ok {
		return lm
	}
	return nil
}

// DeleteCommunity deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) DeleteCommunity(Name string) {
	key := Name

	delete(t.Community, key)
}

// AppendCommunity appends the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_Community struct to the
// list Community of NokiaConf_Configure_Groups_Group_PolicyOptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_Community already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) AppendCommunity(v *NokiaConf_Configure_Groups_Group_PolicyOptions_Community) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Community == nil {
		t.Community = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_Community)
	}

	if _, ok := t.Community[key]; ok {
		return fmt.Errorf("duplicate key for list Community %v", key)
	}

	t.Community[key] = v
	return nil
}

// NewDamping creates a new entry in the Damping list of the
// NokiaConf_Configure_Groups_Group_PolicyOptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) NewDamping(Name string) (*NokiaConf_Configure_Groups_Group_PolicyOptions_Damping, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Damping == nil {
		t.Damping = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_Damping)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Damping[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Damping", key)
	}

	t.Damping[key] = &NokiaConf_Configure_Groups_Group_PolicyOptions_Damping{
		Name: &Name,
	}

	return t.Damping[key], nil
}

// RenameDamping renames an entry in the list Damping within
// the NokiaConf_Configure_Groups_Group_PolicyOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) RenameDamping(oldK, newK string) error {
	if _, ok := t.Damping[newK]; ok {
		return fmt.Errorf("key %v already exists in Damping", newK)
	}

	e, ok := t.Damping[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Damping", oldK)
	}
	e.Name = &newK

	t.Damping[newK] = e
	delete(t.Damping, oldK)
	return nil
}

// GetOrCreateDamping retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) GetOrCreateDamping(Name string) *NokiaConf_Configure_Groups_Group_PolicyOptions_Damping {

	key := Name

	if v, ok := t.Damping[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDamping(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDamping got unexpected error: %v", err))
	}
	return v
}

// GetDamping retrieves the value with the specified key from
// the Damping map field of NokiaConf_Configure_Groups_Group_PolicyOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) GetDamping(Name string) *NokiaConf_Configure_Groups_Group_PolicyOptions_Damping {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Damping[key]; ok {
		return lm
	}
	return nil
}

// DeleteDamping deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) DeleteDamping(Name string) {
	key := Name

	delete(t.Damping, key)
}

// AppendDamping appends the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_Damping struct to the
// list Damping of NokiaConf_Configure_Groups_Group_PolicyOptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_Damping already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) AppendDamping(v *NokiaConf_Configure_Groups_Group_PolicyOptions_Damping) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Damping == nil {
		t.Damping = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_Damping)
	}

	if _, ok := t.Damping[key]; ok {
		return fmt.Errorf("duplicate key for list Damping %v", key)
	}

	t.Damping[key] = v
	return nil
}

// NewPolicyStatement creates a new entry in the PolicyStatement list of the
// NokiaConf_Configure_Groups_Group_PolicyOptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) NewPolicyStatement(Name string) (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyStatement == nil {
		t.PolicyStatement = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicyStatement[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicyStatement", key)
	}

	t.PolicyStatement[key] = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement{
		Name: &Name,
	}

	return t.PolicyStatement[key], nil
}

// RenamePolicyStatement renames an entry in the list PolicyStatement within
// the NokiaConf_Configure_Groups_Group_PolicyOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) RenamePolicyStatement(oldK, newK string) error {
	if _, ok := t.PolicyStatement[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicyStatement", newK)
	}

	e, ok := t.PolicyStatement[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicyStatement", oldK)
	}
	e.Name = &newK

	t.PolicyStatement[newK] = e
	delete(t.PolicyStatement, oldK)
	return nil
}

// GetOrCreatePolicyStatement retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) GetOrCreatePolicyStatement(Name string) *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement {

	key := Name

	if v, ok := t.PolicyStatement[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicyStatement(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicyStatement got unexpected error: %v", err))
	}
	return v
}

// GetPolicyStatement retrieves the value with the specified key from
// the PolicyStatement map field of NokiaConf_Configure_Groups_Group_PolicyOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) GetPolicyStatement(Name string) *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PolicyStatement[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicyStatement deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) DeletePolicyStatement(Name string) {
	key := Name

	delete(t.PolicyStatement, key)
}

// AppendPolicyStatement appends the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement struct to the
// list PolicyStatement of NokiaConf_Configure_Groups_Group_PolicyOptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) AppendPolicyStatement(v *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyStatement == nil {
		t.PolicyStatement = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement)
	}

	if _, ok := t.PolicyStatement[key]; ok {
		return fmt.Errorf("duplicate key for list PolicyStatement %v", key)
	}

	t.PolicyStatement[key] = v
	return nil
}

// NewPrefixList creates a new entry in the PrefixList list of the
// NokiaConf_Configure_Groups_Group_PolicyOptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) NewPrefixList(Name string) (*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixList == nil {
		t.PrefixList = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixList", key)
	}

	t.PrefixList[key] = &NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList{
		Name: &Name,
	}

	return t.PrefixList[key], nil
}

// RenamePrefixList renames an entry in the list PrefixList within
// the NokiaConf_Configure_Groups_Group_PolicyOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) RenamePrefixList(oldK, newK string) error {
	if _, ok := t.PrefixList[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixList", newK)
	}

	e, ok := t.PrefixList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixList", oldK)
	}
	e.Name = &newK

	t.PrefixList[newK] = e
	delete(t.PrefixList, oldK)
	return nil
}

// GetOrCreatePrefixList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) GetOrCreatePrefixList(Name string) *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList {

	key := Name

	if v, ok := t.PrefixList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixList(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixList got unexpected error: %v", err))
	}
	return v
}

// GetPrefixList retrieves the value with the specified key from
// the PrefixList map field of NokiaConf_Configure_Groups_Group_PolicyOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) GetPrefixList(Name string) *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PrefixList[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) DeletePrefixList(Name string) {
	key := Name

	delete(t.PrefixList, key)
}

// AppendPrefixList appends the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList struct to the
// list PrefixList of NokiaConf_Configure_Groups_Group_PolicyOptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) AppendPrefixList(v *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixList == nil {
		t.PrefixList = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList)
	}

	if _, ok := t.PrefixList[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixList %v", key)
	}

	t.PrefixList[key] = v
	return nil
}

// GetOrCreateGlobalVariables retrieves the value of the GlobalVariables field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) GetOrCreateGlobalVariables() *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables {
	if t.GlobalVariables != nil {
		return t.GlobalVariables
	}
	t.GlobalVariables = &NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables{}
	return t.GlobalVariables
}

// GetGlobalVariables returns the value of the GlobalVariables struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions. If the receiver or the field GlobalVariables is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) GetGlobalVariables() *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables {
	if t != nil && t.GlobalVariables != nil {
		return t.GlobalVariables
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.GlobalVariables.PopulateDefaults()
	for _, e := range t.AsPath {
		e.PopulateDefaults()
	}
	for _, e := range t.AsPathGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Community {
		e.PopulateDefaults()
	}
	for _, e := range t.Damping {
		e.PopulateDefaults()
	}
	for _, e := range t.PolicyStatement {
		e.PopulateDefaults()
	}
	for _, e := range t.PrefixList {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath represents the /nokia-conf/configure/groups/group/policy-options/as-path YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath struct {
	Expression *string `path:"expression" module:"nokia-conf"`
	Name       *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath) IsYANGGoStruct() {}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_AsPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup represents the /nokia-conf/configure/groups/group/policy-options/as-path-group YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup struct {
	Entry map[NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry_Entry_Union]*NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry `path:"entry" module:"nokia-conf"`
	Name  *string                                                                                                                                            `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup) NewEntry(Entry NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry_Entry_Union) (*NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry_Entry_Union]*NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry)
	}

	key := Entry

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry{
		Entry: Entry,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry_Entry_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.Entry = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup) GetOrCreateEntry(Entry NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry_Entry_Union) *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry {

	key := Entry

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(Entry)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup) GetEntry(Entry NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry_Entry_Union) *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry {

	if t == nil {
		return nil
	}

	key := Entry

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup) DeleteEntry(Entry NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry_Entry_Union) {
	key := Entry

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup) AppendEntry(v *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry) error {
	key := v.Entry

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry_Entry_Union]*NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry represents the /nokia-conf/configure/groups/group/policy-options/as-path-group/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry struct {
	Entry      NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry_Entry_Union `path:"entry" module:"nokia-conf"`
	Expression *string                                                                      `path:"expression" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry) IsYANGGoStruct() {}

// GetEntry retrieves the value of the leaf Entry from the NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Entry is set, it can
// safely use t.GetEntry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Entry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry) GetEntry() NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry_Entry_Union {
	if t == nil || t.Entry == nil {
		return nil
	}
	return t.Entry
}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry": t.Entry,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_AsPathGroup_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_Community represents the /nokia-conf/configure/groups/group/policy-options/community YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_Community struct {
	Expression *NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Expression        `path:"expression" module:"nokia-conf" yangPresence:"true"`
	Member     map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member `path:"member" module:"nokia-conf"`
	Name       *string                                                                     `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_Community implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_Community) IsYANGGoStruct() {}

// NewMember creates a new entry in the Member list of the
// NokiaConf_Configure_Groups_Group_PolicyOptions_Community struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community) NewMember(Member string) (*NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Member == nil {
		t.Member = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member)
	}

	key := Member

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Member[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Member", key)
	}

	t.Member[key] = &NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member{
		Member: &Member,
	}

	return t.Member[key], nil
}

// RenameMember renames an entry in the list Member within
// the NokiaConf_Configure_Groups_Group_PolicyOptions_Community struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community) RenameMember(oldK, newK string) error {
	if _, ok := t.Member[newK]; ok {
		return fmt.Errorf("key %v already exists in Member", newK)
	}

	e, ok := t.Member[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Member", oldK)
	}
	e.Member = &newK

	t.Member[newK] = e
	delete(t.Member, oldK)
	return nil
}

// GetOrCreateMember retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions_Community. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community) GetOrCreateMember(Member string) *NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member {

	key := Member

	if v, ok := t.Member[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMember(Member)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMember got unexpected error: %v", err))
	}
	return v
}

// GetMember retrieves the value with the specified key from
// the Member map field of NokiaConf_Configure_Groups_Group_PolicyOptions_Community. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community) GetMember(Member string) *NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member {

	if t == nil {
		return nil
	}

	key := Member

	if lm, ok := t.Member[key]; ok {
		return lm
	}
	return nil
}

// DeleteMember deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions_Community. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community) DeleteMember(Member string) {
	key := Member

	delete(t.Member, key)
}

// AppendMember appends the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member struct to the
// list Member of NokiaConf_Configure_Groups_Group_PolicyOptions_Community. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community) AppendMember(v *NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member) error {
	if v.Member == nil {
		return fmt.Errorf("invalid nil key received for Member")
	}

	key := *v.Member

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Member == nil {
		t.Member = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member)
	}

	if _, ok := t.Member[key]; ok {
		return fmt.Errorf("duplicate key for list Member %v", key)
	}

	t.Member[key] = v
	return nil
}

// GetOrCreateExpression retrieves the value of the Expression field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community) GetOrCreateExpression() *NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Expression {
	if t.Expression != nil {
		return t.Expression
	}
	t.Expression = &NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Expression{}
	return t.Expression
}

// GetExpression returns the value of the Expression struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_Community. If the receiver or the field Expression is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community) GetExpression() *NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Expression {
	if t != nil && t.Expression != nil {
		return t.Expression
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_PolicyOptions_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_Community
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Expression.PopulateDefaults()
	for _, e := range t.Member {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PolicyOptions_Community struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_Community"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_Community.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_Community) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Expression represents the /nokia-conf/configure/groups/group/policy-options/community/expression YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Expression struct {
	Exact *bool   `path:"exact" module:"nokia-conf"`
	Expr  *string `path:"expr" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Expression implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Expression) IsYANGGoStruct() {}

// GetExact retrieves the value of the leaf Exact from the NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exact is set, it can
// safely use t.GetExact() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exact == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Expression) GetExact() bool {
	if t == nil || t.Exact == nil {
		return false
	}
	return *t.Exact
}

// GetExpr retrieves the value of the leaf Expr from the NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expr is set, it can
// safely use t.GetExpr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Expression) GetExpr() string {
	if t == nil || t.Expr == nil {
		return ""
	}
	return *t.Expr
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Expression
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Expression) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Exact == nil {
		var v bool = false
		t.Exact = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Expression) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Expression"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Expression) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Expression) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Expression.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Expression) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member represents the /nokia-conf/configure/groups/group/policy-options/community/member YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member struct {
	Member *string `path:"member" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member) IsYANGGoStruct() {}

// GetMember retrieves the value of the leaf Member from the NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Member is set, it can
// safely use t.GetMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Member == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member) GetMember() string {
	if t == nil || t.Member == nil {
		return ""
	}
	return *t.Member
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Member == nil {
		return nil, fmt.Errorf("nil value for key Member")
	}

	return map[string]interface{}{
		"member": *t.Member,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_Community_Member) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_Damping represents the /nokia-conf/configure/groups/group/policy-options/damping YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_Damping struct {
	HalfLife    *uint32 `path:"half-life" module:"nokia-conf"`
	MaxSuppress *uint32 `path:"max-suppress" module:"nokia-conf"`
	Name        *string `path:"name" module:"nokia-conf"`
	Reuse       *uint32 `path:"reuse" module:"nokia-conf"`
	Suppress    *uint32 `path:"suppress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_Damping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_Damping) IsYANGGoStruct() {}

// GetHalfLife retrieves the value of the leaf HalfLife from the NokiaConf_Configure_Groups_Group_PolicyOptions_Damping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HalfLife is set, it can
// safely use t.GetHalfLife() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HalfLife == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Damping) GetHalfLife() uint32 {
	if t == nil || t.HalfLife == nil {
		return 0
	}
	return *t.HalfLife
}

// GetMaxSuppress retrieves the value of the leaf MaxSuppress from the NokiaConf_Configure_Groups_Group_PolicyOptions_Damping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSuppress is set, it can
// safely use t.GetMaxSuppress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSuppress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Damping) GetMaxSuppress() uint32 {
	if t == nil || t.MaxSuppress == nil {
		return 0
	}
	return *t.MaxSuppress
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_PolicyOptions_Damping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Damping) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetReuse retrieves the value of the leaf Reuse from the NokiaConf_Configure_Groups_Group_PolicyOptions_Damping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reuse is set, it can
// safely use t.GetReuse() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reuse == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Damping) GetReuse() uint32 {
	if t == nil || t.Reuse == nil {
		return 0
	}
	return *t.Reuse
}

// GetSuppress retrieves the value of the leaf Suppress from the NokiaConf_Configure_Groups_Group_PolicyOptions_Damping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Suppress is set, it can
// safely use t.GetSuppress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Suppress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Damping) GetSuppress() uint32 {
	if t == nil || t.Suppress == nil {
		return 0
	}
	return *t.Suppress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_Damping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Damping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PolicyOptions_Damping struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Damping) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Damping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_Damping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Damping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_Damping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_Damping.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_Damping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables represents the /nokia-conf/configure/groups/group/policy-options/global-variables YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables struct {
	Name map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables) IsYANGGoStruct() {}

// NewName creates a new entry in the Name list of the
// NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables) NewName(VariableName string) (*NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Name == nil {
		t.Name = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name)
	}

	key := VariableName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Name[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Name", key)
	}

	t.Name[key] = &NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name{
		VariableName: &VariableName,
	}

	return t.Name[key], nil
}

// RenameName renames an entry in the list Name within
// the NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables) RenameName(oldK, newK string) error {
	if _, ok := t.Name[newK]; ok {
		return fmt.Errorf("key %v already exists in Name", newK)
	}

	e, ok := t.Name[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Name", oldK)
	}
	e.VariableName = &newK

	t.Name[newK] = e
	delete(t.Name, oldK)
	return nil
}

// GetOrCreateName retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables) GetOrCreateName(VariableName string) *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name {

	key := VariableName

	if v, ok := t.Name[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewName(VariableName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateName got unexpected error: %v", err))
	}
	return v
}

// GetName retrieves the value with the specified key from
// the Name map field of NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables) GetName(VariableName string) *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name {

	if t == nil {
		return nil
	}

	key := VariableName

	if lm, ok := t.Name[key]; ok {
		return lm
	}
	return nil
}

// DeleteName deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables) DeleteName(VariableName string) {
	key := VariableName

	delete(t.Name, key)
}

// AppendName appends the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name struct to the
// list Name of NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables) AppendName(v *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name) error {
	if v.VariableName == nil {
		return fmt.Errorf("invalid nil key received for VariableName")
	}

	key := *v.VariableName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Name == nil {
		t.Name = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name)
	}

	if _, ok := t.Name[key]; ok {
		return fmt.Errorf("duplicate key for list Name %v", key)
	}

	t.Name[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Name {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name represents the /nokia-conf/configure/groups/group/policy-options/global-variables/name YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name struct {
	Address      *string  `path:"address" module:"nokia-conf"`
	Decimal      *float64 `path:"decimal" module:"nokia-conf"`
	Number       *uint64  `path:"number" module:"nokia-conf"`
	Value        *string  `path:"value" module:"nokia-conf"`
	VariableName *string  `path:"variable-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetDecimal retrieves the value of the leaf Decimal from the NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Decimal is set, it can
// safely use t.GetDecimal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Decimal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name) GetDecimal() float64 {
	if t == nil || t.Decimal == nil {
		return 0.0
	}
	return *t.Decimal
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name) GetNumber() uint64 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// GetVariableName retrieves the value of the leaf VariableName from the NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VariableName is set, it can
// safely use t.GetVariableName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VariableName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name) GetVariableName() string {
	if t == nil || t.VariableName == nil {
		return ""
	}
	return *t.VariableName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VariableName == nil {
		return nil, fmt.Errorf("nil value for key VariableName")
	}

	return map[string]interface{}{
		"variable-name": *t.VariableName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_GlobalVariables_Name) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement represents the /nokia-conf/configure/groups/group/policy-options/policy-statement YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement struct {
	DefaultAction *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction                                                                                `path:"default-action" module:"nokia-conf" yangPresence:"true"`
	Description   *string                                                                                                                                                      `path:"description" module:"nokia-conf"`
	Entry         map[NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry `path:"entry" module:"nokia-conf"`
	EntryType     E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_EntryType                                                                                   `path:"entry-type" module:"nokia-conf"`
	Name          *string                                                                                                                                                      `path:"name" module:"nokia-conf"`
	NamedEntry    map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry                                                                        `path:"named-entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) NewEntry(EntryId NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) GetEntry(EntryId NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) AppendEntry(v *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// NewNamedEntry creates a new entry in the NamedEntry list of the
// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) NewNamedEntry(EntryName string) (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NamedEntry == nil {
		t.NamedEntry = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry)
	}

	key := EntryName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NamedEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NamedEntry", key)
	}

	t.NamedEntry[key] = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry{
		EntryName: &EntryName,
	}

	return t.NamedEntry[key], nil
}

// RenameNamedEntry renames an entry in the list NamedEntry within
// the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) RenameNamedEntry(oldK, newK string) error {
	if _, ok := t.NamedEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in NamedEntry", newK)
	}

	e, ok := t.NamedEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NamedEntry", oldK)
	}
	e.EntryName = &newK

	t.NamedEntry[newK] = e
	delete(t.NamedEntry, oldK)
	return nil
}

// GetOrCreateNamedEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) GetOrCreateNamedEntry(EntryName string) *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry {

	key := EntryName

	if v, ok := t.NamedEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNamedEntry(EntryName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNamedEntry got unexpected error: %v", err))
	}
	return v
}

// GetNamedEntry retrieves the value with the specified key from
// the NamedEntry map field of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) GetNamedEntry(EntryName string) *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry {

	if t == nil {
		return nil
	}

	key := EntryName

	if lm, ok := t.NamedEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteNamedEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) DeleteNamedEntry(EntryName string) {
	key := EntryName

	delete(t.NamedEntry, key)
}

// AppendNamedEntry appends the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry struct to the
// list NamedEntry of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) AppendNamedEntry(v *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry) error {
	if v.EntryName == nil {
		return fmt.Errorf("invalid nil key received for EntryName")
	}

	key := *v.EntryName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NamedEntry == nil {
		t.NamedEntry = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry)
	}

	if _, ok := t.NamedEntry[key]; ok {
		return fmt.Errorf("duplicate key for list NamedEntry %v", key)
	}

	t.NamedEntry[key] = v
	return nil
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) GetOrCreateDefaultAction() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction{}
	return t.DefaultAction
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) GetDefaultAction() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryType retrieves the value of the leaf EntryType from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryType is set, it can
// safely use t.GetEntryType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) GetEntryType() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_EntryType {
	if t == nil || t.EntryType == 0 {
		return NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_EntryType_numbered
	}
	return t.EntryType
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EntryType == 0 {
		t.EntryType = NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_EntryType_numbered
	}
	t.DefaultAction.PopulateDefaults()
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
	for _, e := range t.NamedEntry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/default-action YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction struct {
	ActionType            E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_ActionType                `path:"action-type" module:"nokia-conf"`
	AddPathsSendLimit     NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AddPathsSendLimit_Union     `path:"add-paths-send-limit" module:"nokia-conf"`
	AdminTagPolicy        *string                                                                                                  `path:"admin-tag-policy" module:"nokia-conf"`
	AdvertiseLabel        E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AdvertiseLabel            `path:"advertise-label" module:"nokia-conf"`
	AigpMetric            *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric                 `path:"aigp-metric" module:"nokia-conf"`
	AsPath                *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPath                     `path:"as-path" module:"nokia-conf"`
	AsPathPrepend         *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend              `path:"as-path-prepend" module:"nokia-conf"`
	BgpHighPriority       *bool                                                                                                    `path:"bgp-high-priority" module:"nokia-conf"`
	BgpLeak               *bool                                                                                                    `path:"bgp-leak" module:"nokia-conf"`
	BgpMed                *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed                     `path:"bgp-med" module:"nokia-conf"`
	BgpTunnelMetric       *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric            `path:"bgp-tunnel-metric" module:"nokia-conf"`
	Community             *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community                  `path:"community" module:"nokia-conf" yangPresence:"true"`
	CreateMplsTunnel      *bool                                                                                                    `path:"create-mpls-tunnel" module:"nokia-conf"`
	CreateUdpTunnel       *bool                                                                                                    `path:"create-udp-tunnel" module:"nokia-conf"`
	Damping               NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Damping_Union               `path:"damping" module:"nokia-conf"`
	DestClass             *uint32                                                                                                  `path:"dest-class" module:"nokia-conf"`
	EgressStatistics      *bool                                                                                                    `path:"egress-statistics" module:"nokia-conf"`
	FlexAlgo              NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_FlexAlgo_Union              `path:"flex-algo" module:"nokia-conf"`
	IngressStatistics     *bool                                                                                                    `path:"ingress-statistics" module:"nokia-conf"`
	InstallBackupPath     *bool                                                                                                    `path:"install-backup-path" module:"nokia-conf"`
	LocalPreference       NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_LocalPreference_Union       `path:"local-preference" module:"nokia-conf"`
	Metric                *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric                     `path:"metric" module:"nokia-conf"`
	MulticastRedirection  *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection       `path:"multicast-redirection" module:"nokia-conf"`
	NatPolicy             *string                                                                                                  `path:"nat-policy" module:"nokia-conf"`
	NextHop               NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_NextHop_Union               `path:"next-hop" module:"nokia-conf"`
	Origin                NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Origin_Union                `path:"origin" module:"nokia-conf"`
	OriginValidationState NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_OriginValidationState_Union `path:"origin-validation-state" module:"nokia-conf"`
	Preference            NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Preference_Union            `path:"preference" module:"nokia-conf"`
	ResolveStatic         *bool                                                                                                    `path:"resolve-static" module:"nokia-conf"`
	RouteTableInstall     *bool                                                                                                    `path:"route-table-install" module:"nokia-conf"`
	SourceClass           *uint32                                                                                                  `path:"source-class" module:"nokia-conf"`
	SrLabelIndex          *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex               `path:"sr-label-index" module:"nokia-conf"`
	SrMaintenancePolicy   *string                                                                                                  `path:"sr-maintenance-policy" module:"nokia-conf"`
	StickyEcmp            *bool                                                                                                    `path:"sticky-ecmp" module:"nokia-conf"`
	Tag                   NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Tag_Union                   `path:"tag" module:"nokia-conf"`
	Type                  NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Type_Union                  `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) IsYANGGoStruct() {
}

// GetOrCreateAigpMetric retrieves the value of the AigpMetric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetOrCreateAigpMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric {
	if t.AigpMetric != nil {
		return t.AigpMetric
	}
	t.AigpMetric = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric{}
	return t.AigpMetric
}

// GetOrCreateAsPath retrieves the value of the AsPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetOrCreateAsPath() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPath {
	if t.AsPath != nil {
		return t.AsPath
	}
	t.AsPath = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPath{}
	return t.AsPath
}

// GetOrCreateAsPathPrepend retrieves the value of the AsPathPrepend field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetOrCreateAsPathPrepend() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend {
	if t.AsPathPrepend != nil {
		return t.AsPathPrepend
	}
	t.AsPathPrepend = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend{}
	return t.AsPathPrepend
}

// GetOrCreateBgpMed retrieves the value of the BgpMed field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetOrCreateBgpMed() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed {
	if t.BgpMed != nil {
		return t.BgpMed
	}
	t.BgpMed = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed{}
	return t.BgpMed
}

// GetOrCreateBgpTunnelMetric retrieves the value of the BgpTunnelMetric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetOrCreateBgpTunnelMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric {
	if t.BgpTunnelMetric != nil {
		return t.BgpTunnelMetric
	}
	t.BgpTunnelMetric = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric{}
	return t.BgpTunnelMetric
}

// GetOrCreateCommunity retrieves the value of the Community field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetOrCreateCommunity() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community {
	if t.Community != nil {
		return t.Community
	}
	t.Community = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community{}
	return t.Community
}

// GetOrCreateMetric retrieves the value of the Metric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetOrCreateMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric {
	if t.Metric != nil {
		return t.Metric
	}
	t.Metric = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric{}
	return t.Metric
}

// GetOrCreateMulticastRedirection retrieves the value of the MulticastRedirection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetOrCreateMulticastRedirection() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection {
	if t.MulticastRedirection != nil {
		return t.MulticastRedirection
	}
	t.MulticastRedirection = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection{}
	return t.MulticastRedirection
}

// GetOrCreateSrLabelIndex retrieves the value of the SrLabelIndex field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetOrCreateSrLabelIndex() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex {
	if t.SrLabelIndex != nil {
		return t.SrLabelIndex
	}
	t.SrLabelIndex = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex{}
	return t.SrLabelIndex
}

// GetAigpMetric returns the value of the AigpMetric struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction. If the receiver or the field AigpMetric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetAigpMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric {
	if t != nil && t.AigpMetric != nil {
		return t.AigpMetric
	}
	return nil
}

// GetAsPath returns the value of the AsPath struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction. If the receiver or the field AsPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetAsPath() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPath {
	if t != nil && t.AsPath != nil {
		return t.AsPath
	}
	return nil
}

// GetAsPathPrepend returns the value of the AsPathPrepend struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction. If the receiver or the field AsPathPrepend is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetAsPathPrepend() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend {
	if t != nil && t.AsPathPrepend != nil {
		return t.AsPathPrepend
	}
	return nil
}

// GetBgpMed returns the value of the BgpMed struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction. If the receiver or the field BgpMed is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetBgpMed() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed {
	if t != nil && t.BgpMed != nil {
		return t.BgpMed
	}
	return nil
}

// GetBgpTunnelMetric returns the value of the BgpTunnelMetric struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction. If the receiver or the field BgpTunnelMetric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetBgpTunnelMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric {
	if t != nil && t.BgpTunnelMetric != nil {
		return t.BgpTunnelMetric
	}
	return nil
}

// GetCommunity returns the value of the Community struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction. If the receiver or the field Community is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetCommunity() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community {
	if t != nil && t.Community != nil {
		return t.Community
	}
	return nil
}

// GetMetric returns the value of the Metric struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction. If the receiver or the field Metric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric {
	if t != nil && t.Metric != nil {
		return t.Metric
	}
	return nil
}

// GetMulticastRedirection returns the value of the MulticastRedirection struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction. If the receiver or the field MulticastRedirection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetMulticastRedirection() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection {
	if t != nil && t.MulticastRedirection != nil {
		return t.MulticastRedirection
	}
	return nil
}

// GetSrLabelIndex returns the value of the SrLabelIndex struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction. If the receiver or the field SrLabelIndex is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetSrLabelIndex() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex {
	if t != nil && t.SrLabelIndex != nil {
		return t.SrLabelIndex
	}
	return nil
}

// GetActionType retrieves the value of the leaf ActionType from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActionType is set, it can
// safely use t.GetActionType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActionType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetActionType() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_ActionType {
	if t == nil || t.ActionType == 0 {
		return 0
	}
	return t.ActionType
}

// GetAddPathsSendLimit retrieves the value of the leaf AddPathsSendLimit from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddPathsSendLimit is set, it can
// safely use t.GetAddPathsSendLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddPathsSendLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetAddPathsSendLimit() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AddPathsSendLimit_Union {
	if t == nil || t.AddPathsSendLimit == nil {
		return nil
	}
	return t.AddPathsSendLimit
}

// GetAdminTagPolicy retrieves the value of the leaf AdminTagPolicy from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminTagPolicy is set, it can
// safely use t.GetAdminTagPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminTagPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetAdminTagPolicy() string {
	if t == nil || t.AdminTagPolicy == nil {
		return ""
	}
	return *t.AdminTagPolicy
}

// GetAdvertiseLabel retrieves the value of the leaf AdvertiseLabel from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseLabel is set, it can
// safely use t.GetAdvertiseLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetAdvertiseLabel() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AdvertiseLabel {
	if t == nil || t.AdvertiseLabel == 0 {
		return 0
	}
	return t.AdvertiseLabel
}

// GetBgpHighPriority retrieves the value of the leaf BgpHighPriority from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpHighPriority is set, it can
// safely use t.GetBgpHighPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpHighPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetBgpHighPriority() bool {
	if t == nil || t.BgpHighPriority == nil {
		return false
	}
	return *t.BgpHighPriority
}

// GetBgpLeak retrieves the value of the leaf BgpLeak from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLeak is set, it can
// safely use t.GetBgpLeak() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLeak == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetBgpLeak() bool {
	if t == nil || t.BgpLeak == nil {
		return false
	}
	return *t.BgpLeak
}

// GetCreateMplsTunnel retrieves the value of the leaf CreateMplsTunnel from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreateMplsTunnel is set, it can
// safely use t.GetCreateMplsTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreateMplsTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetCreateMplsTunnel() bool {
	if t == nil || t.CreateMplsTunnel == nil {
		return false
	}
	return *t.CreateMplsTunnel
}

// GetCreateUdpTunnel retrieves the value of the leaf CreateUdpTunnel from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreateUdpTunnel is set, it can
// safely use t.GetCreateUdpTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreateUdpTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetCreateUdpTunnel() bool {
	if t == nil || t.CreateUdpTunnel == nil {
		return false
	}
	return *t.CreateUdpTunnel
}

// GetDamping retrieves the value of the leaf Damping from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Damping is set, it can
// safely use t.GetDamping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Damping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetDamping() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Damping_Union {
	if t == nil || t.Damping == nil {
		return nil
	}
	return t.Damping
}

// GetDestClass retrieves the value of the leaf DestClass from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestClass is set, it can
// safely use t.GetDestClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetDestClass() uint32 {
	if t == nil || t.DestClass == nil {
		return 0
	}
	return *t.DestClass
}

// GetEgressStatistics retrieves the value of the leaf EgressStatistics from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressStatistics is set, it can
// safely use t.GetEgressStatistics() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressStatistics == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetEgressStatistics() bool {
	if t == nil || t.EgressStatistics == nil {
		return false
	}
	return *t.EgressStatistics
}

// GetFlexAlgo retrieves the value of the leaf FlexAlgo from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlexAlgo is set, it can
// safely use t.GetFlexAlgo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlexAlgo == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetFlexAlgo() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_FlexAlgo_Union {
	if t == nil || t.FlexAlgo == nil {
		return nil
	}
	return t.FlexAlgo
}

// GetIngressStatistics retrieves the value of the leaf IngressStatistics from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressStatistics is set, it can
// safely use t.GetIngressStatistics() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressStatistics == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetIngressStatistics() bool {
	if t == nil || t.IngressStatistics == nil {
		return false
	}
	return *t.IngressStatistics
}

// GetInstallBackupPath retrieves the value of the leaf InstallBackupPath from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallBackupPath is set, it can
// safely use t.GetInstallBackupPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallBackupPath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetInstallBackupPath() bool {
	if t == nil || t.InstallBackupPath == nil {
		return false
	}
	return *t.InstallBackupPath
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetLocalPreference() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_LocalPreference_Union {
	if t == nil || t.LocalPreference == nil {
		return nil
	}
	return t.LocalPreference
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// GetNextHop retrieves the value of the leaf NextHop from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetNextHop() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_NextHop_Union {
	if t == nil || t.NextHop == nil {
		return nil
	}
	return t.NextHop
}

// GetOrigin retrieves the value of the leaf Origin from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetOrigin() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Origin_Union {
	if t == nil || t.Origin == nil {
		return nil
	}
	return t.Origin
}

// GetOriginValidationState retrieves the value of the leaf OriginValidationState from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginValidationState is set, it can
// safely use t.GetOriginValidationState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginValidationState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetOriginValidationState() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_OriginValidationState_Union {
	if t == nil || t.OriginValidationState == nil {
		return nil
	}
	return t.OriginValidationState
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetPreference() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Preference_Union {
	if t == nil || t.Preference == nil {
		return nil
	}
	return t.Preference
}

// GetResolveStatic retrieves the value of the leaf ResolveStatic from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResolveStatic is set, it can
// safely use t.GetResolveStatic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResolveStatic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetResolveStatic() bool {
	if t == nil || t.ResolveStatic == nil {
		return false
	}
	return *t.ResolveStatic
}

// GetRouteTableInstall retrieves the value of the leaf RouteTableInstall from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTableInstall is set, it can
// safely use t.GetRouteTableInstall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTableInstall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetRouteTableInstall() bool {
	if t == nil || t.RouteTableInstall == nil {
		return true
	}
	return *t.RouteTableInstall
}

// GetSourceClass retrieves the value of the leaf SourceClass from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceClass is set, it can
// safely use t.GetSourceClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetSourceClass() uint32 {
	if t == nil || t.SourceClass == nil {
		return 0
	}
	return *t.SourceClass
}

// GetSrMaintenancePolicy retrieves the value of the leaf SrMaintenancePolicy from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrMaintenancePolicy is set, it can
// safely use t.GetSrMaintenancePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrMaintenancePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetSrMaintenancePolicy() string {
	if t == nil || t.SrMaintenancePolicy == nil {
		return ""
	}
	return *t.SrMaintenancePolicy
}

// GetStickyEcmp retrieves the value of the leaf StickyEcmp from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StickyEcmp is set, it can
// safely use t.GetStickyEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StickyEcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetStickyEcmp() bool {
	if t == nil || t.StickyEcmp == nil {
		return false
	}
	return *t.StickyEcmp
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetTag() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Tag_Union {
	if t == nil || t.Tag == nil {
		return nil
	}
	return t.Tag
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) GetType() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BgpHighPriority == nil {
		var v bool = false
		t.BgpHighPriority = &v
	}
	if t.BgpLeak == nil {
		var v bool = false
		t.BgpLeak = &v
	}
	if t.CreateMplsTunnel == nil {
		var v bool = false
		t.CreateMplsTunnel = &v
	}
	if t.CreateUdpTunnel == nil {
		var v bool = false
		t.CreateUdpTunnel = &v
	}
	if t.EgressStatistics == nil {
		var v bool = false
		t.EgressStatistics = &v
	}
	if t.IngressStatistics == nil {
		var v bool = false
		t.IngressStatistics = &v
	}
	if t.InstallBackupPath == nil {
		var v bool = false
		t.InstallBackupPath = &v
	}
	if t.ResolveStatic == nil {
		var v bool = false
		t.ResolveStatic = &v
	}
	if t.RouteTableInstall == nil {
		var v bool = true
		t.RouteTableInstall = &v
	}
	if t.StickyEcmp == nil {
		var v bool = false
		t.StickyEcmp = &v
	}
	t.AigpMetric.PopulateDefaults()
	t.AsPath.PopulateDefaults()
	t.AsPathPrepend.PopulateDefaults()
	t.BgpMed.PopulateDefaults()
	t.BgpTunnelMetric.PopulateDefaults()
	t.Community.PopulateDefaults()
	t.Metric.PopulateDefaults()
	t.MulticastRedirection.PopulateDefaults()
	t.SrLabelIndex.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/default-action/aigp-metric YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric struct {
	Add NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric_Add_Union `path:"add" module:"nokia-conf"`
	Set NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric_Set_Union `path:"set" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric) IsYANGGoStruct() {
}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric) GetAdd() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric_Add_Union {
	if t == nil || t.Add == nil {
		return nil
	}
	return t.Add
}

// GetSet retrieves the value of the leaf Set from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric) GetSet() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric_Set_Union {
	if t == nil || t.Set == nil {
		return nil
	}
	return t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPath represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/default-action/as-path YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPath struct {
	Add     *string `path:"add" module:"nokia-conf"`
	Replace *string `path:"replace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPath) IsYANGGoStruct() {
}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPath) GetAdd() string {
	if t == nil || t.Add == nil {
		return ""
	}
	return *t.Add
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPath) GetReplace() string {
	if t == nil || t.Replace == nil {
		return ""
	}
	return *t.Replace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPath.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/default-action/as-path-prepend YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend struct {
	AsPath NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend_AsPath_Union `path:"as-path" module:"nokia-conf"`
	Repeat NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend_Repeat_Union `path:"repeat" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend) IsYANGGoStruct() {
}

// GetAsPath retrieves the value of the leaf AsPath from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPath is set, it can
// safely use t.GetAsPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend) GetAsPath() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend_AsPath_Union {
	if t == nil || t.AsPath == nil {
		return nil
	}
	return t.AsPath
}

// GetRepeat retrieves the value of the leaf Repeat from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Repeat is set, it can
// safely use t.GetRepeat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Repeat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend) GetRepeat() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend_Repeat_Union {
	if t == nil || t.Repeat == nil {
		return UnionInt32(1)
	}
	return t.Repeat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Repeat == nil {
		t.Repeat = UnionInt32(1)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/default-action/bgp-med YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed struct {
	Adjust *string                                                                                       `path:"adjust" module:"nokia-conf"`
	Set    NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed_Set_Union `path:"set" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed) IsYANGGoStruct() {
}

// GetAdjust retrieves the value of the leaf Adjust from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Adjust is set, it can
// safely use t.GetAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Adjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed) GetAdjust() string {
	if t == nil || t.Adjust == nil {
		return ""
	}
	return *t.Adjust
}

// GetSet retrieves the value of the leaf Set from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed) GetSet() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed_Set_Union {
	if t == nil || t.Set == nil {
		return nil
	}
	return t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpMed) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/default-action/bgp-tunnel-metric YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric struct {
	PreferAigp *bool                                                                                                    `path:"prefer-aigp" module:"nokia-conf"`
	Value      NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric) IsYANGGoStruct() {
}

// GetPreferAigp retrieves the value of the leaf PreferAigp from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferAigp is set, it can
// safely use t.GetPreferAigp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferAigp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric) GetPreferAigp() bool {
	if t == nil || t.PreferAigp == nil {
		return false
	}
	return *t.PreferAigp
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric) GetValue() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferAigp == nil {
		var v bool = false
		t.PreferAigp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/default-action/community YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community struct {
	Add     []string `path:"add" module:"nokia-conf"`
	Remove  []string `path:"remove" module:"nokia-conf"`
	Replace []string `path:"replace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community) IsYANGGoStruct() {
}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community) GetAdd() []string {
	if t == nil || t.Add == nil {
		return nil
	}
	return t.Add
}

// GetRemove retrieves the value of the leaf Remove from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Remove is set, it can
// safely use t.GetRemove() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Remove == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community) GetRemove() []string {
	if t == nil || t.Remove == nil {
		return nil
	}
	return t.Remove
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community) GetReplace() []string {
	if t == nil || t.Replace == nil {
		return nil
	}
	return t.Replace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Community) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/default-action/metric YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric struct {
	Add      NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric_Add_Union      `path:"add" module:"nokia-conf"`
	Set      NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric_Set_Union      `path:"set" module:"nokia-conf"`
	Subtract NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric_Subtract_Union `path:"subtract" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric) IsYANGGoStruct() {
}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric) GetAdd() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric_Add_Union {
	if t == nil || t.Add == nil {
		return nil
	}
	return t.Add
}

// GetSet retrieves the value of the leaf Set from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric) GetSet() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric_Set_Union {
	if t == nil || t.Set == nil {
		return nil
	}
	return t.Set
}

// GetSubtract retrieves the value of the leaf Subtract from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subtract is set, it can
// safely use t.GetSubtract() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subtract == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric) GetSubtract() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric_Subtract_Union {
	if t == nil || t.Subtract == nil {
		return nil
	}
	return t.Subtract
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_Metric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/default-action/multicast-redirection YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection struct {
	FwdService *string `path:"fwd-service" module:"nokia-conf"`
	IpIntName  *string `path:"ip-int-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection) IsYANGGoStruct() {
}

// GetFwdService retrieves the value of the leaf FwdService from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FwdService is set, it can
// safely use t.GetFwdService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FwdService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection) GetFwdService() string {
	if t == nil || t.FwdService == nil {
		return "Base"
	}
	return *t.FwdService
}

// GetIpIntName retrieves the value of the leaf IpIntName from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpIntName is set, it can
// safely use t.GetIpIntName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpIntName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection) GetIpIntName() string {
	if t == nil || t.IpIntName == nil {
		return ""
	}
	return *t.IpIntName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FwdService == nil {
		var v string = "Base"
		t.FwdService = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/default-action/sr-label-index YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex struct {
	PreferIgp *bool                                                                                                 `path:"prefer-igp" module:"nokia-conf"`
	Value     NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex) IsYANGGoStruct() {
}

// GetPreferIgp retrieves the value of the leaf PreferIgp from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferIgp is set, it can
// safely use t.GetPreferIgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferIgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex) GetPreferIgp() bool {
	if t == nil || t.PreferIgp == nil {
		return false
	}
	return *t.PreferIgp
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex) GetValue() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferIgp == nil {
		var v bool = false
		t.PreferIgp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry struct {
	Action                *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action                `path:"action" module:"nokia-conf" yangPresence:"true"`
	ConditionalExpression *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_ConditionalExpression `path:"conditional-expression" module:"nokia-conf" yangPresence:"true"`
	Description           *string                                                                                     `path:"description" module:"nokia-conf"`
	EntryId               NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_EntryId_Union          `path:"entry-id" module:"nokia-conf"`
	From                  *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From                  `path:"from" module:"nokia-conf" yangPresence:"true"`
	To                    *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To                    `path:"to" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action{}
	return t.Action
}

// GetOrCreateConditionalExpression retrieves the value of the ConditionalExpression field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry) GetOrCreateConditionalExpression() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_ConditionalExpression {
	if t.ConditionalExpression != nil {
		return t.ConditionalExpression
	}
	t.ConditionalExpression = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_ConditionalExpression{}
	return t.ConditionalExpression
}

// GetOrCreateFrom retrieves the value of the From field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry) GetOrCreateFrom() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From {
	if t.From != nil {
		return t.From
	}
	t.From = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From{}
	return t.From
}

// GetOrCreateTo retrieves the value of the To field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry) GetOrCreateTo() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To {
	if t.To != nil {
		return t.To
	}
	t.To = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To{}
	return t.To
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry) GetAction() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetConditionalExpression returns the value of the ConditionalExpression struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry. If the receiver or the field ConditionalExpression is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry) GetConditionalExpression() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_ConditionalExpression {
	if t != nil && t.ConditionalExpression != nil {
		return t.ConditionalExpression
	}
	return nil
}

// GetFrom returns the value of the From struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry. If the receiver or the field From is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry) GetFrom() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From {
	if t != nil && t.From != nil {
		return t.From
	}
	return nil
}

// GetTo returns the value of the To struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry. If the receiver or the field To is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry) GetTo() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To {
	if t != nil && t.To != nil {
		return t.To
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.ConditionalExpression.PopulateDefaults()
	t.From.PopulateDefaults()
	t.To.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action struct {
	ActionType            E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ActionType                `path:"action-type" module:"nokia-conf"`
	AddPathsSendLimit     NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AddPathsSendLimit_Union     `path:"add-paths-send-limit" module:"nokia-conf"`
	AdminTagPolicy        *string                                                                                                 `path:"admin-tag-policy" module:"nokia-conf"`
	AdvertiseLabel        E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AdvertiseLabel            `path:"advertise-label" module:"nokia-conf"`
	AigpMetric            *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric                 `path:"aigp-metric" module:"nokia-conf"`
	AsPath                *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPath                     `path:"as-path" module:"nokia-conf"`
	AsPathPrepend         *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend              `path:"as-path-prepend" module:"nokia-conf"`
	BgpHighPriority       *bool                                                                                                   `path:"bgp-high-priority" module:"nokia-conf"`
	BgpLeak               *bool                                                                                                   `path:"bgp-leak" module:"nokia-conf"`
	BgpMed                *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed                     `path:"bgp-med" module:"nokia-conf"`
	BgpTunnelMetric       *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric            `path:"bgp-tunnel-metric" module:"nokia-conf"`
	Community             *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community                  `path:"community" module:"nokia-conf" yangPresence:"true"`
	CreateMplsTunnel      *bool                                                                                                   `path:"create-mpls-tunnel" module:"nokia-conf"`
	CreateUdpTunnel       *bool                                                                                                   `path:"create-udp-tunnel" module:"nokia-conf"`
	Damping               NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Damping_Union               `path:"damping" module:"nokia-conf"`
	DestClass             *uint32                                                                                                 `path:"dest-class" module:"nokia-conf"`
	EgressStatistics      *bool                                                                                                   `path:"egress-statistics" module:"nokia-conf"`
	FlexAlgo              NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_FlexAlgo_Union              `path:"flex-algo" module:"nokia-conf"`
	ForwardingClass       *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass            `path:"forwarding-class" module:"nokia-conf"`
	IngressStatistics     *bool                                                                                                   `path:"ingress-statistics" module:"nokia-conf"`
	InstallBackupPath     *bool                                                                                                   `path:"install-backup-path" module:"nokia-conf"`
	LocalPreference       NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_LocalPreference_Union       `path:"local-preference" module:"nokia-conf"`
	Metric                *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric                     `path:"metric" module:"nokia-conf"`
	MulticastRedirection  *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection       `path:"multicast-redirection" module:"nokia-conf"`
	NatPolicy             *string                                                                                                 `path:"nat-policy" module:"nokia-conf"`
	NextHop               NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_NextHop_Union               `path:"next-hop" module:"nokia-conf"`
	Origin                NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Origin_Union                `path:"origin" module:"nokia-conf"`
	OriginValidationState NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_OriginValidationState_Union `path:"origin-validation-state" module:"nokia-conf"`
	Preference            NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Preference_Union            `path:"preference" module:"nokia-conf"`
	ResolveStatic         *bool                                                                                                   `path:"resolve-static" module:"nokia-conf"`
	RouteTableInstall     *bool                                                                                                   `path:"route-table-install" module:"nokia-conf"`
	SourceClass           *uint32                                                                                                 `path:"source-class" module:"nokia-conf"`
	SrLabelIndex          *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex               `path:"sr-label-index" module:"nokia-conf"`
	SrMaintenancePolicy   *string                                                                                                 `path:"sr-maintenance-policy" module:"nokia-conf"`
	StickyEcmp            *bool                                                                                                   `path:"sticky-ecmp" module:"nokia-conf"`
	Tag                   NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Tag_Union                   `path:"tag" module:"nokia-conf"`
	Type                  NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Type_Union                  `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) IsYANGGoStruct() {
}

// GetOrCreateAigpMetric retrieves the value of the AigpMetric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetOrCreateAigpMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric {
	if t.AigpMetric != nil {
		return t.AigpMetric
	}
	t.AigpMetric = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric{}
	return t.AigpMetric
}

// GetOrCreateAsPath retrieves the value of the AsPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetOrCreateAsPath() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPath {
	if t.AsPath != nil {
		return t.AsPath
	}
	t.AsPath = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPath{}
	return t.AsPath
}

// GetOrCreateAsPathPrepend retrieves the value of the AsPathPrepend field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetOrCreateAsPathPrepend() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend {
	if t.AsPathPrepend != nil {
		return t.AsPathPrepend
	}
	t.AsPathPrepend = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend{}
	return t.AsPathPrepend
}

// GetOrCreateBgpMed retrieves the value of the BgpMed field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetOrCreateBgpMed() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed {
	if t.BgpMed != nil {
		return t.BgpMed
	}
	t.BgpMed = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed{}
	return t.BgpMed
}

// GetOrCreateBgpTunnelMetric retrieves the value of the BgpTunnelMetric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetOrCreateBgpTunnelMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric {
	if t.BgpTunnelMetric != nil {
		return t.BgpTunnelMetric
	}
	t.BgpTunnelMetric = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric{}
	return t.BgpTunnelMetric
}

// GetOrCreateCommunity retrieves the value of the Community field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetOrCreateCommunity() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community {
	if t.Community != nil {
		return t.Community
	}
	t.Community = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community{}
	return t.Community
}

// GetOrCreateForwardingClass retrieves the value of the ForwardingClass field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetOrCreateForwardingClass() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass {
	if t.ForwardingClass != nil {
		return t.ForwardingClass
	}
	t.ForwardingClass = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass{}
	return t.ForwardingClass
}

// GetOrCreateMetric retrieves the value of the Metric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetOrCreateMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric {
	if t.Metric != nil {
		return t.Metric
	}
	t.Metric = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric{}
	return t.Metric
}

// GetOrCreateMulticastRedirection retrieves the value of the MulticastRedirection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetOrCreateMulticastRedirection() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection {
	if t.MulticastRedirection != nil {
		return t.MulticastRedirection
	}
	t.MulticastRedirection = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection{}
	return t.MulticastRedirection
}

// GetOrCreateSrLabelIndex retrieves the value of the SrLabelIndex field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetOrCreateSrLabelIndex() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex {
	if t.SrLabelIndex != nil {
		return t.SrLabelIndex
	}
	t.SrLabelIndex = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex{}
	return t.SrLabelIndex
}

// GetAigpMetric returns the value of the AigpMetric struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action. If the receiver or the field AigpMetric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetAigpMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric {
	if t != nil && t.AigpMetric != nil {
		return t.AigpMetric
	}
	return nil
}

// GetAsPath returns the value of the AsPath struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action. If the receiver or the field AsPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetAsPath() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPath {
	if t != nil && t.AsPath != nil {
		return t.AsPath
	}
	return nil
}

// GetAsPathPrepend returns the value of the AsPathPrepend struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action. If the receiver or the field AsPathPrepend is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetAsPathPrepend() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend {
	if t != nil && t.AsPathPrepend != nil {
		return t.AsPathPrepend
	}
	return nil
}

// GetBgpMed returns the value of the BgpMed struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action. If the receiver or the field BgpMed is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetBgpMed() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed {
	if t != nil && t.BgpMed != nil {
		return t.BgpMed
	}
	return nil
}

// GetBgpTunnelMetric returns the value of the BgpTunnelMetric struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action. If the receiver or the field BgpTunnelMetric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetBgpTunnelMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric {
	if t != nil && t.BgpTunnelMetric != nil {
		return t.BgpTunnelMetric
	}
	return nil
}

// GetCommunity returns the value of the Community struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action. If the receiver or the field Community is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetCommunity() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community {
	if t != nil && t.Community != nil {
		return t.Community
	}
	return nil
}

// GetForwardingClass returns the value of the ForwardingClass struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action. If the receiver or the field ForwardingClass is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetForwardingClass() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass {
	if t != nil && t.ForwardingClass != nil {
		return t.ForwardingClass
	}
	return nil
}

// GetMetric returns the value of the Metric struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action. If the receiver or the field Metric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric {
	if t != nil && t.Metric != nil {
		return t.Metric
	}
	return nil
}

// GetMulticastRedirection returns the value of the MulticastRedirection struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action. If the receiver or the field MulticastRedirection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetMulticastRedirection() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection {
	if t != nil && t.MulticastRedirection != nil {
		return t.MulticastRedirection
	}
	return nil
}

// GetSrLabelIndex returns the value of the SrLabelIndex struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action. If the receiver or the field SrLabelIndex is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetSrLabelIndex() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex {
	if t != nil && t.SrLabelIndex != nil {
		return t.SrLabelIndex
	}
	return nil
}

// GetActionType retrieves the value of the leaf ActionType from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActionType is set, it can
// safely use t.GetActionType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActionType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetActionType() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ActionType {
	if t == nil || t.ActionType == 0 {
		return 0
	}
	return t.ActionType
}

// GetAddPathsSendLimit retrieves the value of the leaf AddPathsSendLimit from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddPathsSendLimit is set, it can
// safely use t.GetAddPathsSendLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddPathsSendLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetAddPathsSendLimit() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AddPathsSendLimit_Union {
	if t == nil || t.AddPathsSendLimit == nil {
		return nil
	}
	return t.AddPathsSendLimit
}

// GetAdminTagPolicy retrieves the value of the leaf AdminTagPolicy from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminTagPolicy is set, it can
// safely use t.GetAdminTagPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminTagPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetAdminTagPolicy() string {
	if t == nil || t.AdminTagPolicy == nil {
		return ""
	}
	return *t.AdminTagPolicy
}

// GetAdvertiseLabel retrieves the value of the leaf AdvertiseLabel from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseLabel is set, it can
// safely use t.GetAdvertiseLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetAdvertiseLabel() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AdvertiseLabel {
	if t == nil || t.AdvertiseLabel == 0 {
		return 0
	}
	return t.AdvertiseLabel
}

// GetBgpHighPriority retrieves the value of the leaf BgpHighPriority from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpHighPriority is set, it can
// safely use t.GetBgpHighPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpHighPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetBgpHighPriority() bool {
	if t == nil || t.BgpHighPriority == nil {
		return false
	}
	return *t.BgpHighPriority
}

// GetBgpLeak retrieves the value of the leaf BgpLeak from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLeak is set, it can
// safely use t.GetBgpLeak() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLeak == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetBgpLeak() bool {
	if t == nil || t.BgpLeak == nil {
		return false
	}
	return *t.BgpLeak
}

// GetCreateMplsTunnel retrieves the value of the leaf CreateMplsTunnel from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreateMplsTunnel is set, it can
// safely use t.GetCreateMplsTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreateMplsTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetCreateMplsTunnel() bool {
	if t == nil || t.CreateMplsTunnel == nil {
		return false
	}
	return *t.CreateMplsTunnel
}

// GetCreateUdpTunnel retrieves the value of the leaf CreateUdpTunnel from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreateUdpTunnel is set, it can
// safely use t.GetCreateUdpTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreateUdpTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetCreateUdpTunnel() bool {
	if t == nil || t.CreateUdpTunnel == nil {
		return false
	}
	return *t.CreateUdpTunnel
}

// GetDamping retrieves the value of the leaf Damping from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Damping is set, it can
// safely use t.GetDamping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Damping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetDamping() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Damping_Union {
	if t == nil || t.Damping == nil {
		return nil
	}
	return t.Damping
}

// GetDestClass retrieves the value of the leaf DestClass from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestClass is set, it can
// safely use t.GetDestClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetDestClass() uint32 {
	if t == nil || t.DestClass == nil {
		return 0
	}
	return *t.DestClass
}

// GetEgressStatistics retrieves the value of the leaf EgressStatistics from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressStatistics is set, it can
// safely use t.GetEgressStatistics() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressStatistics == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetEgressStatistics() bool {
	if t == nil || t.EgressStatistics == nil {
		return false
	}
	return *t.EgressStatistics
}

// GetFlexAlgo retrieves the value of the leaf FlexAlgo from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlexAlgo is set, it can
// safely use t.GetFlexAlgo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlexAlgo == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetFlexAlgo() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_FlexAlgo_Union {
	if t == nil || t.FlexAlgo == nil {
		return nil
	}
	return t.FlexAlgo
}

// GetIngressStatistics retrieves the value of the leaf IngressStatistics from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressStatistics is set, it can
// safely use t.GetIngressStatistics() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressStatistics == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetIngressStatistics() bool {
	if t == nil || t.IngressStatistics == nil {
		return false
	}
	return *t.IngressStatistics
}

// GetInstallBackupPath retrieves the value of the leaf InstallBackupPath from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallBackupPath is set, it can
// safely use t.GetInstallBackupPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallBackupPath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetInstallBackupPath() bool {
	if t == nil || t.InstallBackupPath == nil {
		return false
	}
	return *t.InstallBackupPath
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetLocalPreference() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_LocalPreference_Union {
	if t == nil || t.LocalPreference == nil {
		return nil
	}
	return t.LocalPreference
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// GetNextHop retrieves the value of the leaf NextHop from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetNextHop() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_NextHop_Union {
	if t == nil || t.NextHop == nil {
		return nil
	}
	return t.NextHop
}

// GetOrigin retrieves the value of the leaf Origin from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetOrigin() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Origin_Union {
	if t == nil || t.Origin == nil {
		return nil
	}
	return t.Origin
}

// GetOriginValidationState retrieves the value of the leaf OriginValidationState from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginValidationState is set, it can
// safely use t.GetOriginValidationState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginValidationState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetOriginValidationState() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_OriginValidationState_Union {
	if t == nil || t.OriginValidationState == nil {
		return nil
	}
	return t.OriginValidationState
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetPreference() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Preference_Union {
	if t == nil || t.Preference == nil {
		return nil
	}
	return t.Preference
}

// GetResolveStatic retrieves the value of the leaf ResolveStatic from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResolveStatic is set, it can
// safely use t.GetResolveStatic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResolveStatic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetResolveStatic() bool {
	if t == nil || t.ResolveStatic == nil {
		return false
	}
	return *t.ResolveStatic
}

// GetRouteTableInstall retrieves the value of the leaf RouteTableInstall from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTableInstall is set, it can
// safely use t.GetRouteTableInstall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTableInstall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetRouteTableInstall() bool {
	if t == nil || t.RouteTableInstall == nil {
		return true
	}
	return *t.RouteTableInstall
}

// GetSourceClass retrieves the value of the leaf SourceClass from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceClass is set, it can
// safely use t.GetSourceClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetSourceClass() uint32 {
	if t == nil || t.SourceClass == nil {
		return 0
	}
	return *t.SourceClass
}

// GetSrMaintenancePolicy retrieves the value of the leaf SrMaintenancePolicy from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrMaintenancePolicy is set, it can
// safely use t.GetSrMaintenancePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrMaintenancePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetSrMaintenancePolicy() string {
	if t == nil || t.SrMaintenancePolicy == nil {
		return ""
	}
	return *t.SrMaintenancePolicy
}

// GetStickyEcmp retrieves the value of the leaf StickyEcmp from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StickyEcmp is set, it can
// safely use t.GetStickyEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StickyEcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetStickyEcmp() bool {
	if t == nil || t.StickyEcmp == nil {
		return false
	}
	return *t.StickyEcmp
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetTag() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Tag_Union {
	if t == nil || t.Tag == nil {
		return nil
	}
	return t.Tag
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) GetType() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BgpHighPriority == nil {
		var v bool = false
		t.BgpHighPriority = &v
	}
	if t.BgpLeak == nil {
		var v bool = false
		t.BgpLeak = &v
	}
	if t.CreateMplsTunnel == nil {
		var v bool = false
		t.CreateMplsTunnel = &v
	}
	if t.CreateUdpTunnel == nil {
		var v bool = false
		t.CreateUdpTunnel = &v
	}
	if t.EgressStatistics == nil {
		var v bool = false
		t.EgressStatistics = &v
	}
	if t.IngressStatistics == nil {
		var v bool = false
		t.IngressStatistics = &v
	}
	if t.InstallBackupPath == nil {
		var v bool = false
		t.InstallBackupPath = &v
	}
	if t.ResolveStatic == nil {
		var v bool = false
		t.ResolveStatic = &v
	}
	if t.RouteTableInstall == nil {
		var v bool = true
		t.RouteTableInstall = &v
	}
	if t.StickyEcmp == nil {
		var v bool = false
		t.StickyEcmp = &v
	}
	t.AigpMetric.PopulateDefaults()
	t.AsPath.PopulateDefaults()
	t.AsPathPrepend.PopulateDefaults()
	t.BgpMed.PopulateDefaults()
	t.BgpTunnelMetric.PopulateDefaults()
	t.Community.PopulateDefaults()
	t.ForwardingClass.PopulateDefaults()
	t.Metric.PopulateDefaults()
	t.MulticastRedirection.PopulateDefaults()
	t.SrLabelIndex.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/action/aigp-metric YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric struct {
	Add NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric_Add_Union `path:"add" module:"nokia-conf"`
	Set NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric_Set_Union `path:"set" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric) IsYANGGoStruct() {
}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric) GetAdd() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric_Add_Union {
	if t == nil || t.Add == nil {
		return nil
	}
	return t.Add
}

// GetSet retrieves the value of the leaf Set from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric) GetSet() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric_Set_Union {
	if t == nil || t.Set == nil {
		return nil
	}
	return t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPath represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/action/as-path YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPath struct {
	Add     *string `path:"add" module:"nokia-conf"`
	Replace *string `path:"replace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPath) IsYANGGoStruct() {
}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPath) GetAdd() string {
	if t == nil || t.Add == nil {
		return ""
	}
	return *t.Add
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPath) GetReplace() string {
	if t == nil || t.Replace == nil {
		return ""
	}
	return *t.Replace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPath.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/action/as-path-prepend YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend struct {
	AsPath NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend_AsPath_Union `path:"as-path" module:"nokia-conf"`
	Repeat NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend_Repeat_Union `path:"repeat" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend) IsYANGGoStruct() {
}

// GetAsPath retrieves the value of the leaf AsPath from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPath is set, it can
// safely use t.GetAsPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend) GetAsPath() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend_AsPath_Union {
	if t == nil || t.AsPath == nil {
		return nil
	}
	return t.AsPath
}

// GetRepeat retrieves the value of the leaf Repeat from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Repeat is set, it can
// safely use t.GetRepeat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Repeat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend) GetRepeat() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend_Repeat_Union {
	if t == nil || t.Repeat == nil {
		return UnionInt32(1)
	}
	return t.Repeat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Repeat == nil {
		t.Repeat = UnionInt32(1)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/action/bgp-med YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed struct {
	Adjust *string                                                                                      `path:"adjust" module:"nokia-conf"`
	Set    NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed_Set_Union `path:"set" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed) IsYANGGoStruct() {
}

// GetAdjust retrieves the value of the leaf Adjust from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Adjust is set, it can
// safely use t.GetAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Adjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed) GetAdjust() string {
	if t == nil || t.Adjust == nil {
		return ""
	}
	return *t.Adjust
}

// GetSet retrieves the value of the leaf Set from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed) GetSet() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed_Set_Union {
	if t == nil || t.Set == nil {
		return nil
	}
	return t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpMed) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/action/bgp-tunnel-metric YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric struct {
	PreferAigp *bool                                                                                                   `path:"prefer-aigp" module:"nokia-conf"`
	Value      NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric) IsYANGGoStruct() {
}

// GetPreferAigp retrieves the value of the leaf PreferAigp from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferAigp is set, it can
// safely use t.GetPreferAigp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferAigp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric) GetPreferAigp() bool {
	if t == nil || t.PreferAigp == nil {
		return false
	}
	return *t.PreferAigp
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric) GetValue() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferAigp == nil {
		var v bool = false
		t.PreferAigp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/action/community YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community struct {
	Add     []string `path:"add" module:"nokia-conf"`
	Remove  []string `path:"remove" module:"nokia-conf"`
	Replace []string `path:"replace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community) IsYANGGoStruct() {
}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community) GetAdd() []string {
	if t == nil || t.Add == nil {
		return nil
	}
	return t.Add
}

// GetRemove retrieves the value of the leaf Remove from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Remove is set, it can
// safely use t.GetRemove() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Remove == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community) GetRemove() []string {
	if t == nil || t.Remove == nil {
		return nil
	}
	return t.Remove
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community) GetReplace() []string {
	if t == nil || t.Replace == nil {
		return nil
	}
	return t.Replace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Community) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/action/forwarding-class YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass struct {
	Fc       E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass_Fc       `path:"fc" module:"nokia-conf"`
	Priority E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass) IsYANGGoStruct() {
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass) GetFc() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass_Fc {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass) GetPriority() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass_Priority {
	if t == nil || t.Priority == 0 {
		return 0
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/action/metric YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric struct {
	Add      NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric_Add_Union      `path:"add" module:"nokia-conf"`
	Set      NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric_Set_Union      `path:"set" module:"nokia-conf"`
	Subtract NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric_Subtract_Union `path:"subtract" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric) IsYANGGoStruct() {
}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric) GetAdd() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric_Add_Union {
	if t == nil || t.Add == nil {
		return nil
	}
	return t.Add
}

// GetSet retrieves the value of the leaf Set from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric) GetSet() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric_Set_Union {
	if t == nil || t.Set == nil {
		return nil
	}
	return t.Set
}

// GetSubtract retrieves the value of the leaf Subtract from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subtract is set, it can
// safely use t.GetSubtract() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subtract == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric) GetSubtract() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric_Subtract_Union {
	if t == nil || t.Subtract == nil {
		return nil
	}
	return t.Subtract
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_Metric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/action/multicast-redirection YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection struct {
	FwdService *string `path:"fwd-service" module:"nokia-conf"`
	IpIntName  *string `path:"ip-int-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection) IsYANGGoStruct() {
}

// GetFwdService retrieves the value of the leaf FwdService from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FwdService is set, it can
// safely use t.GetFwdService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FwdService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection) GetFwdService() string {
	if t == nil || t.FwdService == nil {
		return "Base"
	}
	return *t.FwdService
}

// GetIpIntName retrieves the value of the leaf IpIntName from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpIntName is set, it can
// safely use t.GetIpIntName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpIntName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection) GetIpIntName() string {
	if t == nil || t.IpIntName == nil {
		return ""
	}
	return *t.IpIntName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FwdService == nil {
		var v string = "Base"
		t.FwdService = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/action/sr-label-index YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex struct {
	PreferIgp *bool                                                                                                `path:"prefer-igp" module:"nokia-conf"`
	Value     NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex) IsYANGGoStruct() {
}

// GetPreferIgp retrieves the value of the leaf PreferIgp from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferIgp is set, it can
// safely use t.GetPreferIgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferIgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex) GetPreferIgp() bool {
	if t == nil || t.PreferIgp == nil {
		return false
	}
	return *t.PreferIgp
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex) GetValue() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferIgp == nil {
		var v bool = false
		t.PreferIgp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_ConditionalExpression represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/conditional-expression YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_ConditionalExpression struct {
	RouteExists *string `path:"route-exists" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_ConditionalExpression implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_ConditionalExpression) IsYANGGoStruct() {
}

// GetRouteExists retrieves the value of the leaf RouteExists from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_ConditionalExpression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteExists is set, it can
// safely use t.GetRouteExists() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteExists == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_ConditionalExpression) GetRouteExists() string {
	if t == nil || t.RouteExists == nil {
		return ""
	}
	return *t.RouteExists
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_ConditionalExpression
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_ConditionalExpression) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_ConditionalExpression) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_ConditionalExpression"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_ConditionalExpression) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_ConditionalExpression) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_ConditionalExpression.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_ConditionalExpression) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/from YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From struct {
	AggregateContributor  *bool                                                                                             `path:"aggregate-contributor" module:"nokia-conf"`
	Area                  *string                                                                                           `path:"area" module:"nokia-conf"`
	AsPath                *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath                 `path:"as-path" module:"nokia-conf"`
	ClusterId             *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_ClusterId              `path:"cluster-id" module:"nokia-conf"`
	Color                 *int64                                                                                            `path:"color" module:"nokia-conf"`
	Community             *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community              `path:"community" module:"nokia-conf"`
	Distinguisher         *int64                                                                                            `path:"distinguisher" module:"nokia-conf"`
	Endpoint              *string                                                                                           `path:"endpoint" module:"nokia-conf"`
	EvpnType              E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_EvpnType              `path:"evpn-type" module:"nokia-conf"`
	External              *bool                                                                                             `path:"external" module:"nokia-conf"`
	Family                []E_NokiaTypesBgp_IpFamilyIdentifier                                                              `path:"family" module:"nokia-conf"`
	Flowspec              *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Flowspec               `path:"flowspec" module:"nokia-conf"`
	GroupAddress          *string                                                                                           `path:"group-address" module:"nokia-conf"`
	HostIp                *string                                                                                           `path:"host-ip" module:"nokia-conf"`
	Interface             []string                                                                                          `path:"interface" module:"nokia-conf"`
	InterfaceSubnets      *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets       `path:"interface-subnets" module:"nokia-conf"`
	Level                 *int32                                                                                            `path:"level" module:"nokia-conf"`
	LocalPreference       *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference        `path:"local-preference" module:"nokia-conf"`
	Metric                *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric                 `path:"metric" module:"nokia-conf"`
	MvpnType              E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_MvpnType              `path:"mvpn-type" module:"nokia-conf"`
	Neighbor              *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Neighbor               `path:"neighbor" module:"nokia-conf"`
	NextHop               *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_NextHop                `path:"next-hop" module:"nokia-conf"`
	Origin                E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Origin                `path:"origin" module:"nokia-conf"`
	OriginValidationState E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_OriginValidationState `path:"origin-validation-state" module:"nokia-conf"`
	OspfType              *int32                                                                                            `path:"ospf-type" module:"nokia-conf"`
	PathType              E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PathType              `path:"path-type" module:"nokia-conf"`
	Policy                *string                                                                                           `path:"policy" module:"nokia-conf"`
	PolicyVariables       *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables        `path:"policy-variables" module:"nokia-conf"`
	PrefixList            []string                                                                                          `path:"prefix-list" module:"nokia-conf"`
	Protocol              *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol               `path:"protocol" module:"nokia-conf"`
	SourceAddress         *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_SourceAddress          `path:"source-address" module:"nokia-conf"`
	State                 E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_State                 `path:"state" module:"nokia-conf"`
	Tag                   NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Tag_Union               `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) IsYANGGoStruct() {}

// GetOrCreateAsPath retrieves the value of the AsPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateAsPath() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath {
	if t.AsPath != nil {
		return t.AsPath
	}
	t.AsPath = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath{}
	return t.AsPath
}

// GetOrCreateClusterId retrieves the value of the ClusterId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateClusterId() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_ClusterId {
	if t.ClusterId != nil {
		return t.ClusterId
	}
	t.ClusterId = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_ClusterId{}
	return t.ClusterId
}

// GetOrCreateCommunity retrieves the value of the Community field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateCommunity() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community {
	if t.Community != nil {
		return t.Community
	}
	t.Community = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community{}
	return t.Community
}

// GetOrCreateFlowspec retrieves the value of the Flowspec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateFlowspec() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Flowspec {
	if t.Flowspec != nil {
		return t.Flowspec
	}
	t.Flowspec = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Flowspec{}
	return t.Flowspec
}

// GetOrCreateInterfaceSubnets retrieves the value of the InterfaceSubnets field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateInterfaceSubnets() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets {
	if t.InterfaceSubnets != nil {
		return t.InterfaceSubnets
	}
	t.InterfaceSubnets = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets{}
	return t.InterfaceSubnets
}

// GetOrCreateLocalPreference retrieves the value of the LocalPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateLocalPreference() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference {
	if t.LocalPreference != nil {
		return t.LocalPreference
	}
	t.LocalPreference = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference{}
	return t.LocalPreference
}

// GetOrCreateMetric retrieves the value of the Metric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric {
	if t.Metric != nil {
		return t.Metric
	}
	t.Metric = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric{}
	return t.Metric
}

// GetOrCreateNeighbor retrieves the value of the Neighbor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateNeighbor() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Neighbor {
	if t.Neighbor != nil {
		return t.Neighbor
	}
	t.Neighbor = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Neighbor{}
	return t.Neighbor
}

// GetOrCreateNextHop retrieves the value of the NextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateNextHop() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_NextHop {
	if t.NextHop != nil {
		return t.NextHop
	}
	t.NextHop = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_NextHop{}
	return t.NextHop
}

// GetOrCreatePolicyVariables retrieves the value of the PolicyVariables field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetOrCreatePolicyVariables() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables {
	if t.PolicyVariables != nil {
		return t.PolicyVariables
	}
	t.PolicyVariables = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables{}
	return t.PolicyVariables
}

// GetOrCreateProtocol retrieves the value of the Protocol field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateProtocol() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol {
	if t.Protocol != nil {
		return t.Protocol
	}
	t.Protocol = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol{}
	return t.Protocol
}

// GetOrCreateSourceAddress retrieves the value of the SourceAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateSourceAddress() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_SourceAddress {
	if t.SourceAddress != nil {
		return t.SourceAddress
	}
	t.SourceAddress = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_SourceAddress{}
	return t.SourceAddress
}

// GetAsPath returns the value of the AsPath struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field AsPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetAsPath() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath {
	if t != nil && t.AsPath != nil {
		return t.AsPath
	}
	return nil
}

// GetClusterId returns the value of the ClusterId struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field ClusterId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetClusterId() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_ClusterId {
	if t != nil && t.ClusterId != nil {
		return t.ClusterId
	}
	return nil
}

// GetCommunity returns the value of the Community struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field Community is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetCommunity() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community {
	if t != nil && t.Community != nil {
		return t.Community
	}
	return nil
}

// GetFlowspec returns the value of the Flowspec struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field Flowspec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetFlowspec() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Flowspec {
	if t != nil && t.Flowspec != nil {
		return t.Flowspec
	}
	return nil
}

// GetInterfaceSubnets returns the value of the InterfaceSubnets struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field InterfaceSubnets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetInterfaceSubnets() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets {
	if t != nil && t.InterfaceSubnets != nil {
		return t.InterfaceSubnets
	}
	return nil
}

// GetLocalPreference returns the value of the LocalPreference struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field LocalPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetLocalPreference() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference {
	if t != nil && t.LocalPreference != nil {
		return t.LocalPreference
	}
	return nil
}

// GetMetric returns the value of the Metric struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field Metric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric {
	if t != nil && t.Metric != nil {
		return t.Metric
	}
	return nil
}

// GetNeighbor returns the value of the Neighbor struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field Neighbor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetNeighbor() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Neighbor {
	if t != nil && t.Neighbor != nil {
		return t.Neighbor
	}
	return nil
}

// GetNextHop returns the value of the NextHop struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field NextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetNextHop() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_NextHop {
	if t != nil && t.NextHop != nil {
		return t.NextHop
	}
	return nil
}

// GetPolicyVariables returns the value of the PolicyVariables struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field PolicyVariables is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetPolicyVariables() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables {
	if t != nil && t.PolicyVariables != nil {
		return t.PolicyVariables
	}
	return nil
}

// GetProtocol returns the value of the Protocol struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field Protocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetProtocol() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol {
	if t != nil && t.Protocol != nil {
		return t.Protocol
	}
	return nil
}

// GetSourceAddress returns the value of the SourceAddress struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field SourceAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetSourceAddress() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_SourceAddress {
	if t != nil && t.SourceAddress != nil {
		return t.SourceAddress
	}
	return nil
}

// GetAggregateContributor retrieves the value of the leaf AggregateContributor from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregateContributor is set, it can
// safely use t.GetAggregateContributor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregateContributor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetAggregateContributor() bool {
	if t == nil || t.AggregateContributor == nil {
		return false
	}
	return *t.AggregateContributor
}

// GetArea retrieves the value of the leaf Area from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Area is set, it can
// safely use t.GetArea() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Area == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetArea() string {
	if t == nil || t.Area == nil {
		return ""
	}
	return *t.Area
}

// GetColor retrieves the value of the leaf Color from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetColor() int64 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetDistinguisher retrieves the value of the leaf Distinguisher from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Distinguisher is set, it can
// safely use t.GetDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Distinguisher == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetDistinguisher() int64 {
	if t == nil || t.Distinguisher == nil {
		return 0
	}
	return *t.Distinguisher
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetEvpnType retrieves the value of the leaf EvpnType from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EvpnType is set, it can
// safely use t.GetEvpnType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EvpnType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetEvpnType() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_EvpnType {
	if t == nil || t.EvpnType == 0 {
		return 0
	}
	return t.EvpnType
}

// GetExternal retrieves the value of the leaf External from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if External is set, it can
// safely use t.GetExternal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.External == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetExternal() bool {
	if t == nil || t.External == nil {
		return false
	}
	return *t.External
}

// GetFamily retrieves the value of the leaf Family from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Family is set, it can
// safely use t.GetFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Family == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetFamily() []E_NokiaTypesBgp_IpFamilyIdentifier {
	if t == nil || t.Family == nil {
		return nil
	}
	return t.Family
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetHostIp retrieves the value of the leaf HostIp from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostIp is set, it can
// safely use t.GetHostIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetHostIp() string {
	if t == nil || t.HostIp == nil {
		return ""
	}
	return *t.HostIp
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetInterface() []string {
	if t == nil || t.Interface == nil {
		return nil
	}
	return t.Interface
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetMvpnType retrieves the value of the leaf MvpnType from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnType is set, it can
// safely use t.GetMvpnType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetMvpnType() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_MvpnType {
	if t == nil || t.MvpnType == 0 {
		return 0
	}
	return t.MvpnType
}

// GetOrigin retrieves the value of the leaf Origin from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetOrigin() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Origin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetOriginValidationState retrieves the value of the leaf OriginValidationState from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginValidationState is set, it can
// safely use t.GetOriginValidationState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginValidationState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetOriginValidationState() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_OriginValidationState {
	if t == nil || t.OriginValidationState == 0 {
		return 0
	}
	return t.OriginValidationState
}

// GetOspfType retrieves the value of the leaf OspfType from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OspfType is set, it can
// safely use t.GetOspfType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OspfType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetOspfType() int32 {
	if t == nil || t.OspfType == nil {
		return 0
	}
	return *t.OspfType
}

// GetPathType retrieves the value of the leaf PathType from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathType is set, it can
// safely use t.GetPathType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetPathType() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PathType {
	if t == nil || t.PathType == 0 {
		return 0
	}
	return t.PathType
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetPrefixList() []string {
	if t == nil || t.PrefixList == nil {
		return nil
	}
	return t.PrefixList
}

// GetState retrieves the value of the leaf State from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if State is set, it can
// safely use t.GetState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.State == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetState() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_State {
	if t == nil || t.State == 0 {
		return 0
	}
	return t.State
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) GetTag() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Tag_Union {
	if t == nil || t.Tag == nil {
		return nil
	}
	return t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AggregateContributor == nil {
		var v bool = false
		t.AggregateContributor = &v
	}
	if t.External == nil {
		var v bool = false
		t.External = &v
	}
	t.AsPath.PopulateDefaults()
	t.ClusterId.PopulateDefaults()
	t.Community.PopulateDefaults()
	t.Flowspec.PopulateDefaults()
	t.InterfaceSubnets.PopulateDefaults()
	t.LocalPreference.PopulateDefaults()
	t.Metric.PopulateDefaults()
	t.Neighbor.PopulateDefaults()
	t.NextHop.PopulateDefaults()
	t.PolicyVariables.PopulateDefaults()
	t.Protocol.PopulateDefaults()
	t.SourceAddress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/from/as-path YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath struct {
	Group  *string                                                                                  `path:"group" module:"nokia-conf"`
	Length *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length `path:"length" module:"nokia-conf"`
	Name   *string                                                                                  `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath) IsYANGGoStruct() {
}

// GetOrCreateLength retrieves the value of the Length field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath) GetOrCreateLength() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length {
	if t.Length != nil {
		return t.Length
	}
	t.Length = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length{}
	return t.Length
}

// GetLength returns the value of the Length struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath. If the receiver or the field Length is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath) GetLength() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length {
	if t != nil && t.Length != nil {
		return t.Length
	}
	return nil
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Length.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/from/as-path/length YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length struct {
	Qualifier E_NokiaTypesPolicy_PolicyQualifier                                                                  `path:"qualifier" module:"nokia-conf"`
	Unique    *bool                                                                                               `path:"unique" module:"nokia-conf"`
	Value     NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length) IsYANGGoStruct() {
}

// GetQualifier retrieves the value of the leaf Qualifier from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qualifier is set, it can
// safely use t.GetQualifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qualifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length) GetQualifier() E_NokiaTypesPolicy_PolicyQualifier {
	if t == nil || t.Qualifier == 0 {
		return NokiaTypesPolicy_PolicyQualifier_equal
	}
	return t.Qualifier
}

// GetUnique retrieves the value of the leaf Unique from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Unique is set, it can
// safely use t.GetUnique() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Unique == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length) GetUnique() bool {
	if t == nil || t.Unique == nil {
		return false
	}
	return *t.Unique
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length) GetValue() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Qualifier == 0 {
		t.Qualifier = NokiaTypesPolicy_PolicyQualifier_equal
	}
	if t.Unique == nil {
		var v bool = false
		t.Unique = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_ClusterId represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/from/cluster-id YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_ClusterId struct {
	IpAddress       []string `path:"ip-address" module:"nokia-conf"`
	NoneClusterList *bool    `path:"none-cluster-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_ClusterId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_ClusterId) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_ClusterId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_ClusterId) GetIpAddress() []string {
	if t == nil || t.IpAddress == nil {
		return nil
	}
	return t.IpAddress
}

// GetNoneClusterList retrieves the value of the leaf NoneClusterList from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_ClusterId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NoneClusterList is set, it can
// safely use t.GetNoneClusterList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NoneClusterList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_ClusterId) GetNoneClusterList() bool {
	if t == nil || t.NoneClusterList == nil {
		return false
	}
	return *t.NoneClusterList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_ClusterId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_ClusterId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NoneClusterList == nil {
		var v bool = false
		t.NoneClusterList = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_ClusterId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_ClusterId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_ClusterId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_ClusterId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_ClusterId.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_ClusterId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/from/community YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community struct {
	Count      *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count `path:"count" module:"nokia-conf"`
	Expression *string                                                                                    `path:"expression" module:"nokia-conf"`
	Name       *string                                                                                    `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community) IsYANGGoStruct() {
}

// GetOrCreateCount retrieves the value of the Count field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community) GetOrCreateCount() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count {
	if t.Count != nil {
		return t.Count
	}
	t.Count = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count{}
	return t.Count
}

// GetCount returns the value of the Count struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community. If the receiver or the field Count is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community) GetCount() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count {
	if t != nil && t.Count != nil {
		return t.Count
	}
	return nil
}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Count.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/from/community/count YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count struct {
	Qualifier E_NokiaTypesPolicy_PolicyQualifier                                                                    `path:"qualifier" module:"nokia-conf"`
	Type      E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count_Type      `path:"type" module:"nokia-conf"`
	Value     NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count) IsYANGGoStruct() {
}

// GetQualifier retrieves the value of the leaf Qualifier from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qualifier is set, it can
// safely use t.GetQualifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qualifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count) GetQualifier() E_NokiaTypesPolicy_PolicyQualifier {
	if t == nil || t.Qualifier == 0 {
		return NokiaTypesPolicy_PolicyQualifier_equal
	}
	return t.Qualifier
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count) GetType() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count) GetValue() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Qualifier == 0 {
		t.Qualifier = NokiaTypesPolicy_PolicyQualifier_equal
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Community_Count) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Flowspec represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/from/flowspec YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Flowspec struct {
	Dest   *string `path:"dest" module:"nokia-conf"`
	Source *string `path:"source" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Flowspec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Flowspec) IsYANGGoStruct() {
}

// GetDest retrieves the value of the leaf Dest from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dest is set, it can
// safely use t.GetDest() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dest == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Flowspec) GetDest() string {
	if t == nil || t.Dest == nil {
		return ""
	}
	return *t.Dest
}

// GetSource retrieves the value of the leaf Source from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Flowspec) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Flowspec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Flowspec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Flowspec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Flowspec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Flowspec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Flowspec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Flowspec.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Flowspec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/from/interface-subnets YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets struct {
	IpIntName []string `path:"ip-int-name" module:"nokia-conf"`
	Service   *string  `path:"service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets) IsYANGGoStruct() {
}

// GetIpIntName retrieves the value of the leaf IpIntName from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpIntName is set, it can
// safely use t.GetIpIntName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpIntName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets) GetIpIntName() []string {
	if t == nil || t.IpIntName == nil {
		return nil
	}
	return t.IpIntName
}

// GetService retrieves the value of the leaf Service from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets) GetService() string {
	if t == nil || t.Service == nil {
		return "Base"
	}
	return *t.Service
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Service == nil {
		var v string = "Base"
		t.Service = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/from/local-preference YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference struct {
	Qualifier E_NokiaTypesPolicy_PolicyQualifier                                                                    `path:"qualifier" module:"nokia-conf"`
	Value     NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference) IsYANGGoStruct() {
}

// GetQualifier retrieves the value of the leaf Qualifier from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qualifier is set, it can
// safely use t.GetQualifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qualifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference) GetQualifier() E_NokiaTypesPolicy_PolicyQualifier {
	if t == nil || t.Qualifier == 0 {
		return NokiaTypesPolicy_PolicyQualifier_equal
	}
	return t.Qualifier
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference) GetValue() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Qualifier == 0 {
		t.Qualifier = NokiaTypesPolicy_PolicyQualifier_equal
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_LocalPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/from/metric YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric struct {
	Qualifier E_NokiaTypesPolicy_PolicyQualifier                                                           `path:"qualifier" module:"nokia-conf"`
	Value     NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric) IsYANGGoStruct() {
}

// GetQualifier retrieves the value of the leaf Qualifier from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qualifier is set, it can
// safely use t.GetQualifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qualifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric) GetQualifier() E_NokiaTypesPolicy_PolicyQualifier {
	if t == nil || t.Qualifier == 0 {
		return NokiaTypesPolicy_PolicyQualifier_equal
	}
	return t.Qualifier
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric) GetValue() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Qualifier == 0 {
		t.Qualifier = NokiaTypesPolicy_PolicyQualifier_equal
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Metric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Neighbor represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/from/neighbor YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Neighbor struct {
	IpAddress  *string `path:"ip-address" module:"nokia-conf"`
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Neighbor) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Neighbor) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Neighbor) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Neighbor.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_NextHop represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/from/next-hop YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_NextHop struct {
	IpAddress  *string `path:"ip-address" module:"nokia-conf"`
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_NextHop) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_NextHop) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_NextHop) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_NextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_NextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_NextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_NextHop.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_NextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/from/policy-variables YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables struct {
	Name map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) IsYANGGoStruct() {
}

// NewName creates a new entry in the Name list of the
// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) NewName(VariableName string) (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Name == nil {
		t.Name = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name)
	}

	key := VariableName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Name[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Name", key)
	}

	t.Name[key] = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name{
		VariableName: &VariableName,
	}

	return t.Name[key], nil
}

// RenameName renames an entry in the list Name within
// the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) RenameName(oldK, newK string) error {
	if _, ok := t.Name[newK]; ok {
		return fmt.Errorf("key %v already exists in Name", newK)
	}

	e, ok := t.Name[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Name", oldK)
	}
	e.VariableName = &newK

	t.Name[newK] = e
	delete(t.Name, oldK)
	return nil
}

// GetOrCreateName retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) GetOrCreateName(VariableName string) *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name {

	key := VariableName

	if v, ok := t.Name[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewName(VariableName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateName got unexpected error: %v", err))
	}
	return v
}

// GetName retrieves the value with the specified key from
// the Name map field of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) GetName(VariableName string) *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name {

	if t == nil {
		return nil
	}

	key := VariableName

	if lm, ok := t.Name[key]; ok {
		return lm
	}
	return nil
}

// DeleteName deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) DeleteName(VariableName string) {
	key := VariableName

	delete(t.Name, key)
}

// AppendName appends the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name struct to the
// list Name of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) AppendName(v *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) error {
	if v.VariableName == nil {
		return fmt.Errorf("invalid nil key received for VariableName")
	}

	key := *v.VariableName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Name == nil {
		t.Name = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name)
	}

	if _, ok := t.Name[key]; ok {
		return fmt.Errorf("duplicate key for list Name %v", key)
	}

	t.Name[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Name {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/from/policy-variables/name YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name struct {
	Address      *string  `path:"address" module:"nokia-conf"`
	Decimal      *float64 `path:"decimal" module:"nokia-conf"`
	Number       *uint64  `path:"number" module:"nokia-conf"`
	Value        *string  `path:"value" module:"nokia-conf"`
	VariableName *string  `path:"variable-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetDecimal retrieves the value of the leaf Decimal from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Decimal is set, it can
// safely use t.GetDecimal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Decimal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) GetDecimal() float64 {
	if t == nil || t.Decimal == nil {
		return 0.0
	}
	return *t.Decimal
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) GetNumber() uint64 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// GetVariableName retrieves the value of the leaf VariableName from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VariableName is set, it can
// safely use t.GetVariableName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VariableName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) GetVariableName() string {
	if t == nil || t.VariableName == nil {
		return ""
	}
	return *t.VariableName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VariableName == nil {
		return nil, fmt.Errorf("nil value for key VariableName")
	}

	return map[string]interface{}{
		"variable-name": *t.VariableName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/from/protocol YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol struct {
	Instance NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol_Instance_Union `path:"instance" module:"nokia-conf"`
	Name     []E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol_Name       `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol) IsYANGGoStruct() {
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol) GetInstance() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol_Instance_Union {
	if t == nil || t.Instance == nil {
		return UnionUint32(0)
	}
	return t.Instance
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol) GetName() []E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol_Name {
	if t == nil || t.Name == nil {
		return nil
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Instance == nil {
		t.Instance = UnionUint32(0)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_Protocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_SourceAddress represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/from/source-address YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_SourceAddress struct {
	IpAddress  *string `path:"ip-address" module:"nokia-conf"`
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_SourceAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_SourceAddress) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_SourceAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_SourceAddress) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_SourceAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_SourceAddress) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_SourceAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_SourceAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_SourceAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_SourceAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_SourceAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_SourceAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_SourceAddress.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_From_SourceAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/to YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To struct {
	Level      *int32                                                                            `path:"level" module:"nokia-conf"`
	Neighbor   *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Neighbor `path:"neighbor" module:"nokia-conf"`
	PrefixList []string                                                                          `path:"prefix-list" module:"nokia-conf"`
	Protocol   *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol `path:"protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To) IsYANGGoStruct() {}

// GetOrCreateNeighbor retrieves the value of the Neighbor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To) GetOrCreateNeighbor() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Neighbor {
	if t.Neighbor != nil {
		return t.Neighbor
	}
	t.Neighbor = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Neighbor{}
	return t.Neighbor
}

// GetOrCreateProtocol retrieves the value of the Protocol field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To) GetOrCreateProtocol() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol {
	if t.Protocol != nil {
		return t.Protocol
	}
	t.Protocol = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol{}
	return t.Protocol
}

// GetNeighbor returns the value of the Neighbor struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To. If the receiver or the field Neighbor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To) GetNeighbor() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Neighbor {
	if t != nil && t.Neighbor != nil {
		return t.Neighbor
	}
	return nil
}

// GetProtocol returns the value of the Protocol struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To. If the receiver or the field Protocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To) GetProtocol() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol {
	if t != nil && t.Protocol != nil {
		return t.Protocol
	}
	return nil
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To) GetPrefixList() []string {
	if t == nil || t.PrefixList == nil {
		return nil
	}
	return t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Neighbor.PopulateDefaults()
	t.Protocol.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Neighbor represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/to/neighbor YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Neighbor struct {
	IpAddress  *string `path:"ip-address" module:"nokia-conf"`
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Neighbor) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Neighbor) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Neighbor) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Neighbor.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/entry/to/protocol YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol struct {
	Instance NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol_Instance_Union `path:"instance" module:"nokia-conf"`
	Name     []E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol_Name       `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol) IsYANGGoStruct() {
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol) GetInstance() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol_Instance_Union {
	if t == nil || t.Instance == nil {
		return UnionUint32(0)
	}
	return t.Instance
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol) GetName() []E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol_Name {
	if t == nil || t.Name == nil {
		return nil
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Instance == nil {
		t.Instance = UnionUint32(0)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_Entry_To_Protocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry struct {
	Action                *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action                `path:"action" module:"nokia-conf" yangPresence:"true"`
	ConditionalExpression *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression `path:"conditional-expression" module:"nokia-conf" yangPresence:"true"`
	Description           *string                                                                                          `path:"description" module:"nokia-conf"`
	EntryName             *string                                                                                          `path:"entry-name" module:"nokia-conf"`
	From                  *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From                  `path:"from" module:"nokia-conf" yangPresence:"true"`
	To                    *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To                    `path:"to" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action{}
	return t.Action
}

// GetOrCreateConditionalExpression retrieves the value of the ConditionalExpression field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry) GetOrCreateConditionalExpression() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression {
	if t.ConditionalExpression != nil {
		return t.ConditionalExpression
	}
	t.ConditionalExpression = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression{}
	return t.ConditionalExpression
}

// GetOrCreateFrom retrieves the value of the From field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry) GetOrCreateFrom() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From {
	if t.From != nil {
		return t.From
	}
	t.From = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From{}
	return t.From
}

// GetOrCreateTo retrieves the value of the To field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry) GetOrCreateTo() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To {
	if t.To != nil {
		return t.To
	}
	t.To = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To{}
	return t.To
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry) GetAction() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetConditionalExpression returns the value of the ConditionalExpression struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry. If the receiver or the field ConditionalExpression is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry) GetConditionalExpression() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression {
	if t != nil && t.ConditionalExpression != nil {
		return t.ConditionalExpression
	}
	return nil
}

// GetFrom returns the value of the From struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry. If the receiver or the field From is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry) GetFrom() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From {
	if t != nil && t.From != nil {
		return t.From
	}
	return nil
}

// GetTo returns the value of the To struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry. If the receiver or the field To is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry) GetTo() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To {
	if t != nil && t.To != nil {
		return t.To
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryName retrieves the value of the leaf EntryName from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryName is set, it can
// safely use t.GetEntryName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry) GetEntryName() string {
	if t == nil || t.EntryName == nil {
		return ""
	}
	return *t.EntryName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.ConditionalExpression.PopulateDefaults()
	t.From.PopulateDefaults()
	t.To.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryName == nil {
		return nil, fmt.Errorf("nil value for key EntryName")
	}

	return map[string]interface{}{
		"entry-name": *t.EntryName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action struct {
	ActionType            E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ActionType                `path:"action-type" module:"nokia-conf"`
	AddPathsSendLimit     NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AddPathsSendLimit_Union     `path:"add-paths-send-limit" module:"nokia-conf"`
	AdminTagPolicy        *string                                                                                                      `path:"admin-tag-policy" module:"nokia-conf"`
	AdvertiseLabel        E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AdvertiseLabel            `path:"advertise-label" module:"nokia-conf"`
	AigpMetric            *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric                 `path:"aigp-metric" module:"nokia-conf"`
	AsPath                *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath                     `path:"as-path" module:"nokia-conf"`
	AsPathPrepend         *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend              `path:"as-path-prepend" module:"nokia-conf"`
	BgpHighPriority       *bool                                                                                                        `path:"bgp-high-priority" module:"nokia-conf"`
	BgpLeak               *bool                                                                                                        `path:"bgp-leak" module:"nokia-conf"`
	BgpMed                *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed                     `path:"bgp-med" module:"nokia-conf"`
	BgpTunnelMetric       *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric            `path:"bgp-tunnel-metric" module:"nokia-conf"`
	Community             *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community                  `path:"community" module:"nokia-conf" yangPresence:"true"`
	CreateMplsTunnel      *bool                                                                                                        `path:"create-mpls-tunnel" module:"nokia-conf"`
	CreateUdpTunnel       *bool                                                                                                        `path:"create-udp-tunnel" module:"nokia-conf"`
	Damping               NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Damping_Union               `path:"damping" module:"nokia-conf"`
	DestClass             *uint32                                                                                                      `path:"dest-class" module:"nokia-conf"`
	EgressStatistics      *bool                                                                                                        `path:"egress-statistics" module:"nokia-conf"`
	FlexAlgo              NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_FlexAlgo_Union              `path:"flex-algo" module:"nokia-conf"`
	ForwardingClass       *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass            `path:"forwarding-class" module:"nokia-conf"`
	IngressStatistics     *bool                                                                                                        `path:"ingress-statistics" module:"nokia-conf"`
	InstallBackupPath     *bool                                                                                                        `path:"install-backup-path" module:"nokia-conf"`
	LocalPreference       NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_LocalPreference_Union       `path:"local-preference" module:"nokia-conf"`
	Metric                *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric                     `path:"metric" module:"nokia-conf"`
	MulticastRedirection  *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection       `path:"multicast-redirection" module:"nokia-conf"`
	NatPolicy             *string                                                                                                      `path:"nat-policy" module:"nokia-conf"`
	NextHop               NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_NextHop_Union               `path:"next-hop" module:"nokia-conf"`
	Origin                NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Origin_Union                `path:"origin" module:"nokia-conf"`
	OriginValidationState NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_OriginValidationState_Union `path:"origin-validation-state" module:"nokia-conf"`
	Preference            NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Preference_Union            `path:"preference" module:"nokia-conf"`
	ResolveStatic         *bool                                                                                                        `path:"resolve-static" module:"nokia-conf"`
	RouteTableInstall     *bool                                                                                                        `path:"route-table-install" module:"nokia-conf"`
	SourceClass           *uint32                                                                                                      `path:"source-class" module:"nokia-conf"`
	SrLabelIndex          *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex               `path:"sr-label-index" module:"nokia-conf"`
	SrMaintenancePolicy   *string                                                                                                      `path:"sr-maintenance-policy" module:"nokia-conf"`
	StickyEcmp            *bool                                                                                                        `path:"sticky-ecmp" module:"nokia-conf"`
	Tag                   NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Tag_Union                   `path:"tag" module:"nokia-conf"`
	Type                  NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Type_Union                  `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) IsYANGGoStruct() {
}

// GetOrCreateAigpMetric retrieves the value of the AigpMetric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrCreateAigpMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric {
	if t.AigpMetric != nil {
		return t.AigpMetric
	}
	t.AigpMetric = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric{}
	return t.AigpMetric
}

// GetOrCreateAsPath retrieves the value of the AsPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrCreateAsPath() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath {
	if t.AsPath != nil {
		return t.AsPath
	}
	t.AsPath = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath{}
	return t.AsPath
}

// GetOrCreateAsPathPrepend retrieves the value of the AsPathPrepend field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrCreateAsPathPrepend() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend {
	if t.AsPathPrepend != nil {
		return t.AsPathPrepend
	}
	t.AsPathPrepend = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend{}
	return t.AsPathPrepend
}

// GetOrCreateBgpMed retrieves the value of the BgpMed field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrCreateBgpMed() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed {
	if t.BgpMed != nil {
		return t.BgpMed
	}
	t.BgpMed = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed{}
	return t.BgpMed
}

// GetOrCreateBgpTunnelMetric retrieves the value of the BgpTunnelMetric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrCreateBgpTunnelMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric {
	if t.BgpTunnelMetric != nil {
		return t.BgpTunnelMetric
	}
	t.BgpTunnelMetric = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric{}
	return t.BgpTunnelMetric
}

// GetOrCreateCommunity retrieves the value of the Community field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrCreateCommunity() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community {
	if t.Community != nil {
		return t.Community
	}
	t.Community = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community{}
	return t.Community
}

// GetOrCreateForwardingClass retrieves the value of the ForwardingClass field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrCreateForwardingClass() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass {
	if t.ForwardingClass != nil {
		return t.ForwardingClass
	}
	t.ForwardingClass = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass{}
	return t.ForwardingClass
}

// GetOrCreateMetric retrieves the value of the Metric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrCreateMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric {
	if t.Metric != nil {
		return t.Metric
	}
	t.Metric = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric{}
	return t.Metric
}

// GetOrCreateMulticastRedirection retrieves the value of the MulticastRedirection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrCreateMulticastRedirection() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection {
	if t.MulticastRedirection != nil {
		return t.MulticastRedirection
	}
	t.MulticastRedirection = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection{}
	return t.MulticastRedirection
}

// GetOrCreateSrLabelIndex retrieves the value of the SrLabelIndex field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrCreateSrLabelIndex() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex {
	if t.SrLabelIndex != nil {
		return t.SrLabelIndex
	}
	t.SrLabelIndex = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex{}
	return t.SrLabelIndex
}

// GetAigpMetric returns the value of the AigpMetric struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action. If the receiver or the field AigpMetric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetAigpMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric {
	if t != nil && t.AigpMetric != nil {
		return t.AigpMetric
	}
	return nil
}

// GetAsPath returns the value of the AsPath struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action. If the receiver or the field AsPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetAsPath() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath {
	if t != nil && t.AsPath != nil {
		return t.AsPath
	}
	return nil
}

// GetAsPathPrepend returns the value of the AsPathPrepend struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action. If the receiver or the field AsPathPrepend is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetAsPathPrepend() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend {
	if t != nil && t.AsPathPrepend != nil {
		return t.AsPathPrepend
	}
	return nil
}

// GetBgpMed returns the value of the BgpMed struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action. If the receiver or the field BgpMed is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetBgpMed() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed {
	if t != nil && t.BgpMed != nil {
		return t.BgpMed
	}
	return nil
}

// GetBgpTunnelMetric returns the value of the BgpTunnelMetric struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action. If the receiver or the field BgpTunnelMetric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetBgpTunnelMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric {
	if t != nil && t.BgpTunnelMetric != nil {
		return t.BgpTunnelMetric
	}
	return nil
}

// GetCommunity returns the value of the Community struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action. If the receiver or the field Community is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetCommunity() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community {
	if t != nil && t.Community != nil {
		return t.Community
	}
	return nil
}

// GetForwardingClass returns the value of the ForwardingClass struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action. If the receiver or the field ForwardingClass is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetForwardingClass() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass {
	if t != nil && t.ForwardingClass != nil {
		return t.ForwardingClass
	}
	return nil
}

// GetMetric returns the value of the Metric struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action. If the receiver or the field Metric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric {
	if t != nil && t.Metric != nil {
		return t.Metric
	}
	return nil
}

// GetMulticastRedirection returns the value of the MulticastRedirection struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action. If the receiver or the field MulticastRedirection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetMulticastRedirection() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection {
	if t != nil && t.MulticastRedirection != nil {
		return t.MulticastRedirection
	}
	return nil
}

// GetSrLabelIndex returns the value of the SrLabelIndex struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action. If the receiver or the field SrLabelIndex is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetSrLabelIndex() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex {
	if t != nil && t.SrLabelIndex != nil {
		return t.SrLabelIndex
	}
	return nil
}

// GetActionType retrieves the value of the leaf ActionType from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActionType is set, it can
// safely use t.GetActionType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActionType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetActionType() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ActionType {
	if t == nil || t.ActionType == 0 {
		return 0
	}
	return t.ActionType
}

// GetAddPathsSendLimit retrieves the value of the leaf AddPathsSendLimit from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddPathsSendLimit is set, it can
// safely use t.GetAddPathsSendLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddPathsSendLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetAddPathsSendLimit() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AddPathsSendLimit_Union {
	if t == nil || t.AddPathsSendLimit == nil {
		return nil
	}
	return t.AddPathsSendLimit
}

// GetAdminTagPolicy retrieves the value of the leaf AdminTagPolicy from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminTagPolicy is set, it can
// safely use t.GetAdminTagPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminTagPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetAdminTagPolicy() string {
	if t == nil || t.AdminTagPolicy == nil {
		return ""
	}
	return *t.AdminTagPolicy
}

// GetAdvertiseLabel retrieves the value of the leaf AdvertiseLabel from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseLabel is set, it can
// safely use t.GetAdvertiseLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetAdvertiseLabel() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AdvertiseLabel {
	if t == nil || t.AdvertiseLabel == 0 {
		return 0
	}
	return t.AdvertiseLabel
}

// GetBgpHighPriority retrieves the value of the leaf BgpHighPriority from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpHighPriority is set, it can
// safely use t.GetBgpHighPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpHighPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetBgpHighPriority() bool {
	if t == nil || t.BgpHighPriority == nil {
		return false
	}
	return *t.BgpHighPriority
}

// GetBgpLeak retrieves the value of the leaf BgpLeak from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLeak is set, it can
// safely use t.GetBgpLeak() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLeak == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetBgpLeak() bool {
	if t == nil || t.BgpLeak == nil {
		return false
	}
	return *t.BgpLeak
}

// GetCreateMplsTunnel retrieves the value of the leaf CreateMplsTunnel from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreateMplsTunnel is set, it can
// safely use t.GetCreateMplsTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreateMplsTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetCreateMplsTunnel() bool {
	if t == nil || t.CreateMplsTunnel == nil {
		return false
	}
	return *t.CreateMplsTunnel
}

// GetCreateUdpTunnel retrieves the value of the leaf CreateUdpTunnel from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreateUdpTunnel is set, it can
// safely use t.GetCreateUdpTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreateUdpTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetCreateUdpTunnel() bool {
	if t == nil || t.CreateUdpTunnel == nil {
		return false
	}
	return *t.CreateUdpTunnel
}

// GetDamping retrieves the value of the leaf Damping from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Damping is set, it can
// safely use t.GetDamping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Damping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetDamping() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Damping_Union {
	if t == nil || t.Damping == nil {
		return nil
	}
	return t.Damping
}

// GetDestClass retrieves the value of the leaf DestClass from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestClass is set, it can
// safely use t.GetDestClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetDestClass() uint32 {
	if t == nil || t.DestClass == nil {
		return 0
	}
	return *t.DestClass
}

// GetEgressStatistics retrieves the value of the leaf EgressStatistics from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressStatistics is set, it can
// safely use t.GetEgressStatistics() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressStatistics == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetEgressStatistics() bool {
	if t == nil || t.EgressStatistics == nil {
		return false
	}
	return *t.EgressStatistics
}

// GetFlexAlgo retrieves the value of the leaf FlexAlgo from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlexAlgo is set, it can
// safely use t.GetFlexAlgo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlexAlgo == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetFlexAlgo() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_FlexAlgo_Union {
	if t == nil || t.FlexAlgo == nil {
		return nil
	}
	return t.FlexAlgo
}

// GetIngressStatistics retrieves the value of the leaf IngressStatistics from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressStatistics is set, it can
// safely use t.GetIngressStatistics() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressStatistics == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetIngressStatistics() bool {
	if t == nil || t.IngressStatistics == nil {
		return false
	}
	return *t.IngressStatistics
}

// GetInstallBackupPath retrieves the value of the leaf InstallBackupPath from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallBackupPath is set, it can
// safely use t.GetInstallBackupPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallBackupPath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetInstallBackupPath() bool {
	if t == nil || t.InstallBackupPath == nil {
		return false
	}
	return *t.InstallBackupPath
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetLocalPreference() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_LocalPreference_Union {
	if t == nil || t.LocalPreference == nil {
		return nil
	}
	return t.LocalPreference
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// GetNextHop retrieves the value of the leaf NextHop from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetNextHop() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_NextHop_Union {
	if t == nil || t.NextHop == nil {
		return nil
	}
	return t.NextHop
}

// GetOrigin retrieves the value of the leaf Origin from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrigin() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Origin_Union {
	if t == nil || t.Origin == nil {
		return nil
	}
	return t.Origin
}

// GetOriginValidationState retrieves the value of the leaf OriginValidationState from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginValidationState is set, it can
// safely use t.GetOriginValidationState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginValidationState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOriginValidationState() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_OriginValidationState_Union {
	if t == nil || t.OriginValidationState == nil {
		return nil
	}
	return t.OriginValidationState
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetPreference() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Preference_Union {
	if t == nil || t.Preference == nil {
		return nil
	}
	return t.Preference
}

// GetResolveStatic retrieves the value of the leaf ResolveStatic from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResolveStatic is set, it can
// safely use t.GetResolveStatic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResolveStatic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetResolveStatic() bool {
	if t == nil || t.ResolveStatic == nil {
		return false
	}
	return *t.ResolveStatic
}

// GetRouteTableInstall retrieves the value of the leaf RouteTableInstall from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTableInstall is set, it can
// safely use t.GetRouteTableInstall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTableInstall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetRouteTableInstall() bool {
	if t == nil || t.RouteTableInstall == nil {
		return true
	}
	return *t.RouteTableInstall
}

// GetSourceClass retrieves the value of the leaf SourceClass from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceClass is set, it can
// safely use t.GetSourceClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetSourceClass() uint32 {
	if t == nil || t.SourceClass == nil {
		return 0
	}
	return *t.SourceClass
}

// GetSrMaintenancePolicy retrieves the value of the leaf SrMaintenancePolicy from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrMaintenancePolicy is set, it can
// safely use t.GetSrMaintenancePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrMaintenancePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetSrMaintenancePolicy() string {
	if t == nil || t.SrMaintenancePolicy == nil {
		return ""
	}
	return *t.SrMaintenancePolicy
}

// GetStickyEcmp retrieves the value of the leaf StickyEcmp from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StickyEcmp is set, it can
// safely use t.GetStickyEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StickyEcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetStickyEcmp() bool {
	if t == nil || t.StickyEcmp == nil {
		return false
	}
	return *t.StickyEcmp
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetTag() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Tag_Union {
	if t == nil || t.Tag == nil {
		return nil
	}
	return t.Tag
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) GetType() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BgpHighPriority == nil {
		var v bool = false
		t.BgpHighPriority = &v
	}
	if t.BgpLeak == nil {
		var v bool = false
		t.BgpLeak = &v
	}
	if t.CreateMplsTunnel == nil {
		var v bool = false
		t.CreateMplsTunnel = &v
	}
	if t.CreateUdpTunnel == nil {
		var v bool = false
		t.CreateUdpTunnel = &v
	}
	if t.EgressStatistics == nil {
		var v bool = false
		t.EgressStatistics = &v
	}
	if t.IngressStatistics == nil {
		var v bool = false
		t.IngressStatistics = &v
	}
	if t.InstallBackupPath == nil {
		var v bool = false
		t.InstallBackupPath = &v
	}
	if t.ResolveStatic == nil {
		var v bool = false
		t.ResolveStatic = &v
	}
	if t.RouteTableInstall == nil {
		var v bool = true
		t.RouteTableInstall = &v
	}
	if t.StickyEcmp == nil {
		var v bool = false
		t.StickyEcmp = &v
	}
	t.AigpMetric.PopulateDefaults()
	t.AsPath.PopulateDefaults()
	t.AsPathPrepend.PopulateDefaults()
	t.BgpMed.PopulateDefaults()
	t.BgpTunnelMetric.PopulateDefaults()
	t.Community.PopulateDefaults()
	t.ForwardingClass.PopulateDefaults()
	t.Metric.PopulateDefaults()
	t.MulticastRedirection.PopulateDefaults()
	t.SrLabelIndex.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/action/aigp-metric YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric struct {
	Add NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric_Add_Union `path:"add" module:"nokia-conf"`
	Set NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric_Set_Union `path:"set" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric) IsYANGGoStruct() {
}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric) GetAdd() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric_Add_Union {
	if t == nil || t.Add == nil {
		return nil
	}
	return t.Add
}

// GetSet retrieves the value of the leaf Set from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric) GetSet() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric_Set_Union {
	if t == nil || t.Set == nil {
		return nil
	}
	return t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/action/as-path YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath struct {
	Add     *string `path:"add" module:"nokia-conf"`
	Replace *string `path:"replace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath) IsYANGGoStruct() {
}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath) GetAdd() string {
	if t == nil || t.Add == nil {
		return ""
	}
	return *t.Add
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath) GetReplace() string {
	if t == nil || t.Replace == nil {
		return ""
	}
	return *t.Replace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/action/as-path-prepend YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend struct {
	AsPath NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend_AsPath_Union `path:"as-path" module:"nokia-conf"`
	Repeat NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend_Repeat_Union `path:"repeat" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend) IsYANGGoStruct() {
}

// GetAsPath retrieves the value of the leaf AsPath from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPath is set, it can
// safely use t.GetAsPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend) GetAsPath() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend_AsPath_Union {
	if t == nil || t.AsPath == nil {
		return nil
	}
	return t.AsPath
}

// GetRepeat retrieves the value of the leaf Repeat from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Repeat is set, it can
// safely use t.GetRepeat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Repeat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend) GetRepeat() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend_Repeat_Union {
	if t == nil || t.Repeat == nil {
		return UnionInt32(1)
	}
	return t.Repeat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Repeat == nil {
		t.Repeat = UnionInt32(1)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/action/bgp-med YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed struct {
	Adjust *string                                                                                           `path:"adjust" module:"nokia-conf"`
	Set    NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed_Set_Union `path:"set" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed) IsYANGGoStruct() {
}

// GetAdjust retrieves the value of the leaf Adjust from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Adjust is set, it can
// safely use t.GetAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Adjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed) GetAdjust() string {
	if t == nil || t.Adjust == nil {
		return ""
	}
	return *t.Adjust
}

// GetSet retrieves the value of the leaf Set from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed) GetSet() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed_Set_Union {
	if t == nil || t.Set == nil {
		return nil
	}
	return t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/action/bgp-tunnel-metric YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric struct {
	PreferAigp *bool                                                                                                        `path:"prefer-aigp" module:"nokia-conf"`
	Value      NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric) IsYANGGoStruct() {
}

// GetPreferAigp retrieves the value of the leaf PreferAigp from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferAigp is set, it can
// safely use t.GetPreferAigp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferAigp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric) GetPreferAigp() bool {
	if t == nil || t.PreferAigp == nil {
		return false
	}
	return *t.PreferAigp
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric) GetValue() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferAigp == nil {
		var v bool = false
		t.PreferAigp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/action/community YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community struct {
	Add     []string `path:"add" module:"nokia-conf"`
	Remove  []string `path:"remove" module:"nokia-conf"`
	Replace []string `path:"replace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community) IsYANGGoStruct() {
}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community) GetAdd() []string {
	if t == nil || t.Add == nil {
		return nil
	}
	return t.Add
}

// GetRemove retrieves the value of the leaf Remove from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Remove is set, it can
// safely use t.GetRemove() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Remove == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community) GetRemove() []string {
	if t == nil || t.Remove == nil {
		return nil
	}
	return t.Remove
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community) GetReplace() []string {
	if t == nil || t.Replace == nil {
		return nil
	}
	return t.Replace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Community) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/action/forwarding-class YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass struct {
	Fc       E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass_Fc       `path:"fc" module:"nokia-conf"`
	Priority E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass) IsYANGGoStruct() {
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass) GetFc() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass_Fc {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass) GetPriority() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass_Priority {
	if t == nil || t.Priority == 0 {
		return 0
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/action/metric YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric struct {
	Add      NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric_Add_Union      `path:"add" module:"nokia-conf"`
	Set      NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric_Set_Union      `path:"set" module:"nokia-conf"`
	Subtract NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric_Subtract_Union `path:"subtract" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric) IsYANGGoStruct() {
}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric) GetAdd() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric_Add_Union {
	if t == nil || t.Add == nil {
		return nil
	}
	return t.Add
}

// GetSet retrieves the value of the leaf Set from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric) GetSet() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric_Set_Union {
	if t == nil || t.Set == nil {
		return nil
	}
	return t.Set
}

// GetSubtract retrieves the value of the leaf Subtract from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subtract is set, it can
// safely use t.GetSubtract() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subtract == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric) GetSubtract() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric_Subtract_Union {
	if t == nil || t.Subtract == nil {
		return nil
	}
	return t.Subtract
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/action/multicast-redirection YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection struct {
	FwdService *string `path:"fwd-service" module:"nokia-conf"`
	IpIntName  *string `path:"ip-int-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection) IsYANGGoStruct() {
}

// GetFwdService retrieves the value of the leaf FwdService from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FwdService is set, it can
// safely use t.GetFwdService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FwdService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection) GetFwdService() string {
	if t == nil || t.FwdService == nil {
		return "Base"
	}
	return *t.FwdService
}

// GetIpIntName retrieves the value of the leaf IpIntName from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpIntName is set, it can
// safely use t.GetIpIntName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpIntName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection) GetIpIntName() string {
	if t == nil || t.IpIntName == nil {
		return ""
	}
	return *t.IpIntName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FwdService == nil {
		var v string = "Base"
		t.FwdService = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/action/sr-label-index YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex struct {
	PreferIgp *bool                                                                                                     `path:"prefer-igp" module:"nokia-conf"`
	Value     NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex) IsYANGGoStruct() {
}

// GetPreferIgp retrieves the value of the leaf PreferIgp from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferIgp is set, it can
// safely use t.GetPreferIgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferIgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex) GetPreferIgp() bool {
	if t == nil || t.PreferIgp == nil {
		return false
	}
	return *t.PreferIgp
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex) GetValue() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferIgp == nil {
		var v bool = false
		t.PreferIgp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/conditional-expression YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression struct {
	RouteExists *string `path:"route-exists" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression) IsYANGGoStruct() {
}

// GetRouteExists retrieves the value of the leaf RouteExists from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteExists is set, it can
// safely use t.GetRouteExists() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteExists == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression) GetRouteExists() string {
	if t == nil || t.RouteExists == nil {
		return ""
	}
	return *t.RouteExists
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/from YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From struct {
	AggregateContributor  *bool                                                                                                  `path:"aggregate-contributor" module:"nokia-conf"`
	Area                  *string                                                                                                `path:"area" module:"nokia-conf"`
	AsPath                *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath                 `path:"as-path" module:"nokia-conf"`
	ClusterId             *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId              `path:"cluster-id" module:"nokia-conf"`
	Color                 *int64                                                                                                 `path:"color" module:"nokia-conf"`
	Community             *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community              `path:"community" module:"nokia-conf"`
	Distinguisher         *int64                                                                                                 `path:"distinguisher" module:"nokia-conf"`
	Endpoint              *string                                                                                                `path:"endpoint" module:"nokia-conf"`
	EvpnType              E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_EvpnType              `path:"evpn-type" module:"nokia-conf"`
	External              *bool                                                                                                  `path:"external" module:"nokia-conf"`
	Family                []E_NokiaTypesBgp_IpFamilyIdentifier                                                                   `path:"family" module:"nokia-conf"`
	Flowspec              *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec               `path:"flowspec" module:"nokia-conf"`
	GroupAddress          *string                                                                                                `path:"group-address" module:"nokia-conf"`
	HostIp                *string                                                                                                `path:"host-ip" module:"nokia-conf"`
	Interface             []string                                                                                               `path:"interface" module:"nokia-conf"`
	InterfaceSubnets      *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets       `path:"interface-subnets" module:"nokia-conf"`
	Level                 *int32                                                                                                 `path:"level" module:"nokia-conf"`
	LocalPreference       *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference        `path:"local-preference" module:"nokia-conf"`
	Metric                *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric                 `path:"metric" module:"nokia-conf"`
	MvpnType              E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_MvpnType              `path:"mvpn-type" module:"nokia-conf"`
	Neighbor              *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor               `path:"neighbor" module:"nokia-conf"`
	NextHop               *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop                `path:"next-hop" module:"nokia-conf"`
	Origin                E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Origin                `path:"origin" module:"nokia-conf"`
	OriginValidationState E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_OriginValidationState `path:"origin-validation-state" module:"nokia-conf"`
	OspfType              *int32                                                                                                 `path:"ospf-type" module:"nokia-conf"`
	PathType              E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PathType              `path:"path-type" module:"nokia-conf"`
	Policy                *string                                                                                                `path:"policy" module:"nokia-conf"`
	PolicyVariables       *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables        `path:"policy-variables" module:"nokia-conf"`
	PrefixList            []string                                                                                               `path:"prefix-list" module:"nokia-conf"`
	Protocol              *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol               `path:"protocol" module:"nokia-conf"`
	SourceAddress         *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress          `path:"source-address" module:"nokia-conf"`
	State                 E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_State                 `path:"state" module:"nokia-conf"`
	Tag                   NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Tag_Union               `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) IsYANGGoStruct() {
}

// GetOrCreateAsPath retrieves the value of the AsPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateAsPath() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath {
	if t.AsPath != nil {
		return t.AsPath
	}
	t.AsPath = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath{}
	return t.AsPath
}

// GetOrCreateClusterId retrieves the value of the ClusterId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateClusterId() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId {
	if t.ClusterId != nil {
		return t.ClusterId
	}
	t.ClusterId = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId{}
	return t.ClusterId
}

// GetOrCreateCommunity retrieves the value of the Community field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateCommunity() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community {
	if t.Community != nil {
		return t.Community
	}
	t.Community = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community{}
	return t.Community
}

// GetOrCreateFlowspec retrieves the value of the Flowspec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateFlowspec() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec {
	if t.Flowspec != nil {
		return t.Flowspec
	}
	t.Flowspec = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec{}
	return t.Flowspec
}

// GetOrCreateInterfaceSubnets retrieves the value of the InterfaceSubnets field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateInterfaceSubnets() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets {
	if t.InterfaceSubnets != nil {
		return t.InterfaceSubnets
	}
	t.InterfaceSubnets = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets{}
	return t.InterfaceSubnets
}

// GetOrCreateLocalPreference retrieves the value of the LocalPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateLocalPreference() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference {
	if t.LocalPreference != nil {
		return t.LocalPreference
	}
	t.LocalPreference = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference{}
	return t.LocalPreference
}

// GetOrCreateMetric retrieves the value of the Metric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric {
	if t.Metric != nil {
		return t.Metric
	}
	t.Metric = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric{}
	return t.Metric
}

// GetOrCreateNeighbor retrieves the value of the Neighbor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateNeighbor() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor {
	if t.Neighbor != nil {
		return t.Neighbor
	}
	t.Neighbor = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor{}
	return t.Neighbor
}

// GetOrCreateNextHop retrieves the value of the NextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateNextHop() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop {
	if t.NextHop != nil {
		return t.NextHop
	}
	t.NextHop = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop{}
	return t.NextHop
}

// GetOrCreatePolicyVariables retrieves the value of the PolicyVariables field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreatePolicyVariables() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables {
	if t.PolicyVariables != nil {
		return t.PolicyVariables
	}
	t.PolicyVariables = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables{}
	return t.PolicyVariables
}

// GetOrCreateProtocol retrieves the value of the Protocol field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateProtocol() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol {
	if t.Protocol != nil {
		return t.Protocol
	}
	t.Protocol = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol{}
	return t.Protocol
}

// GetOrCreateSourceAddress retrieves the value of the SourceAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateSourceAddress() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress {
	if t.SourceAddress != nil {
		return t.SourceAddress
	}
	t.SourceAddress = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress{}
	return t.SourceAddress
}

// GetAsPath returns the value of the AsPath struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field AsPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetAsPath() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath {
	if t != nil && t.AsPath != nil {
		return t.AsPath
	}
	return nil
}

// GetClusterId returns the value of the ClusterId struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field ClusterId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetClusterId() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId {
	if t != nil && t.ClusterId != nil {
		return t.ClusterId
	}
	return nil
}

// GetCommunity returns the value of the Community struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field Community is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetCommunity() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community {
	if t != nil && t.Community != nil {
		return t.Community
	}
	return nil
}

// GetFlowspec returns the value of the Flowspec struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field Flowspec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetFlowspec() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec {
	if t != nil && t.Flowspec != nil {
		return t.Flowspec
	}
	return nil
}

// GetInterfaceSubnets returns the value of the InterfaceSubnets struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field InterfaceSubnets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetInterfaceSubnets() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets {
	if t != nil && t.InterfaceSubnets != nil {
		return t.InterfaceSubnets
	}
	return nil
}

// GetLocalPreference returns the value of the LocalPreference struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field LocalPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetLocalPreference() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference {
	if t != nil && t.LocalPreference != nil {
		return t.LocalPreference
	}
	return nil
}

// GetMetric returns the value of the Metric struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field Metric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetMetric() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric {
	if t != nil && t.Metric != nil {
		return t.Metric
	}
	return nil
}

// GetNeighbor returns the value of the Neighbor struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field Neighbor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetNeighbor() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor {
	if t != nil && t.Neighbor != nil {
		return t.Neighbor
	}
	return nil
}

// GetNextHop returns the value of the NextHop struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field NextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetNextHop() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop {
	if t != nil && t.NextHop != nil {
		return t.NextHop
	}
	return nil
}

// GetPolicyVariables returns the value of the PolicyVariables struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field PolicyVariables is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetPolicyVariables() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables {
	if t != nil && t.PolicyVariables != nil {
		return t.PolicyVariables
	}
	return nil
}

// GetProtocol returns the value of the Protocol struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field Protocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetProtocol() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol {
	if t != nil && t.Protocol != nil {
		return t.Protocol
	}
	return nil
}

// GetSourceAddress returns the value of the SourceAddress struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field SourceAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetSourceAddress() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress {
	if t != nil && t.SourceAddress != nil {
		return t.SourceAddress
	}
	return nil
}

// GetAggregateContributor retrieves the value of the leaf AggregateContributor from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregateContributor is set, it can
// safely use t.GetAggregateContributor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregateContributor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetAggregateContributor() bool {
	if t == nil || t.AggregateContributor == nil {
		return false
	}
	return *t.AggregateContributor
}

// GetArea retrieves the value of the leaf Area from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Area is set, it can
// safely use t.GetArea() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Area == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetArea() string {
	if t == nil || t.Area == nil {
		return ""
	}
	return *t.Area
}

// GetColor retrieves the value of the leaf Color from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetColor() int64 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetDistinguisher retrieves the value of the leaf Distinguisher from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Distinguisher is set, it can
// safely use t.GetDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Distinguisher == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetDistinguisher() int64 {
	if t == nil || t.Distinguisher == nil {
		return 0
	}
	return *t.Distinguisher
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetEvpnType retrieves the value of the leaf EvpnType from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EvpnType is set, it can
// safely use t.GetEvpnType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EvpnType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetEvpnType() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_EvpnType {
	if t == nil || t.EvpnType == 0 {
		return 0
	}
	return t.EvpnType
}

// GetExternal retrieves the value of the leaf External from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if External is set, it can
// safely use t.GetExternal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.External == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetExternal() bool {
	if t == nil || t.External == nil {
		return false
	}
	return *t.External
}

// GetFamily retrieves the value of the leaf Family from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Family is set, it can
// safely use t.GetFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Family == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetFamily() []E_NokiaTypesBgp_IpFamilyIdentifier {
	if t == nil || t.Family == nil {
		return nil
	}
	return t.Family
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetHostIp retrieves the value of the leaf HostIp from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostIp is set, it can
// safely use t.GetHostIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetHostIp() string {
	if t == nil || t.HostIp == nil {
		return ""
	}
	return *t.HostIp
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetInterface() []string {
	if t == nil || t.Interface == nil {
		return nil
	}
	return t.Interface
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetMvpnType retrieves the value of the leaf MvpnType from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnType is set, it can
// safely use t.GetMvpnType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetMvpnType() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_MvpnType {
	if t == nil || t.MvpnType == 0 {
		return 0
	}
	return t.MvpnType
}

// GetOrigin retrieves the value of the leaf Origin from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrigin() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Origin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetOriginValidationState retrieves the value of the leaf OriginValidationState from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginValidationState is set, it can
// safely use t.GetOriginValidationState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginValidationState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetOriginValidationState() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_OriginValidationState {
	if t == nil || t.OriginValidationState == 0 {
		return 0
	}
	return t.OriginValidationState
}

// GetOspfType retrieves the value of the leaf OspfType from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OspfType is set, it can
// safely use t.GetOspfType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OspfType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetOspfType() int32 {
	if t == nil || t.OspfType == nil {
		return 0
	}
	return *t.OspfType
}

// GetPathType retrieves the value of the leaf PathType from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathType is set, it can
// safely use t.GetPathType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetPathType() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PathType {
	if t == nil || t.PathType == 0 {
		return 0
	}
	return t.PathType
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetPrefixList() []string {
	if t == nil || t.PrefixList == nil {
		return nil
	}
	return t.PrefixList
}

// GetState retrieves the value of the leaf State from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if State is set, it can
// safely use t.GetState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.State == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetState() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_State {
	if t == nil || t.State == 0 {
		return 0
	}
	return t.State
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) GetTag() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Tag_Union {
	if t == nil || t.Tag == nil {
		return nil
	}
	return t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AggregateContributor == nil {
		var v bool = false
		t.AggregateContributor = &v
	}
	if t.External == nil {
		var v bool = false
		t.External = &v
	}
	t.AsPath.PopulateDefaults()
	t.ClusterId.PopulateDefaults()
	t.Community.PopulateDefaults()
	t.Flowspec.PopulateDefaults()
	t.InterfaceSubnets.PopulateDefaults()
	t.LocalPreference.PopulateDefaults()
	t.Metric.PopulateDefaults()
	t.Neighbor.PopulateDefaults()
	t.NextHop.PopulateDefaults()
	t.PolicyVariables.PopulateDefaults()
	t.Protocol.PopulateDefaults()
	t.SourceAddress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/from/as-path YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath struct {
	Group  *string                                                                                       `path:"group" module:"nokia-conf"`
	Length *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length `path:"length" module:"nokia-conf"`
	Name   *string                                                                                       `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath) IsYANGGoStruct() {
}

// GetOrCreateLength retrieves the value of the Length field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath) GetOrCreateLength() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length {
	if t.Length != nil {
		return t.Length
	}
	t.Length = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length{}
	return t.Length
}

// GetLength returns the value of the Length struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath. If the receiver or the field Length is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath) GetLength() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length {
	if t != nil && t.Length != nil {
		return t.Length
	}
	return nil
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Length.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/from/as-path/length YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length struct {
	Qualifier E_NokiaTypesPolicy_PolicyQualifier                                                                       `path:"qualifier" module:"nokia-conf"`
	Unique    *bool                                                                                                    `path:"unique" module:"nokia-conf"`
	Value     NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length) IsYANGGoStruct() {
}

// GetQualifier retrieves the value of the leaf Qualifier from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qualifier is set, it can
// safely use t.GetQualifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qualifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length) GetQualifier() E_NokiaTypesPolicy_PolicyQualifier {
	if t == nil || t.Qualifier == 0 {
		return NokiaTypesPolicy_PolicyQualifier_equal
	}
	return t.Qualifier
}

// GetUnique retrieves the value of the leaf Unique from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Unique is set, it can
// safely use t.GetUnique() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Unique == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length) GetUnique() bool {
	if t == nil || t.Unique == nil {
		return false
	}
	return *t.Unique
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length) GetValue() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Qualifier == 0 {
		t.Qualifier = NokiaTypesPolicy_PolicyQualifier_equal
	}
	if t.Unique == nil {
		var v bool = false
		t.Unique = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/from/cluster-id YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId struct {
	IpAddress       []string `path:"ip-address" module:"nokia-conf"`
	NoneClusterList *bool    `path:"none-cluster-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId) GetIpAddress() []string {
	if t == nil || t.IpAddress == nil {
		return nil
	}
	return t.IpAddress
}

// GetNoneClusterList retrieves the value of the leaf NoneClusterList from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NoneClusterList is set, it can
// safely use t.GetNoneClusterList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NoneClusterList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId) GetNoneClusterList() bool {
	if t == nil || t.NoneClusterList == nil {
		return false
	}
	return *t.NoneClusterList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NoneClusterList == nil {
		var v bool = false
		t.NoneClusterList = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/from/community YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community struct {
	Count      *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count `path:"count" module:"nokia-conf"`
	Expression *string                                                                                         `path:"expression" module:"nokia-conf"`
	Name       *string                                                                                         `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community) IsYANGGoStruct() {
}

// GetOrCreateCount retrieves the value of the Count field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community) GetOrCreateCount() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count {
	if t.Count != nil {
		return t.Count
	}
	t.Count = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count{}
	return t.Count
}

// GetCount returns the value of the Count struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community. If the receiver or the field Count is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community) GetCount() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count {
	if t != nil && t.Count != nil {
		return t.Count
	}
	return nil
}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Count.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/from/community/count YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count struct {
	Qualifier E_NokiaTypesPolicy_PolicyQualifier                                                                         `path:"qualifier" module:"nokia-conf"`
	Type      E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count_Type      `path:"type" module:"nokia-conf"`
	Value     NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count) IsYANGGoStruct() {
}

// GetQualifier retrieves the value of the leaf Qualifier from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qualifier is set, it can
// safely use t.GetQualifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qualifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count) GetQualifier() E_NokiaTypesPolicy_PolicyQualifier {
	if t == nil || t.Qualifier == 0 {
		return NokiaTypesPolicy_PolicyQualifier_equal
	}
	return t.Qualifier
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count) GetType() E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count) GetValue() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Qualifier == 0 {
		t.Qualifier = NokiaTypesPolicy_PolicyQualifier_equal
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/from/flowspec YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec struct {
	Dest   *string `path:"dest" module:"nokia-conf"`
	Source *string `path:"source" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec) IsYANGGoStruct() {
}

// GetDest retrieves the value of the leaf Dest from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dest is set, it can
// safely use t.GetDest() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dest == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec) GetDest() string {
	if t == nil || t.Dest == nil {
		return ""
	}
	return *t.Dest
}

// GetSource retrieves the value of the leaf Source from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/from/interface-subnets YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets struct {
	IpIntName []string `path:"ip-int-name" module:"nokia-conf"`
	Service   *string  `path:"service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets) IsYANGGoStruct() {
}

// GetIpIntName retrieves the value of the leaf IpIntName from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpIntName is set, it can
// safely use t.GetIpIntName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpIntName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets) GetIpIntName() []string {
	if t == nil || t.IpIntName == nil {
		return nil
	}
	return t.IpIntName
}

// GetService retrieves the value of the leaf Service from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets) GetService() string {
	if t == nil || t.Service == nil {
		return "Base"
	}
	return *t.Service
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Service == nil {
		var v string = "Base"
		t.Service = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/from/local-preference YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference struct {
	Qualifier E_NokiaTypesPolicy_PolicyQualifier                                                                         `path:"qualifier" module:"nokia-conf"`
	Value     NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference) IsYANGGoStruct() {
}

// GetQualifier retrieves the value of the leaf Qualifier from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qualifier is set, it can
// safely use t.GetQualifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qualifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference) GetQualifier() E_NokiaTypesPolicy_PolicyQualifier {
	if t == nil || t.Qualifier == 0 {
		return NokiaTypesPolicy_PolicyQualifier_equal
	}
	return t.Qualifier
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference) GetValue() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Qualifier == 0 {
		t.Qualifier = NokiaTypesPolicy_PolicyQualifier_equal
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/from/metric YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric struct {
	Qualifier E_NokiaTypesPolicy_PolicyQualifier                                                                `path:"qualifier" module:"nokia-conf"`
	Value     NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric) IsYANGGoStruct() {
}

// GetQualifier retrieves the value of the leaf Qualifier from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qualifier is set, it can
// safely use t.GetQualifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qualifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric) GetQualifier() E_NokiaTypesPolicy_PolicyQualifier {
	if t == nil || t.Qualifier == 0 {
		return NokiaTypesPolicy_PolicyQualifier_equal
	}
	return t.Qualifier
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric) GetValue() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Qualifier == 0 {
		t.Qualifier = NokiaTypesPolicy_PolicyQualifier_equal
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Metric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/from/neighbor YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor struct {
	IpAddress  *string `path:"ip-address" module:"nokia-conf"`
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/from/next-hop YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop struct {
	IpAddress  *string `path:"ip-address" module:"nokia-conf"`
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/from/policy-variables YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables struct {
	Name map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) IsYANGGoStruct() {
}

// NewName creates a new entry in the Name list of the
// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) NewName(VariableName string) (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Name == nil {
		t.Name = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name)
	}

	key := VariableName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Name[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Name", key)
	}

	t.Name[key] = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name{
		VariableName: &VariableName,
	}

	return t.Name[key], nil
}

// RenameName renames an entry in the list Name within
// the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) RenameName(oldK, newK string) error {
	if _, ok := t.Name[newK]; ok {
		return fmt.Errorf("key %v already exists in Name", newK)
	}

	e, ok := t.Name[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Name", oldK)
	}
	e.VariableName = &newK

	t.Name[newK] = e
	delete(t.Name, oldK)
	return nil
}

// GetOrCreateName retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) GetOrCreateName(VariableName string) *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name {

	key := VariableName

	if v, ok := t.Name[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewName(VariableName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateName got unexpected error: %v", err))
	}
	return v
}

// GetName retrieves the value with the specified key from
// the Name map field of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) GetName(VariableName string) *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name {

	if t == nil {
		return nil
	}

	key := VariableName

	if lm, ok := t.Name[key]; ok {
		return lm
	}
	return nil
}

// DeleteName deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) DeleteName(VariableName string) {
	key := VariableName

	delete(t.Name, key)
}

// AppendName appends the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name struct to the
// list Name of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) AppendName(v *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) error {
	if v.VariableName == nil {
		return fmt.Errorf("invalid nil key received for VariableName")
	}

	key := *v.VariableName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Name == nil {
		t.Name = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name)
	}

	if _, ok := t.Name[key]; ok {
		return fmt.Errorf("duplicate key for list Name %v", key)
	}

	t.Name[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Name {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/from/policy-variables/name YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name struct {
	Address      *string  `path:"address" module:"nokia-conf"`
	Decimal      *float64 `path:"decimal" module:"nokia-conf"`
	Number       *uint64  `path:"number" module:"nokia-conf"`
	Value        *string  `path:"value" module:"nokia-conf"`
	VariableName *string  `path:"variable-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetDecimal retrieves the value of the leaf Decimal from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Decimal is set, it can
// safely use t.GetDecimal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Decimal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) GetDecimal() float64 {
	if t == nil || t.Decimal == nil {
		return 0.0
	}
	return *t.Decimal
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) GetNumber() uint64 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// GetVariableName retrieves the value of the leaf VariableName from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VariableName is set, it can
// safely use t.GetVariableName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VariableName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) GetVariableName() string {
	if t == nil || t.VariableName == nil {
		return ""
	}
	return *t.VariableName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VariableName == nil {
		return nil, fmt.Errorf("nil value for key VariableName")
	}

	return map[string]interface{}{
		"variable-name": *t.VariableName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/from/protocol YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol struct {
	Instance NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol_Instance_Union `path:"instance" module:"nokia-conf"`
	Name     []E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol_Name       `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol) IsYANGGoStruct() {
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol) GetInstance() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol_Instance_Union {
	if t == nil || t.Instance == nil {
		return UnionUint32(0)
	}
	return t.Instance
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol) GetName() []E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol_Name {
	if t == nil || t.Name == nil {
		return nil
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Instance == nil {
		t.Instance = UnionUint32(0)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/from/source-address YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress struct {
	IpAddress  *string `path:"ip-address" module:"nokia-conf"`
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/to YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To struct {
	Level      *int32                                                                                 `path:"level" module:"nokia-conf"`
	Neighbor   *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor `path:"neighbor" module:"nokia-conf"`
	PrefixList []string                                                                               `path:"prefix-list" module:"nokia-conf"`
	Protocol   *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol `path:"protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To) IsYANGGoStruct() {
}

// GetOrCreateNeighbor retrieves the value of the Neighbor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To) GetOrCreateNeighbor() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor {
	if t.Neighbor != nil {
		return t.Neighbor
	}
	t.Neighbor = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor{}
	return t.Neighbor
}

// GetOrCreateProtocol retrieves the value of the Protocol field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To) GetOrCreateProtocol() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol {
	if t.Protocol != nil {
		return t.Protocol
	}
	t.Protocol = &NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol{}
	return t.Protocol
}

// GetNeighbor returns the value of the Neighbor struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To. If the receiver or the field Neighbor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To) GetNeighbor() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor {
	if t != nil && t.Neighbor != nil {
		return t.Neighbor
	}
	return nil
}

// GetProtocol returns the value of the Protocol struct pointer
// from NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To. If the receiver or the field Protocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To) GetProtocol() *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol {
	if t != nil && t.Protocol != nil {
		return t.Protocol
	}
	return nil
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To) GetPrefixList() []string {
	if t == nil || t.PrefixList == nil {
		return nil
	}
	return t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Neighbor.PopulateDefaults()
	t.Protocol.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/to/neighbor YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor struct {
	IpAddress  *string `path:"ip-address" module:"nokia-conf"`
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol represents the /nokia-conf/configure/groups/group/policy-options/policy-statement/named-entry/to/protocol YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol struct {
	Instance NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol_Instance_Union `path:"instance" module:"nokia-conf"`
	Name     []E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol_Name       `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol) IsYANGGoStruct() {
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol) GetInstance() NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol_Instance_Union {
	if t == nil || t.Instance == nil {
		return UnionUint32(0)
	}
	return t.Instance
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol) GetName() []E_NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol_Name {
	if t == nil || t.Name == nil {
		return nil
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Instance == nil {
		t.Instance = UnionUint32(0)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList represents the /nokia-conf/configure/groups/group/policy-options/prefix-list YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList struct {
	Name   *string                                                                                                                                    `path:"name" module:"nokia-conf"`
	Prefix map[NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_Key]*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_Key represents the key for list Prefix of element /nokia-conf/configure/groups/group/policy-options/prefix-list.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_Key struct {
	IpPrefix string                                                                      `path:"ip-prefix"`
	Type     NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_Type_Union `path:"type"`
}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList) NewPrefix(IpPrefix string, Type NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_Type_Union) (*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_Key]*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix)
	}

	key := NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_Key{
		IpPrefix: IpPrefix,
		Type:     Type,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix{
		IpPrefix: &IpPrefix,
		Type:     Type,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList) RenamePrefix(oldK, newK NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_Key) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK.IpPrefix
	e.Type = newK.Type

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList) GetOrCreatePrefix(IpPrefix string, Type NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_Type_Union) *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix {

	key := NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_Key{
		IpPrefix: IpPrefix,
		Type:     Type,
	}

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix, Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList) GetPrefix(IpPrefix string, Type NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_Type_Union) *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_Key{
		IpPrefix: IpPrefix,
		Type:     Type,
	}

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList) DeletePrefix(IpPrefix string, Type NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_Type_Union) {
	key := NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_Key{
		IpPrefix: IpPrefix,
		Type:     Type,
	}

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList) AppendPrefix(v *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key for IpPrefix")
	}

	key := NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_Key{
		IpPrefix: *v.IpPrefix,
		Type:     v.Type,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_Key]*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix represents the /nokia-conf/configure/groups/group/policy-options/prefix-list/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix struct {
	EndLength     *uint32                                                                                  `path:"end-length" module:"nokia-conf"`
	IpPrefix      *string                                                                                  `path:"ip-prefix" module:"nokia-conf"`
	MaskPattern   map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern `path:"mask-pattern" module:"nokia-conf"`
	StartLength   *uint32                                                                                  `path:"start-length" module:"nokia-conf"`
	ThroughLength *uint32                                                                                  `path:"through-length" module:"nokia-conf"`
	ToPrefix      map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix    `path:"to-prefix" module:"nokia-conf"`
	Type          NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_Type_Union              `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) IsYANGGoStruct() {}

// NewMaskPattern creates a new entry in the MaskPattern list of the
// NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) NewMaskPattern(Address string) (*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MaskPattern == nil {
		t.MaskPattern = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MaskPattern[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MaskPattern", key)
	}

	t.MaskPattern[key] = &NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern{
		Address: &Address,
	}

	return t.MaskPattern[key], nil
}

// RenameMaskPattern renames an entry in the list MaskPattern within
// the NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) RenameMaskPattern(oldK, newK string) error {
	if _, ok := t.MaskPattern[newK]; ok {
		return fmt.Errorf("key %v already exists in MaskPattern", newK)
	}

	e, ok := t.MaskPattern[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MaskPattern", oldK)
	}
	e.Address = &newK

	t.MaskPattern[newK] = e
	delete(t.MaskPattern, oldK)
	return nil
}

// GetOrCreateMaskPattern retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) GetOrCreateMaskPattern(Address string) *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern {

	key := Address

	if v, ok := t.MaskPattern[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMaskPattern(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMaskPattern got unexpected error: %v", err))
	}
	return v
}

// GetMaskPattern retrieves the value with the specified key from
// the MaskPattern map field of NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) GetMaskPattern(Address string) *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.MaskPattern[key]; ok {
		return lm
	}
	return nil
}

// DeleteMaskPattern deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) DeleteMaskPattern(Address string) {
	key := Address

	delete(t.MaskPattern, key)
}

// AppendMaskPattern appends the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern struct to the
// list MaskPattern of NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) AppendMaskPattern(v *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MaskPattern == nil {
		t.MaskPattern = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern)
	}

	if _, ok := t.MaskPattern[key]; ok {
		return fmt.Errorf("duplicate key for list MaskPattern %v", key)
	}

	t.MaskPattern[key] = v
	return nil
}

// NewToPrefix creates a new entry in the ToPrefix list of the
// NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) NewToPrefix(IpPrefix string) (*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ToPrefix == nil {
		t.ToPrefix = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ToPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ToPrefix", key)
	}

	t.ToPrefix[key] = &NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix{
		IpPrefix: &IpPrefix,
	}

	return t.ToPrefix[key], nil
}

// RenameToPrefix renames an entry in the list ToPrefix within
// the NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) RenameToPrefix(oldK, newK string) error {
	if _, ok := t.ToPrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in ToPrefix", newK)
	}

	e, ok := t.ToPrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ToPrefix", oldK)
	}
	e.IpPrefix = &newK

	t.ToPrefix[newK] = e
	delete(t.ToPrefix, oldK)
	return nil
}

// GetOrCreateToPrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) GetOrCreateToPrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix {

	key := IpPrefix

	if v, ok := t.ToPrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewToPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateToPrefix got unexpected error: %v", err))
	}
	return v
}

// GetToPrefix retrieves the value with the specified key from
// the ToPrefix map field of NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) GetToPrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.ToPrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteToPrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) DeleteToPrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.ToPrefix, key)
}

// AppendToPrefix appends the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix struct to the
// list ToPrefix of NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) AppendToPrefix(v *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ToPrefix == nil {
		t.ToPrefix = make(map[string]*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix)
	}

	if _, ok := t.ToPrefix[key]; ok {
		return fmt.Errorf("duplicate key for list ToPrefix %v", key)
	}

	t.ToPrefix[key] = v
	return nil
}

// GetEndLength retrieves the value of the leaf EndLength from the NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndLength is set, it can
// safely use t.GetEndLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) GetEndLength() uint32 {
	if t == nil || t.EndLength == nil {
		return 0
	}
	return *t.EndLength
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetStartLength retrieves the value of the leaf StartLength from the NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartLength is set, it can
// safely use t.GetStartLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) GetStartLength() uint32 {
	if t == nil || t.StartLength == nil {
		return 0
	}
	return *t.StartLength
}

// GetThroughLength retrieves the value of the leaf ThroughLength from the NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThroughLength is set, it can
// safely use t.GetThroughLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThroughLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) GetThroughLength() uint32 {
	if t == nil || t.ThroughLength == nil {
		return 0
	}
	return *t.ThroughLength
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) GetType() NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MaskPattern {
		e.PopulateDefaults()
	}
	for _, e := range t.ToPrefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
		"type":      t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern represents the /nokia-conf/configure/groups/group/policy-options/prefix-list/prefix/mask-pattern YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_MaskPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix represents the /nokia-conf/configure/groups/group/policy-options/prefix-list/prefix/to-prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix struct {
	IpPrefix *string `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix.
func (*NokiaConf_Configure_Groups_Group_PolicyOptions_PrefixList_Prefix_ToPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port represents the /nokia-conf/configure/groups/group/port YANG schema element.
type NokiaConf_Configure_Groups_Group_Port struct {
	Access                     *NokiaConf_Configure_Groups_Group_Port_Access                 `path:"access" module:"nokia-conf" yangPresence:"true"`
	AdminState                 E_NokiaTypesSros_AdminState                                   `path:"admin-state" module:"nokia-conf"`
	Connector                  *NokiaConf_Configure_Groups_Group_Port_Connector              `path:"connector" module:"nokia-conf" yangPresence:"true"`
	DdmEvents                  *bool                                                         `path:"ddm-events" module:"nokia-conf"`
	Description                *string                                                       `path:"description" module:"nokia-conf"`
	DistCpuProtection          *NokiaConf_Configure_Groups_Group_Port_DistCpuProtection      `path:"dist-cpu-protection" module:"nokia-conf"`
	Dwdm                       *NokiaConf_Configure_Groups_Group_Port_Dwdm                   `path:"dwdm" module:"nokia-conf" yangPresence:"true"`
	Ethernet                   *NokiaConf_Configure_Groups_Group_Port_Ethernet               `path:"ethernet" module:"nokia-conf" yangPresence:"true"`
	Gnss                       *NokiaConf_Configure_Groups_Group_Port_Gnss                   `path:"gnss" module:"nokia-conf" yangPresence:"true"`
	HybridBufferAllocation     *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation `path:"hybrid-buffer-allocation" module:"nokia-conf"`
	ModifyBufferAllocation     *NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation `path:"modify-buffer-allocation" module:"nokia-conf"`
	MonitorAggEgressQueueStats *bool                                                         `path:"monitor-agg-egress-queue-stats" module:"nokia-conf"`
	Network                    *NokiaConf_Configure_Groups_Group_Port_Network                `path:"network" module:"nokia-conf" yangPresence:"true"`
	OperGroup                  *string                                                       `path:"oper-group" module:"nokia-conf"`
	Otu                        *NokiaConf_Configure_Groups_Group_Port_Otu                    `path:"otu" module:"nokia-conf" yangPresence:"true"`
	PortId                     *string                                                       `path:"port-id" module:"nokia-conf"`
	SonetSdh                   *NokiaConf_Configure_Groups_Group_Port_SonetSdh               `path:"sonet-sdh" module:"nokia-conf" yangPresence:"true"`
	Tdm                        *NokiaConf_Configure_Groups_Group_Port_Tdm                    `path:"tdm" module:"nokia-conf" yangPresence:"true"`
	Transceiver                *NokiaConf_Configure_Groups_Group_Port_Transceiver            `path:"transceiver" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port) IsYANGGoStruct() {}

// GetOrCreateAccess retrieves the value of the Access field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port) GetOrCreateAccess() *NokiaConf_Configure_Groups_Group_Port_Access {
	if t.Access != nil {
		return t.Access
	}
	t.Access = &NokiaConf_Configure_Groups_Group_Port_Access{}
	return t.Access
}

// GetOrCreateConnector retrieves the value of the Connector field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port) GetOrCreateConnector() *NokiaConf_Configure_Groups_Group_Port_Connector {
	if t.Connector != nil {
		return t.Connector
	}
	t.Connector = &NokiaConf_Configure_Groups_Group_Port_Connector{}
	return t.Connector
}

// GetOrCreateDistCpuProtection retrieves the value of the DistCpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port) GetOrCreateDistCpuProtection() *NokiaConf_Configure_Groups_Group_Port_DistCpuProtection {
	if t.DistCpuProtection != nil {
		return t.DistCpuProtection
	}
	t.DistCpuProtection = &NokiaConf_Configure_Groups_Group_Port_DistCpuProtection{}
	return t.DistCpuProtection
}

// GetOrCreateDwdm retrieves the value of the Dwdm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port) GetOrCreateDwdm() *NokiaConf_Configure_Groups_Group_Port_Dwdm {
	if t.Dwdm != nil {
		return t.Dwdm
	}
	t.Dwdm = &NokiaConf_Configure_Groups_Group_Port_Dwdm{}
	return t.Dwdm
}

// GetOrCreateEthernet retrieves the value of the Ethernet field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port) GetOrCreateEthernet() *NokiaConf_Configure_Groups_Group_Port_Ethernet {
	if t.Ethernet != nil {
		return t.Ethernet
	}
	t.Ethernet = &NokiaConf_Configure_Groups_Group_Port_Ethernet{}
	return t.Ethernet
}

// GetOrCreateGnss retrieves the value of the Gnss field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port) GetOrCreateGnss() *NokiaConf_Configure_Groups_Group_Port_Gnss {
	if t.Gnss != nil {
		return t.Gnss
	}
	t.Gnss = &NokiaConf_Configure_Groups_Group_Port_Gnss{}
	return t.Gnss
}

// GetOrCreateHybridBufferAllocation retrieves the value of the HybridBufferAllocation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port) GetOrCreateHybridBufferAllocation() *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation {
	if t.HybridBufferAllocation != nil {
		return t.HybridBufferAllocation
	}
	t.HybridBufferAllocation = &NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation{}
	return t.HybridBufferAllocation
}

// GetOrCreateModifyBufferAllocation retrieves the value of the ModifyBufferAllocation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port) GetOrCreateModifyBufferAllocation() *NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation {
	if t.ModifyBufferAllocation != nil {
		return t.ModifyBufferAllocation
	}
	t.ModifyBufferAllocation = &NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation{}
	return t.ModifyBufferAllocation
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Port_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Port_Network{}
	return t.Network
}

// GetOrCreateOtu retrieves the value of the Otu field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port) GetOrCreateOtu() *NokiaConf_Configure_Groups_Group_Port_Otu {
	if t.Otu != nil {
		return t.Otu
	}
	t.Otu = &NokiaConf_Configure_Groups_Group_Port_Otu{}
	return t.Otu
}

// GetOrCreateSonetSdh retrieves the value of the SonetSdh field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port) GetOrCreateSonetSdh() *NokiaConf_Configure_Groups_Group_Port_SonetSdh {
	if t.SonetSdh != nil {
		return t.SonetSdh
	}
	t.SonetSdh = &NokiaConf_Configure_Groups_Group_Port_SonetSdh{}
	return t.SonetSdh
}

// GetOrCreateTdm retrieves the value of the Tdm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port) GetOrCreateTdm() *NokiaConf_Configure_Groups_Group_Port_Tdm {
	if t.Tdm != nil {
		return t.Tdm
	}
	t.Tdm = &NokiaConf_Configure_Groups_Group_Port_Tdm{}
	return t.Tdm
}

// GetOrCreateTransceiver retrieves the value of the Transceiver field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port) GetOrCreateTransceiver() *NokiaConf_Configure_Groups_Group_Port_Transceiver {
	if t.Transceiver != nil {
		return t.Transceiver
	}
	t.Transceiver = &NokiaConf_Configure_Groups_Group_Port_Transceiver{}
	return t.Transceiver
}

// GetAccess returns the value of the Access struct pointer
// from NokiaConf_Configure_Groups_Group_Port. If the receiver or the field Access is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port) GetAccess() *NokiaConf_Configure_Groups_Group_Port_Access {
	if t != nil && t.Access != nil {
		return t.Access
	}
	return nil
}

// GetConnector returns the value of the Connector struct pointer
// from NokiaConf_Configure_Groups_Group_Port. If the receiver or the field Connector is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port) GetConnector() *NokiaConf_Configure_Groups_Group_Port_Connector {
	if t != nil && t.Connector != nil {
		return t.Connector
	}
	return nil
}

// GetDistCpuProtection returns the value of the DistCpuProtection struct pointer
// from NokiaConf_Configure_Groups_Group_Port. If the receiver or the field DistCpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port) GetDistCpuProtection() *NokiaConf_Configure_Groups_Group_Port_DistCpuProtection {
	if t != nil && t.DistCpuProtection != nil {
		return t.DistCpuProtection
	}
	return nil
}

// GetDwdm returns the value of the Dwdm struct pointer
// from NokiaConf_Configure_Groups_Group_Port. If the receiver or the field Dwdm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port) GetDwdm() *NokiaConf_Configure_Groups_Group_Port_Dwdm {
	if t != nil && t.Dwdm != nil {
		return t.Dwdm
	}
	return nil
}

// GetEthernet returns the value of the Ethernet struct pointer
// from NokiaConf_Configure_Groups_Group_Port. If the receiver or the field Ethernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port) GetEthernet() *NokiaConf_Configure_Groups_Group_Port_Ethernet {
	if t != nil && t.Ethernet != nil {
		return t.Ethernet
	}
	return nil
}

// GetGnss returns the value of the Gnss struct pointer
// from NokiaConf_Configure_Groups_Group_Port. If the receiver or the field Gnss is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port) GetGnss() *NokiaConf_Configure_Groups_Group_Port_Gnss {
	if t != nil && t.Gnss != nil {
		return t.Gnss
	}
	return nil
}

// GetHybridBufferAllocation returns the value of the HybridBufferAllocation struct pointer
// from NokiaConf_Configure_Groups_Group_Port. If the receiver or the field HybridBufferAllocation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port) GetHybridBufferAllocation() *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation {
	if t != nil && t.HybridBufferAllocation != nil {
		return t.HybridBufferAllocation
	}
	return nil
}

// GetModifyBufferAllocation returns the value of the ModifyBufferAllocation struct pointer
// from NokiaConf_Configure_Groups_Group_Port. If the receiver or the field ModifyBufferAllocation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port) GetModifyBufferAllocation() *NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation {
	if t != nil && t.ModifyBufferAllocation != nil {
		return t.ModifyBufferAllocation
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Port. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port) GetNetwork() *NokiaConf_Configure_Groups_Group_Port_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetOtu returns the value of the Otu struct pointer
// from NokiaConf_Configure_Groups_Group_Port. If the receiver or the field Otu is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port) GetOtu() *NokiaConf_Configure_Groups_Group_Port_Otu {
	if t != nil && t.Otu != nil {
		return t.Otu
	}
	return nil
}

// GetSonetSdh returns the value of the SonetSdh struct pointer
// from NokiaConf_Configure_Groups_Group_Port. If the receiver or the field SonetSdh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port) GetSonetSdh() *NokiaConf_Configure_Groups_Group_Port_SonetSdh {
	if t != nil && t.SonetSdh != nil {
		return t.SonetSdh
	}
	return nil
}

// GetTdm returns the value of the Tdm struct pointer
// from NokiaConf_Configure_Groups_Group_Port. If the receiver or the field Tdm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port) GetTdm() *NokiaConf_Configure_Groups_Group_Port_Tdm {
	if t != nil && t.Tdm != nil {
		return t.Tdm
	}
	return nil
}

// GetTransceiver returns the value of the Transceiver struct pointer
// from NokiaConf_Configure_Groups_Group_Port. If the receiver or the field Transceiver is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port) GetTransceiver() *NokiaConf_Configure_Groups_Group_Port_Transceiver {
	if t != nil && t.Transceiver != nil {
		return t.Transceiver
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetDdmEvents retrieves the value of the leaf DdmEvents from the NokiaConf_Configure_Groups_Group_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DdmEvents is set, it can
// safely use t.GetDdmEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DdmEvents == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port) GetDdmEvents() bool {
	if t == nil || t.DdmEvents == nil {
		return true
	}
	return *t.DdmEvents
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMonitorAggEgressQueueStats retrieves the value of the leaf MonitorAggEgressQueueStats from the NokiaConf_Configure_Groups_Group_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorAggEgressQueueStats is set, it can
// safely use t.GetMonitorAggEgressQueueStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorAggEgressQueueStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port) GetMonitorAggEgressQueueStats() bool {
	if t == nil || t.MonitorAggEgressQueueStats == nil {
		return false
	}
	return *t.MonitorAggEgressQueueStats
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Groups_Group_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_Groups_Group_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DdmEvents == nil {
		var v bool = true
		t.DdmEvents = &v
	}
	if t.MonitorAggEgressQueueStats == nil {
		var v bool = false
		t.MonitorAggEgressQueueStats = &v
	}
	t.Access.PopulateDefaults()
	t.Connector.PopulateDefaults()
	t.DistCpuProtection.PopulateDefaults()
	t.Dwdm.PopulateDefaults()
	t.Ethernet.PopulateDefaults()
	t.Gnss.PopulateDefaults()
	t.HybridBufferAllocation.PopulateDefaults()
	t.ModifyBufferAllocation.PopulateDefaults()
	t.Network.PopulateDefaults()
	t.Otu.PopulateDefaults()
	t.SonetSdh.PopulateDefaults()
	t.Tdm.PopulateDefaults()
	t.Transceiver.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortId == nil {
		return nil, fmt.Errorf("nil value for key PortId")
	}

	return map[string]interface{}{
		"port-id": *t.PortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port.
func (*NokiaConf_Configure_Groups_Group_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PortPolicy represents the /nokia-conf/configure/groups/group/port-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_PortPolicy struct {
	Description               *string `path:"description" module:"nokia-conf"`
	EgressPortSchedulerPolicy *string `path:"egress-port-scheduler-policy" module:"nokia-conf"`
	Name                      *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PortPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PortPolicy) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_PortPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PortPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEgressPortSchedulerPolicy retrieves the value of the leaf EgressPortSchedulerPolicy from the NokiaConf_Configure_Groups_Group_PortPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressPortSchedulerPolicy is set, it can
// safely use t.GetEgressPortSchedulerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressPortSchedulerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PortPolicy) GetEgressPortSchedulerPolicy() string {
	if t == nil || t.EgressPortSchedulerPolicy == nil {
		return ""
	}
	return *t.EgressPortSchedulerPolicy
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_PortPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PortPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PortPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PortPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PortPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PortPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PortPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PortPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PortPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PortPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PortPolicy.
func (*NokiaConf_Configure_Groups_Group_PortPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PortXc represents the /nokia-conf/configure/groups/group/port-xc YANG schema element.
type NokiaConf_Configure_Groups_Group_PortXc struct {
	Pxc map[NokiaConf_Configure_Groups_Group_PortXc_Pxc_PxcId_Union]*NokiaConf_Configure_Groups_Group_PortXc_Pxc `path:"pxc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PortXc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PortXc) IsYANGGoStruct() {}

// NewPxc creates a new entry in the Pxc list of the
// NokiaConf_Configure_Groups_Group_PortXc struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_PortXc) NewPxc(PxcId NokiaConf_Configure_Groups_Group_PortXc_Pxc_PxcId_Union) (*NokiaConf_Configure_Groups_Group_PortXc_Pxc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pxc == nil {
		t.Pxc = make(map[NokiaConf_Configure_Groups_Group_PortXc_Pxc_PxcId_Union]*NokiaConf_Configure_Groups_Group_PortXc_Pxc)
	}

	key := PxcId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pxc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pxc", key)
	}

	t.Pxc[key] = &NokiaConf_Configure_Groups_Group_PortXc_Pxc{
		PxcId: PxcId,
	}

	return t.Pxc[key], nil
}

// RenamePxc renames an entry in the list Pxc within
// the NokiaConf_Configure_Groups_Group_PortXc struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_PortXc) RenamePxc(oldK, newK NokiaConf_Configure_Groups_Group_PortXc_Pxc_PxcId_Union) error {
	if _, ok := t.Pxc[newK]; ok {
		return fmt.Errorf("key %v already exists in Pxc", newK)
	}

	e, ok := t.Pxc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pxc", oldK)
	}
	e.PxcId = newK

	t.Pxc[newK] = e
	delete(t.Pxc, oldK)
	return nil
}

// GetOrCreatePxc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PortXc. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_PortXc) GetOrCreatePxc(PxcId NokiaConf_Configure_Groups_Group_PortXc_Pxc_PxcId_Union) *NokiaConf_Configure_Groups_Group_PortXc_Pxc {

	key := PxcId

	if v, ok := t.Pxc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPxc(PxcId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePxc got unexpected error: %v", err))
	}
	return v
}

// GetPxc retrieves the value with the specified key from
// the Pxc map field of NokiaConf_Configure_Groups_Group_PortXc. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PortXc) GetPxc(PxcId NokiaConf_Configure_Groups_Group_PortXc_Pxc_PxcId_Union) *NokiaConf_Configure_Groups_Group_PortXc_Pxc {

	if t == nil {
		return nil
	}

	key := PxcId

	if lm, ok := t.Pxc[key]; ok {
		return lm
	}
	return nil
}

// DeletePxc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PortXc. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_PortXc) DeletePxc(PxcId NokiaConf_Configure_Groups_Group_PortXc_Pxc_PxcId_Union) {
	key := PxcId

	delete(t.Pxc, key)
}

// AppendPxc appends the supplied NokiaConf_Configure_Groups_Group_PortXc_Pxc struct to the
// list Pxc of NokiaConf_Configure_Groups_Group_PortXc. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PortXc_Pxc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_PortXc) AppendPxc(v *NokiaConf_Configure_Groups_Group_PortXc_Pxc) error {
	key := v.PxcId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pxc == nil {
		t.Pxc = make(map[NokiaConf_Configure_Groups_Group_PortXc_Pxc_PxcId_Union]*NokiaConf_Configure_Groups_Group_PortXc_Pxc)
	}

	if _, ok := t.Pxc[key]; ok {
		return fmt.Errorf("duplicate key for list Pxc %v", key)
	}

	t.Pxc[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PortXc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PortXc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Pxc {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PortXc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PortXc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PortXc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PortXc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PortXc.
func (*NokiaConf_Configure_Groups_Group_PortXc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PortXc_Pxc represents the /nokia-conf/configure/groups/group/port-xc/pxc YANG schema element.
type NokiaConf_Configure_Groups_Group_PortXc_Pxc struct {
	AdminState  E_NokiaTypesSros_AdminState                             `path:"admin-state" module:"nokia-conf"`
	Description *string                                                 `path:"description" module:"nokia-conf"`
	PortId      *string                                                 `path:"port-id" module:"nokia-conf"`
	PxcId       NokiaConf_Configure_Groups_Group_PortXc_Pxc_PxcId_Union `path:"pxc-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PortXc_Pxc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PortXc_Pxc) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_PortXc_Pxc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PortXc_Pxc) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_PortXc_Pxc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PortXc_Pxc) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_Groups_Group_PortXc_Pxc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PortXc_Pxc) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// GetPxcId retrieves the value of the leaf PxcId from the NokiaConf_Configure_Groups_Group_PortXc_Pxc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PxcId is set, it can
// safely use t.GetPxcId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PxcId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PortXc_Pxc) GetPxcId() NokiaConf_Configure_Groups_Group_PortXc_Pxc_PxcId_Union {
	if t == nil || t.PxcId == nil {
		return nil
	}
	return t.PxcId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PortXc_Pxc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PortXc_Pxc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PortXc_Pxc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PortXc_Pxc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"pxc-id": t.PxcId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PortXc_Pxc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PortXc_Pxc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PortXc_Pxc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PortXc_Pxc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PortXc_Pxc.
func (*NokiaConf_Configure_Groups_Group_PortXc_Pxc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Access represents the /nokia-conf/configure/groups/group/port/access YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Access struct {
	Egress  *NokiaConf_Configure_Groups_Group_Port_Access_Egress  `path:"egress" module:"nokia-conf"`
	Ingress *NokiaConf_Configure_Groups_Group_Port_Access_Ingress `path:"ingress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Access implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Access) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Access) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Port_Access_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Port_Access_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Access) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Port_Access_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Port_Access_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Access. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Access) GetEgress() *NokiaConf_Configure_Groups_Group_Port_Access_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Access. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Access) GetIngress() *NokiaConf_Configure_Groups_Group_Port_Access_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Access
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Access) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Access) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Access"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Access) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Access) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Access.
func (*NokiaConf_Configure_Groups_Group_Port_Access) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Access_Egress represents the /nokia-conf/configure/groups/group/port/access/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Access_Egress struct {
	Pool map[string]*NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool `path:"pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Access_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Access_Egress) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Groups_Group_Port_Access_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress) NewPool(Name string) (*NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool{
		Name: &Name,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Groups_Group_Port_Access_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.Name = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Access_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress) GetOrCreatePool(Name string) *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool {

	key := Name

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Groups_Group_Port_Access_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress) GetPool(Name string) *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Access_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress) DeletePool(Name string) {
	key := Name

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool struct to the
// list Pool of NokiaConf_Configure_Groups_Group_Port_Access_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress) AppendPool(v *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Access_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Access_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Access_Egress.
func (*NokiaConf_Configure_Groups_Group_Port_Access_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool represents the /nokia-conf/configure/groups/group/port/access/egress/pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool struct {
	AmberAlarmThreshold *uint32                                                           `path:"amber-alarm-threshold" module:"nokia-conf"`
	Name                *string                                                           `path:"name" module:"nokia-conf"`
	RedAlarmThreshold   *uint32                                                           `path:"red-alarm-threshold" module:"nokia-conf"`
	ResvCbs             *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs `path:"resv-cbs" module:"nokia-conf"`
	SlopePolicy         *string                                                           `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool) IsYANGGoStruct() {}

// GetOrCreateResvCbs retrieves the value of the ResvCbs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool) GetOrCreateResvCbs() *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs {
	if t.ResvCbs != nil {
		return t.ResvCbs
	}
	t.ResvCbs = &NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs{}
	return t.ResvCbs
}

// GetResvCbs returns the value of the ResvCbs struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool. If the receiver or the field ResvCbs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool) GetResvCbs() *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs {
	if t != nil && t.ResvCbs != nil {
		return t.ResvCbs
	}
	return nil
}

// GetAmberAlarmThreshold retrieves the value of the leaf AmberAlarmThreshold from the NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AmberAlarmThreshold is set, it can
// safely use t.GetAmberAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AmberAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool) GetAmberAlarmThreshold() uint32 {
	if t == nil || t.AmberAlarmThreshold == nil {
		return 0
	}
	return *t.AmberAlarmThreshold
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRedAlarmThreshold retrieves the value of the leaf RedAlarmThreshold from the NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedAlarmThreshold is set, it can
// safely use t.GetRedAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool) GetRedAlarmThreshold() uint32 {
	if t == nil || t.RedAlarmThreshold == nil {
		return 0
	}
	return *t.RedAlarmThreshold
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ResvCbs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool.
func (*NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs represents the /nokia-conf/configure/groups/group/port/access/egress/pool/resv-cbs YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs struct {
	AmberAlarmAction *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction `path:"amber-alarm-action" module:"nokia-conf"`
	Cbs              NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_Cbs_Union         `path:"cbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs) IsYANGGoStruct() {}

// GetOrCreateAmberAlarmAction retrieves the value of the AmberAlarmAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs) GetOrCreateAmberAlarmAction() *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction {
	if t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	t.AmberAlarmAction = &NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction{}
	return t.AmberAlarmAction
}

// GetAmberAlarmAction returns the value of the AmberAlarmAction struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs. If the receiver or the field AmberAlarmAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs) GetAmberAlarmAction() *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction {
	if t != nil && t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs) GetCbs() NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_Cbs_Enum_auto
	}
	return t.Cbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		t.Cbs = NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_Cbs_Enum_auto
	}
	t.AmberAlarmAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs.
func (*NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction represents the /nokia-conf/configure/groups/group/port/access/egress/pool/resv-cbs/amber-alarm-action YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction struct {
	Max  *uint32 `path:"max" module:"nokia-conf"`
	Step *uint32 `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction) IsYANGGoStruct() {
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction) GetStep() uint32 {
	if t == nil || t.Step == nil {
		return 0
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction.
func (*NokiaConf_Configure_Groups_Group_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Access_Ingress represents the /nokia-conf/configure/groups/group/port/access/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Access_Ingress struct {
	Pool map[string]*NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool `path:"pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Access_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Access_Ingress) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Groups_Group_Port_Access_Ingress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress) NewPool(Name string) (*NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool{
		Name: &Name,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Groups_Group_Port_Access_Ingress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.Name = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Access_Ingress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress) GetOrCreatePool(Name string) *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool {

	key := Name

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Groups_Group_Port_Access_Ingress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress) GetPool(Name string) *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Access_Ingress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress) DeletePool(Name string) {
	key := Name

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool struct to the
// list Pool of NokiaConf_Configure_Groups_Group_Port_Access_Ingress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress) AppendPool(v *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Access_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Access_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Access_Ingress.
func (*NokiaConf_Configure_Groups_Group_Port_Access_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool represents the /nokia-conf/configure/groups/group/port/access/ingress/pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool struct {
	AmberAlarmThreshold *uint32                                                            `path:"amber-alarm-threshold" module:"nokia-conf"`
	Name                *string                                                            `path:"name" module:"nokia-conf"`
	RedAlarmThreshold   *uint32                                                            `path:"red-alarm-threshold" module:"nokia-conf"`
	ResvCbs             *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs `path:"resv-cbs" module:"nokia-conf"`
	SlopePolicy         *string                                                            `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool) IsYANGGoStruct() {}

// GetOrCreateResvCbs retrieves the value of the ResvCbs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool) GetOrCreateResvCbs() *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs {
	if t.ResvCbs != nil {
		return t.ResvCbs
	}
	t.ResvCbs = &NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs{}
	return t.ResvCbs
}

// GetResvCbs returns the value of the ResvCbs struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool. If the receiver or the field ResvCbs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool) GetResvCbs() *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs {
	if t != nil && t.ResvCbs != nil {
		return t.ResvCbs
	}
	return nil
}

// GetAmberAlarmThreshold retrieves the value of the leaf AmberAlarmThreshold from the NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AmberAlarmThreshold is set, it can
// safely use t.GetAmberAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AmberAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool) GetAmberAlarmThreshold() uint32 {
	if t == nil || t.AmberAlarmThreshold == nil {
		return 0
	}
	return *t.AmberAlarmThreshold
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRedAlarmThreshold retrieves the value of the leaf RedAlarmThreshold from the NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedAlarmThreshold is set, it can
// safely use t.GetRedAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool) GetRedAlarmThreshold() uint32 {
	if t == nil || t.RedAlarmThreshold == nil {
		return 0
	}
	return *t.RedAlarmThreshold
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ResvCbs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool.
func (*NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs represents the /nokia-conf/configure/groups/group/port/access/ingress/pool/resv-cbs YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs struct {
	AmberAlarmAction *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction `path:"amber-alarm-action" module:"nokia-conf"`
	Cbs              NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_Cbs_Union         `path:"cbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs) IsYANGGoStruct() {}

// GetOrCreateAmberAlarmAction retrieves the value of the AmberAlarmAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs) GetOrCreateAmberAlarmAction() *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction {
	if t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	t.AmberAlarmAction = &NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction{}
	return t.AmberAlarmAction
}

// GetAmberAlarmAction returns the value of the AmberAlarmAction struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs. If the receiver or the field AmberAlarmAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs) GetAmberAlarmAction() *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction {
	if t != nil && t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs) GetCbs() NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_Cbs_Enum_auto
	}
	return t.Cbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		t.Cbs = NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_Cbs_Enum_auto
	}
	t.AmberAlarmAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs.
func (*NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction represents the /nokia-conf/configure/groups/group/port/access/ingress/pool/resv-cbs/amber-alarm-action YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction struct {
	Max  *uint32 `path:"max" module:"nokia-conf"`
	Step *uint32 `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) IsYANGGoStruct() {
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) GetStep() uint32 {
	if t == nil || t.Step == nil {
		return 0
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction.
func (*NokiaConf_Configure_Groups_Group_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Connector represents the /nokia-conf/configure/groups/group/port/connector YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Connector struct {
	Breakout  E_NokiaConf_Configure_Groups_Group_Port_Connector_Breakout  `path:"breakout" module:"nokia-conf"`
	RsFecMode E_NokiaConf_Configure_Groups_Group_Port_Connector_RsFecMode `path:"rs-fec-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Connector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Connector) IsYANGGoStruct() {}

// GetBreakout retrieves the value of the leaf Breakout from the NokiaConf_Configure_Groups_Group_Port_Connector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Breakout is set, it can
// safely use t.GetBreakout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Breakout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Connector) GetBreakout() E_NokiaConf_Configure_Groups_Group_Port_Connector_Breakout {
	if t == nil || t.Breakout == 0 {
		return 0
	}
	return t.Breakout
}

// GetRsFecMode retrieves the value of the leaf RsFecMode from the NokiaConf_Configure_Groups_Group_Port_Connector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RsFecMode is set, it can
// safely use t.GetRsFecMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RsFecMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Connector) GetRsFecMode() E_NokiaConf_Configure_Groups_Group_Port_Connector_RsFecMode {
	if t == nil || t.RsFecMode == 0 {
		return 0
	}
	return t.RsFecMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Connector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Connector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Connector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Connector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Connector) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Connector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Connector.
func (*NokiaConf_Configure_Groups_Group_Port_Connector) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_DistCpuProtection represents the /nokia-conf/configure/groups/group/port/dist-cpu-protection YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_DistCpuProtection struct {
	Policy *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_DistCpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_DistCpuProtection) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Port_DistCpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_DistCpuProtection) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_DistCpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_DistCpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_DistCpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_DistCpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_DistCpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_DistCpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_DistCpuProtection.
func (*NokiaConf_Configure_Groups_Group_Port_DistCpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Dwdm represents the /nokia-conf/configure/groups/group/port/dwdm YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Dwdm struct {
	Channel     *uint32                                                 `path:"channel" module:"nokia-conf"`
	Coherent    *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent    `path:"coherent" module:"nokia-conf" yangPresence:"true"`
	Frequency   *uint32                                                 `path:"frequency" module:"nokia-conf"`
	RxdtvAdjust *bool                                                   `path:"rxdtv-adjust" module:"nokia-conf"`
	Wavetracker *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker `path:"wavetracker" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Dwdm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Dwdm) IsYANGGoStruct() {}

// GetOrCreateCoherent retrieves the value of the Coherent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm) GetOrCreateCoherent() *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent {
	if t.Coherent != nil {
		return t.Coherent
	}
	t.Coherent = &NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent{}
	return t.Coherent
}

// GetOrCreateWavetracker retrieves the value of the Wavetracker field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm) GetOrCreateWavetracker() *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker {
	if t.Wavetracker != nil {
		return t.Wavetracker
	}
	t.Wavetracker = &NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker{}
	return t.Wavetracker
}

// GetCoherent returns the value of the Coherent struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Dwdm. If the receiver or the field Coherent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm) GetCoherent() *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent {
	if t != nil && t.Coherent != nil {
		return t.Coherent
	}
	return nil
}

// GetWavetracker returns the value of the Wavetracker struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Dwdm. If the receiver or the field Wavetracker is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm) GetWavetracker() *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker {
	if t != nil && t.Wavetracker != nil {
		return t.Wavetracker
	}
	return nil
}

// GetChannel retrieves the value of the leaf Channel from the NokiaConf_Configure_Groups_Group_Port_Dwdm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Channel is set, it can
// safely use t.GetChannel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Channel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm) GetChannel() uint32 {
	if t == nil || t.Channel == nil {
		return 0
	}
	return *t.Channel
}

// GetFrequency retrieves the value of the leaf Frequency from the NokiaConf_Configure_Groups_Group_Port_Dwdm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Frequency is set, it can
// safely use t.GetFrequency() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Frequency == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm) GetFrequency() uint32 {
	if t == nil || t.Frequency == nil {
		return 0
	}
	return *t.Frequency
}

// GetRxdtvAdjust retrieves the value of the leaf RxdtvAdjust from the NokiaConf_Configure_Groups_Group_Port_Dwdm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxdtvAdjust is set, it can
// safely use t.GetRxdtvAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxdtvAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm) GetRxdtvAdjust() bool {
	if t == nil || t.RxdtvAdjust == nil {
		return false
	}
	return *t.RxdtvAdjust
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Dwdm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Coherent.PopulateDefaults()
	t.Wavetracker.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Dwdm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Dwdm.
func (*NokiaConf_Configure_Groups_Group_Port_Dwdm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent represents the /nokia-conf/configure/groups/group/port/dwdm/coherent YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent struct {
	Channel       *uint32                                                          `path:"channel" module:"nokia-conf"`
	Compatibility E_NokiaTypesPort_OpticalCompatibilityMode                        `path:"compatibility" module:"nokia-conf"`
	CprWindowSize *uint32                                                          `path:"cpr-window-size" module:"nokia-conf"`
	Dispersion    *int32                                                           `path:"dispersion" module:"nokia-conf"`
	Mode          E_NokiaTypesPort_OpticalDispersionControlMode                    `path:"mode" module:"nokia-conf"`
	ReportAlarm   *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm `path:"report-alarm" module:"nokia-conf"`
	RxLosReaction E_NokiaTypesPort_LosReaction                                     `path:"rx-los-reaction" module:"nokia-conf"`
	RxLosThresh   *float64                                                         `path:"rx-los-thresh" module:"nokia-conf"`
	Sweep         *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_Sweep       `path:"sweep" module:"nokia-conf"`
	TargetPower   *float64                                                         `path:"target-power" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent) IsYANGGoStruct() {}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent) GetOrCreateReportAlarm() *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm{}
	return t.ReportAlarm
}

// GetOrCreateSweep retrieves the value of the Sweep field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent) GetOrCreateSweep() *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_Sweep {
	if t.Sweep != nil {
		return t.Sweep
	}
	t.Sweep = &NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_Sweep{}
	return t.Sweep
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent) GetReportAlarm() *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetSweep returns the value of the Sweep struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent. If the receiver or the field Sweep is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent) GetSweep() *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_Sweep {
	if t != nil && t.Sweep != nil {
		return t.Sweep
	}
	return nil
}

// GetChannel retrieves the value of the leaf Channel from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Channel is set, it can
// safely use t.GetChannel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Channel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent) GetChannel() uint32 {
	if t == nil || t.Channel == nil {
		return 0
	}
	return *t.Channel
}

// GetCompatibility retrieves the value of the leaf Compatibility from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Compatibility is set, it can
// safely use t.GetCompatibility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Compatibility == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent) GetCompatibility() E_NokiaTypesPort_OpticalCompatibilityMode {
	if t == nil || t.Compatibility == 0 {
		return NokiaTypesPort_OpticalCompatibilityMode_long_haul
	}
	return t.Compatibility
}

// GetCprWindowSize retrieves the value of the leaf CprWindowSize from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CprWindowSize is set, it can
// safely use t.GetCprWindowSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CprWindowSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent) GetCprWindowSize() uint32 {
	if t == nil || t.CprWindowSize == nil {
		return 32
	}
	return *t.CprWindowSize
}

// GetDispersion retrieves the value of the leaf Dispersion from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dispersion is set, it can
// safely use t.GetDispersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dispersion == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent) GetDispersion() int32 {
	if t == nil || t.Dispersion == nil {
		return 0
	}
	return *t.Dispersion
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent) GetMode() E_NokiaTypesPort_OpticalDispersionControlMode {
	if t == nil || t.Mode == 0 {
		return NokiaTypesPort_OpticalDispersionControlMode_automatic
	}
	return t.Mode
}

// GetRxLosReaction retrieves the value of the leaf RxLosReaction from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxLosReaction is set, it can
// safely use t.GetRxLosReaction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxLosReaction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent) GetRxLosReaction() E_NokiaTypesPort_LosReaction {
	if t == nil || t.RxLosReaction == 0 {
		return NokiaTypesPort_LosReaction_squelch
	}
	return t.RxLosReaction
}

// GetRxLosThresh retrieves the value of the leaf RxLosThresh from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxLosThresh is set, it can
// safely use t.GetRxLosThresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxLosThresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent) GetRxLosThresh() float64 {
	if t == nil || t.RxLosThresh == nil {
		return -23
	}
	return *t.RxLosThresh
}

// GetTargetPower retrieves the value of the leaf TargetPower from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetPower is set, it can
// safely use t.GetTargetPower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetPower == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent) GetTargetPower() float64 {
	if t == nil || t.TargetPower == nil {
		return 1
	}
	return *t.TargetPower
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Compatibility == 0 {
		t.Compatibility = NokiaTypesPort_OpticalCompatibilityMode_long_haul
	}
	if t.CprWindowSize == nil {
		var v uint32 = 32
		t.CprWindowSize = &v
	}
	if t.Mode == 0 {
		t.Mode = NokiaTypesPort_OpticalDispersionControlMode_automatic
	}
	if t.RxLosReaction == 0 {
		t.RxLosReaction = NokiaTypesPort_LosReaction_squelch
	}
	if t.RxLosThresh == nil {
		var v float64 = -23
		t.RxLosThresh = &v
	}
	if t.TargetPower == nil {
		var v float64 = 1
		t.TargetPower = &v
	}
	t.ReportAlarm.PopulateDefaults()
	t.Sweep.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent.
func (*NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm represents the /nokia-conf/configure/groups/group/port/dwdm/coherent/report-alarm YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm struct {
	Hosttx *bool `path:"hosttx" module:"nokia-conf"`
	Mod    *bool `path:"mod" module:"nokia-conf"`
	Modflt *bool `path:"modflt" module:"nokia-conf"`
	Netrx  *bool `path:"netrx" module:"nokia-conf"`
	Nettx  *bool `path:"nettx" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm) IsYANGGoStruct() {}

// GetHosttx retrieves the value of the leaf Hosttx from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hosttx is set, it can
// safely use t.GetHosttx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hosttx == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm) GetHosttx() bool {
	if t == nil || t.Hosttx == nil {
		return true
	}
	return *t.Hosttx
}

// GetMod retrieves the value of the leaf Mod from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mod is set, it can
// safely use t.GetMod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm) GetMod() bool {
	if t == nil || t.Mod == nil {
		return true
	}
	return *t.Mod
}

// GetModflt retrieves the value of the leaf Modflt from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modflt is set, it can
// safely use t.GetModflt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modflt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm) GetModflt() bool {
	if t == nil || t.Modflt == nil {
		return true
	}
	return *t.Modflt
}

// GetNetrx retrieves the value of the leaf Netrx from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Netrx is set, it can
// safely use t.GetNetrx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Netrx == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm) GetNetrx() bool {
	if t == nil || t.Netrx == nil {
		return true
	}
	return *t.Netrx
}

// GetNettx retrieves the value of the leaf Nettx from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Nettx is set, it can
// safely use t.GetNettx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Nettx == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm) GetNettx() bool {
	if t == nil || t.Nettx == nil {
		return true
	}
	return *t.Nettx
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Hosttx == nil {
		var v bool = true
		t.Hosttx = &v
	}
	if t.Mod == nil {
		var v bool = true
		t.Mod = &v
	}
	if t.Modflt == nil {
		var v bool = true
		t.Modflt = &v
	}
	if t.Netrx == nil {
		var v bool = true
		t.Netrx = &v
	}
	if t.Nettx == nil {
		var v bool = true
		t.Nettx = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm.
func (*NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_Sweep represents the /nokia-conf/configure/groups/group/port/dwdm/coherent/sweep YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_Sweep struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_Sweep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_Sweep) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_Sweep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_Sweep) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 2000
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_Sweep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_Sweep) GetStart() int32 {
	if t == nil || t.Start == nil {
		return -25500
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_Sweep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_Sweep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v int32 = 2000
		t.End = &v
	}
	if t.Start == nil {
		var v int32 = -25500
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_Sweep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_Sweep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_Sweep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_Sweep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_Sweep.
func (*NokiaConf_Configure_Groups_Group_Port_Dwdm_Coherent_Sweep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker represents the /nokia-conf/configure/groups/group/port/dwdm/wavetracker YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker struct {
	Encode       *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_Encode       `path:"encode" module:"nokia-conf" yangPresence:"true"`
	PowerControl *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_PowerControl `path:"power-control" module:"nokia-conf" yangPresence:"true"`
	ReportAlarm  *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm  `path:"report-alarm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker) IsYANGGoStruct() {}

// GetOrCreateEncode retrieves the value of the Encode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker) GetOrCreateEncode() *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_Encode {
	if t.Encode != nil {
		return t.Encode
	}
	t.Encode = &NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_Encode{}
	return t.Encode
}

// GetOrCreatePowerControl retrieves the value of the PowerControl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker) GetOrCreatePowerControl() *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_PowerControl {
	if t.PowerControl != nil {
		return t.PowerControl
	}
	t.PowerControl = &NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_PowerControl{}
	return t.PowerControl
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker) GetOrCreateReportAlarm() *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm{}
	return t.ReportAlarm
}

// GetEncode returns the value of the Encode struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker. If the receiver or the field Encode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker) GetEncode() *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_Encode {
	if t != nil && t.Encode != nil {
		return t.Encode
	}
	return nil
}

// GetPowerControl returns the value of the PowerControl struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker. If the receiver or the field PowerControl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker) GetPowerControl() *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_PowerControl {
	if t != nil && t.PowerControl != nil {
		return t.PowerControl
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker) GetReportAlarm() *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Encode.PopulateDefaults()
	t.PowerControl.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker.
func (*NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_Encode represents the /nokia-conf/configure/groups/group/port/dwdm/wavetracker/encode YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_Encode struct {
	Key1 *uint32 `path:"key1" module:"nokia-conf"`
	Key2 *uint32 `path:"key2" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_Encode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_Encode) IsYANGGoStruct() {}

// GetKey1 retrieves the value of the leaf Key1 from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_Encode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key1 is set, it can
// safely use t.GetKey1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_Encode) GetKey1() uint32 {
	if t == nil || t.Key1 == nil {
		return 0
	}
	return *t.Key1
}

// GetKey2 retrieves the value of the leaf Key2 from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_Encode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key2 is set, it can
// safely use t.GetKey2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_Encode) GetKey2() uint32 {
	if t == nil || t.Key2 == nil {
		return 0
	}
	return *t.Key2
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_Encode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_Encode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_Encode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_Encode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_Encode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_Encode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_Encode.
func (*NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_Encode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_PowerControl represents the /nokia-conf/configure/groups/group/port/dwdm/wavetracker/power-control YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_PowerControl struct {
	TargetPower *float64 `path:"target-power" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_PowerControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_PowerControl) IsYANGGoStruct() {}

// GetTargetPower retrieves the value of the leaf TargetPower from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_PowerControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetPower is set, it can
// safely use t.GetTargetPower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetPower == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_PowerControl) GetTargetPower() float64 {
	if t == nil || t.TargetPower == nil {
		return -20
	}
	return *t.TargetPower
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_PowerControl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_PowerControl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.TargetPower == nil {
		var v float64 = -20
		t.TargetPower = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_PowerControl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_PowerControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_PowerControl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_PowerControl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_PowerControl.
func (*NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_PowerControl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm represents the /nokia-conf/configure/groups/group/port/dwdm/wavetracker/report-alarm YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm struct {
	EncoderDegrade        *bool `path:"encoder-degrade" module:"nokia-conf"`
	EncoderFailure        *bool `path:"encoder-failure" module:"nokia-conf"`
	MissingPluggableVoa   *bool `path:"missing-pluggable-voa" module:"nokia-conf"`
	PowerControlDegrade   *bool `path:"power-control-degrade" module:"nokia-conf"`
	PowerControlFailure   *bool `path:"power-control-failure" module:"nokia-conf"`
	PowerControlHighLimit *bool `path:"power-control-high-limit" module:"nokia-conf"`
	PowerControlLowLimit  *bool `path:"power-control-low-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm) IsYANGGoStruct() {}

// GetEncoderDegrade retrieves the value of the leaf EncoderDegrade from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncoderDegrade is set, it can
// safely use t.GetEncoderDegrade() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncoderDegrade == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm) GetEncoderDegrade() bool {
	if t == nil || t.EncoderDegrade == nil {
		return true
	}
	return *t.EncoderDegrade
}

// GetEncoderFailure retrieves the value of the leaf EncoderFailure from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncoderFailure is set, it can
// safely use t.GetEncoderFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncoderFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm) GetEncoderFailure() bool {
	if t == nil || t.EncoderFailure == nil {
		return true
	}
	return *t.EncoderFailure
}

// GetMissingPluggableVoa retrieves the value of the leaf MissingPluggableVoa from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MissingPluggableVoa is set, it can
// safely use t.GetMissingPluggableVoa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MissingPluggableVoa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm) GetMissingPluggableVoa() bool {
	if t == nil || t.MissingPluggableVoa == nil {
		return true
	}
	return *t.MissingPluggableVoa
}

// GetPowerControlDegrade retrieves the value of the leaf PowerControlDegrade from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerControlDegrade is set, it can
// safely use t.GetPowerControlDegrade() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerControlDegrade == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm) GetPowerControlDegrade() bool {
	if t == nil || t.PowerControlDegrade == nil {
		return true
	}
	return *t.PowerControlDegrade
}

// GetPowerControlFailure retrieves the value of the leaf PowerControlFailure from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerControlFailure is set, it can
// safely use t.GetPowerControlFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerControlFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm) GetPowerControlFailure() bool {
	if t == nil || t.PowerControlFailure == nil {
		return true
	}
	return *t.PowerControlFailure
}

// GetPowerControlHighLimit retrieves the value of the leaf PowerControlHighLimit from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerControlHighLimit is set, it can
// safely use t.GetPowerControlHighLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerControlHighLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm) GetPowerControlHighLimit() bool {
	if t == nil || t.PowerControlHighLimit == nil {
		return true
	}
	return *t.PowerControlHighLimit
}

// GetPowerControlLowLimit retrieves the value of the leaf PowerControlLowLimit from the NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerControlLowLimit is set, it can
// safely use t.GetPowerControlLowLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerControlLowLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm) GetPowerControlLowLimit() bool {
	if t == nil || t.PowerControlLowLimit == nil {
		return true
	}
	return *t.PowerControlLowLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EncoderDegrade == nil {
		var v bool = true
		t.EncoderDegrade = &v
	}
	if t.EncoderFailure == nil {
		var v bool = true
		t.EncoderFailure = &v
	}
	if t.MissingPluggableVoa == nil {
		var v bool = true
		t.MissingPluggableVoa = &v
	}
	if t.PowerControlDegrade == nil {
		var v bool = true
		t.PowerControlDegrade = &v
	}
	if t.PowerControlFailure == nil {
		var v bool = true
		t.PowerControlFailure = &v
	}
	if t.PowerControlHighLimit == nil {
		var v bool = true
		t.PowerControlHighLimit = &v
	}
	if t.PowerControlLowLimit == nil {
		var v bool = true
		t.PowerControlLowLimit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm.
func (*NokiaConf_Configure_Groups_Group_Port_Dwdm_Wavetracker_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet represents the /nokia-conf/configure/groups/group/port/ethernet YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet struct {
	Access                  *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access                  `path:"access" module:"nokia-conf" yangPresence:"true"`
	AccountingPolicy        *uint32                                                                 `path:"accounting-policy" module:"nokia-conf"`
	Autonegotiate           E_NokiaConf_Configure_Groups_Group_Port_Ethernet_Autonegotiate          `path:"autonegotiate" module:"nokia-conf"`
	CollectStats            *bool                                                                   `path:"collect-stats" module:"nokia-conf"`
	CrcMonitor              *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor              `path:"crc-monitor" module:"nokia-conf"`
	Dampening               *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening               `path:"dampening" module:"nokia-conf" yangPresence:"true"`
	DiscardRxPauseFrames    *bool                                                                   `path:"discard-rx-pause-frames" module:"nokia-conf"`
	Dot1QEtype              *string                                                                 `path:"dot1q-etype" module:"nokia-conf"`
	Dot1X                   *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X                   `path:"dot1x" module:"nokia-conf" yangPresence:"true"`
	DownOnInternalError     *NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError     `path:"down-on-internal-error" module:"nokia-conf" yangPresence:"true"`
	DownWhenLooped          *NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped          `path:"down-when-looped" module:"nokia-conf"`
	Duplex                  E_NokiaTypesPort_DuplexMode                                             `path:"duplex" module:"nokia-conf"`
	EfmOam                  *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam                  `path:"efm-oam" module:"nokia-conf" yangPresence:"true"`
	Egress                  *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress                  `path:"egress" module:"nokia-conf" yangPresence:"true"`
	Elmi                    *NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi                    `path:"elmi" module:"nokia-conf" yangPresence:"true"`
	EncapType               E_NokiaTypesPort_EthernetEncapType                                      `path:"encap-type" module:"nokia-conf"`
	EthCfm                  *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm                  `path:"eth-cfm" module:"nokia-conf"`
	HoldTime                *NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime                `path:"hold-time" module:"nokia-conf"`
	HsmdaSchedulerOverrides *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides `path:"hsmda-scheduler-overrides" module:"nokia-conf" yangPresence:"true"`
	Ingress                 *NokiaConf_Configure_Groups_Group_Port_Ethernet_Ingress                 `path:"ingress" module:"nokia-conf"`
	LacpTunnel              *bool                                                                   `path:"lacp-tunnel" module:"nokia-conf"`
	Lldp                    *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp                    `path:"lldp" module:"nokia-conf" yangPresence:"true"`
	LoadBalancingAlgorithm  E_NokiaTypesPort_LoadBalancingAlgorithm                                 `path:"load-balancing-algorithm" module:"nokia-conf"`
	Loopback                *NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback                `path:"loopback" module:"nokia-conf" yangPresence:"true"`
	MacAddress              *string                                                                 `path:"mac-address" module:"nokia-conf"`
	MinFrameLength          *uint32                                                                 `path:"min-frame-length" module:"nokia-conf"`
	Mode                    E_NokiaTypesPort_Mode                                                   `path:"mode" module:"nokia-conf"`
	Mtu                     *uint32                                                                 `path:"mtu" module:"nokia-conf"`
	Network                 *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network                 `path:"network" module:"nokia-conf" yangPresence:"true"`
	PbbEtype                *string                                                                 `path:"pbb-etype" module:"nokia-conf"`
	PtpAsymmetry            *int32                                                                  `path:"ptp-asymmetry" module:"nokia-conf"`
	QinqEtype               *string                                                                 `path:"qinq-etype" module:"nokia-conf"`
	ReportAlarm             *NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm             `path:"report-alarm" module:"nokia-conf"`
	RsFecMode               E_NokiaConf_Configure_Groups_Group_Port_Ethernet_RsFecMode              `path:"rs-fec-mode" module:"nokia-conf"`
	SingleFiber             *bool                                                                   `path:"single-fiber" module:"nokia-conf"`
	Speed                   *uint32                                                                 `path:"speed" module:"nokia-conf"`
	Ssm                     *NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm                     `path:"ssm" module:"nokia-conf" yangPresence:"true"`
	SymbolMonitor           *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor           `path:"symbol-monitor" module:"nokia-conf" yangPresence:"true"`
	UtilStatsInterval       *uint32                                                                 `path:"util-stats-interval" module:"nokia-conf"`
	Xgig                    E_NokiaConf_Configure_Groups_Group_Port_Ethernet_Xgig                   `path:"xgig" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet) IsYANGGoStruct() {}

// GetOrCreateAccess retrieves the value of the Access field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetOrCreateAccess() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access {
	if t.Access != nil {
		return t.Access
	}
	t.Access = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access{}
	return t.Access
}

// GetOrCreateCrcMonitor retrieves the value of the CrcMonitor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetOrCreateCrcMonitor() *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor {
	if t.CrcMonitor != nil {
		return t.CrcMonitor
	}
	t.CrcMonitor = &NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor{}
	return t.CrcMonitor
}

// GetOrCreateDampening retrieves the value of the Dampening field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetOrCreateDampening() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening {
	if t.Dampening != nil {
		return t.Dampening
	}
	t.Dampening = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening{}
	return t.Dampening
}

// GetOrCreateDot1X retrieves the value of the Dot1X field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetOrCreateDot1X() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X {
	if t.Dot1X != nil {
		return t.Dot1X
	}
	t.Dot1X = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X{}
	return t.Dot1X
}

// GetOrCreateDownOnInternalError retrieves the value of the DownOnInternalError field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetOrCreateDownOnInternalError() *NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError {
	if t.DownOnInternalError != nil {
		return t.DownOnInternalError
	}
	t.DownOnInternalError = &NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError{}
	return t.DownOnInternalError
}

// GetOrCreateDownWhenLooped retrieves the value of the DownWhenLooped field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetOrCreateDownWhenLooped() *NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped {
	if t.DownWhenLooped != nil {
		return t.DownWhenLooped
	}
	t.DownWhenLooped = &NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped{}
	return t.DownWhenLooped
}

// GetOrCreateEfmOam retrieves the value of the EfmOam field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetOrCreateEfmOam() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam {
	if t.EfmOam != nil {
		return t.EfmOam
	}
	t.EfmOam = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam{}
	return t.EfmOam
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress{}
	return t.Egress
}

// GetOrCreateElmi retrieves the value of the Elmi field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetOrCreateElmi() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi {
	if t.Elmi != nil {
		return t.Elmi
	}
	t.Elmi = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi{}
	return t.Elmi
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetOrCreateEthCfm() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm{}
	return t.EthCfm
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetOrCreateHoldTime() *NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime{}
	return t.HoldTime
}

// GetOrCreateHsmdaSchedulerOverrides retrieves the value of the HsmdaSchedulerOverrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetOrCreateHsmdaSchedulerOverrides() *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides {
	if t.HsmdaSchedulerOverrides != nil {
		return t.HsmdaSchedulerOverrides
	}
	t.HsmdaSchedulerOverrides = &NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides{}
	return t.HsmdaSchedulerOverrides
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Ingress{}
	return t.Ingress
}

// GetOrCreateLldp retrieves the value of the Lldp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetOrCreateLldp() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp {
	if t.Lldp != nil {
		return t.Lldp
	}
	t.Lldp = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp{}
	return t.Lldp
}

// GetOrCreateLoopback retrieves the value of the Loopback field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetOrCreateLoopback() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback {
	if t.Loopback != nil {
		return t.Loopback
	}
	t.Loopback = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback{}
	return t.Loopback
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Network{}
	return t.Network
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetOrCreateReportAlarm() *NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm{}
	return t.ReportAlarm
}

// GetOrCreateSsm retrieves the value of the Ssm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetOrCreateSsm() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm {
	if t.Ssm != nil {
		return t.Ssm
	}
	t.Ssm = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm{}
	return t.Ssm
}

// GetOrCreateSymbolMonitor retrieves the value of the SymbolMonitor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetOrCreateSymbolMonitor() *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor {
	if t.SymbolMonitor != nil {
		return t.SymbolMonitor
	}
	t.SymbolMonitor = &NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor{}
	return t.SymbolMonitor
}

// GetAccess returns the value of the Access struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet. If the receiver or the field Access is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetAccess() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access {
	if t != nil && t.Access != nil {
		return t.Access
	}
	return nil
}

// GetCrcMonitor returns the value of the CrcMonitor struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet. If the receiver or the field CrcMonitor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetCrcMonitor() *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor {
	if t != nil && t.CrcMonitor != nil {
		return t.CrcMonitor
	}
	return nil
}

// GetDampening returns the value of the Dampening struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet. If the receiver or the field Dampening is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetDampening() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening {
	if t != nil && t.Dampening != nil {
		return t.Dampening
	}
	return nil
}

// GetDot1X returns the value of the Dot1X struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet. If the receiver or the field Dot1X is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetDot1X() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X {
	if t != nil && t.Dot1X != nil {
		return t.Dot1X
	}
	return nil
}

// GetDownOnInternalError returns the value of the DownOnInternalError struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet. If the receiver or the field DownOnInternalError is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetDownOnInternalError() *NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError {
	if t != nil && t.DownOnInternalError != nil {
		return t.DownOnInternalError
	}
	return nil
}

// GetDownWhenLooped returns the value of the DownWhenLooped struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet. If the receiver or the field DownWhenLooped is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetDownWhenLooped() *NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped {
	if t != nil && t.DownWhenLooped != nil {
		return t.DownWhenLooped
	}
	return nil
}

// GetEfmOam returns the value of the EfmOam struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet. If the receiver or the field EfmOam is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetEfmOam() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam {
	if t != nil && t.EfmOam != nil {
		return t.EfmOam
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetEgress() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetElmi returns the value of the Elmi struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet. If the receiver or the field Elmi is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetElmi() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi {
	if t != nil && t.Elmi != nil {
		return t.Elmi
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetEthCfm() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetHoldTime() *NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetHsmdaSchedulerOverrides returns the value of the HsmdaSchedulerOverrides struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet. If the receiver or the field HsmdaSchedulerOverrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetHsmdaSchedulerOverrides() *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides {
	if t != nil && t.HsmdaSchedulerOverrides != nil {
		return t.HsmdaSchedulerOverrides
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetIngress() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetLldp returns the value of the Lldp struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet. If the receiver or the field Lldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetLldp() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp {
	if t != nil && t.Lldp != nil {
		return t.Lldp
	}
	return nil
}

// GetLoopback returns the value of the Loopback struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet. If the receiver or the field Loopback is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetLoopback() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback {
	if t != nil && t.Loopback != nil {
		return t.Loopback
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetNetwork() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetReportAlarm() *NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetSsm returns the value of the Ssm struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet. If the receiver or the field Ssm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetSsm() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm {
	if t != nil && t.Ssm != nil {
		return t.Ssm
	}
	return nil
}

// GetSymbolMonitor returns the value of the SymbolMonitor struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet. If the receiver or the field SymbolMonitor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetSymbolMonitor() *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor {
	if t != nil && t.SymbolMonitor != nil {
		return t.SymbolMonitor
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAutonegotiate retrieves the value of the leaf Autonegotiate from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Autonegotiate is set, it can
// safely use t.GetAutonegotiate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Autonegotiate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetAutonegotiate() E_NokiaConf_Configure_Groups_Group_Port_Ethernet_Autonegotiate {
	if t == nil || t.Autonegotiate == 0 {
		return 0
	}
	return t.Autonegotiate
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDiscardRxPauseFrames retrieves the value of the leaf DiscardRxPauseFrames from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardRxPauseFrames is set, it can
// safely use t.GetDiscardRxPauseFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardRxPauseFrames == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetDiscardRxPauseFrames() bool {
	if t == nil || t.DiscardRxPauseFrames == nil {
		return false
	}
	return *t.DiscardRxPauseFrames
}

// GetDot1QEtype retrieves the value of the leaf Dot1QEtype from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1QEtype is set, it can
// safely use t.GetDot1QEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1QEtype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetDot1QEtype() string {
	if t == nil || t.Dot1QEtype == nil {
		return "33024"
	}
	return *t.Dot1QEtype
}

// GetDuplex retrieves the value of the leaf Duplex from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duplex is set, it can
// safely use t.GetDuplex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duplex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetDuplex() E_NokiaTypesPort_DuplexMode {
	if t == nil || t.Duplex == 0 {
		return 0
	}
	return t.Duplex
}

// GetEncapType retrieves the value of the leaf EncapType from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapType is set, it can
// safely use t.GetEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetEncapType() E_NokiaTypesPort_EthernetEncapType {
	if t == nil || t.EncapType == 0 {
		return 0
	}
	return t.EncapType
}

// GetLacpTunnel retrieves the value of the leaf LacpTunnel from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LacpTunnel is set, it can
// safely use t.GetLacpTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LacpTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetLacpTunnel() bool {
	if t == nil || t.LacpTunnel == nil {
		return false
	}
	return *t.LacpTunnel
}

// GetLoadBalancingAlgorithm retrieves the value of the leaf LoadBalancingAlgorithm from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingAlgorithm is set, it can
// safely use t.GetLoadBalancingAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetLoadBalancingAlgorithm() E_NokiaTypesPort_LoadBalancingAlgorithm {
	if t == nil || t.LoadBalancingAlgorithm == 0 {
		return 0
	}
	return t.LoadBalancingAlgorithm
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return "00:00:00:00:00:00"
	}
	return *t.MacAddress
}

// GetMinFrameLength retrieves the value of the leaf MinFrameLength from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinFrameLength is set, it can
// safely use t.GetMinFrameLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinFrameLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetMinFrameLength() uint32 {
	if t == nil || t.MinFrameLength == nil {
		return 64
	}
	return *t.MinFrameLength
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetMode() E_NokiaTypesPort_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetPbbEtype retrieves the value of the leaf PbbEtype from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PbbEtype is set, it can
// safely use t.GetPbbEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PbbEtype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetPbbEtype() string {
	if t == nil || t.PbbEtype == nil {
		return "35047"
	}
	return *t.PbbEtype
}

// GetPtpAsymmetry retrieves the value of the leaf PtpAsymmetry from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PtpAsymmetry is set, it can
// safely use t.GetPtpAsymmetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PtpAsymmetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetPtpAsymmetry() int32 {
	if t == nil || t.PtpAsymmetry == nil {
		return 0
	}
	return *t.PtpAsymmetry
}

// GetQinqEtype retrieves the value of the leaf QinqEtype from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QinqEtype is set, it can
// safely use t.GetQinqEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QinqEtype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetQinqEtype() string {
	if t == nil || t.QinqEtype == nil {
		return "33024"
	}
	return *t.QinqEtype
}

// GetRsFecMode retrieves the value of the leaf RsFecMode from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RsFecMode is set, it can
// safely use t.GetRsFecMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RsFecMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetRsFecMode() E_NokiaConf_Configure_Groups_Group_Port_Ethernet_RsFecMode {
	if t == nil || t.RsFecMode == 0 {
		return 0
	}
	return t.RsFecMode
}

// GetSingleFiber retrieves the value of the leaf SingleFiber from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SingleFiber is set, it can
// safely use t.GetSingleFiber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SingleFiber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetSingleFiber() bool {
	if t == nil || t.SingleFiber == nil {
		return false
	}
	return *t.SingleFiber
}

// GetSpeed retrieves the value of the leaf Speed from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Speed is set, it can
// safely use t.GetSpeed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Speed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetSpeed() uint32 {
	if t == nil || t.Speed == nil {
		return 0
	}
	return *t.Speed
}

// GetUtilStatsInterval retrieves the value of the leaf UtilStatsInterval from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UtilStatsInterval is set, it can
// safely use t.GetUtilStatsInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UtilStatsInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetUtilStatsInterval() uint32 {
	if t == nil || t.UtilStatsInterval == nil {
		return 300
	}
	return *t.UtilStatsInterval
}

// GetXgig retrieves the value of the leaf Xgig from the NokiaConf_Configure_Groups_Group_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Xgig is set, it can
// safely use t.GetXgig() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Xgig == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) GetXgig() E_NokiaConf_Configure_Groups_Group_Port_Ethernet_Xgig {
	if t == nil || t.Xgig == 0 {
		return 0
	}
	return t.Xgig
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.DiscardRxPauseFrames == nil {
		var v bool = false
		t.DiscardRxPauseFrames = &v
	}
	if t.Dot1QEtype == nil {
		var v string = "33024"
		t.Dot1QEtype = &v
	}
	if t.LacpTunnel == nil {
		var v bool = false
		t.LacpTunnel = &v
	}
	if t.MacAddress == nil {
		var v string = "00:00:00:00:00:00"
		t.MacAddress = &v
	}
	if t.MinFrameLength == nil {
		var v uint32 = 64
		t.MinFrameLength = &v
	}
	if t.PbbEtype == nil {
		var v string = "35047"
		t.PbbEtype = &v
	}
	if t.QinqEtype == nil {
		var v string = "33024"
		t.QinqEtype = &v
	}
	if t.SingleFiber == nil {
		var v bool = false
		t.SingleFiber = &v
	}
	if t.UtilStatsInterval == nil {
		var v uint32 = 300
		t.UtilStatsInterval = &v
	}
	t.Access.PopulateDefaults()
	t.CrcMonitor.PopulateDefaults()
	t.Dampening.PopulateDefaults()
	t.Dot1X.PopulateDefaults()
	t.DownOnInternalError.PopulateDefaults()
	t.DownWhenLooped.PopulateDefaults()
	t.EfmOam.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.Elmi.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.HsmdaSchedulerOverrides.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Lldp.PopulateDefaults()
	t.Loopback.PopulateDefaults()
	t.Network.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
	t.Ssm.PopulateDefaults()
	t.SymbolMonitor.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access represents the /nokia-conf/configure/groups/group/port/ethernet/access YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access struct {
	AccountingPolicy *uint32                                                        `path:"accounting-policy" module:"nokia-conf"`
	Bandwidth        *uint64                                                        `path:"bandwidth" module:"nokia-conf"`
	BookingFactor    *uint32                                                        `path:"booking-factor" module:"nokia-conf"`
	CollectStats     *bool                                                          `path:"collect-stats" module:"nokia-conf"`
	Egress           *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress  `path:"egress" module:"nokia-conf"`
	Ingress          *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress `path:"ingress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access) GetEgress() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access) GetIngress() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access) GetBandwidth() uint64 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetBookingFactor retrieves the value of the leaf BookingFactor from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BookingFactor is set, it can
// safely use t.GetBookingFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BookingFactor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access) GetBookingFactor() uint32 {
	if t == nil || t.BookingFactor == nil {
		return 100
	}
	return *t.BookingFactor
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BookingFactor == nil {
		var v uint32 = 100
		t.BookingFactor = &v
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress struct {
	QueueGroup  map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_Key]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup `path:"queue-group" module:"nokia-conf"`
	VirtualPort map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort                                                                     `path:"virtual-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_Key represents the key for list QueueGroup of element /nokia-conf/configure/groups/group/port/ethernet/access/egress.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_Key struct {
	QueueGroupName string                                                                                   `path:"queue-group-name"`
	InstanceId     NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_InstanceId_Union `path:"instance-id"`
}

// NewQueueGroup creates a new entry in the QueueGroup list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress) NewQueueGroup(QueueGroupName string, InstanceId NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_InstanceId_Union) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_Key]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup)
	}

	key := NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueGroup", key)
	}

	t.QueueGroup[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup{
		QueueGroupName: &QueueGroupName,
		InstanceId:     InstanceId,
	}

	return t.QueueGroup[key], nil
}

// RenameQueueGroup renames an entry in the list QueueGroup within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress) RenameQueueGroup(oldK, newK NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_Key) error {
	if _, ok := t.QueueGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueGroup", newK)
	}

	e, ok := t.QueueGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueGroup", oldK)
	}
	e.QueueGroupName = &newK.QueueGroupName
	e.InstanceId = newK.InstanceId

	t.QueueGroup[newK] = e
	delete(t.QueueGroup, oldK)
	return nil
}

// GetOrCreateQueueGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress) GetOrCreateQueueGroup(QueueGroupName string, InstanceId NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_InstanceId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup {

	key := NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	if v, ok := t.QueueGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueGroup(QueueGroupName, InstanceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueGroup got unexpected error: %v", err))
	}
	return v
}

// GetQueueGroup retrieves the value with the specified key from
// the QueueGroup map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress) GetQueueGroup(QueueGroupName string, InstanceId NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_InstanceId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	if lm, ok := t.QueueGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress) DeleteQueueGroup(QueueGroupName string, InstanceId NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_InstanceId_Union) {
	key := NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	delete(t.QueueGroup, key)
}

// AppendQueueGroup appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup struct to the
// list QueueGroup of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress) AppendQueueGroup(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) error {
	if v.QueueGroupName == nil {
		return fmt.Errorf("invalid nil key for QueueGroupName")
	}

	key := NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_Key{
		QueueGroupName: *v.QueueGroupName,
		InstanceId:     v.InstanceId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_Key]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup)
	}

	if _, ok := t.QueueGroup[key]; ok {
		return fmt.Errorf("duplicate key for list QueueGroup %v", key)
	}

	t.QueueGroup[key] = v
	return nil
}

// NewVirtualPort creates a new entry in the VirtualPort list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress) NewVirtualPort(VportName string) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VirtualPort == nil {
		t.VirtualPort = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort)
	}

	key := VportName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VirtualPort[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VirtualPort", key)
	}

	t.VirtualPort[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort{
		VportName: &VportName,
	}

	return t.VirtualPort[key], nil
}

// RenameVirtualPort renames an entry in the list VirtualPort within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress) RenameVirtualPort(oldK, newK string) error {
	if _, ok := t.VirtualPort[newK]; ok {
		return fmt.Errorf("key %v already exists in VirtualPort", newK)
	}

	e, ok := t.VirtualPort[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VirtualPort", oldK)
	}
	e.VportName = &newK

	t.VirtualPort[newK] = e
	delete(t.VirtualPort, oldK)
	return nil
}

// GetOrCreateVirtualPort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress) GetOrCreateVirtualPort(VportName string) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort {

	key := VportName

	if v, ok := t.VirtualPort[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVirtualPort(VportName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVirtualPort got unexpected error: %v", err))
	}
	return v
}

// GetVirtualPort retrieves the value with the specified key from
// the VirtualPort map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress) GetVirtualPort(VportName string) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort {

	if t == nil {
		return nil
	}

	key := VportName

	if lm, ok := t.VirtualPort[key]; ok {
		return lm
	}
	return nil
}

// DeleteVirtualPort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress) DeleteVirtualPort(VportName string) {
	key := VportName

	delete(t.VirtualPort, key)
}

// AppendVirtualPort appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort struct to the
// list VirtualPort of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress) AppendVirtualPort(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) error {
	if v.VportName == nil {
		return fmt.Errorf("invalid nil key received for VportName")
	}

	key := *v.VportName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VirtualPort == nil {
		t.VirtualPort = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort)
	}

	if _, ok := t.VirtualPort[key]; ok {
		return fmt.Errorf("duplicate key for list VirtualPort %v", key)
	}

	t.VirtualPort[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.QueueGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.VirtualPort {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/queue-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup struct {
	AccountingPolicy    *uint32                                                                                      `path:"accounting-policy" module:"nokia-conf"`
	AggregateRate       *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate       `path:"aggregate-rate" module:"nokia-conf"`
	CollectStats        *bool                                                                                        `path:"collect-stats" module:"nokia-conf"`
	Description         *string                                                                                      `path:"description" module:"nokia-conf"`
	HostMatch           *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch           `path:"host-match" module:"nokia-conf"`
	HsTurbo             *bool                                                                                        `path:"hs-turbo" module:"nokia-conf"`
	HsmdaQueueOverrides *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides `path:"hsmda-queue-overrides" module:"nokia-conf"`
	InstanceId          NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_InstanceId_Union     `path:"instance-id" module:"nokia-conf"`
	QueueGroupName      *string                                                                                      `path:"queue-group-name" module:"nokia-conf"`
	QueueOverrides      *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides      `path:"queue-overrides" module:"nokia-conf"`
	SchedulerPolicy     *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy     `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) IsYANGGoStruct() {}

// GetOrCreateAggregateRate retrieves the value of the AggregateRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) GetOrCreateAggregateRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate {
	if t.AggregateRate != nil {
		return t.AggregateRate
	}
	t.AggregateRate = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate{}
	return t.AggregateRate
}

// GetOrCreateHostMatch retrieves the value of the HostMatch field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) GetOrCreateHostMatch() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch {
	if t.HostMatch != nil {
		return t.HostMatch
	}
	t.HostMatch = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch{}
	return t.HostMatch
}

// GetOrCreateHsmdaQueueOverrides retrieves the value of the HsmdaQueueOverrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) GetOrCreateHsmdaQueueOverrides() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides {
	if t.HsmdaQueueOverrides != nil {
		return t.HsmdaQueueOverrides
	}
	t.HsmdaQueueOverrides = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides{}
	return t.HsmdaQueueOverrides
}

// GetOrCreateQueueOverrides retrieves the value of the QueueOverrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) GetOrCreateQueueOverrides() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides {
	if t.QueueOverrides != nil {
		return t.QueueOverrides
	}
	t.QueueOverrides = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides{}
	return t.QueueOverrides
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetAggregateRate returns the value of the AggregateRate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup. If the receiver or the field AggregateRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) GetAggregateRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate {
	if t != nil && t.AggregateRate != nil {
		return t.AggregateRate
	}
	return nil
}

// GetHostMatch returns the value of the HostMatch struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup. If the receiver or the field HostMatch is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) GetHostMatch() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch {
	if t != nil && t.HostMatch != nil {
		return t.HostMatch
	}
	return nil
}

// GetHsmdaQueueOverrides returns the value of the HsmdaQueueOverrides struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup. If the receiver or the field HsmdaQueueOverrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) GetHsmdaQueueOverrides() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides {
	if t != nil && t.HsmdaQueueOverrides != nil {
		return t.HsmdaQueueOverrides
	}
	return nil
}

// GetQueueOverrides returns the value of the QueueOverrides struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup. If the receiver or the field QueueOverrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) GetQueueOverrides() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides {
	if t != nil && t.QueueOverrides != nil {
		return t.QueueOverrides
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) GetSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHsTurbo retrieves the value of the leaf HsTurbo from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsTurbo is set, it can
// safely use t.GetHsTurbo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsTurbo == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) GetHsTurbo() bool {
	if t == nil || t.HsTurbo == nil {
		return false
	}
	return *t.HsTurbo
}

// GetInstanceId retrieves the value of the leaf InstanceId from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceId is set, it can
// safely use t.GetInstanceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) GetInstanceId() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_InstanceId_Union {
	if t == nil || t.InstanceId == nil {
		return nil
	}
	return t.InstanceId
}

// GetQueueGroupName retrieves the value of the leaf QueueGroupName from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupName is set, it can
// safely use t.GetQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) GetQueueGroupName() string {
	if t == nil || t.QueueGroupName == nil {
		return ""
	}
	return *t.QueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.HsTurbo == nil {
		var v bool = false
		t.HsTurbo = &v
	}
	t.AggregateRate.PopulateDefaults()
	t.HostMatch.PopulateDefaults()
	t.HsmdaQueueOverrides.PopulateDefaults()
	t.QueueOverrides.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) ΛListKeyMap() (map[string]interface{}, error) {

	if t.QueueGroupName == nil {
		return nil, fmt.Errorf("nil value for key QueueGroupName")
	}

	return map[string]interface{}{
		"instance-id":      t.InstanceId,
		"queue-group-name": *t.QueueGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/queue-group/aggregate-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate struct {
	LimitUnusedBandwidth      *bool                                                                                            `path:"limit-unused-bandwidth" module:"nokia-conf"`
	QueueFrameBasedAccounting *bool                                                                                            `path:"queue-frame-based-accounting" module:"nokia-conf"`
	Rate                      NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate) IsYANGGoStruct() {
}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetQueueFrameBasedAccounting retrieves the value of the leaf QueueFrameBasedAccounting from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueFrameBasedAccounting is set, it can
// safely use t.GetQueueFrameBasedAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueFrameBasedAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate) GetQueueFrameBasedAccounting() bool {
	if t == nil || t.QueueFrameBasedAccounting == nil {
		return false
	}
	return *t.QueueFrameBasedAccounting
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate) GetRate() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
	if t.QueueFrameBasedAccounting == nil {
		var v bool = false
		t.QueueFrameBasedAccounting = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate_Rate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/queue-group/host-match YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch struct {
	IntDestId map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId `path:"int-dest-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) IsYANGGoStruct() {
}

// NewIntDestId creates a new entry in the IntDestId list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) NewIntDestId(DestinationString string) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IntDestId == nil {
		t.IntDestId = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId)
	}

	key := DestinationString

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IntDestId[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IntDestId", key)
	}

	t.IntDestId[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId{
		DestinationString: &DestinationString,
	}

	return t.IntDestId[key], nil
}

// RenameIntDestId renames an entry in the list IntDestId within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) RenameIntDestId(oldK, newK string) error {
	if _, ok := t.IntDestId[newK]; ok {
		return fmt.Errorf("key %v already exists in IntDestId", newK)
	}

	e, ok := t.IntDestId[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IntDestId", oldK)
	}
	e.DestinationString = &newK

	t.IntDestId[newK] = e
	delete(t.IntDestId, oldK)
	return nil
}

// GetOrCreateIntDestId retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) GetOrCreateIntDestId(DestinationString string) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId {

	key := DestinationString

	if v, ok := t.IntDestId[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIntDestId(DestinationString)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIntDestId got unexpected error: %v", err))
	}
	return v
}

// GetIntDestId retrieves the value with the specified key from
// the IntDestId map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) GetIntDestId(DestinationString string) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId {

	if t == nil {
		return nil
	}

	key := DestinationString

	if lm, ok := t.IntDestId[key]; ok {
		return lm
	}
	return nil
}

// DeleteIntDestId deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) DeleteIntDestId(DestinationString string) {
	key := DestinationString

	delete(t.IntDestId, key)
}

// AppendIntDestId appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId struct to the
// list IntDestId of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) AppendIntDestId(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId) error {
	if v.DestinationString == nil {
		return fmt.Errorf("invalid nil key received for DestinationString")
	}

	key := *v.DestinationString

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IntDestId == nil {
		t.IntDestId = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId)
	}

	if _, ok := t.IntDestId[key]; ok {
		return fmt.Errorf("duplicate key for list IntDestId %v", key)
	}

	t.IntDestId[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.IntDestId {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/queue-group/host-match/int-dest-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId struct {
	DestinationString *string `path:"destination-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId) IsYANGGoStruct() {
}

// GetDestinationString retrieves the value of the leaf DestinationString from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationString is set, it can
// safely use t.GetDestinationString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId) GetDestinationString() string {
	if t == nil || t.DestinationString == nil {
		return ""
	}
	return *t.DestinationString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DestinationString == nil {
		return nil, fmt.Errorf("nil value for key DestinationString")
	}

	return map[string]interface{}{
		"destination-string": *t.DestinationString,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/queue-group/hsmda-queue-overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides struct {
	PacketByteOffset *int32                                                                                                                                                                                                                 `path:"packet-byte-offset" module:"nokia-conf"`
	Queue            map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue `path:"queue" module:"nokia-conf"`
	SecondaryShaper  *string                                                                                                                                                                                                                `path:"secondary-shaper" module:"nokia-conf"`
	WrrPolicy        *string                                                                                                                                                                                                                `path:"wrr-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) IsYANGGoStruct() {
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) AppendQueue(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetSecondaryShaper retrieves the value of the leaf SecondaryShaper from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryShaper is set, it can
// safely use t.GetSecondaryShaper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryShaper == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) GetSecondaryShaper() string {
	if t == nil || t.SecondaryShaper == nil {
		return ""
	}
	return *t.SecondaryShaper
}

// GetWrrPolicy retrieves the value of the leaf WrrPolicy from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrPolicy is set, it can
// safely use t.GetWrrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) GetWrrPolicy() string {
	if t == nil || t.WrrPolicy == nil {
		return ""
	}
	return *t.WrrPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/queue-group/hsmda-queue-overrides/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue struct {
	Mbs         NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue_Mbs_Union     `path:"mbs" module:"nokia-conf"`
	QueueId     NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue_QueueId_Union `path:"queue-id" module:"nokia-conf"`
	Rate        NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue_Rate_Union    `path:"rate" module:"nokia-conf"`
	SlopePolicy *string                                                                                                         `path:"slope-policy" module:"nokia-conf"`
	WrrWeight   *int32                                                                                                          `path:"wrr-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) IsYANGGoStruct() {
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) GetRate() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// GetWrrWeight retrieves the value of the leaf WrrWeight from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeight is set, it can
// safely use t.GetWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) GetWrrWeight() int32 {
	if t == nil || t.WrrWeight == nil {
		return 0
	}
	return *t.WrrWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/queue-group/queue-overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides struct {
	Queue map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) IsYANGGoStruct() {
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) AppendQueue(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/queue-group/queue-overrides/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue struct {
	AdaptationRule    *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	BurstLimit        NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_BurstLimit_Union   `path:"burst-limit" module:"nokia-conf"`
	Cbs               NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail          *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	Mbs               NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth      *bool                                                                                                           `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent            *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate       *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId           NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_QueueId_Union      `path:"queue-id" module:"nokia-conf"`
	Rate              *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetDropTail() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetParent() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetPercentRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetBurstLimit() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return nil
	}
	return t.BurstLimit
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetCbs() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/queue-group/queue-overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/queue-group/queue-overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/queue-group/queue-overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/queue-group/queue-overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth struct {
	FastPolling        *bool    `path:"fast-polling" module:"nokia-conf"`
	ViolationThreshold *float64 `path:"violation-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// GetViolationThreshold retrieves the value of the leaf ViolationThreshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolationThreshold is set, it can
// safely use t.GetViolationThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolationThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) GetViolationThreshold() float64 {
	if t == nil || t.ViolationThreshold == nil {
		return 0.0
	}
	return *t.ViolationThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/queue-group/queue-overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/queue-group/queue-overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/queue-group/queue-overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate) GetCir() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate) GetPir() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/queue-group/scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                            `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/queue-group/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/queue-group/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler struct {
	Parent        *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName *string                                                                                                             `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/queue-group/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/queue-group/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/virtual-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort struct {
	AggregateRate               *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate   `path:"aggregate-rate" module:"nokia-conf"`
	Description                 *string                                                                                   `path:"description" module:"nokia-conf"`
	HostMatch                   *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch       `path:"host-match" module:"nokia-conf"`
	HwAggShaperSchedulerPolicy  *string                                                                                   `path:"hw-agg-shaper-scheduler-policy" module:"nokia-conf"`
	MonitorHwAggShaperScheduler *bool                                                                                     `path:"monitor-hw-agg-shaper-scheduler" module:"nokia-conf"`
	MonitorPortScheduler        *bool                                                                                     `path:"monitor-port-scheduler" module:"nokia-conf"`
	MulticastHqosAdjustment     *bool                                                                                     `path:"multicast-hqos-adjustment" module:"nokia-conf"`
	PortSchedulerPolicy         *string                                                                                   `path:"port-scheduler-policy" module:"nokia-conf"`
	SchedulerPolicy             *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy `path:"scheduler-policy" module:"nokia-conf"`
	VportName                   *string                                                                                   `path:"vport-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) IsYANGGoStruct() {}

// GetOrCreateAggregateRate retrieves the value of the AggregateRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) GetOrCreateAggregateRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate {
	if t.AggregateRate != nil {
		return t.AggregateRate
	}
	t.AggregateRate = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate{}
	return t.AggregateRate
}

// GetOrCreateHostMatch retrieves the value of the HostMatch field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) GetOrCreateHostMatch() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch {
	if t.HostMatch != nil {
		return t.HostMatch
	}
	t.HostMatch = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch{}
	return t.HostMatch
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetAggregateRate returns the value of the AggregateRate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort. If the receiver or the field AggregateRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) GetAggregateRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate {
	if t != nil && t.AggregateRate != nil {
		return t.AggregateRate
	}
	return nil
}

// GetHostMatch returns the value of the HostMatch struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort. If the receiver or the field HostMatch is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) GetHostMatch() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch {
	if t != nil && t.HostMatch != nil {
		return t.HostMatch
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) GetSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHwAggShaperSchedulerPolicy retrieves the value of the leaf HwAggShaperSchedulerPolicy from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HwAggShaperSchedulerPolicy is set, it can
// safely use t.GetHwAggShaperSchedulerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HwAggShaperSchedulerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) GetHwAggShaperSchedulerPolicy() string {
	if t == nil || t.HwAggShaperSchedulerPolicy == nil {
		return ""
	}
	return *t.HwAggShaperSchedulerPolicy
}

// GetMonitorHwAggShaperScheduler retrieves the value of the leaf MonitorHwAggShaperScheduler from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorHwAggShaperScheduler is set, it can
// safely use t.GetMonitorHwAggShaperScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorHwAggShaperScheduler == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) GetMonitorHwAggShaperScheduler() bool {
	if t == nil || t.MonitorHwAggShaperScheduler == nil {
		return false
	}
	return *t.MonitorHwAggShaperScheduler
}

// GetMonitorPortScheduler retrieves the value of the leaf MonitorPortScheduler from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorPortScheduler is set, it can
// safely use t.GetMonitorPortScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorPortScheduler == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) GetMonitorPortScheduler() bool {
	if t == nil || t.MonitorPortScheduler == nil {
		return false
	}
	return *t.MonitorPortScheduler
}

// GetMulticastHqosAdjustment retrieves the value of the leaf MulticastHqosAdjustment from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastHqosAdjustment is set, it can
// safely use t.GetMulticastHqosAdjustment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastHqosAdjustment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) GetMulticastHqosAdjustment() bool {
	if t == nil || t.MulticastHqosAdjustment == nil {
		return false
	}
	return *t.MulticastHqosAdjustment
}

// GetPortSchedulerPolicy retrieves the value of the leaf PortSchedulerPolicy from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortSchedulerPolicy is set, it can
// safely use t.GetPortSchedulerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortSchedulerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) GetPortSchedulerPolicy() string {
	if t == nil || t.PortSchedulerPolicy == nil {
		return ""
	}
	return *t.PortSchedulerPolicy
}

// GetVportName retrieves the value of the leaf VportName from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VportName is set, it can
// safely use t.GetVportName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VportName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) GetVportName() string {
	if t == nil || t.VportName == nil {
		return ""
	}
	return *t.VportName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorHwAggShaperScheduler == nil {
		var v bool = false
		t.MonitorHwAggShaperScheduler = &v
	}
	if t.MonitorPortScheduler == nil {
		var v bool = false
		t.MonitorPortScheduler = &v
	}
	if t.MulticastHqosAdjustment == nil {
		var v bool = false
		t.MulticastHqosAdjustment = &v
	}
	t.AggregateRate.PopulateDefaults()
	t.HostMatch.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VportName == nil {
		return nil, fmt.Errorf("nil value for key VportName")
	}

	return map[string]interface{}{
		"vport-name": *t.VportName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/virtual-port/aggregate-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate struct {
	LimitUnusedBandwidth *bool                                                                                             `path:"limit-unused-bandwidth" module:"nokia-conf"`
	Rate                 NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate) IsYANGGoStruct() {
}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate) GetRate() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate_Rate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/virtual-port/host-match YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch struct {
	IntDestId map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId `path:"int-dest-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) IsYANGGoStruct() {
}

// NewIntDestId creates a new entry in the IntDestId list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) NewIntDestId(DestinationString string) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IntDestId == nil {
		t.IntDestId = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId)
	}

	key := DestinationString

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IntDestId[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IntDestId", key)
	}

	t.IntDestId[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId{
		DestinationString: &DestinationString,
	}

	return t.IntDestId[key], nil
}

// RenameIntDestId renames an entry in the list IntDestId within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) RenameIntDestId(oldK, newK string) error {
	if _, ok := t.IntDestId[newK]; ok {
		return fmt.Errorf("key %v already exists in IntDestId", newK)
	}

	e, ok := t.IntDestId[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IntDestId", oldK)
	}
	e.DestinationString = &newK

	t.IntDestId[newK] = e
	delete(t.IntDestId, oldK)
	return nil
}

// GetOrCreateIntDestId retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) GetOrCreateIntDestId(DestinationString string) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId {

	key := DestinationString

	if v, ok := t.IntDestId[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIntDestId(DestinationString)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIntDestId got unexpected error: %v", err))
	}
	return v
}

// GetIntDestId retrieves the value with the specified key from
// the IntDestId map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) GetIntDestId(DestinationString string) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId {

	if t == nil {
		return nil
	}

	key := DestinationString

	if lm, ok := t.IntDestId[key]; ok {
		return lm
	}
	return nil
}

// DeleteIntDestId deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) DeleteIntDestId(DestinationString string) {
	key := DestinationString

	delete(t.IntDestId, key)
}

// AppendIntDestId appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId struct to the
// list IntDestId of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) AppendIntDestId(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId) error {
	if v.DestinationString == nil {
		return fmt.Errorf("invalid nil key received for DestinationString")
	}

	key := *v.DestinationString

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IntDestId == nil {
		t.IntDestId = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId)
	}

	if _, ok := t.IntDestId[key]; ok {
		return fmt.Errorf("duplicate key for list IntDestId %v", key)
	}

	t.IntDestId[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.IntDestId {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/virtual-port/host-match/int-dest-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId struct {
	DestinationString *string `path:"destination-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId) IsYANGGoStruct() {
}

// GetDestinationString retrieves the value of the leaf DestinationString from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationString is set, it can
// safely use t.GetDestinationString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId) GetDestinationString() string {
	if t == nil || t.DestinationString == nil {
		return ""
	}
	return *t.DestinationString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DestinationString == nil {
		return nil, fmt.Errorf("nil value for key DestinationString")
	}

	return map[string]interface{}{
		"destination-string": *t.DestinationString,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy represents the /nokia-conf/configure/groups/group/port/ethernet/access/egress/virtual-port/scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress represents the /nokia-conf/configure/groups/group/port/ethernet/access/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress struct {
	QueueGroup map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup `path:"queue-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress) IsYANGGoStruct() {}

// NewQueueGroup creates a new entry in the QueueGroup list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress) NewQueueGroup(QueueGroupName string) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup)
	}

	key := QueueGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueGroup", key)
	}

	t.QueueGroup[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup{
		QueueGroupName: &QueueGroupName,
	}

	return t.QueueGroup[key], nil
}

// RenameQueueGroup renames an entry in the list QueueGroup within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress) RenameQueueGroup(oldK, newK string) error {
	if _, ok := t.QueueGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueGroup", newK)
	}

	e, ok := t.QueueGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueGroup", oldK)
	}
	e.QueueGroupName = &newK

	t.QueueGroup[newK] = e
	delete(t.QueueGroup, oldK)
	return nil
}

// GetOrCreateQueueGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress) GetOrCreateQueueGroup(QueueGroupName string) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup {

	key := QueueGroupName

	if v, ok := t.QueueGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueGroup(QueueGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueGroup got unexpected error: %v", err))
	}
	return v
}

// GetQueueGroup retrieves the value with the specified key from
// the QueueGroup map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress) GetQueueGroup(QueueGroupName string) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup {

	if t == nil {
		return nil
	}

	key := QueueGroupName

	if lm, ok := t.QueueGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress) DeleteQueueGroup(QueueGroupName string) {
	key := QueueGroupName

	delete(t.QueueGroup, key)
}

// AppendQueueGroup appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup struct to the
// list QueueGroup of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress) AppendQueueGroup(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup) error {
	if v.QueueGroupName == nil {
		return fmt.Errorf("invalid nil key received for QueueGroupName")
	}

	key := *v.QueueGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup)
	}

	if _, ok := t.QueueGroup[key]; ok {
		return fmt.Errorf("duplicate key for list QueueGroup %v", key)
	}

	t.QueueGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.QueueGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup represents the /nokia-conf/configure/groups/group/port/ethernet/access/ingress/queue-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup struct {
	AccountingPolicy *uint32                                                                                   `path:"accounting-policy" module:"nokia-conf"`
	CollectStats     *bool                                                                                     `path:"collect-stats" module:"nokia-conf"`
	Description      *string                                                                                   `path:"description" module:"nokia-conf"`
	QueueGroupName   *string                                                                                   `path:"queue-group-name" module:"nokia-conf"`
	QueueOverrides   *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides  `path:"queue-overrides" module:"nokia-conf"`
	SchedulerPolicy  *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup) IsYANGGoStruct() {}

// GetOrCreateQueueOverrides retrieves the value of the QueueOverrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup) GetOrCreateQueueOverrides() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides {
	if t.QueueOverrides != nil {
		return t.QueueOverrides
	}
	t.QueueOverrides = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides{}
	return t.QueueOverrides
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetQueueOverrides returns the value of the QueueOverrides struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup. If the receiver or the field QueueOverrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup) GetQueueOverrides() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides {
	if t != nil && t.QueueOverrides != nil {
		return t.QueueOverrides
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup) GetSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetQueueGroupName retrieves the value of the leaf QueueGroupName from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupName is set, it can
// safely use t.GetQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup) GetQueueGroupName() string {
	if t == nil || t.QueueGroupName == nil {
		return ""
	}
	return *t.QueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	t.QueueOverrides.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueGroupName == nil {
		return nil, fmt.Errorf("nil value for key QueueGroupName")
	}

	return map[string]interface{}{
		"queue-group-name": *t.QueueGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides represents the /nokia-conf/configure/groups/group/port/ethernet/access/ingress/queue-group/queue-overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides struct {
	Queue map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) IsYANGGoStruct() {
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) AppendQueue(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue represents the /nokia-conf/configure/groups/group/port/ethernet/access/ingress/queue-group/queue-overrides/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue struct {
	AdaptationRule    *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	Cbs               NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail          *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	Mbs               NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth      *bool                                                                                                            `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	QueueId           NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_QueueId_Union      `path:"queue-id" module:"nokia-conf"`
	Rate              *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetDropTail() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetCbs() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/port/ethernet/access/ingress/queue-group/queue-overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail represents the /nokia-conf/configure/groups/group/port/ethernet/access/ingress/queue-group/queue-overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low represents the /nokia-conf/configure/groups/group/port/ethernet/access/ingress/queue-group/queue-overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/groups/group/port/ethernet/access/ingress/queue-group/queue-overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth struct {
	FastPolling *bool `path:"fast-polling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate represents the /nokia-conf/configure/groups/group/port/ethernet/access/ingress/queue-group/queue-overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate) GetCir() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate) GetPir() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy represents the /nokia-conf/configure/groups/group/port/ethernet/access/ingress/queue-group/scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                             `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/port/ethernet/access/ingress/queue-group/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/groups/group/port/ethernet/access/ingress/queue-group/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler struct {
	Parent        *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName *string                                                                                                              `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/groups/group/port/ethernet/access/ingress/queue-group/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/groups/group/port/ethernet/access/ingress/queue-group/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor represents the /nokia-conf/configure/groups/group/port/ethernet/crc-monitor YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor struct {
	SignalDegrade *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalDegrade `path:"signal-degrade" module:"nokia-conf"`
	SignalFailure *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalFailure `path:"signal-failure" module:"nokia-conf"`
	WindowSize    *uint32                                                                  `path:"window-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor) IsYANGGoStruct() {}

// GetOrCreateSignalDegrade retrieves the value of the SignalDegrade field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor) GetOrCreateSignalDegrade() *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalDegrade {
	if t.SignalDegrade != nil {
		return t.SignalDegrade
	}
	t.SignalDegrade = &NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalDegrade{}
	return t.SignalDegrade
}

// GetOrCreateSignalFailure retrieves the value of the SignalFailure field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor) GetOrCreateSignalFailure() *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalFailure {
	if t.SignalFailure != nil {
		return t.SignalFailure
	}
	t.SignalFailure = &NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalFailure{}
	return t.SignalFailure
}

// GetSignalDegrade returns the value of the SignalDegrade struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor. If the receiver or the field SignalDegrade is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor) GetSignalDegrade() *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalDegrade {
	if t != nil && t.SignalDegrade != nil {
		return t.SignalDegrade
	}
	return nil
}

// GetSignalFailure returns the value of the SignalFailure struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor. If the receiver or the field SignalFailure is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor) GetSignalFailure() *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalFailure {
	if t != nil && t.SignalFailure != nil {
		return t.SignalFailure
	}
	return nil
}

// GetWindowSize retrieves the value of the leaf WindowSize from the NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WindowSize is set, it can
// safely use t.GetWindowSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WindowSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor) GetWindowSize() uint32 {
	if t == nil || t.WindowSize == nil {
		return 10
	}
	return *t.WindowSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.WindowSize == nil {
		var v uint32 = 10
		t.WindowSize = &v
	}
	t.SignalDegrade.PopulateDefaults()
	t.SignalFailure.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalDegrade represents the /nokia-conf/configure/groups/group/port/ethernet/crc-monitor/signal-degrade YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalDegrade struct {
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalDegrade implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalDegrade) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalDegrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalDegrade) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 1
	}
	return *t.Multiplier
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalDegrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalDegrade) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalDegrade
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalDegrade) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 1
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalDegrade) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalDegrade"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalDegrade) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalDegrade) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalDegrade.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalDegrade) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalFailure represents the /nokia-conf/configure/groups/group/port/ethernet/crc-monitor/signal-failure YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalFailure struct {
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalFailure implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalFailure) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalFailure
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalFailure) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 1
	}
	return *t.Multiplier
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalFailure
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalFailure) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalFailure
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalFailure) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 1
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalFailure) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalFailure"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalFailure) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalFailure) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalFailure.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_CrcMonitor_SignalFailure) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening represents the /nokia-conf/configure/groups/group/port/ethernet/dampening YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening struct {
	AdminState        E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	HalfLife          *uint32                     `path:"half-life" module:"nokia-conf"`
	MaxSuppressTime   *uint32                     `path:"max-suppress-time" module:"nokia-conf"`
	ReuseThreshold    *uint32                     `path:"reuse-threshold" module:"nokia-conf"`
	SuppressThreshold *uint32                     `path:"suppress-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHalfLife retrieves the value of the leaf HalfLife from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HalfLife is set, it can
// safely use t.GetHalfLife() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HalfLife == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening) GetHalfLife() uint32 {
	if t == nil || t.HalfLife == nil {
		return 5
	}
	return *t.HalfLife
}

// GetMaxSuppressTime retrieves the value of the leaf MaxSuppressTime from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSuppressTime is set, it can
// safely use t.GetMaxSuppressTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSuppressTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening) GetMaxSuppressTime() uint32 {
	if t == nil || t.MaxSuppressTime == nil {
		return 20
	}
	return *t.MaxSuppressTime
}

// GetReuseThreshold retrieves the value of the leaf ReuseThreshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReuseThreshold is set, it can
// safely use t.GetReuseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReuseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening) GetReuseThreshold() uint32 {
	if t == nil || t.ReuseThreshold == nil {
		return 1000
	}
	return *t.ReuseThreshold
}

// GetSuppressThreshold retrieves the value of the leaf SuppressThreshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressThreshold is set, it can
// safely use t.GetSuppressThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening) GetSuppressThreshold() uint32 {
	if t == nil || t.SuppressThreshold == nil {
		return 2000
	}
	return *t.SuppressThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HalfLife == nil {
		var v uint32 = 5
		t.HalfLife = &v
	}
	if t.MaxSuppressTime == nil {
		var v uint32 = 20
		t.MaxSuppressTime = &v
	}
	if t.ReuseThreshold == nil {
		var v uint32 = 1000
		t.ReuseThreshold = &v
	}
	if t.SuppressThreshold == nil {
		var v uint32 = 2000
		t.SuppressThreshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dampening) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X represents the /nokia-conf/configure/groups/group/port/ethernet/dot1x YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X struct {
	AdminState                E_NokiaTypesSros_AdminState                                                 `path:"admin-state" module:"nokia-conf"`
	Macsec                    *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec                `path:"macsec" module:"nokia-conf" yangPresence:"true"`
	MaxAuthenticationRequests *uint32                                                                     `path:"max-authentication-requests" module:"nokia-conf"`
	PerHostAuthentication     *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication `path:"per-host-authentication" module:"nokia-conf"`
	PortControl               E_NokiaTypesPort_PaeControlledPortControl                                   `path:"port-control" module:"nokia-conf"`
	QuietPeriod               *uint32                                                                     `path:"quiet-period" module:"nokia-conf"`
	RadiusPolicy              *string                                                                     `path:"radius-policy" module:"nokia-conf"`
	RadiusServerPolicy        *string                                                                     `path:"radius-server-policy" module:"nokia-conf"`
	RadiusServerPolicyAcct    *string                                                                     `path:"radius-server-policy-acct" module:"nokia-conf"`
	RadiusServerPolicyAuth    *string                                                                     `path:"radius-server-policy-auth" module:"nokia-conf"`
	ReAuthentication          *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_ReAuthentication      `path:"re-authentication" module:"nokia-conf" yangPresence:"true"`
	ServerTimeout             *uint32                                                                     `path:"server-timeout" module:"nokia-conf"`
	SupplicantTimeout         *uint32                                                                     `path:"supplicant-timeout" module:"nokia-conf"`
	TransmitPeriod            *uint32                                                                     `path:"transmit-period" module:"nokia-conf"`
	TunnelDot1Q               *bool                                                                       `path:"tunnel-dot1q" module:"nokia-conf"`
	TunnelQinq                *bool                                                                       `path:"tunnel-qinq" module:"nokia-conf"`
	Tunneling                 *bool                                                                       `path:"tunneling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) IsYANGGoStruct() {}

// GetOrCreateMacsec retrieves the value of the Macsec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) GetOrCreateMacsec() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec {
	if t.Macsec != nil {
		return t.Macsec
	}
	t.Macsec = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec{}
	return t.Macsec
}

// GetOrCreatePerHostAuthentication retrieves the value of the PerHostAuthentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) GetOrCreatePerHostAuthentication() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication {
	if t.PerHostAuthentication != nil {
		return t.PerHostAuthentication
	}
	t.PerHostAuthentication = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication{}
	return t.PerHostAuthentication
}

// GetOrCreateReAuthentication retrieves the value of the ReAuthentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) GetOrCreateReAuthentication() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_ReAuthentication {
	if t.ReAuthentication != nil {
		return t.ReAuthentication
	}
	t.ReAuthentication = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_ReAuthentication{}
	return t.ReAuthentication
}

// GetMacsec returns the value of the Macsec struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X. If the receiver or the field Macsec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) GetMacsec() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec {
	if t != nil && t.Macsec != nil {
		return t.Macsec
	}
	return nil
}

// GetPerHostAuthentication returns the value of the PerHostAuthentication struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X. If the receiver or the field PerHostAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) GetPerHostAuthentication() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication {
	if t != nil && t.PerHostAuthentication != nil {
		return t.PerHostAuthentication
	}
	return nil
}

// GetReAuthentication returns the value of the ReAuthentication struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X. If the receiver or the field ReAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) GetReAuthentication() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_ReAuthentication {
	if t != nil && t.ReAuthentication != nil {
		return t.ReAuthentication
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetMaxAuthenticationRequests retrieves the value of the leaf MaxAuthenticationRequests from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAuthenticationRequests is set, it can
// safely use t.GetMaxAuthenticationRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAuthenticationRequests == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) GetMaxAuthenticationRequests() uint32 {
	if t == nil || t.MaxAuthenticationRequests == nil {
		return 2
	}
	return *t.MaxAuthenticationRequests
}

// GetPortControl retrieves the value of the leaf PortControl from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortControl is set, it can
// safely use t.GetPortControl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortControl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) GetPortControl() E_NokiaTypesPort_PaeControlledPortControl {
	if t == nil || t.PortControl == 0 {
		return NokiaTypesPort_PaeControlledPortControl_force_authorized
	}
	return t.PortControl
}

// GetQuietPeriod retrieves the value of the leaf QuietPeriod from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuietPeriod is set, it can
// safely use t.GetQuietPeriod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuietPeriod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) GetQuietPeriod() uint32 {
	if t == nil || t.QuietPeriod == nil {
		return 60
	}
	return *t.QuietPeriod
}

// GetRadiusPolicy retrieves the value of the leaf RadiusPolicy from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusPolicy is set, it can
// safely use t.GetRadiusPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) GetRadiusPolicy() string {
	if t == nil || t.RadiusPolicy == nil {
		return ""
	}
	return *t.RadiusPolicy
}

// GetRadiusServerPolicy retrieves the value of the leaf RadiusServerPolicy from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusServerPolicy is set, it can
// safely use t.GetRadiusServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) GetRadiusServerPolicy() string {
	if t == nil || t.RadiusServerPolicy == nil {
		return ""
	}
	return *t.RadiusServerPolicy
}

// GetRadiusServerPolicyAcct retrieves the value of the leaf RadiusServerPolicyAcct from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusServerPolicyAcct is set, it can
// safely use t.GetRadiusServerPolicyAcct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusServerPolicyAcct == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) GetRadiusServerPolicyAcct() string {
	if t == nil || t.RadiusServerPolicyAcct == nil {
		return ""
	}
	return *t.RadiusServerPolicyAcct
}

// GetRadiusServerPolicyAuth retrieves the value of the leaf RadiusServerPolicyAuth from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusServerPolicyAuth is set, it can
// safely use t.GetRadiusServerPolicyAuth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusServerPolicyAuth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) GetRadiusServerPolicyAuth() string {
	if t == nil || t.RadiusServerPolicyAuth == nil {
		return ""
	}
	return *t.RadiusServerPolicyAuth
}

// GetServerTimeout retrieves the value of the leaf ServerTimeout from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerTimeout is set, it can
// safely use t.GetServerTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) GetServerTimeout() uint32 {
	if t == nil || t.ServerTimeout == nil {
		return 30
	}
	return *t.ServerTimeout
}

// GetSupplicantTimeout retrieves the value of the leaf SupplicantTimeout from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SupplicantTimeout is set, it can
// safely use t.GetSupplicantTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SupplicantTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) GetSupplicantTimeout() uint32 {
	if t == nil || t.SupplicantTimeout == nil {
		return 30
	}
	return *t.SupplicantTimeout
}

// GetTransmitPeriod retrieves the value of the leaf TransmitPeriod from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitPeriod is set, it can
// safely use t.GetTransmitPeriod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitPeriod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) GetTransmitPeriod() uint32 {
	if t == nil || t.TransmitPeriod == nil {
		return 30
	}
	return *t.TransmitPeriod
}

// GetTunnelDot1Q retrieves the value of the leaf TunnelDot1Q from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelDot1Q is set, it can
// safely use t.GetTunnelDot1Q() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelDot1Q == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) GetTunnelDot1Q() bool {
	if t == nil || t.TunnelDot1Q == nil {
		return true
	}
	return *t.TunnelDot1Q
}

// GetTunnelQinq retrieves the value of the leaf TunnelQinq from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelQinq is set, it can
// safely use t.GetTunnelQinq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelQinq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) GetTunnelQinq() bool {
	if t == nil || t.TunnelQinq == nil {
		return true
	}
	return *t.TunnelQinq
}

// GetTunneling retrieves the value of the leaf Tunneling from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tunneling is set, it can
// safely use t.GetTunneling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tunneling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) GetTunneling() bool {
	if t == nil || t.Tunneling == nil {
		return false
	}
	return *t.Tunneling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MaxAuthenticationRequests == nil {
		var v uint32 = 2
		t.MaxAuthenticationRequests = &v
	}
	if t.PortControl == 0 {
		t.PortControl = NokiaTypesPort_PaeControlledPortControl_force_authorized
	}
	if t.QuietPeriod == nil {
		var v uint32 = 60
		t.QuietPeriod = &v
	}
	if t.ServerTimeout == nil {
		var v uint32 = 30
		t.ServerTimeout = &v
	}
	if t.SupplicantTimeout == nil {
		var v uint32 = 30
		t.SupplicantTimeout = &v
	}
	if t.TransmitPeriod == nil {
		var v uint32 = 30
		t.TransmitPeriod = &v
	}
	if t.TunnelDot1Q == nil {
		var v bool = true
		t.TunnelDot1Q = &v
	}
	if t.TunnelQinq == nil {
		var v bool = true
		t.TunnelQinq = &v
	}
	if t.Tunneling == nil {
		var v bool = false
		t.Tunneling = &v
	}
	t.Macsec.PopulateDefaults()
	t.PerHostAuthentication.PopulateDefaults()
	t.ReAuthentication.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec represents the /nokia-conf/configure/groups/group/port/ethernet/dot1x/macsec YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec struct {
	ExcludeMacPolicy  *uint32                                                                                                                                                      `path:"exclude-mac-policy" module:"nokia-conf"`
	ExcludeProtocol   *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol                                                                                 `path:"exclude-protocol" module:"nokia-conf"`
	RxMustBeEncrypted *bool                                                                                                                                                        `path:"rx-must-be-encrypted" module:"nokia-conf"`
	SubPort           map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_SubPortId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort `path:"sub-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec) IsYANGGoStruct() {}

// NewSubPort creates a new entry in the SubPort list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec) NewSubPort(SubPortId NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_SubPortId_Union) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SubPort == nil {
		t.SubPort = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_SubPortId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort)
	}

	key := SubPortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SubPort[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SubPort", key)
	}

	t.SubPort[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort{
		SubPortId: SubPortId,
	}

	return t.SubPort[key], nil
}

// RenameSubPort renames an entry in the list SubPort within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec) RenameSubPort(oldK, newK NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_SubPortId_Union) error {
	if _, ok := t.SubPort[newK]; ok {
		return fmt.Errorf("key %v already exists in SubPort", newK)
	}

	e, ok := t.SubPort[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SubPort", oldK)
	}
	e.SubPortId = newK

	t.SubPort[newK] = e
	delete(t.SubPort, oldK)
	return nil
}

// GetOrCreateSubPort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec) GetOrCreateSubPort(SubPortId NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_SubPortId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort {

	key := SubPortId

	if v, ok := t.SubPort[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubPort(SubPortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubPort got unexpected error: %v", err))
	}
	return v
}

// GetSubPort retrieves the value with the specified key from
// the SubPort map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec) GetSubPort(SubPortId NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_SubPortId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort {

	if t == nil {
		return nil
	}

	key := SubPortId

	if lm, ok := t.SubPort[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubPort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec) DeleteSubPort(SubPortId NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_SubPortId_Union) {
	key := SubPortId

	delete(t.SubPort, key)
}

// AppendSubPort appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort struct to the
// list SubPort of NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec) AppendSubPort(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort) error {
	key := v.SubPortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SubPort == nil {
		t.SubPort = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_SubPortId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort)
	}

	if _, ok := t.SubPort[key]; ok {
		return fmt.Errorf("duplicate key for list SubPort %v", key)
	}

	t.SubPort[key] = v
	return nil
}

// GetOrCreateExcludeProtocol retrieves the value of the ExcludeProtocol field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec) GetOrCreateExcludeProtocol() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol {
	if t.ExcludeProtocol != nil {
		return t.ExcludeProtocol
	}
	t.ExcludeProtocol = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol{}
	return t.ExcludeProtocol
}

// GetExcludeProtocol returns the value of the ExcludeProtocol struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec. If the receiver or the field ExcludeProtocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec) GetExcludeProtocol() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol {
	if t != nil && t.ExcludeProtocol != nil {
		return t.ExcludeProtocol
	}
	return nil
}

// GetExcludeMacPolicy retrieves the value of the leaf ExcludeMacPolicy from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExcludeMacPolicy is set, it can
// safely use t.GetExcludeMacPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExcludeMacPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec) GetExcludeMacPolicy() uint32 {
	if t == nil || t.ExcludeMacPolicy == nil {
		return 0
	}
	return *t.ExcludeMacPolicy
}

// GetRxMustBeEncrypted retrieves the value of the leaf RxMustBeEncrypted from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxMustBeEncrypted is set, it can
// safely use t.GetRxMustBeEncrypted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxMustBeEncrypted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec) GetRxMustBeEncrypted() bool {
	if t == nil || t.RxMustBeEncrypted == nil {
		return false
	}
	return *t.RxMustBeEncrypted
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxMustBeEncrypted == nil {
		var v bool = false
		t.RxMustBeEncrypted = &v
	}
	t.ExcludeProtocol.PopulateDefaults()
	for _, e := range t.SubPort {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol represents the /nokia-conf/configure/groups/group/port/ethernet/dot1x/macsec/exclude-protocol YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol struct {
	Cdp        *bool `path:"cdp" module:"nokia-conf"`
	EapolStart *bool `path:"eapol-start" module:"nokia-conf"`
	EfmOam     *bool `path:"efm-oam" module:"nokia-conf"`
	EthCfm     *bool `path:"eth-cfm" module:"nokia-conf"`
	Lacp       *bool `path:"lacp" module:"nokia-conf"`
	Lldp       *bool `path:"lldp" module:"nokia-conf"`
	Ptp        *bool `path:"ptp" module:"nokia-conf"`
	Ubfd       *bool `path:"ubfd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) IsYANGGoStruct() {
}

// GetCdp retrieves the value of the leaf Cdp from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cdp is set, it can
// safely use t.GetCdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) GetCdp() bool {
	if t == nil || t.Cdp == nil {
		return false
	}
	return *t.Cdp
}

// GetEapolStart retrieves the value of the leaf EapolStart from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EapolStart is set, it can
// safely use t.GetEapolStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EapolStart == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) GetEapolStart() bool {
	if t == nil || t.EapolStart == nil {
		return false
	}
	return *t.EapolStart
}

// GetEfmOam retrieves the value of the leaf EfmOam from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EfmOam is set, it can
// safely use t.GetEfmOam() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EfmOam == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) GetEfmOam() bool {
	if t == nil || t.EfmOam == nil {
		return false
	}
	return *t.EfmOam
}

// GetEthCfm retrieves the value of the leaf EthCfm from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthCfm is set, it can
// safely use t.GetEthCfm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthCfm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) GetEthCfm() bool {
	if t == nil || t.EthCfm == nil {
		return false
	}
	return *t.EthCfm
}

// GetLacp retrieves the value of the leaf Lacp from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lacp is set, it can
// safely use t.GetLacp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lacp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) GetLacp() bool {
	if t == nil || t.Lacp == nil {
		return false
	}
	return *t.Lacp
}

// GetLldp retrieves the value of the leaf Lldp from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lldp is set, it can
// safely use t.GetLldp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lldp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) GetLldp() bool {
	if t == nil || t.Lldp == nil {
		return false
	}
	return *t.Lldp
}

// GetPtp retrieves the value of the leaf Ptp from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ptp is set, it can
// safely use t.GetPtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ptp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) GetPtp() bool {
	if t == nil || t.Ptp == nil {
		return false
	}
	return *t.Ptp
}

// GetUbfd retrieves the value of the leaf Ubfd from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ubfd is set, it can
// safely use t.GetUbfd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ubfd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) GetUbfd() bool {
	if t == nil || t.Ubfd == nil {
		return false
	}
	return *t.Ubfd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cdp == nil {
		var v bool = false
		t.Cdp = &v
	}
	if t.EapolStart == nil {
		var v bool = false
		t.EapolStart = &v
	}
	if t.EfmOam == nil {
		var v bool = false
		t.EfmOam = &v
	}
	if t.EthCfm == nil {
		var v bool = false
		t.EthCfm = &v
	}
	if t.Lacp == nil {
		var v bool = false
		t.Lacp = &v
	}
	if t.Lldp == nil {
		var v bool = false
		t.Lldp = &v
	}
	if t.Ptp == nil {
		var v bool = false
		t.Ptp = &v
	}
	if t.Ubfd == nil {
		var v bool = false
		t.Ubfd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort represents the /nokia-conf/configure/groups/group/port/ethernet/dot1x/macsec/sub-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort struct {
	AdminState              E_NokiaTypesSros_AdminState                                                         `path:"admin-state" module:"nokia-conf"`
	CaName                  *string                                                                             `path:"ca-name" module:"nokia-conf"`
	EapolDestinationAddress *string                                                                             `path:"eapol-destination-address" module:"nokia-conf"`
	EncapMatch              *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch     `path:"encap-match" module:"nokia-conf"`
	MaxPeers                *uint32                                                                             `path:"max-peers" module:"nokia-conf"`
	SubPortId               NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_SubPortId_Union `path:"sub-port-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort) IsYANGGoStruct() {}

// GetOrCreateEncapMatch retrieves the value of the EncapMatch field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort) GetOrCreateEncapMatch() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch {
	if t.EncapMatch != nil {
		return t.EncapMatch
	}
	t.EncapMatch = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch{}
	return t.EncapMatch
}

// GetEncapMatch returns the value of the EncapMatch struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort. If the receiver or the field EncapMatch is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort) GetEncapMatch() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch {
	if t != nil && t.EncapMatch != nil {
		return t.EncapMatch
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCaName retrieves the value of the leaf CaName from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CaName is set, it can
// safely use t.GetCaName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CaName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort) GetCaName() string {
	if t == nil || t.CaName == nil {
		return ""
	}
	return *t.CaName
}

// GetEapolDestinationAddress retrieves the value of the leaf EapolDestinationAddress from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EapolDestinationAddress is set, it can
// safely use t.GetEapolDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EapolDestinationAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort) GetEapolDestinationAddress() string {
	if t == nil || t.EapolDestinationAddress == nil {
		return ""
	}
	return *t.EapolDestinationAddress
}

// GetMaxPeers retrieves the value of the leaf MaxPeers from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPeers is set, it can
// safely use t.GetMaxPeers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPeers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort) GetMaxPeers() uint32 {
	if t == nil || t.MaxPeers == nil {
		return 0
	}
	return *t.MaxPeers
}

// GetSubPortId retrieves the value of the leaf SubPortId from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubPortId is set, it can
// safely use t.GetSubPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubPortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort) GetSubPortId() NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_SubPortId_Union {
	if t == nil || t.SubPortId == nil {
		return nil
	}
	return t.SubPortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.EncapMatch.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"sub-port-id": t.SubPortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch represents the /nokia-conf/configure/groups/group/port/ethernet/dot1x/macsec/sub-port/encap-match YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch struct {
	AllMatch  *bool   `path:"all-match" module:"nokia-conf"`
	DoubleTag *string `path:"double-tag" module:"nokia-conf"`
	SingleTag *string `path:"single-tag" module:"nokia-conf"`
	Untagged  *bool   `path:"untagged" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch) IsYANGGoStruct() {
}

// GetAllMatch retrieves the value of the leaf AllMatch from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllMatch is set, it can
// safely use t.GetAllMatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllMatch == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch) GetAllMatch() bool {
	if t == nil || t.AllMatch == nil {
		return true
	}
	return *t.AllMatch
}

// GetDoubleTag retrieves the value of the leaf DoubleTag from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DoubleTag is set, it can
// safely use t.GetDoubleTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DoubleTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch) GetDoubleTag() string {
	if t == nil || t.DoubleTag == nil {
		return ""
	}
	return *t.DoubleTag
}

// GetSingleTag retrieves the value of the leaf SingleTag from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SingleTag is set, it can
// safely use t.GetSingleTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SingleTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch) GetSingleTag() string {
	if t == nil || t.SingleTag == nil {
		return ""
	}
	return *t.SingleTag
}

// GetUntagged retrieves the value of the leaf Untagged from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Untagged is set, it can
// safely use t.GetUntagged() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Untagged == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch) GetUntagged() bool {
	if t == nil || t.Untagged == nil {
		return false
	}
	return *t.Untagged
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllMatch == nil {
		var v bool = true
		t.AllMatch = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication represents the /nokia-conf/configure/groups/group/port/ethernet/dot1x/per-host-authentication YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication struct {
	AdminState        E_NokiaTypesSros_AdminState                                                                   `path:"admin-state" module:"nokia-conf"`
	AllowedSourceMacs *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs `path:"allowed-source-macs" module:"nokia-conf"`
	AuthenticatorInit *bool                                                                                         `path:"authenticator-init" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication) IsYANGGoStruct() {}

// GetOrCreateAllowedSourceMacs retrieves the value of the AllowedSourceMacs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication) GetOrCreateAllowedSourceMacs() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs {
	if t.AllowedSourceMacs != nil {
		return t.AllowedSourceMacs
	}
	t.AllowedSourceMacs = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs{}
	return t.AllowedSourceMacs
}

// GetAllowedSourceMacs returns the value of the AllowedSourceMacs struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication. If the receiver or the field AllowedSourceMacs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication) GetAllowedSourceMacs() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs {
	if t != nil && t.AllowedSourceMacs != nil {
		return t.AllowedSourceMacs
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAuthenticatorInit retrieves the value of the leaf AuthenticatorInit from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticatorInit is set, it can
// safely use t.GetAuthenticatorInit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticatorInit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication) GetAuthenticatorInit() bool {
	if t == nil || t.AuthenticatorInit == nil {
		return true
	}
	return *t.AuthenticatorInit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AuthenticatorInit == nil {
		var v bool = true
		t.AuthenticatorInit = &v
	}
	t.AllowedSourceMacs.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs represents the /nokia-conf/configure/groups/group/port/ethernet/dot1x/per-host-authentication/allowed-source-macs YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs struct {
	MacAddress map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) IsYANGGoStruct() {
}

// NewMacAddress creates a new entry in the MacAddress list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) NewMacAddress(Mac string) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacAddress == nil {
		t.MacAddress = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress)
	}

	key := Mac

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MacAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MacAddress", key)
	}

	t.MacAddress[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress{
		Mac: &Mac,
	}

	return t.MacAddress[key], nil
}

// RenameMacAddress renames an entry in the list MacAddress within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) RenameMacAddress(oldK, newK string) error {
	if _, ok := t.MacAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in MacAddress", newK)
	}

	e, ok := t.MacAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MacAddress", oldK)
	}
	e.Mac = &newK

	t.MacAddress[newK] = e
	delete(t.MacAddress, oldK)
	return nil
}

// GetOrCreateMacAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) GetOrCreateMacAddress(Mac string) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress {

	key := Mac

	if v, ok := t.MacAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMacAddress(Mac)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMacAddress got unexpected error: %v", err))
	}
	return v
}

// GetMacAddress retrieves the value with the specified key from
// the MacAddress map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) GetMacAddress(Mac string) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress {

	if t == nil {
		return nil
	}

	key := Mac

	if lm, ok := t.MacAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteMacAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) DeleteMacAddress(Mac string) {
	key := Mac

	delete(t.MacAddress, key)
}

// AppendMacAddress appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress struct to the
// list MacAddress of NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) AppendMacAddress(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress) error {
	if v.Mac == nil {
		return fmt.Errorf("invalid nil key received for Mac")
	}

	key := *v.Mac

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacAddress == nil {
		t.MacAddress = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress)
	}

	if _, ok := t.MacAddress[key]; ok {
		return fmt.Errorf("duplicate key for list MacAddress %v", key)
	}

	t.MacAddress[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MacAddress {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress represents the /nokia-conf/configure/groups/group/port/ethernet/dot1x/per-host-authentication/allowed-source-macs/mac-address YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress struct {
	Mac *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress) IsYANGGoStruct() {
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Mac == nil {
		return nil, fmt.Errorf("nil value for key Mac")
	}

	return map[string]interface{}{
		"mac": *t.Mac,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_ReAuthentication represents the /nokia-conf/configure/groups/group/port/ethernet/dot1x/re-authentication YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_ReAuthentication struct {
	Period *uint32 `path:"period" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_ReAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_ReAuthentication) IsYANGGoStruct() {}

// GetPeriod retrieves the value of the leaf Period from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_ReAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Period is set, it can
// safely use t.GetPeriod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Period == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_ReAuthentication) GetPeriod() uint32 {
	if t == nil || t.Period == nil {
		return 3600
	}
	return *t.Period
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_ReAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_ReAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Period == nil {
		var v uint32 = 3600
		t.Period = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_ReAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_ReAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_ReAuthentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_ReAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_ReAuthentication.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Dot1X_ReAuthentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError represents the /nokia-conf/configure/groups/group/port/ethernet/down-on-internal-error YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError struct {
	TxLaser E_NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError_TxLaser `path:"tx-laser" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError) IsYANGGoStruct() {}

// GetTxLaser retrieves the value of the leaf TxLaser from the NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxLaser is set, it can
// safely use t.GetTxLaser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxLaser == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError) GetTxLaser() E_NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError_TxLaser {
	if t == nil || t.TxLaser == 0 {
		return NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError_TxLaser_on
	}
	return t.TxLaser
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.TxLaser == 0 {
		t.TxLaser = NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError_TxLaser_on
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_DownOnInternalError) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped represents the /nokia-conf/configure/groups/group/port/ethernet/down-when-looped YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped struct {
	AdminState          E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	KeepAlive           *uint32                     `path:"keep-alive" module:"nokia-conf"`
	RetryTimeout        *uint32                     `path:"retry-timeout" module:"nokia-conf"`
	UseBroadcastAddress *bool                       `path:"use-broadcast-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetKeepAlive retrieves the value of the leaf KeepAlive from the NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepAlive is set, it can
// safely use t.GetKeepAlive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepAlive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped) GetKeepAlive() uint32 {
	if t == nil || t.KeepAlive == nil {
		return 10
	}
	return *t.KeepAlive
}

// GetRetryTimeout retrieves the value of the leaf RetryTimeout from the NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryTimeout is set, it can
// safely use t.GetRetryTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped) GetRetryTimeout() uint32 {
	if t == nil || t.RetryTimeout == nil {
		return 120
	}
	return *t.RetryTimeout
}

// GetUseBroadcastAddress retrieves the value of the leaf UseBroadcastAddress from the NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseBroadcastAddress is set, it can
// safely use t.GetUseBroadcastAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseBroadcastAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped) GetUseBroadcastAddress() bool {
	if t == nil || t.UseBroadcastAddress == nil {
		return false
	}
	return *t.UseBroadcastAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.KeepAlive == nil {
		var v uint32 = 10
		t.KeepAlive = &v
	}
	if t.RetryTimeout == nil {
		var v uint32 = 120
		t.RetryTimeout = &v
	}
	if t.UseBroadcastAddress == nil {
		var v bool = false
		t.UseBroadcastAddress = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_DownWhenLooped) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam represents the /nokia-conf/configure/groups/group/port/ethernet/efm-oam YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam struct {
	AcceptRemoteLoopback *bool                                                                 `path:"accept-remote-loopback" module:"nokia-conf"`
	AdminState           E_NokiaTypesSros_AdminState                                           `path:"admin-state" module:"nokia-conf"`
	Discovery            *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery      `path:"discovery" module:"nokia-conf"`
	DyingGaspTxOnReset   *bool                                                                 `path:"dying-gasp-tx-on-reset" module:"nokia-conf"`
	GraceTx              *bool                                                                 `path:"grace-tx" module:"nokia-conf"`
	GraceVendorOui       *string                                                               `path:"grace-vendor-oui" module:"nokia-conf"`
	HoldTime             *uint32                                                               `path:"hold-time" module:"nokia-conf"`
	IgnoreEfmState       *bool                                                                 `path:"ignore-efm-state" module:"nokia-conf"`
	LinkMonitoring       *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring `path:"link-monitoring" module:"nokia-conf" yangPresence:"true"`
	Mode                 E_NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Mode          `path:"mode" module:"nokia-conf"`
	Multiplier           *uint32                                                               `path:"multiplier" module:"nokia-conf"`
	PeerRdiRx            *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx      `path:"peer-rdi-rx" module:"nokia-conf"`
	TransmitInterval     *uint32                                                               `path:"transmit-interval" module:"nokia-conf"`
	TriggerFault         E_NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_TriggerFault  `path:"trigger-fault" module:"nokia-conf"`
	Tunneling            *bool                                                                 `path:"tunneling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) IsYANGGoStruct() {}

// GetOrCreateDiscovery retrieves the value of the Discovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) GetOrCreateDiscovery() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery {
	if t.Discovery != nil {
		return t.Discovery
	}
	t.Discovery = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery{}
	return t.Discovery
}

// GetOrCreateLinkMonitoring retrieves the value of the LinkMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) GetOrCreateLinkMonitoring() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring {
	if t.LinkMonitoring != nil {
		return t.LinkMonitoring
	}
	t.LinkMonitoring = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring{}
	return t.LinkMonitoring
}

// GetOrCreatePeerRdiRx retrieves the value of the PeerRdiRx field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) GetOrCreatePeerRdiRx() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx {
	if t.PeerRdiRx != nil {
		return t.PeerRdiRx
	}
	t.PeerRdiRx = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx{}
	return t.PeerRdiRx
}

// GetDiscovery returns the value of the Discovery struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam. If the receiver or the field Discovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) GetDiscovery() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery {
	if t != nil && t.Discovery != nil {
		return t.Discovery
	}
	return nil
}

// GetLinkMonitoring returns the value of the LinkMonitoring struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam. If the receiver or the field LinkMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) GetLinkMonitoring() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring {
	if t != nil && t.LinkMonitoring != nil {
		return t.LinkMonitoring
	}
	return nil
}

// GetPeerRdiRx returns the value of the PeerRdiRx struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam. If the receiver or the field PeerRdiRx is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) GetPeerRdiRx() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx {
	if t != nil && t.PeerRdiRx != nil {
		return t.PeerRdiRx
	}
	return nil
}

// GetAcceptRemoteLoopback retrieves the value of the leaf AcceptRemoteLoopback from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptRemoteLoopback is set, it can
// safely use t.GetAcceptRemoteLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptRemoteLoopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) GetAcceptRemoteLoopback() bool {
	if t == nil || t.AcceptRemoteLoopback == nil {
		return false
	}
	return *t.AcceptRemoteLoopback
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDyingGaspTxOnReset retrieves the value of the leaf DyingGaspTxOnReset from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DyingGaspTxOnReset is set, it can
// safely use t.GetDyingGaspTxOnReset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DyingGaspTxOnReset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) GetDyingGaspTxOnReset() bool {
	if t == nil || t.DyingGaspTxOnReset == nil {
		return true
	}
	return *t.DyingGaspTxOnReset
}

// GetGraceTx retrieves the value of the leaf GraceTx from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GraceTx is set, it can
// safely use t.GetGraceTx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GraceTx == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) GetGraceTx() bool {
	if t == nil || t.GraceTx == nil {
		return false
	}
	return *t.GraceTx
}

// GetGraceVendorOui retrieves the value of the leaf GraceVendorOui from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GraceVendorOui is set, it can
// safely use t.GetGraceVendorOui() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GraceVendorOui == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) GetGraceVendorOui() string {
	if t == nil || t.GraceVendorOui == nil {
		return "00:16:4D"
	}
	return *t.GraceVendorOui
}

// GetHoldTime retrieves the value of the leaf HoldTime from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) GetHoldTime() uint32 {
	if t == nil || t.HoldTime == nil {
		return 0
	}
	return *t.HoldTime
}

// GetIgnoreEfmState retrieves the value of the leaf IgnoreEfmState from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreEfmState is set, it can
// safely use t.GetIgnoreEfmState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreEfmState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) GetIgnoreEfmState() bool {
	if t == nil || t.IgnoreEfmState == nil {
		return false
	}
	return *t.IgnoreEfmState
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) GetMode() E_NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Mode {
	if t == nil || t.Mode == 0 {
		return NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Mode_active
	}
	return t.Mode
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 5
	}
	return *t.Multiplier
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 10
	}
	return *t.TransmitInterval
}

// GetTriggerFault retrieves the value of the leaf TriggerFault from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TriggerFault is set, it can
// safely use t.GetTriggerFault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TriggerFault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) GetTriggerFault() E_NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_TriggerFault {
	if t == nil || t.TriggerFault == 0 {
		return 0
	}
	return t.TriggerFault
}

// GetTunneling retrieves the value of the leaf Tunneling from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tunneling is set, it can
// safely use t.GetTunneling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tunneling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) GetTunneling() bool {
	if t == nil || t.Tunneling == nil {
		return false
	}
	return *t.Tunneling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcceptRemoteLoopback == nil {
		var v bool = false
		t.AcceptRemoteLoopback = &v
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DyingGaspTxOnReset == nil {
		var v bool = true
		t.DyingGaspTxOnReset = &v
	}
	if t.GraceVendorOui == nil {
		var v string = "00:16:4D"
		t.GraceVendorOui = &v
	}
	if t.IgnoreEfmState == nil {
		var v bool = false
		t.IgnoreEfmState = &v
	}
	if t.Mode == 0 {
		t.Mode = NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Mode_active
	}
	if t.Multiplier == nil {
		var v uint32 = 5
		t.Multiplier = &v
	}
	if t.TransmitInterval == nil {
		var v uint32 = 10
		t.TransmitInterval = &v
	}
	if t.Tunneling == nil {
		var v bool = false
		t.Tunneling = &v
	}
	t.Discovery.PopulateDefaults()
	t.LinkMonitoring.PopulateDefaults()
	t.PeerRdiRx.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery represents the /nokia-conf/configure/groups/group/port/ethernet/efm-oam/discovery YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery struct {
	AdvertiseCapabilities *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities `path:"advertise-capabilities" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery) IsYANGGoStruct() {}

// GetOrCreateAdvertiseCapabilities retrieves the value of the AdvertiseCapabilities field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery) GetOrCreateAdvertiseCapabilities() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities {
	if t.AdvertiseCapabilities != nil {
		return t.AdvertiseCapabilities
	}
	t.AdvertiseCapabilities = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities{}
	return t.AdvertiseCapabilities
}

// GetAdvertiseCapabilities returns the value of the AdvertiseCapabilities struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery. If the receiver or the field AdvertiseCapabilities is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery) GetAdvertiseCapabilities() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities {
	if t != nil && t.AdvertiseCapabilities != nil {
		return t.AdvertiseCapabilities
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdvertiseCapabilities.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities represents the /nokia-conf/configure/groups/group/port/ethernet/efm-oam/discovery/advertise-capabilities YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities struct {
	LinkMonitoring *bool `path:"link-monitoring" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities) IsYANGGoStruct() {
}

// GetLinkMonitoring retrieves the value of the leaf LinkMonitoring from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkMonitoring is set, it can
// safely use t.GetLinkMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities) GetLinkMonitoring() bool {
	if t == nil || t.LinkMonitoring == nil {
		return true
	}
	return *t.LinkMonitoring
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LinkMonitoring == nil {
		var v bool = true
		t.LinkMonitoring = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring represents the /nokia-conf/configure/groups/group/port/ethernet/efm-oam/link-monitoring YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring struct {
	AdminState          E_NokiaTypesSros_AdminState                                                               `path:"admin-state" module:"nokia-conf"`
	ErroredFrame        *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame        `path:"errored-frame" module:"nokia-conf"`
	ErroredFramePeriod  *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod  `path:"errored-frame-period" module:"nokia-conf"`
	ErroredFrameSeconds *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds `path:"errored-frame-seconds" module:"nokia-conf"`
	ErroredSymbols      *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols      `path:"errored-symbols" module:"nokia-conf"`
	LocalSfAction       *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction       `path:"local-sf-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring) IsYANGGoStruct() {}

// GetOrCreateErroredFrame retrieves the value of the ErroredFrame field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring) GetOrCreateErroredFrame() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame {
	if t.ErroredFrame != nil {
		return t.ErroredFrame
	}
	t.ErroredFrame = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame{}
	return t.ErroredFrame
}

// GetOrCreateErroredFramePeriod retrieves the value of the ErroredFramePeriod field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring) GetOrCreateErroredFramePeriod() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod {
	if t.ErroredFramePeriod != nil {
		return t.ErroredFramePeriod
	}
	t.ErroredFramePeriod = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod{}
	return t.ErroredFramePeriod
}

// GetOrCreateErroredFrameSeconds retrieves the value of the ErroredFrameSeconds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring) GetOrCreateErroredFrameSeconds() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds {
	if t.ErroredFrameSeconds != nil {
		return t.ErroredFrameSeconds
	}
	t.ErroredFrameSeconds = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds{}
	return t.ErroredFrameSeconds
}

// GetOrCreateErroredSymbols retrieves the value of the ErroredSymbols field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring) GetOrCreateErroredSymbols() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols {
	if t.ErroredSymbols != nil {
		return t.ErroredSymbols
	}
	t.ErroredSymbols = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols{}
	return t.ErroredSymbols
}

// GetOrCreateLocalSfAction retrieves the value of the LocalSfAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring) GetOrCreateLocalSfAction() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction {
	if t.LocalSfAction != nil {
		return t.LocalSfAction
	}
	t.LocalSfAction = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction{}
	return t.LocalSfAction
}

// GetErroredFrame returns the value of the ErroredFrame struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring. If the receiver or the field ErroredFrame is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring) GetErroredFrame() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame {
	if t != nil && t.ErroredFrame != nil {
		return t.ErroredFrame
	}
	return nil
}

// GetErroredFramePeriod returns the value of the ErroredFramePeriod struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring. If the receiver or the field ErroredFramePeriod is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring) GetErroredFramePeriod() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod {
	if t != nil && t.ErroredFramePeriod != nil {
		return t.ErroredFramePeriod
	}
	return nil
}

// GetErroredFrameSeconds returns the value of the ErroredFrameSeconds struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring. If the receiver or the field ErroredFrameSeconds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring) GetErroredFrameSeconds() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds {
	if t != nil && t.ErroredFrameSeconds != nil {
		return t.ErroredFrameSeconds
	}
	return nil
}

// GetErroredSymbols returns the value of the ErroredSymbols struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring. If the receiver or the field ErroredSymbols is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring) GetErroredSymbols() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols {
	if t != nil && t.ErroredSymbols != nil {
		return t.ErroredSymbols
	}
	return nil
}

// GetLocalSfAction returns the value of the LocalSfAction struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring. If the receiver or the field LocalSfAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring) GetLocalSfAction() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction {
	if t != nil && t.LocalSfAction != nil {
		return t.LocalSfAction
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.ErroredFrame.PopulateDefaults()
	t.ErroredFramePeriod.PopulateDefaults()
	t.ErroredFrameSeconds.PopulateDefaults()
	t.ErroredSymbols.PopulateDefaults()
	t.LocalSfAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame represents the /nokia-conf/configure/groups/group/port/ethernet/efm-oam/link-monitoring/errored-frame YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame struct {
	AdminState        E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	EventNotification *bool                       `path:"event-notification" module:"nokia-conf"`
	SdThreshold       *uint32                     `path:"sd-threshold" module:"nokia-conf"`
	SfThreshold       *uint32                     `path:"sf-threshold" module:"nokia-conf"`
	Window            *uint32                     `path:"window" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEventNotification retrieves the value of the leaf EventNotification from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventNotification is set, it can
// safely use t.GetEventNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) GetEventNotification() bool {
	if t == nil || t.EventNotification == nil {
		return true
	}
	return *t.EventNotification
}

// GetSdThreshold retrieves the value of the leaf SdThreshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdThreshold is set, it can
// safely use t.GetSdThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) GetSdThreshold() uint32 {
	if t == nil || t.SdThreshold == nil {
		return 0
	}
	return *t.SdThreshold
}

// GetSfThreshold retrieves the value of the leaf SfThreshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfThreshold is set, it can
// safely use t.GetSfThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) GetSfThreshold() uint32 {
	if t == nil || t.SfThreshold == nil {
		return 1
	}
	return *t.SfThreshold
}

// GetWindow retrieves the value of the leaf Window from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Window is set, it can
// safely use t.GetWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Window == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) GetWindow() uint32 {
	if t == nil || t.Window == nil {
		return 10
	}
	return *t.Window
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.EventNotification == nil {
		var v bool = true
		t.EventNotification = &v
	}
	if t.SfThreshold == nil {
		var v uint32 = 1
		t.SfThreshold = &v
	}
	if t.Window == nil {
		var v uint32 = 10
		t.Window = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod represents the /nokia-conf/configure/groups/group/port/ethernet/efm-oam/link-monitoring/errored-frame-period YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod struct {
	AdminState        E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	EventNotification *bool                       `path:"event-notification" module:"nokia-conf"`
	SdThreshold       *uint32                     `path:"sd-threshold" module:"nokia-conf"`
	SfThreshold       *uint32                     `path:"sf-threshold" module:"nokia-conf"`
	Window            *uint32                     `path:"window" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEventNotification retrieves the value of the leaf EventNotification from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventNotification is set, it can
// safely use t.GetEventNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) GetEventNotification() bool {
	if t == nil || t.EventNotification == nil {
		return true
	}
	return *t.EventNotification
}

// GetSdThreshold retrieves the value of the leaf SdThreshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdThreshold is set, it can
// safely use t.GetSdThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) GetSdThreshold() uint32 {
	if t == nil || t.SdThreshold == nil {
		return 0
	}
	return *t.SdThreshold
}

// GetSfThreshold retrieves the value of the leaf SfThreshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfThreshold is set, it can
// safely use t.GetSfThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) GetSfThreshold() uint32 {
	if t == nil || t.SfThreshold == nil {
		return 1
	}
	return *t.SfThreshold
}

// GetWindow retrieves the value of the leaf Window from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Window is set, it can
// safely use t.GetWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Window == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) GetWindow() uint32 {
	if t == nil || t.Window == nil {
		return 1488095
	}
	return *t.Window
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.EventNotification == nil {
		var v bool = true
		t.EventNotification = &v
	}
	if t.SfThreshold == nil {
		var v uint32 = 1
		t.SfThreshold = &v
	}
	if t.Window == nil {
		var v uint32 = 1488095
		t.Window = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds represents the /nokia-conf/configure/groups/group/port/ethernet/efm-oam/link-monitoring/errored-frame-seconds YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds struct {
	AdminState        E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	EventNotification *bool                       `path:"event-notification" module:"nokia-conf"`
	SdThreshold       *uint32                     `path:"sd-threshold" module:"nokia-conf"`
	SfThreshold       *uint32                     `path:"sf-threshold" module:"nokia-conf"`
	Window            *uint32                     `path:"window" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEventNotification retrieves the value of the leaf EventNotification from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventNotification is set, it can
// safely use t.GetEventNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) GetEventNotification() bool {
	if t == nil || t.EventNotification == nil {
		return true
	}
	return *t.EventNotification
}

// GetSdThreshold retrieves the value of the leaf SdThreshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdThreshold is set, it can
// safely use t.GetSdThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) GetSdThreshold() uint32 {
	if t == nil || t.SdThreshold == nil {
		return 0
	}
	return *t.SdThreshold
}

// GetSfThreshold retrieves the value of the leaf SfThreshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfThreshold is set, it can
// safely use t.GetSfThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) GetSfThreshold() uint32 {
	if t == nil || t.SfThreshold == nil {
		return 1
	}
	return *t.SfThreshold
}

// GetWindow retrieves the value of the leaf Window from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Window is set, it can
// safely use t.GetWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Window == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) GetWindow() uint32 {
	if t == nil || t.Window == nil {
		return 600
	}
	return *t.Window
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.EventNotification == nil {
		var v bool = true
		t.EventNotification = &v
	}
	if t.SfThreshold == nil {
		var v uint32 = 1
		t.SfThreshold = &v
	}
	if t.Window == nil {
		var v uint32 = 600
		t.Window = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols represents the /nokia-conf/configure/groups/group/port/ethernet/efm-oam/link-monitoring/errored-symbols YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols struct {
	AdminState        E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	EventNotification *bool                       `path:"event-notification" module:"nokia-conf"`
	SdThreshold       *uint32                     `path:"sd-threshold" module:"nokia-conf"`
	SfThreshold       *uint32                     `path:"sf-threshold" module:"nokia-conf"`
	Window            *uint32                     `path:"window" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEventNotification retrieves the value of the leaf EventNotification from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventNotification is set, it can
// safely use t.GetEventNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) GetEventNotification() bool {
	if t == nil || t.EventNotification == nil {
		return true
	}
	return *t.EventNotification
}

// GetSdThreshold retrieves the value of the leaf SdThreshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdThreshold is set, it can
// safely use t.GetSdThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) GetSdThreshold() uint32 {
	if t == nil || t.SdThreshold == nil {
		return 0
	}
	return *t.SdThreshold
}

// GetSfThreshold retrieves the value of the leaf SfThreshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfThreshold is set, it can
// safely use t.GetSfThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) GetSfThreshold() uint32 {
	if t == nil || t.SfThreshold == nil {
		return 1
	}
	return *t.SfThreshold
}

// GetWindow retrieves the value of the leaf Window from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Window is set, it can
// safely use t.GetWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Window == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) GetWindow() uint32 {
	if t == nil || t.Window == nil {
		return 10
	}
	return *t.Window
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.EventNotification == nil {
		var v bool = true
		t.EventNotification = &v
	}
	if t.SfThreshold == nil {
		var v uint32 = 1
		t.SfThreshold = &v
	}
	if t.Window == nil {
		var v uint32 = 10
		t.Window = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction represents the /nokia-conf/configure/groups/group/port/ethernet/efm-oam/link-monitoring/local-sf-action YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction struct {
	EventNotificationBurst *uint32                                                                                              `path:"event-notification-burst" module:"nokia-conf"`
	InfoNotification       *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification `path:"info-notification" module:"nokia-conf"`
	LocalPortAction        E_NokiaTypesPort_EfmOamLocalPortAction                                                               `path:"local-port-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction) IsYANGGoStruct() {
}

// GetOrCreateInfoNotification retrieves the value of the InfoNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction) GetOrCreateInfoNotification() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification {
	if t.InfoNotification != nil {
		return t.InfoNotification
	}
	t.InfoNotification = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification{}
	return t.InfoNotification
}

// GetInfoNotification returns the value of the InfoNotification struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction. If the receiver or the field InfoNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction) GetInfoNotification() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification {
	if t != nil && t.InfoNotification != nil {
		return t.InfoNotification
	}
	return nil
}

// GetEventNotificationBurst retrieves the value of the leaf EventNotificationBurst from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventNotificationBurst is set, it can
// safely use t.GetEventNotificationBurst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventNotificationBurst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction) GetEventNotificationBurst() uint32 {
	if t == nil || t.EventNotificationBurst == nil {
		return 1
	}
	return *t.EventNotificationBurst
}

// GetLocalPortAction retrieves the value of the leaf LocalPortAction from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPortAction is set, it can
// safely use t.GetLocalPortAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPortAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction) GetLocalPortAction() E_NokiaTypesPort_EfmOamLocalPortAction {
	if t == nil || t.LocalPortAction == 0 {
		return NokiaTypesPort_EfmOamLocalPortAction_port_out_of_service
	}
	return t.LocalPortAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventNotificationBurst == nil {
		var v uint32 = 1
		t.EventNotificationBurst = &v
	}
	if t.LocalPortAction == 0 {
		t.LocalPortAction = NokiaTypesPort_EfmOamLocalPortAction_port_out_of_service
	}
	t.InfoNotification.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification represents the /nokia-conf/configure/groups/group/port/ethernet/efm-oam/link-monitoring/local-sf-action/info-notification YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification struct {
	CriticalEvent *bool `path:"critical-event" module:"nokia-conf"`
	DyingGasp     *bool `path:"dying-gasp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification) IsYANGGoStruct() {
}

// GetCriticalEvent retrieves the value of the leaf CriticalEvent from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CriticalEvent is set, it can
// safely use t.GetCriticalEvent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CriticalEvent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification) GetCriticalEvent() bool {
	if t == nil || t.CriticalEvent == nil {
		return false
	}
	return *t.CriticalEvent
}

// GetDyingGasp retrieves the value of the leaf DyingGasp from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DyingGasp is set, it can
// safely use t.GetDyingGasp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DyingGasp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification) GetDyingGasp() bool {
	if t == nil || t.DyingGasp == nil {
		return false
	}
	return *t.DyingGasp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CriticalEvent == nil {
		var v bool = false
		t.CriticalEvent = &v
	}
	if t.DyingGasp == nil {
		var v bool = false
		t.DyingGasp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx represents the /nokia-conf/configure/groups/group/port/ethernet/efm-oam/peer-rdi-rx YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx struct {
	CriticalEvent     E_NokiaTypesPort_EfmOamLocalPortAction `path:"critical-event" module:"nokia-conf"`
	DyingGasp         E_NokiaTypesPort_EfmOamLocalPortAction `path:"dying-gasp" module:"nokia-conf"`
	EventNotification E_NokiaTypesPort_EfmOamLocalPortAction `path:"event-notification" module:"nokia-conf"`
	LinkFault         E_NokiaTypesPort_EfmOamLocalPortAction `path:"link-fault" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx) IsYANGGoStruct() {}

// GetCriticalEvent retrieves the value of the leaf CriticalEvent from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CriticalEvent is set, it can
// safely use t.GetCriticalEvent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CriticalEvent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx) GetCriticalEvent() E_NokiaTypesPort_EfmOamLocalPortAction {
	if t == nil || t.CriticalEvent == 0 {
		return NokiaTypesPort_EfmOamLocalPortAction_port_out_of_service
	}
	return t.CriticalEvent
}

// GetDyingGasp retrieves the value of the leaf DyingGasp from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DyingGasp is set, it can
// safely use t.GetDyingGasp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DyingGasp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx) GetDyingGasp() E_NokiaTypesPort_EfmOamLocalPortAction {
	if t == nil || t.DyingGasp == 0 {
		return NokiaTypesPort_EfmOamLocalPortAction_port_out_of_service
	}
	return t.DyingGasp
}

// GetEventNotification retrieves the value of the leaf EventNotification from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventNotification is set, it can
// safely use t.GetEventNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx) GetEventNotification() E_NokiaTypesPort_EfmOamLocalPortAction {
	if t == nil || t.EventNotification == 0 {
		return NokiaTypesPort_EfmOamLocalPortAction_log_only
	}
	return t.EventNotification
}

// GetLinkFault retrieves the value of the leaf LinkFault from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkFault is set, it can
// safely use t.GetLinkFault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkFault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx) GetLinkFault() E_NokiaTypesPort_EfmOamLocalPortAction {
	if t == nil || t.LinkFault == 0 {
		return NokiaTypesPort_EfmOamLocalPortAction_port_out_of_service
	}
	return t.LinkFault
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CriticalEvent == 0 {
		t.CriticalEvent = NokiaTypesPort_EfmOamLocalPortAction_port_out_of_service
	}
	if t.DyingGasp == 0 {
		t.DyingGasp = NokiaTypesPort_EfmOamLocalPortAction_port_out_of_service
	}
	if t.EventNotification == 0 {
		t.EventNotification = NokiaTypesPort_EfmOamLocalPortAction_log_only
	}
	if t.LinkFault == 0 {
		t.LinkFault = NokiaTypesPort_EfmOamLocalPortAction_port_out_of_service
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EfmOam_PeerRdiRx) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress represents the /nokia-conf/configure/groups/group/port/ethernet/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress struct {
	EthBnRateChanges        *bool                                                                                     `path:"eth-bn-rate-changes" module:"nokia-conf"`
	ExpandedSecondaryShaper map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper `path:"expanded-secondary-shaper" module:"nokia-conf"`
	HsPortPoolPolicy        *string                                                                                   `path:"hs-port-pool-policy" module:"nokia-conf"`
	HsSchedulerPolicy       *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy                  `path:"hs-scheduler-policy" module:"nokia-conf"`
	HsSecondaryShaper       map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper       `path:"hs-secondary-shaper" module:"nokia-conf"`
	HsmdaSchedulerPolicy    *string                                                                                   `path:"hsmda-scheduler-policy" module:"nokia-conf"`
	MonitorPortScheduler    *bool                                                                                     `path:"monitor-port-scheduler" module:"nokia-conf"`
	PortQosPolicy           *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortQosPolicy                      `path:"port-qos-policy" module:"nokia-conf"`
	PortSchedulerPolicy     *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy                `path:"port-scheduler-policy" module:"nokia-conf"`
	Rate                    *int32                                                                                    `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) IsYANGGoStruct() {}

// NewExpandedSecondaryShaper creates a new entry in the ExpandedSecondaryShaper list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) NewExpandedSecondaryShaper(SecondaryShaperName string) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExpandedSecondaryShaper == nil {
		t.ExpandedSecondaryShaper = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper)
	}

	key := SecondaryShaperName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExpandedSecondaryShaper[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExpandedSecondaryShaper", key)
	}

	t.ExpandedSecondaryShaper[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper{
		SecondaryShaperName: &SecondaryShaperName,
	}

	return t.ExpandedSecondaryShaper[key], nil
}

// RenameExpandedSecondaryShaper renames an entry in the list ExpandedSecondaryShaper within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) RenameExpandedSecondaryShaper(oldK, newK string) error {
	if _, ok := t.ExpandedSecondaryShaper[newK]; ok {
		return fmt.Errorf("key %v already exists in ExpandedSecondaryShaper", newK)
	}

	e, ok := t.ExpandedSecondaryShaper[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExpandedSecondaryShaper", oldK)
	}
	e.SecondaryShaperName = &newK

	t.ExpandedSecondaryShaper[newK] = e
	delete(t.ExpandedSecondaryShaper, oldK)
	return nil
}

// GetOrCreateExpandedSecondaryShaper retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) GetOrCreateExpandedSecondaryShaper(SecondaryShaperName string) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper {

	key := SecondaryShaperName

	if v, ok := t.ExpandedSecondaryShaper[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExpandedSecondaryShaper(SecondaryShaperName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExpandedSecondaryShaper got unexpected error: %v", err))
	}
	return v
}

// GetExpandedSecondaryShaper retrieves the value with the specified key from
// the ExpandedSecondaryShaper map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) GetExpandedSecondaryShaper(SecondaryShaperName string) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper {

	if t == nil {
		return nil
	}

	key := SecondaryShaperName

	if lm, ok := t.ExpandedSecondaryShaper[key]; ok {
		return lm
	}
	return nil
}

// DeleteExpandedSecondaryShaper deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) DeleteExpandedSecondaryShaper(SecondaryShaperName string) {
	key := SecondaryShaperName

	delete(t.ExpandedSecondaryShaper, key)
}

// AppendExpandedSecondaryShaper appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper struct to the
// list ExpandedSecondaryShaper of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) AppendExpandedSecondaryShaper(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper) error {
	if v.SecondaryShaperName == nil {
		return fmt.Errorf("invalid nil key received for SecondaryShaperName")
	}

	key := *v.SecondaryShaperName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExpandedSecondaryShaper == nil {
		t.ExpandedSecondaryShaper = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper)
	}

	if _, ok := t.ExpandedSecondaryShaper[key]; ok {
		return fmt.Errorf("duplicate key for list ExpandedSecondaryShaper %v", key)
	}

	t.ExpandedSecondaryShaper[key] = v
	return nil
}

// NewHsSecondaryShaper creates a new entry in the HsSecondaryShaper list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) NewHsSecondaryShaper(SecondaryShaperName string) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsSecondaryShaper == nil {
		t.HsSecondaryShaper = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper)
	}

	key := SecondaryShaperName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsSecondaryShaper[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsSecondaryShaper", key)
	}

	t.HsSecondaryShaper[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper{
		SecondaryShaperName: &SecondaryShaperName,
	}

	return t.HsSecondaryShaper[key], nil
}

// RenameHsSecondaryShaper renames an entry in the list HsSecondaryShaper within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) RenameHsSecondaryShaper(oldK, newK string) error {
	if _, ok := t.HsSecondaryShaper[newK]; ok {
		return fmt.Errorf("key %v already exists in HsSecondaryShaper", newK)
	}

	e, ok := t.HsSecondaryShaper[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsSecondaryShaper", oldK)
	}
	e.SecondaryShaperName = &newK

	t.HsSecondaryShaper[newK] = e
	delete(t.HsSecondaryShaper, oldK)
	return nil
}

// GetOrCreateHsSecondaryShaper retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) GetOrCreateHsSecondaryShaper(SecondaryShaperName string) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper {

	key := SecondaryShaperName

	if v, ok := t.HsSecondaryShaper[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsSecondaryShaper(SecondaryShaperName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsSecondaryShaper got unexpected error: %v", err))
	}
	return v
}

// GetHsSecondaryShaper retrieves the value with the specified key from
// the HsSecondaryShaper map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) GetHsSecondaryShaper(SecondaryShaperName string) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper {

	if t == nil {
		return nil
	}

	key := SecondaryShaperName

	if lm, ok := t.HsSecondaryShaper[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsSecondaryShaper deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) DeleteHsSecondaryShaper(SecondaryShaperName string) {
	key := SecondaryShaperName

	delete(t.HsSecondaryShaper, key)
}

// AppendHsSecondaryShaper appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper struct to the
// list HsSecondaryShaper of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) AppendHsSecondaryShaper(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper) error {
	if v.SecondaryShaperName == nil {
		return fmt.Errorf("invalid nil key received for SecondaryShaperName")
	}

	key := *v.SecondaryShaperName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsSecondaryShaper == nil {
		t.HsSecondaryShaper = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper)
	}

	if _, ok := t.HsSecondaryShaper[key]; ok {
		return fmt.Errorf("duplicate key for list HsSecondaryShaper %v", key)
	}

	t.HsSecondaryShaper[key] = v
	return nil
}

// GetOrCreateHsSchedulerPolicy retrieves the value of the HsSchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) GetOrCreateHsSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy {
	if t.HsSchedulerPolicy != nil {
		return t.HsSchedulerPolicy
	}
	t.HsSchedulerPolicy = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy{}
	return t.HsSchedulerPolicy
}

// GetOrCreatePortQosPolicy retrieves the value of the PortQosPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) GetOrCreatePortQosPolicy() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortQosPolicy {
	if t.PortQosPolicy != nil {
		return t.PortQosPolicy
	}
	t.PortQosPolicy = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortQosPolicy{}
	return t.PortQosPolicy
}

// GetOrCreatePortSchedulerPolicy retrieves the value of the PortSchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) GetOrCreatePortSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy {
	if t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	t.PortSchedulerPolicy = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy{}
	return t.PortSchedulerPolicy
}

// GetHsSchedulerPolicy returns the value of the HsSchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress. If the receiver or the field HsSchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) GetHsSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy {
	if t != nil && t.HsSchedulerPolicy != nil {
		return t.HsSchedulerPolicy
	}
	return nil
}

// GetPortQosPolicy returns the value of the PortQosPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress. If the receiver or the field PortQosPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) GetPortQosPolicy() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortQosPolicy {
	if t != nil && t.PortQosPolicy != nil {
		return t.PortQosPolicy
	}
	return nil
}

// GetPortSchedulerPolicy returns the value of the PortSchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress. If the receiver or the field PortSchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) GetPortSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy {
	if t != nil && t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	return nil
}

// GetEthBnRateChanges retrieves the value of the leaf EthBnRateChanges from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthBnRateChanges is set, it can
// safely use t.GetEthBnRateChanges() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthBnRateChanges == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) GetEthBnRateChanges() bool {
	if t == nil || t.EthBnRateChanges == nil {
		return false
	}
	return *t.EthBnRateChanges
}

// GetHsPortPoolPolicy retrieves the value of the leaf HsPortPoolPolicy from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsPortPoolPolicy is set, it can
// safely use t.GetHsPortPoolPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsPortPoolPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) GetHsPortPoolPolicy() string {
	if t == nil || t.HsPortPoolPolicy == nil {
		return ""
	}
	return *t.HsPortPoolPolicy
}

// GetHsmdaSchedulerPolicy retrieves the value of the leaf HsmdaSchedulerPolicy from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsmdaSchedulerPolicy is set, it can
// safely use t.GetHsmdaSchedulerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsmdaSchedulerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) GetHsmdaSchedulerPolicy() string {
	if t == nil || t.HsmdaSchedulerPolicy == nil {
		return ""
	}
	return *t.HsmdaSchedulerPolicy
}

// GetMonitorPortScheduler retrieves the value of the leaf MonitorPortScheduler from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorPortScheduler is set, it can
// safely use t.GetMonitorPortScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorPortScheduler == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) GetMonitorPortScheduler() bool {
	if t == nil || t.MonitorPortScheduler == nil {
		return false
	}
	return *t.MonitorPortScheduler
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) GetRate() int32 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EthBnRateChanges == nil {
		var v bool = false
		t.EthBnRateChanges = &v
	}
	if t.MonitorPortScheduler == nil {
		var v bool = false
		t.MonitorPortScheduler = &v
	}
	t.HsSchedulerPolicy.PopulateDefaults()
	t.PortQosPolicy.PopulateDefaults()
	t.PortSchedulerPolicy.PopulateDefaults()
	for _, e := range t.ExpandedSecondaryShaper {
		e.PopulateDefaults()
	}
	for _, e := range t.HsSecondaryShaper {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper represents the /nokia-conf/configure/groups/group/port/ethernet/egress/expanded-secondary-shaper YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper struct {
	AggregateBurst      *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst                                                                                                  `path:"aggregate-burst" module:"nokia-conf"`
	Class               map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class_ClassNumber_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class `path:"class" module:"nokia-conf"`
	LowBurstMaxClass    *uint32                                                                                                                                                                                        `path:"low-burst-max-class" module:"nokia-conf"`
	MonitorThreshold    *int32                                                                                                                                                                                         `path:"monitor-threshold" module:"nokia-conf"`
	Rate                NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Rate_Union                                                                                                       `path:"rate" module:"nokia-conf"`
	SecondaryShaperName *string                                                                                                                                                                                        `path:"secondary-shaper-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper) IsYANGGoStruct() {
}

// NewClass creates a new entry in the Class list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper) NewClass(ClassNumber NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class_ClassNumber_Union) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class_ClassNumber_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class)
	}

	key := ClassNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Class[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Class", key)
	}

	t.Class[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class{
		ClassNumber: ClassNumber,
	}

	return t.Class[key], nil
}

// RenameClass renames an entry in the list Class within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper) RenameClass(oldK, newK NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class_ClassNumber_Union) error {
	if _, ok := t.Class[newK]; ok {
		return fmt.Errorf("key %v already exists in Class", newK)
	}

	e, ok := t.Class[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Class", oldK)
	}
	e.ClassNumber = newK

	t.Class[newK] = e
	delete(t.Class, oldK)
	return nil
}

// GetOrCreateClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper) GetOrCreateClass(ClassNumber NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class_ClassNumber_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class {

	key := ClassNumber

	if v, ok := t.Class[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClass(ClassNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClass got unexpected error: %v", err))
	}
	return v
}

// GetClass retrieves the value with the specified key from
// the Class map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper) GetClass(ClassNumber NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class_ClassNumber_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class {

	if t == nil {
		return nil
	}

	key := ClassNumber

	if lm, ok := t.Class[key]; ok {
		return lm
	}
	return nil
}

// DeleteClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper) DeleteClass(ClassNumber NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class_ClassNumber_Union) {
	key := ClassNumber

	delete(t.Class, key)
}

// AppendClass appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class struct to the
// list Class of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper) AppendClass(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) error {
	key := v.ClassNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class_ClassNumber_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class)
	}

	if _, ok := t.Class[key]; ok {
		return fmt.Errorf("duplicate key for list Class %v", key)
	}

	t.Class[key] = v
	return nil
}

// GetOrCreateAggregateBurst retrieves the value of the AggregateBurst field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper) GetOrCreateAggregateBurst() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst {
	if t.AggregateBurst != nil {
		return t.AggregateBurst
	}
	t.AggregateBurst = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst{}
	return t.AggregateBurst
}

// GetAggregateBurst returns the value of the AggregateBurst struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper. If the receiver or the field AggregateBurst is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper) GetAggregateBurst() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst {
	if t != nil && t.AggregateBurst != nil {
		return t.AggregateBurst
	}
	return nil
}

// GetLowBurstMaxClass retrieves the value of the leaf LowBurstMaxClass from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowBurstMaxClass is set, it can
// safely use t.GetLowBurstMaxClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowBurstMaxClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper) GetLowBurstMaxClass() uint32 {
	if t == nil || t.LowBurstMaxClass == nil {
		return 8
	}
	return *t.LowBurstMaxClass
}

// GetMonitorThreshold retrieves the value of the leaf MonitorThreshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorThreshold is set, it can
// safely use t.GetMonitorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper) GetMonitorThreshold() int32 {
	if t == nil || t.MonitorThreshold == nil {
		return 0
	}
	return *t.MonitorThreshold
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper) GetRate() NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_SecondaryShaperPirRate_Enum_max
	}
	return t.Rate
}

// GetSecondaryShaperName retrieves the value of the leaf SecondaryShaperName from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryShaperName is set, it can
// safely use t.GetSecondaryShaperName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryShaperName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper) GetSecondaryShaperName() string {
	if t == nil || t.SecondaryShaperName == nil {
		return ""
	}
	return *t.SecondaryShaperName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LowBurstMaxClass == nil {
		var v uint32 = 8
		t.LowBurstMaxClass = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_SecondaryShaperPirRate_Enum_max
	}
	t.AggregateBurst.PopulateDefaults()
	for _, e := range t.Class {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SecondaryShaperName == nil {
		return nil, fmt.Errorf("nil value for key SecondaryShaperName")
	}

	return map[string]interface{}{
		"secondary-shaper-name": *t.SecondaryShaperName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst represents the /nokia-conf/configure/groups/group/port/ethernet/egress/expanded-secondary-shaper/aggregate-burst YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst struct {
	HighBurstIncrease *int32 `path:"high-burst-increase" module:"nokia-conf"`
	LowBurstLimit     *int32 `path:"low-burst-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst) IsYANGGoStruct() {
}

// GetHighBurstIncrease retrieves the value of the leaf HighBurstIncrease from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighBurstIncrease is set, it can
// safely use t.GetHighBurstIncrease() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighBurstIncrease == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst) GetHighBurstIncrease() int32 {
	if t == nil || t.HighBurstIncrease == nil {
		return 0
	}
	return *t.HighBurstIncrease
}

// GetLowBurstLimit retrieves the value of the leaf LowBurstLimit from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowBurstLimit is set, it can
// safely use t.GetLowBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowBurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst) GetLowBurstLimit() int32 {
	if t == nil || t.LowBurstLimit == nil {
		return 0
	}
	return *t.LowBurstLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class represents the /nokia-conf/configure/groups/group/port/ethernet/egress/expanded-secondary-shaper/class YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class struct {
	BurstLimit       *int32                                                                                                `path:"burst-limit" module:"nokia-conf"`
	ClassNumber      NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class_ClassNumber_Union `path:"class-number" module:"nokia-conf"`
	MonitorThreshold *int32                                                                                                `path:"monitor-threshold" module:"nokia-conf"`
	Rate             NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class_Rate_Union        `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) IsYANGGoStruct() {
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) GetBurstLimit() int32 {
	if t == nil || t.BurstLimit == nil {
		return 0
	}
	return *t.BurstLimit
}

// GetClassNumber retrieves the value of the leaf ClassNumber from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassNumber is set, it can
// safely use t.GetClassNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) GetClassNumber() NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class_ClassNumber_Union {
	if t == nil || t.ClassNumber == nil {
		return nil
	}
	return t.ClassNumber
}

// GetMonitorThreshold retrieves the value of the leaf MonitorThreshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorThreshold is set, it can
// safely use t.GetMonitorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) GetMonitorThreshold() int32 {
	if t == nil || t.MonitorThreshold == nil {
		return 0
	}
	return *t.MonitorThreshold
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) GetRate() NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_SecondaryShaperPirRate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_SecondaryShaperPirRate_Enum_max
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"class-number": t.ClassNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy represents the /nokia-conf/configure/groups/group/port/ethernet/egress/hs-scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                            `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/port/ethernet/egress/hs-scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides struct {
	Group           map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group_GroupId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group                         `path:"group" module:"nokia-conf"`
	MaxRate         NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_MaxRate_Union                                                                                                                            `path:"max-rate" module:"nokia-conf"`
	SchedulingClass map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass_ClassNumber_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass `path:"scheduling-class" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) NewGroup(GroupId NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group_GroupId_Union) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group_GroupId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group{
		GroupId: GroupId,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) RenameGroup(oldK, newK NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group_GroupId_Union) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupId = newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) GetOrCreateGroup(GroupId NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group_GroupId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group {

	key := GroupId

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) GetGroup(GroupId NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group_GroupId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) DeleteGroup(GroupId NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group_GroupId_Union) {
	key := GroupId

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) AppendGroup(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) error {
	key := v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group_GroupId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewSchedulingClass creates a new entry in the SchedulingClass list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) NewSchedulingClass(ClassNumber NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass_ClassNumber_Union) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulingClass == nil {
		t.SchedulingClass = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass_ClassNumber_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass)
	}

	key := ClassNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SchedulingClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SchedulingClass", key)
	}

	t.SchedulingClass[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass{
		ClassNumber: ClassNumber,
	}

	return t.SchedulingClass[key], nil
}

// RenameSchedulingClass renames an entry in the list SchedulingClass within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) RenameSchedulingClass(oldK, newK NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass_ClassNumber_Union) error {
	if _, ok := t.SchedulingClass[newK]; ok {
		return fmt.Errorf("key %v already exists in SchedulingClass", newK)
	}

	e, ok := t.SchedulingClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SchedulingClass", oldK)
	}
	e.ClassNumber = newK

	t.SchedulingClass[newK] = e
	delete(t.SchedulingClass, oldK)
	return nil
}

// GetOrCreateSchedulingClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) GetOrCreateSchedulingClass(ClassNumber NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass_ClassNumber_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass {

	key := ClassNumber

	if v, ok := t.SchedulingClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSchedulingClass(ClassNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSchedulingClass got unexpected error: %v", err))
	}
	return v
}

// GetSchedulingClass retrieves the value with the specified key from
// the SchedulingClass map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) GetSchedulingClass(ClassNumber NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass_ClassNumber_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass {

	if t == nil {
		return nil
	}

	key := ClassNumber

	if lm, ok := t.SchedulingClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteSchedulingClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) DeleteSchedulingClass(ClassNumber NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass_ClassNumber_Union) {
	key := ClassNumber

	delete(t.SchedulingClass, key)
}

// AppendSchedulingClass appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass struct to the
// list SchedulingClass of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) AppendSchedulingClass(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) error {
	key := v.ClassNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulingClass == nil {
		t.SchedulingClass = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass_ClassNumber_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass)
	}

	if _, ok := t.SchedulingClass[key]; ok {
		return fmt.Errorf("duplicate key for list SchedulingClass %v", key)
	}

	t.SchedulingClass[key] = v
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) GetMaxRate() NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.SchedulingClass {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group represents the /nokia-conf/configure/groups/group/port/ethernet/egress/hs-scheduler-policy/overrides/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group struct {
	GroupId NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group_GroupId_Union `path:"group-id" module:"nokia-conf"`
	Rate    NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group_Rate_Union    `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) IsYANGGoStruct() {
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) GetGroupId() NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group_GroupId_Union {
	if t == nil || t.GroupId == nil {
		return nil
	}
	return t.GroupId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) GetRate() NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"group-id": t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass represents the /nokia-conf/configure/groups/group/port/ethernet/egress/hs-scheduler-policy/overrides/scheduling-class YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass struct {
	ClassNumber NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass_ClassNumber_Union `path:"class-number" module:"nokia-conf"`
	Rate        NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass_Rate_Union        `path:"rate" module:"nokia-conf"`
	Weight      *int32                                                                                                              `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) IsYANGGoStruct() {
}

// GetClassNumber retrieves the value of the leaf ClassNumber from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassNumber is set, it can
// safely use t.GetClassNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) GetClassNumber() NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass_ClassNumber_Union {
	if t == nil || t.ClassNumber == nil {
		return nil
	}
	return t.ClassNumber
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) GetRate() NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"class-number": t.ClassNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper represents the /nokia-conf/configure/groups/group/port/ethernet/egress/hs-secondary-shaper YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper struct {
	Aggregate           *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate                                                                                                 `path:"aggregate" module:"nokia-conf"`
	Class               map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class_ClassNumber_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class `path:"class" module:"nokia-conf"`
	Description         *string                                                                                                                                                                            `path:"description" module:"nokia-conf"`
	SecondaryShaperName *string                                                                                                                                                                            `path:"secondary-shaper-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper) IsYANGGoStruct() {}

// NewClass creates a new entry in the Class list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper) NewClass(ClassNumber NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class_ClassNumber_Union) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class_ClassNumber_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class)
	}

	key := ClassNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Class[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Class", key)
	}

	t.Class[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class{
		ClassNumber: ClassNumber,
	}

	return t.Class[key], nil
}

// RenameClass renames an entry in the list Class within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper) RenameClass(oldK, newK NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class_ClassNumber_Union) error {
	if _, ok := t.Class[newK]; ok {
		return fmt.Errorf("key %v already exists in Class", newK)
	}

	e, ok := t.Class[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Class", oldK)
	}
	e.ClassNumber = newK

	t.Class[newK] = e
	delete(t.Class, oldK)
	return nil
}

// GetOrCreateClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper) GetOrCreateClass(ClassNumber NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class_ClassNumber_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class {

	key := ClassNumber

	if v, ok := t.Class[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClass(ClassNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClass got unexpected error: %v", err))
	}
	return v
}

// GetClass retrieves the value with the specified key from
// the Class map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper) GetClass(ClassNumber NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class_ClassNumber_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class {

	if t == nil {
		return nil
	}

	key := ClassNumber

	if lm, ok := t.Class[key]; ok {
		return lm
	}
	return nil
}

// DeleteClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper) DeleteClass(ClassNumber NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class_ClassNumber_Union) {
	key := ClassNumber

	delete(t.Class, key)
}

// AppendClass appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class struct to the
// list Class of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper) AppendClass(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class) error {
	key := v.ClassNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class_ClassNumber_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class)
	}

	if _, ok := t.Class[key]; ok {
		return fmt.Errorf("duplicate key for list Class %v", key)
	}

	t.Class[key] = v
	return nil
}

// GetOrCreateAggregate retrieves the value of the Aggregate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper) GetOrCreateAggregate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate {
	if t.Aggregate != nil {
		return t.Aggregate
	}
	t.Aggregate = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate{}
	return t.Aggregate
}

// GetAggregate returns the value of the Aggregate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper. If the receiver or the field Aggregate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper) GetAggregate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate {
	if t != nil && t.Aggregate != nil {
		return t.Aggregate
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSecondaryShaperName retrieves the value of the leaf SecondaryShaperName from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryShaperName is set, it can
// safely use t.GetSecondaryShaperName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryShaperName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper) GetSecondaryShaperName() string {
	if t == nil || t.SecondaryShaperName == nil {
		return ""
	}
	return *t.SecondaryShaperName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Aggregate.PopulateDefaults()
	for _, e := range t.Class {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SecondaryShaperName == nil {
		return nil, fmt.Errorf("nil value for key SecondaryShaperName")
	}

	return map[string]interface{}{
		"secondary-shaper-name": *t.SecondaryShaperName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate represents the /nokia-conf/configure/groups/group/port/ethernet/egress/hs-secondary-shaper/aggregate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate struct {
	LowBurstMaxClass *uint32                                                                                      `path:"low-burst-max-class" module:"nokia-conf"`
	Rate             NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate) IsYANGGoStruct() {
}

// GetLowBurstMaxClass retrieves the value of the leaf LowBurstMaxClass from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowBurstMaxClass is set, it can
// safely use t.GetLowBurstMaxClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowBurstMaxClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate) GetLowBurstMaxClass() uint32 {
	if t == nil || t.LowBurstMaxClass == nil {
		return 6
	}
	return *t.LowBurstMaxClass
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate) GetRate() NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LowBurstMaxClass == nil {
		var v uint32 = 6
		t.LowBurstMaxClass = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate_Rate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class represents the /nokia-conf/configure/groups/group/port/ethernet/egress/hs-secondary-shaper/class YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class struct {
	ClassNumber NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class_ClassNumber_Union `path:"class-number" module:"nokia-conf"`
	Rate        NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class_Rate_Union        `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class) IsYANGGoStruct() {
}

// GetClassNumber retrieves the value of the leaf ClassNumber from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassNumber is set, it can
// safely use t.GetClassNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class) GetClassNumber() NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class_ClassNumber_Union {
	if t == nil || t.ClassNumber == nil {
		return nil
	}
	return t.ClassNumber
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class) GetRate() NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class_Rate_Enum_max
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"class-number": t.ClassNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_HsSecondaryShaper_Class) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortQosPolicy represents the /nokia-conf/configure/groups/group/port/ethernet/egress/port-qos-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortQosPolicy struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortQosPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortQosPolicy) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortQosPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortQosPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortQosPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortQosPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortQosPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortQosPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortQosPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortQosPolicy.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortQosPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy represents the /nokia-conf/configure/groups/group/port/ethernet/egress/port-scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                              `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/port/ethernet/egress/port-scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides struct {
	Level   map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level `path:"level" module:"nokia-conf"`
	MaxRate *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate                                                                                                                 `path:"max-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) NewLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level{
		PriorityLevel: PriorityLevel,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.PriorityLevel = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) GetOrCreateLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level {

	key := PriorityLevel

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) GetLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) DeleteLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) {
	key := PriorityLevel

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) AppendLevel(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) error {
	key := v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateMaxRate retrieves the value of the MaxRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) GetOrCreateMaxRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t.MaxRate != nil {
		return t.MaxRate
	}
	t.MaxRate = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate{}
	return t.MaxRate
}

// GetMaxRate returns the value of the MaxRate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides. If the receiver or the field MaxRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) GetMaxRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t != nil && t.MaxRate != nil {
		return t.MaxRate
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MaxRate.PopulateDefaults()
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level represents the /nokia-conf/configure/groups/group/port/ethernet/egress/port-scheduler-policy/overrides/level YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level struct {
	PercentRate   *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate        `path:"percent-rate" module:"nokia-conf"`
	PriorityLevel NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union `path:"priority-level" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate               `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) GetPercentRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) GetRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) GetPriorityLevel() NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union {
	if t == nil || t.PriorityLevel == nil {
		return nil
	}
	return t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"priority-level": t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate represents the /nokia-conf/configure/groups/group/port/ethernet/egress/port-scheduler-policy/overrides/level/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate represents the /nokia-conf/configure/groups/group/port/ethernet/egress/port-scheduler-policy/overrides/level/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetCir() NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetPir() NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate represents the /nokia-conf/configure/groups/group/port/ethernet/egress/port-scheduler-policy/overrides/max-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate struct {
	PercentRate *float64                                                                                               `path:"percent-rate" module:"nokia-conf"`
	Rate        NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate) IsYANGGoStruct() {
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 100
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetRate() NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_SchedPirRate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentRate == nil {
		var v float64 = 100
		t.PercentRate = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_SchedPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi represents the /nokia-conf/configure/groups/group/port/ethernet/elmi YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi struct {
	Mode E_NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi_Mode `path:"mode" module:"nokia-conf"`
	N393 *uint32                                                    `path:"n393" module:"nokia-conf"`
	T391 *uint32                                                    `path:"t391" module:"nokia-conf"`
	T392 *uint32                                                    `path:"t392" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi) IsYANGGoStruct() {}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi) GetMode() E_NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetN393 retrieves the value of the leaf N393 from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if N393 is set, it can
// safely use t.GetN393() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.N393 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi) GetN393() uint32 {
	if t == nil || t.N393 == nil {
		return 4
	}
	return *t.N393
}

// GetT391 retrieves the value of the leaf T391 from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if T391 is set, it can
// safely use t.GetT391() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.T391 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi) GetT391() uint32 {
	if t == nil || t.T391 == nil {
		return 10
	}
	return *t.T391
}

// GetT392 retrieves the value of the leaf T392 from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if T392 is set, it can
// safely use t.GetT392() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.T392 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi) GetT392() uint32 {
	if t == nil || t.T392 == nil {
		return 15
	}
	return *t.T392
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.N393 == nil {
		var v uint32 = 4
		t.N393 = &v
	}
	if t.T391 == nil {
		var v uint32 = 10
		t.T391 = &v
	}
	if t.T392 == nil {
		var v uint32 = 15
		t.T392 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Elmi) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm represents the /nokia-conf/configure/groups/group/port/ethernet/eth-cfm YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm struct {
	Mep map[NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep `path:"mep" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/groups/group/port/ethernet/eth-cfm.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Key struct {
	MdAdminName string                                                                `path:"md-admin-name"`
	MaAdminName string                                                                `path:"ma-admin-name"`
	MepId       NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_MepId_Union `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_MepId_Union) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_MepId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep {

	key := NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_MepId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_MepId_Union) {
	key := NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm) AppendMep(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	key := NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep represents the /nokia-conf/configure/groups/group/port/ethernet/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	Ais                  *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais               `path:"ais" module:"nokia-conf" yangPresence:"true"`
	AlarmNotification    *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	Ccm                  *bool                                                                        `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                                       `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                                      `path:"ccm-padding-size" module:"nokia-conf"`
	CcmTlvIgnore         []E_NokiaTypesEthCfm_CcmTlvIgnoreType                                        `path:"ccm-tlv-ignore" module:"nokia-conf"`
	CollectLmmStats      *bool                                                                        `path:"collect-lmm-stats" module:"nokia-conf"`
	Csf                  *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Csf               `path:"csf" module:"nokia-conf" yangPresence:"true"`
	Description          *string                                                                      `path:"description" module:"nokia-conf"`
	EthBn                *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthBn             `path:"eth-bn" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	FacilityFault        *bool                                                                        `path:"facility-fault" module:"nokia-conf"`
	Grace                *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	InstallMep           *bool                                                                        `path:"install-mep" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                                       `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                                      `path:"ma-admin-name" module:"nokia-conf"`
	MacAddress           *string                                                                      `path:"mac-address" module:"nokia-conf"`
	MdAdminName          *string                                                                      `path:"md-admin-name" module:"nokia-conf"`
	MepId                NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_MepId_Union        `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                                      `path:"one-way-delay-threshold" module:"nokia-conf"`
	Vlan                 NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Vlan_Union         `path:"vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAis retrieves the value of the Ais field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetOrCreateAis() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais {
	if t.Ais != nil {
		return t.Ais
	}
	t.Ais = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais{}
	return t.Ais
}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateCsf retrieves the value of the Csf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetOrCreateCsf() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Csf {
	if t.Csf != nil {
		return t.Csf
	}
	t.Csf = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Csf{}
	return t.Csf
}

// GetOrCreateEthBn retrieves the value of the EthBn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetOrCreateEthBn() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthBn {
	if t.EthBn != nil {
		return t.EthBn
	}
	t.EthBn = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthBn{}
	return t.EthBn
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAis returns the value of the Ais struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep. If the receiver or the field Ais is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetAis() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais {
	if t != nil && t.Ais != nil {
		return t.Ais
	}
	return nil
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetCsf returns the value of the Csf struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep. If the receiver or the field Csf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetCsf() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Csf {
	if t != nil && t.Csf != nil {
		return t.Csf
	}
	return nil
}

// GetEthBn returns the value of the EthBn struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep. If the receiver or the field EthBn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetEthBn() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthBn {
	if t != nil && t.EthBn != nil {
		return t.EthBn
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetCcmTlvIgnore retrieves the value of the leaf CcmTlvIgnore from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmTlvIgnore is set, it can
// safely use t.GetCcmTlvIgnore() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmTlvIgnore == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetCcmTlvIgnore() []E_NokiaTypesEthCfm_CcmTlvIgnoreType {
	if t == nil || t.CcmTlvIgnore == nil {
		return nil
	}
	return t.CcmTlvIgnore
}

// GetCollectLmmStats retrieves the value of the leaf CollectLmmStats from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectLmmStats is set, it can
// safely use t.GetCollectLmmStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectLmmStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetCollectLmmStats() bool {
	if t == nil || t.CollectLmmStats == nil {
		return false
	}
	return *t.CollectLmmStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFacilityFault retrieves the value of the leaf FacilityFault from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FacilityFault is set, it can
// safely use t.GetFacilityFault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FacilityFault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetFacilityFault() bool {
	if t == nil || t.FacilityFault == nil {
		return false
	}
	return *t.FacilityFault
}

// GetInstallMep retrieves the value of the leaf InstallMep from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallMep is set, it can
// safely use t.GetInstallMep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallMep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetInstallMep() bool {
	if t == nil || t.InstallMep == nil {
		return false
	}
	return *t.InstallMep
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetMepId() NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_MepId_Union {
	if t == nil || t.MepId == nil {
		return nil
	}
	return t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// GetVlan retrieves the value of the leaf Vlan from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vlan is set, it can
// safely use t.GetVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) GetVlan() NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Vlan_Union {
	if t == nil || t.Vlan == nil {
		return NokiaTypesEthCfm_VlanIdOrNone_Enum_none
	}
	return t.Vlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.CollectLmmStats == nil {
		var v bool = false
		t.CollectLmmStats = &v
	}
	if t.FacilityFault == nil {
		var v bool = false
		t.FacilityFault = &v
	}
	if t.InstallMep == nil {
		var v bool = false
		t.InstallMep = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	if t.Vlan == nil {
		t.Vlan = NokiaTypesEthCfm_VlanIdOrNone_Enum_none
	}
	t.Ais.PopulateDefaults()
	t.AlarmNotification.PopulateDefaults()
	t.Csf.PopulateDefaults()
	t.EthBn.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais represents the /nokia-conf/configure/groups/group/port/ethernet/eth-cfm/mep/ais YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais struct {
	ClientMegLevel    []uint32                                                                          `path:"client-meg-level" module:"nokia-conf"`
	InterfaceSupport  *bool                                                                             `path:"interface-support" module:"nokia-conf"`
	Interval          *uint32                                                                           `path:"interval" module:"nokia-conf"`
	LowPriorityDefect E_NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais_LowPriorityDefect `path:"low-priority-defect" module:"nokia-conf"`
	Priority          *uint8                                                                            `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais) IsYANGGoStruct() {}

// GetClientMegLevel retrieves the value of the leaf ClientMegLevel from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMegLevel is set, it can
// safely use t.GetClientMegLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMegLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais) GetClientMegLevel() []uint32 {
	if t == nil || t.ClientMegLevel == nil {
		return nil
	}
	return t.ClientMegLevel
}

// GetInterfaceSupport retrieves the value of the leaf InterfaceSupport from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceSupport is set, it can
// safely use t.GetInterfaceSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceSupport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais) GetInterfaceSupport() bool {
	if t == nil || t.InterfaceSupport == nil {
		return false
	}
	return *t.InterfaceSupport
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais) GetLowPriorityDefect() E_NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais_LowPriorityDefect {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	return t.LowPriorityDefect
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 7
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InterfaceSupport == nil {
		var v bool = false
		t.InterfaceSupport = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	if t.Priority == nil {
		var v uint8 = 7
		t.Priority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Ais) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/groups/group/port/ethernet/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {
}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Csf represents the /nokia-conf/configure/groups/group/port/ethernet/eth-cfm/mep/csf YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Csf struct {
	Multiplier *float64 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Csf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Csf) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Csf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Csf) GetMultiplier() float64 {
	if t == nil || t.Multiplier == nil {
		return 3.5
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Csf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Csf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v float64 = 3.5
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Csf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Csf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Csf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Csf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Csf.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Csf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthBn represents the /nokia-conf/configure/groups/group/port/ethernet/eth-cfm/mep/eth-bn YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthBn struct {
	Receive        *bool   `path:"receive" module:"nokia-conf"`
	RxUpdatePacing *uint32 `path:"rx-update-pacing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthBn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthBn) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthBn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthBn) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetRxUpdatePacing retrieves the value of the leaf RxUpdatePacing from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthBn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxUpdatePacing is set, it can
// safely use t.GetRxUpdatePacing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxUpdatePacing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthBn) GetRxUpdatePacing() uint32 {
	if t == nil || t.RxUpdatePacing == nil {
		return 5
	}
	return *t.RxUpdatePacing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthBn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthBn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
	if t.RxUpdatePacing == nil {
		var v uint32 = 5
		t.RxUpdatePacing = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthBn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthBn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthBn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthBn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthBn.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthBn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest represents the /nokia-conf/configure/groups/group/port/ethernet/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                                        `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/groups/group/port/ethernet/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                                   `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {
}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace represents the /nokia-conf/configure/groups/group/port/ethernet/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/groups/group/port/ethernet/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/groups/group/port/ethernet/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {
}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime represents the /nokia-conf/configure/groups/group/port/ethernet/hold-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime struct {
	Down  *uint32                                                         `path:"down" module:"nokia-conf"`
	Units E_NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime_Units `path:"units" module:"nokia-conf"`
	Up    *uint32                                                         `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Down is set, it can
// safely use t.GetDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Down == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 0
	}
	return *t.Down
}

// GetUnits retrieves the value of the leaf Units from the NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Units is set, it can
// safely use t.GetUnits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Units == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime) GetUnits() E_NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime_Units {
	if t == nil || t.Units == 0 {
		return NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime_Units_seconds
	}
	return t.Units
}

// GetUp retrieves the value of the leaf Up from the NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Up is set, it can
// safely use t.GetUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Up == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime) GetUp() uint32 {
	if t == nil || t.Up == nil {
		return 0
	}
	return *t.Up
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Units == 0 {
		t.Units = NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime_Units_seconds
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides represents the /nokia-conf/configure/groups/group/port/ethernet/hsmda-scheduler-overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides struct {
	Group           map[NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group_GroupId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group                         `path:"group" module:"nokia-conf"`
	MaxRate         NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_MaxRate_Union                                                                                                                 `path:"max-rate" module:"nokia-conf"`
	SchedulingClass map[NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass_ClassNumber_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass `path:"scheduling-class" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides) NewGroup(GroupId NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group_GroupId_Union) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group_GroupId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group{
		GroupId: GroupId,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides) RenameGroup(oldK, newK NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group_GroupId_Union) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupId = newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides) GetOrCreateGroup(GroupId NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group_GroupId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group {

	key := GroupId

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides) GetGroup(GroupId NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group_GroupId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides) DeleteGroup(GroupId NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group_GroupId_Union) {
	key := GroupId

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides) AppendGroup(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group) error {
	key := v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group_GroupId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewSchedulingClass creates a new entry in the SchedulingClass list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides) NewSchedulingClass(ClassNumber NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass_ClassNumber_Union) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulingClass == nil {
		t.SchedulingClass = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass_ClassNumber_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass)
	}

	key := ClassNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SchedulingClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SchedulingClass", key)
	}

	t.SchedulingClass[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass{
		ClassNumber: ClassNumber,
	}

	return t.SchedulingClass[key], nil
}

// RenameSchedulingClass renames an entry in the list SchedulingClass within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides) RenameSchedulingClass(oldK, newK NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass_ClassNumber_Union) error {
	if _, ok := t.SchedulingClass[newK]; ok {
		return fmt.Errorf("key %v already exists in SchedulingClass", newK)
	}

	e, ok := t.SchedulingClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SchedulingClass", oldK)
	}
	e.ClassNumber = newK

	t.SchedulingClass[newK] = e
	delete(t.SchedulingClass, oldK)
	return nil
}

// GetOrCreateSchedulingClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides) GetOrCreateSchedulingClass(ClassNumber NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass_ClassNumber_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass {

	key := ClassNumber

	if v, ok := t.SchedulingClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSchedulingClass(ClassNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSchedulingClass got unexpected error: %v", err))
	}
	return v
}

// GetSchedulingClass retrieves the value with the specified key from
// the SchedulingClass map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides) GetSchedulingClass(ClassNumber NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass_ClassNumber_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass {

	if t == nil {
		return nil
	}

	key := ClassNumber

	if lm, ok := t.SchedulingClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteSchedulingClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides) DeleteSchedulingClass(ClassNumber NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass_ClassNumber_Union) {
	key := ClassNumber

	delete(t.SchedulingClass, key)
}

// AppendSchedulingClass appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass struct to the
// list SchedulingClass of NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides) AppendSchedulingClass(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) error {
	key := v.ClassNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulingClass == nil {
		t.SchedulingClass = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass_ClassNumber_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass)
	}

	if _, ok := t.SchedulingClass[key]; ok {
		return fmt.Errorf("duplicate key for list SchedulingClass %v", key)
	}

	t.SchedulingClass[key] = v
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides) GetMaxRate() NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.SchedulingClass {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group represents the /nokia-conf/configure/groups/group/port/ethernet/hsmda-scheduler-overrides/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group struct {
	GroupId NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group_GroupId_Union `path:"group-id" module:"nokia-conf"`
	Rate    NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group_Rate_Union    `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group) IsYANGGoStruct() {
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group) GetGroupId() NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group_GroupId_Union {
	if t == nil || t.GroupId == nil {
		return nil
	}
	return t.GroupId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group) GetRate() NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"group-id": t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass represents the /nokia-conf/configure/groups/group/port/ethernet/hsmda-scheduler-overrides/scheduling-class YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass struct {
	ClassNumber   NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass_ClassNumber_Union `path:"class-number" module:"nokia-conf"`
	Rate          NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass_Rate_Union        `path:"rate" module:"nokia-conf"`
	WeightInGroup *int32                                                                                                   `path:"weight-in-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) IsYANGGoStruct() {
}

// GetClassNumber retrieves the value of the leaf ClassNumber from the NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassNumber is set, it can
// safely use t.GetClassNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) GetClassNumber() NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass_ClassNumber_Union {
	if t == nil || t.ClassNumber == nil {
		return nil
	}
	return t.ClassNumber
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) GetRate() NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// GetWeightInGroup retrieves the value of the leaf WeightInGroup from the NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WeightInGroup is set, it can
// safely use t.GetWeightInGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WeightInGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) GetWeightInGroup() int32 {
	if t == nil || t.WeightInGroup == nil {
		return 0
	}
	return *t.WeightInGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"class-number": t.ClassNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Ingress represents the /nokia-conf/configure/groups/group/port/ethernet/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Ingress struct {
	Rate *int32 `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Ingress) IsYANGGoStruct() {}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Ingress) GetRate() int32 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Ingress.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp represents the /nokia-conf/configure/groups/group/port/ethernet/lldp YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp struct {
	DestMac map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_MacType_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac `path:"dest-mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp) IsYANGGoStruct() {}

// NewDestMac creates a new entry in the DestMac list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp) NewDestMac(MacType NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_MacType_Union) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestMac == nil {
		t.DestMac = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_MacType_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac)
	}

	key := MacType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestMac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestMac", key)
	}

	t.DestMac[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac{
		MacType: MacType,
	}

	return t.DestMac[key], nil
}

// RenameDestMac renames an entry in the list DestMac within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp) RenameDestMac(oldK, newK NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_MacType_Union) error {
	if _, ok := t.DestMac[newK]; ok {
		return fmt.Errorf("key %v already exists in DestMac", newK)
	}

	e, ok := t.DestMac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DestMac", oldK)
	}
	e.MacType = newK

	t.DestMac[newK] = e
	delete(t.DestMac, oldK)
	return nil
}

// GetOrCreateDestMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp) GetOrCreateDestMac(MacType NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_MacType_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac {

	key := MacType

	if v, ok := t.DestMac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestMac(MacType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestMac got unexpected error: %v", err))
	}
	return v
}

// GetDestMac retrieves the value with the specified key from
// the DestMac map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp) GetDestMac(MacType NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_MacType_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac {

	if t == nil {
		return nil
	}

	key := MacType

	if lm, ok := t.DestMac[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp) DeleteDestMac(MacType NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_MacType_Union) {
	key := MacType

	delete(t.DestMac, key)
}

// AppendDestMac appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac struct to the
// list DestMac of NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp) AppendDestMac(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) error {
	key := v.MacType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestMac == nil {
		t.DestMac = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_MacType_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac)
	}

	if _, ok := t.DestMac[key]; ok {
		return fmt.Errorf("duplicate key for list DestMac %v", key)
	}

	t.DestMac[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.DestMac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac represents the /nokia-conf/configure/groups/group/port/ethernet/lldp/dest-mac YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac struct {
	MacType             NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_MacType_Union                                                                                                            `path:"mac-type" module:"nokia-conf"`
	Notification        *bool                                                                                                                                                                                `path:"notification" module:"nokia-conf"`
	PortIdSubtype       E_NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_PortIdSubtype                                                                                                          `path:"port-id-subtype" module:"nokia-conf"`
	Receive             *bool                                                                                                                                                                                `path:"receive" module:"nokia-conf"`
	Transmit            *bool                                                                                                                                                                                `path:"transmit" module:"nokia-conf"`
	TunnelNearestBridge *bool                                                                                                                                                                                `path:"tunnel-nearest-bridge" module:"nokia-conf"`
	TxMgmtAddress       map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress_MgmtAddressSystemType_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress `path:"tx-mgmt-address" module:"nokia-conf"`
	TxTlvs              *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs                                                                                                                  `path:"tx-tlvs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) IsYANGGoStruct() {}

// NewTxMgmtAddress creates a new entry in the TxMgmtAddress list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) NewTxMgmtAddress(MgmtAddressSystemType NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress_MgmtAddressSystemType_Union) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TxMgmtAddress == nil {
		t.TxMgmtAddress = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress_MgmtAddressSystemType_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress)
	}

	key := MgmtAddressSystemType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TxMgmtAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TxMgmtAddress", key)
	}

	t.TxMgmtAddress[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress{
		MgmtAddressSystemType: MgmtAddressSystemType,
	}

	return t.TxMgmtAddress[key], nil
}

// RenameTxMgmtAddress renames an entry in the list TxMgmtAddress within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) RenameTxMgmtAddress(oldK, newK NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress_MgmtAddressSystemType_Union) error {
	if _, ok := t.TxMgmtAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in TxMgmtAddress", newK)
	}

	e, ok := t.TxMgmtAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TxMgmtAddress", oldK)
	}
	e.MgmtAddressSystemType = newK

	t.TxMgmtAddress[newK] = e
	delete(t.TxMgmtAddress, oldK)
	return nil
}

// GetOrCreateTxMgmtAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) GetOrCreateTxMgmtAddress(MgmtAddressSystemType NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress_MgmtAddressSystemType_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress {

	key := MgmtAddressSystemType

	if v, ok := t.TxMgmtAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTxMgmtAddress(MgmtAddressSystemType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTxMgmtAddress got unexpected error: %v", err))
	}
	return v
}

// GetTxMgmtAddress retrieves the value with the specified key from
// the TxMgmtAddress map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) GetTxMgmtAddress(MgmtAddressSystemType NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress_MgmtAddressSystemType_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress {

	if t == nil {
		return nil
	}

	key := MgmtAddressSystemType

	if lm, ok := t.TxMgmtAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteTxMgmtAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) DeleteTxMgmtAddress(MgmtAddressSystemType NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress_MgmtAddressSystemType_Union) {
	key := MgmtAddressSystemType

	delete(t.TxMgmtAddress, key)
}

// AppendTxMgmtAddress appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress struct to the
// list TxMgmtAddress of NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) AppendTxMgmtAddress(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) error {
	key := v.MgmtAddressSystemType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TxMgmtAddress == nil {
		t.TxMgmtAddress = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress_MgmtAddressSystemType_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress)
	}

	if _, ok := t.TxMgmtAddress[key]; ok {
		return fmt.Errorf("duplicate key for list TxMgmtAddress %v", key)
	}

	t.TxMgmtAddress[key] = v
	return nil
}

// GetOrCreateTxTlvs retrieves the value of the TxTlvs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) GetOrCreateTxTlvs() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs {
	if t.TxTlvs != nil {
		return t.TxTlvs
	}
	t.TxTlvs = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs{}
	return t.TxTlvs
}

// GetTxTlvs returns the value of the TxTlvs struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac. If the receiver or the field TxTlvs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) GetTxTlvs() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs {
	if t != nil && t.TxTlvs != nil {
		return t.TxTlvs
	}
	return nil
}

// GetMacType retrieves the value of the leaf MacType from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacType is set, it can
// safely use t.GetMacType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) GetMacType() NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_MacType_Union {
	if t == nil || t.MacType == nil {
		return nil
	}
	return t.MacType
}

// GetNotification retrieves the value of the leaf Notification from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Notification is set, it can
// safely use t.GetNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Notification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) GetNotification() bool {
	if t == nil || t.Notification == nil {
		return false
	}
	return *t.Notification
}

// GetPortIdSubtype retrieves the value of the leaf PortIdSubtype from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortIdSubtype is set, it can
// safely use t.GetPortIdSubtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortIdSubtype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) GetPortIdSubtype() E_NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_PortIdSubtype {
	if t == nil || t.PortIdSubtype == 0 {
		return NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_PortIdSubtype_tx_local
	}
	return t.PortIdSubtype
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetTransmit retrieves the value of the leaf Transmit from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transmit is set, it can
// safely use t.GetTransmit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transmit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) GetTransmit() bool {
	if t == nil || t.Transmit == nil {
		return false
	}
	return *t.Transmit
}

// GetTunnelNearestBridge retrieves the value of the leaf TunnelNearestBridge from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelNearestBridge is set, it can
// safely use t.GetTunnelNearestBridge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelNearestBridge == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) GetTunnelNearestBridge() bool {
	if t == nil || t.TunnelNearestBridge == nil {
		return false
	}
	return *t.TunnelNearestBridge
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Notification == nil {
		var v bool = false
		t.Notification = &v
	}
	if t.PortIdSubtype == 0 {
		t.PortIdSubtype = NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_PortIdSubtype_tx_local
	}
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
	if t.Transmit == nil {
		var v bool = false
		t.Transmit = &v
	}
	if t.TunnelNearestBridge == nil {
		var v bool = false
		t.TunnelNearestBridge = &v
	}
	t.TxTlvs.PopulateDefaults()
	for _, e := range t.TxMgmtAddress {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"mac-type": t.MacType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress represents the /nokia-conf/configure/groups/group/port/ethernet/lldp/dest-mac/tx-mgmt-address YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress struct {
	AdminState            E_NokiaTypesSros_AdminState                                                                           `path:"admin-state" module:"nokia-conf"`
	MgmtAddressSystemType NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress_MgmtAddressSystemType_Union `path:"mgmt-address-system-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMgmtAddressSystemType retrieves the value of the leaf MgmtAddressSystemType from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MgmtAddressSystemType is set, it can
// safely use t.GetMgmtAddressSystemType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MgmtAddressSystemType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) GetMgmtAddressSystemType() NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress_MgmtAddressSystemType_Union {
	if t == nil || t.MgmtAddressSystemType == nil {
		return nil
	}
	return t.MgmtAddressSystemType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"mgmt-address-system-type": t.MgmtAddressSystemType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs represents the /nokia-conf/configure/groups/group/port/ethernet/lldp/dest-mac/tx-tlvs YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs struct {
	PortDesc *bool `path:"port-desc" module:"nokia-conf"`
	SysCap   *bool `path:"sys-cap" module:"nokia-conf"`
	SysDesc  *bool `path:"sys-desc" module:"nokia-conf"`
	SysName  *bool `path:"sys-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs) IsYANGGoStruct() {}

// GetPortDesc retrieves the value of the leaf PortDesc from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortDesc is set, it can
// safely use t.GetPortDesc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortDesc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs) GetPortDesc() bool {
	if t == nil || t.PortDesc == nil {
		return false
	}
	return *t.PortDesc
}

// GetSysCap retrieves the value of the leaf SysCap from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SysCap is set, it can
// safely use t.GetSysCap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SysCap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs) GetSysCap() bool {
	if t == nil || t.SysCap == nil {
		return false
	}
	return *t.SysCap
}

// GetSysDesc retrieves the value of the leaf SysDesc from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SysDesc is set, it can
// safely use t.GetSysDesc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SysDesc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs) GetSysDesc() bool {
	if t == nil || t.SysDesc == nil {
		return false
	}
	return *t.SysDesc
}

// GetSysName retrieves the value of the leaf SysName from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SysName is set, it can
// safely use t.GetSysName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SysName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs) GetSysName() bool {
	if t == nil || t.SysName == nil {
		return false
	}
	return *t.SysName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortDesc == nil {
		var v bool = false
		t.PortDesc = &v
	}
	if t.SysCap == nil {
		var v bool = false
		t.SysCap = &v
	}
	if t.SysDesc == nil {
		var v bool = false
		t.SysDesc = &v
	}
	if t.SysName == nil {
		var v bool = false
		t.SysName = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Lldp_DestMac_TxTlvs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback represents the /nokia-conf/configure/groups/group/port/ethernet/loopback YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback struct {
	Direction     E_NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback_Direction `path:"direction" module:"nokia-conf"`
	SwapSrcDstMac *bool                                                               `path:"swap-src-dst-mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback) IsYANGGoStruct() {}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback) GetDirection() E_NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetSwapSrcDstMac retrieves the value of the leaf SwapSrcDstMac from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SwapSrcDstMac is set, it can
// safely use t.GetSwapSrcDstMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SwapSrcDstMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback) GetSwapSrcDstMac() bool {
	if t == nil || t.SwapSrcDstMac == nil {
		return false
	}
	return *t.SwapSrcDstMac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SwapSrcDstMac == nil {
		var v bool = false
		t.SwapSrcDstMac = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Loopback) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network represents the /nokia-conf/configure/groups/group/port/ethernet/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Network struct {
	AccountingPolicy *uint32                                                        `path:"accounting-policy" module:"nokia-conf"`
	CollectStats     *bool                                                          `path:"collect-stats" module:"nokia-conf"`
	Egress           *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress `path:"egress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress{}
	return t.Egress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Network. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network) GetEgress() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	t.Egress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress represents the /nokia-conf/configure/groups/group/port/ethernet/network/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress struct {
	PortQueues  *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues                                                                                  `path:"port-queues" module:"nokia-conf"`
	QueueGroup  map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_Key]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup `path:"queue-group" module:"nokia-conf"`
	QueuePolicy *string                                                                                                                                                    `path:"queue-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_Key represents the key for list QueueGroup of element /nokia-conf/configure/groups/group/port/ethernet/network/egress.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_Key struct {
	QueueGroupName string                                                                                    `path:"queue-group-name"`
	InstanceId     NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_InstanceId_Union `path:"instance-id"`
}

// NewQueueGroup creates a new entry in the QueueGroup list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress) NewQueueGroup(QueueGroupName string, InstanceId NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_InstanceId_Union) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_Key]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup)
	}

	key := NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueGroup", key)
	}

	t.QueueGroup[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup{
		QueueGroupName: &QueueGroupName,
		InstanceId:     InstanceId,
	}

	return t.QueueGroup[key], nil
}

// RenameQueueGroup renames an entry in the list QueueGroup within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress) RenameQueueGroup(oldK, newK NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_Key) error {
	if _, ok := t.QueueGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueGroup", newK)
	}

	e, ok := t.QueueGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueGroup", oldK)
	}
	e.QueueGroupName = &newK.QueueGroupName
	e.InstanceId = newK.InstanceId

	t.QueueGroup[newK] = e
	delete(t.QueueGroup, oldK)
	return nil
}

// GetOrCreateQueueGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress) GetOrCreateQueueGroup(QueueGroupName string, InstanceId NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_InstanceId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup {

	key := NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	if v, ok := t.QueueGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueGroup(QueueGroupName, InstanceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueGroup got unexpected error: %v", err))
	}
	return v
}

// GetQueueGroup retrieves the value with the specified key from
// the QueueGroup map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress) GetQueueGroup(QueueGroupName string, InstanceId NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_InstanceId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	if lm, ok := t.QueueGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress) DeleteQueueGroup(QueueGroupName string, InstanceId NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_InstanceId_Union) {
	key := NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	delete(t.QueueGroup, key)
}

// AppendQueueGroup appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup struct to the
// list QueueGroup of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress) AppendQueueGroup(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) error {
	if v.QueueGroupName == nil {
		return fmt.Errorf("invalid nil key for QueueGroupName")
	}

	key := NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_Key{
		QueueGroupName: *v.QueueGroupName,
		InstanceId:     v.InstanceId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_Key]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup)
	}

	if _, ok := t.QueueGroup[key]; ok {
		return fmt.Errorf("duplicate key for list QueueGroup %v", key)
	}

	t.QueueGroup[key] = v
	return nil
}

// GetOrCreatePortQueues retrieves the value of the PortQueues field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress) GetOrCreatePortQueues() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues {
	if t.PortQueues != nil {
		return t.PortQueues
	}
	t.PortQueues = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues{}
	return t.PortQueues
}

// GetPortQueues returns the value of the PortQueues struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress. If the receiver or the field PortQueues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress) GetPortQueues() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues {
	if t != nil && t.PortQueues != nil {
		return t.PortQueues
	}
	return nil
}

// GetQueuePolicy retrieves the value of the leaf QueuePolicy from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuePolicy is set, it can
// safely use t.GetQueuePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress) GetQueuePolicy() string {
	if t == nil || t.QueuePolicy == nil {
		return ""
	}
	return *t.QueuePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortQueues.PopulateDefaults()
	for _, e := range t.QueueGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues represents the /nokia-conf/configure/groups/group/port/ethernet/network/egress/port-queues YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues struct {
	Overrides *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides `path:"overrides" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues) GetOverrides() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides represents the /nokia-conf/configure/groups/group/port/ethernet/network/egress/port-queues/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides struct {
	Queue map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides) IsYANGGoStruct() {
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides) AppendQueue(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue represents the /nokia-conf/configure/groups/group/port/ethernet/network/egress/port-queues/overrides/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue struct {
	MonitorQueueDepth *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	QueueId           NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_QueueId_Union      `path:"queue-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MonitorQueueDepth.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/groups/group/port/ethernet/network/egress/port-queues/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling        *bool    `path:"fast-polling" module:"nokia-conf"`
	ViolationThreshold *float64 `path:"violation-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// GetViolationThreshold retrieves the value of the leaf ViolationThreshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolationThreshold is set, it can
// safely use t.GetViolationThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolationThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth) GetViolationThreshold() float64 {
	if t == nil || t.ViolationThreshold == nil {
		return 0.0
	}
	return *t.ViolationThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup represents the /nokia-conf/configure/groups/group/port/ethernet/network/egress/queue-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup struct {
	AccountingPolicy     *uint32                                                                                   `path:"accounting-policy" module:"nokia-conf"`
	AggregateRate        *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate   `path:"aggregate-rate" module:"nokia-conf"`
	CollectStats         *bool                                                                                     `path:"collect-stats" module:"nokia-conf"`
	Description          *string                                                                                   `path:"description" module:"nokia-conf"`
	HsTurbo              *bool                                                                                     `path:"hs-turbo" module:"nokia-conf"`
	InstanceId           NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_InstanceId_Union `path:"instance-id" module:"nokia-conf"`
	PolicerControlPolicy *string                                                                                   `path:"policer-control-policy" module:"nokia-conf"`
	QueueGroupName       *string                                                                                   `path:"queue-group-name" module:"nokia-conf"`
	QueueOverrides       *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides  `path:"queue-overrides" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) IsYANGGoStruct() {}

// GetOrCreateAggregateRate retrieves the value of the AggregateRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) GetOrCreateAggregateRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate {
	if t.AggregateRate != nil {
		return t.AggregateRate
	}
	t.AggregateRate = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate{}
	return t.AggregateRate
}

// GetOrCreateQueueOverrides retrieves the value of the QueueOverrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) GetOrCreateQueueOverrides() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides {
	if t.QueueOverrides != nil {
		return t.QueueOverrides
	}
	t.QueueOverrides = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides{}
	return t.QueueOverrides
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetAggregateRate returns the value of the AggregateRate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup. If the receiver or the field AggregateRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) GetAggregateRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate {
	if t != nil && t.AggregateRate != nil {
		return t.AggregateRate
	}
	return nil
}

// GetQueueOverrides returns the value of the QueueOverrides struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup. If the receiver or the field QueueOverrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) GetQueueOverrides() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides {
	if t != nil && t.QueueOverrides != nil {
		return t.QueueOverrides
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) GetSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHsTurbo retrieves the value of the leaf HsTurbo from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsTurbo is set, it can
// safely use t.GetHsTurbo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsTurbo == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) GetHsTurbo() bool {
	if t == nil || t.HsTurbo == nil {
		return false
	}
	return *t.HsTurbo
}

// GetInstanceId retrieves the value of the leaf InstanceId from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceId is set, it can
// safely use t.GetInstanceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) GetInstanceId() NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_InstanceId_Union {
	if t == nil || t.InstanceId == nil {
		return nil
	}
	return t.InstanceId
}

// GetPolicerControlPolicy retrieves the value of the leaf PolicerControlPolicy from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerControlPolicy is set, it can
// safely use t.GetPolicerControlPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerControlPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) GetPolicerControlPolicy() string {
	if t == nil || t.PolicerControlPolicy == nil {
		return ""
	}
	return *t.PolicerControlPolicy
}

// GetQueueGroupName retrieves the value of the leaf QueueGroupName from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupName is set, it can
// safely use t.GetQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) GetQueueGroupName() string {
	if t == nil || t.QueueGroupName == nil {
		return ""
	}
	return *t.QueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.HsTurbo == nil {
		var v bool = false
		t.HsTurbo = &v
	}
	t.AggregateRate.PopulateDefaults()
	t.QueueOverrides.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) ΛListKeyMap() (map[string]interface{}, error) {

	if t.QueueGroupName == nil {
		return nil, fmt.Errorf("nil value for key QueueGroupName")
	}

	return map[string]interface{}{
		"instance-id":      t.InstanceId,
		"queue-group-name": *t.QueueGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate represents the /nokia-conf/configure/groups/group/port/ethernet/network/egress/queue-group/aggregate-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate struct {
	LimitUnusedBandwidth      *bool                                                                                             `path:"limit-unused-bandwidth" module:"nokia-conf"`
	QueueFrameBasedAccounting *bool                                                                                             `path:"queue-frame-based-accounting" module:"nokia-conf"`
	Rate                      NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate) IsYANGGoStruct() {
}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetQueueFrameBasedAccounting retrieves the value of the leaf QueueFrameBasedAccounting from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueFrameBasedAccounting is set, it can
// safely use t.GetQueueFrameBasedAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueFrameBasedAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate) GetQueueFrameBasedAccounting() bool {
	if t == nil || t.QueueFrameBasedAccounting == nil {
		return false
	}
	return *t.QueueFrameBasedAccounting
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate) GetRate() NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
	if t.QueueFrameBasedAccounting == nil {
		var v bool = false
		t.QueueFrameBasedAccounting = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate_Rate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides represents the /nokia-conf/configure/groups/group/port/ethernet/network/egress/queue-group/queue-overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides struct {
	Queue map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) IsYANGGoStruct() {
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) AppendQueue(v *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue represents the /nokia-conf/configure/groups/group/port/ethernet/network/egress/queue-group/queue-overrides/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue struct {
	AdaptationRule    *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	Cbs               NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail          *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	Mbs               NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth      *bool                                                                                                            `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	PercentRate       *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId           NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_QueueId_Union      `path:"queue-id" module:"nokia-conf"`
	Rate              *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetDropTail() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetPercentRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetRate() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetCbs() NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/port/ethernet/network/egress/queue-group/queue-overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail represents the /nokia-conf/configure/groups/group/port/ethernet/network/egress/queue-group/queue-overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low represents the /nokia-conf/configure/groups/group/port/ethernet/network/egress/queue-group/queue-overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/groups/group/port/ethernet/network/egress/queue-group/queue-overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth struct {
	FastPolling        *bool    `path:"fast-polling" module:"nokia-conf"`
	ViolationThreshold *float64 `path:"violation-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// GetViolationThreshold retrieves the value of the leaf ViolationThreshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolationThreshold is set, it can
// safely use t.GetViolationThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolationThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) GetViolationThreshold() float64 {
	if t == nil || t.ViolationThreshold == nil {
		return 0.0
	}
	return *t.ViolationThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate represents the /nokia-conf/configure/groups/group/port/ethernet/network/egress/queue-group/queue-overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate represents the /nokia-conf/configure/groups/group/port/ethernet/network/egress/queue-group/queue-overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate) GetCir() NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate) GetPir() NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy represents the /nokia-conf/configure/groups/group/port/ethernet/network/egress/queue-group/scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm represents the /nokia-conf/configure/groups/group/port/ethernet/report-alarm YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm struct {
	AlignmentMarkerNotLocked *bool `path:"alignment-marker-not-locked" module:"nokia-conf"`
	BlockNotLocked           *bool `path:"block-not-locked" module:"nokia-conf"`
	DuplicateLane            *bool `path:"duplicate-lane" module:"nokia-conf"`
	FrameNotLocked           *bool `path:"frame-not-locked" module:"nokia-conf"`
	HighBer                  *bool `path:"high-ber" module:"nokia-conf"`
	Local                    *bool `path:"local" module:"nokia-conf"`
	Remote                   *bool `path:"remote" module:"nokia-conf"`
	SignalFail               *bool `path:"signal-fail" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm) IsYANGGoStruct() {}

// GetAlignmentMarkerNotLocked retrieves the value of the leaf AlignmentMarkerNotLocked from the NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlignmentMarkerNotLocked is set, it can
// safely use t.GetAlignmentMarkerNotLocked() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlignmentMarkerNotLocked == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm) GetAlignmentMarkerNotLocked() bool {
	if t == nil || t.AlignmentMarkerNotLocked == nil {
		return false
	}
	return *t.AlignmentMarkerNotLocked
}

// GetBlockNotLocked retrieves the value of the leaf BlockNotLocked from the NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockNotLocked is set, it can
// safely use t.GetBlockNotLocked() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockNotLocked == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm) GetBlockNotLocked() bool {
	if t == nil || t.BlockNotLocked == nil {
		return false
	}
	return *t.BlockNotLocked
}

// GetDuplicateLane retrieves the value of the leaf DuplicateLane from the NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuplicateLane is set, it can
// safely use t.GetDuplicateLane() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuplicateLane == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm) GetDuplicateLane() bool {
	if t == nil || t.DuplicateLane == nil {
		return false
	}
	return *t.DuplicateLane
}

// GetFrameNotLocked retrieves the value of the leaf FrameNotLocked from the NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameNotLocked is set, it can
// safely use t.GetFrameNotLocked() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameNotLocked == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm) GetFrameNotLocked() bool {
	if t == nil || t.FrameNotLocked == nil {
		return false
	}
	return *t.FrameNotLocked
}

// GetHighBer retrieves the value of the leaf HighBer from the NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighBer is set, it can
// safely use t.GetHighBer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighBer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm) GetHighBer() bool {
	if t == nil || t.HighBer == nil {
		return false
	}
	return *t.HighBer
}

// GetLocal retrieves the value of the leaf Local from the NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Local is set, it can
// safely use t.GetLocal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Local == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm) GetLocal() bool {
	if t == nil || t.Local == nil {
		return false
	}
	return *t.Local
}

// GetRemote retrieves the value of the leaf Remote from the NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Remote is set, it can
// safely use t.GetRemote() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Remote == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm) GetRemote() bool {
	if t == nil || t.Remote == nil {
		return false
	}
	return *t.Remote
}

// GetSignalFail retrieves the value of the leaf SignalFail from the NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalFail is set, it can
// safely use t.GetSignalFail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalFail == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm) GetSignalFail() bool {
	if t == nil || t.SignalFail == nil {
		return false
	}
	return *t.SignalFail
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm represents the /nokia-conf/configure/groups/group/port/ethernet/ssm YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm struct {
	AdminState E_NokiaTypesSros_AdminState                                   `path:"admin-state" module:"nokia-conf"`
	CodeType   E_NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm_CodeType `path:"code-type" module:"nokia-conf"`
	EsmcTunnel *bool                                                         `path:"esmc-tunnel" module:"nokia-conf"`
	TxDus      *bool                                                         `path:"tx-dus" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCodeType retrieves the value of the leaf CodeType from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CodeType is set, it can
// safely use t.GetCodeType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CodeType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm) GetCodeType() E_NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm_CodeType {
	if t == nil || t.CodeType == 0 {
		return NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm_CodeType_sdh
	}
	return t.CodeType
}

// GetEsmcTunnel retrieves the value of the leaf EsmcTunnel from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsmcTunnel is set, it can
// safely use t.GetEsmcTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsmcTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm) GetEsmcTunnel() bool {
	if t == nil || t.EsmcTunnel == nil {
		return false
	}
	return *t.EsmcTunnel
}

// GetTxDus retrieves the value of the leaf TxDus from the NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxDus is set, it can
// safely use t.GetTxDus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxDus == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm) GetTxDus() bool {
	if t == nil || t.TxDus == nil {
		return false
	}
	return *t.TxDus
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.CodeType == 0 {
		t.CodeType = NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm_CodeType_sdh
	}
	if t.EsmcTunnel == nil {
		var v bool = false
		t.EsmcTunnel = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_Ssm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor represents the /nokia-conf/configure/groups/group/port/ethernet/symbol-monitor YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor struct {
	AdminState    E_NokiaTypesSros_AdminState                                                 `path:"admin-state" module:"nokia-conf"`
	SignalDegrade *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalDegrade `path:"signal-degrade" module:"nokia-conf"`
	SignalFailure *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalFailure `path:"signal-failure" module:"nokia-conf"`
	WindowSize    *uint32                                                                     `path:"window-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor) IsYANGGoStruct() {}

// GetOrCreateSignalDegrade retrieves the value of the SignalDegrade field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor) GetOrCreateSignalDegrade() *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalDegrade {
	if t.SignalDegrade != nil {
		return t.SignalDegrade
	}
	t.SignalDegrade = &NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalDegrade{}
	return t.SignalDegrade
}

// GetOrCreateSignalFailure retrieves the value of the SignalFailure field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor) GetOrCreateSignalFailure() *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalFailure {
	if t.SignalFailure != nil {
		return t.SignalFailure
	}
	t.SignalFailure = &NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalFailure{}
	return t.SignalFailure
}

// GetSignalDegrade returns the value of the SignalDegrade struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor. If the receiver or the field SignalDegrade is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor) GetSignalDegrade() *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalDegrade {
	if t != nil && t.SignalDegrade != nil {
		return t.SignalDegrade
	}
	return nil
}

// GetSignalFailure returns the value of the SignalFailure struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor. If the receiver or the field SignalFailure is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor) GetSignalFailure() *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalFailure {
	if t != nil && t.SignalFailure != nil {
		return t.SignalFailure
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetWindowSize retrieves the value of the leaf WindowSize from the NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WindowSize is set, it can
// safely use t.GetWindowSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WindowSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor) GetWindowSize() uint32 {
	if t == nil || t.WindowSize == nil {
		return 10
	}
	return *t.WindowSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.WindowSize == nil {
		var v uint32 = 10
		t.WindowSize = &v
	}
	t.SignalDegrade.PopulateDefaults()
	t.SignalFailure.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalDegrade represents the /nokia-conf/configure/groups/group/port/ethernet/symbol-monitor/signal-degrade YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalDegrade struct {
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalDegrade implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalDegrade) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalDegrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalDegrade) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 1
	}
	return *t.Multiplier
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalDegrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalDegrade) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalDegrade
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalDegrade) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 1
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalDegrade) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalDegrade"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalDegrade) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalDegrade) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalDegrade.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalDegrade) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalFailure represents the /nokia-conf/configure/groups/group/port/ethernet/symbol-monitor/signal-failure YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalFailure struct {
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalFailure implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalFailure) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalFailure
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalFailure) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 1
	}
	return *t.Multiplier
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalFailure
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalFailure) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalFailure
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalFailure) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 1
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalFailure) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalFailure"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalFailure) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalFailure) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalFailure.
func (*NokiaConf_Configure_Groups_Group_Port_Ethernet_SymbolMonitor_SignalFailure) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Gnss represents the /nokia-conf/configure/groups/group/port/gnss YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Gnss struct {
	AntennaCableDelay  *uint32                                                   `path:"antenna-cable-delay" module:"nokia-conf"`
	Constellation      *NokiaConf_Configure_Groups_Group_Port_Gnss_Constellation `path:"constellation" module:"nokia-conf"`
	ElevationMaskAngle *uint32                                                   `path:"elevation-mask-angle" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Gnss implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Gnss) IsYANGGoStruct() {}

// GetOrCreateConstellation retrieves the value of the Constellation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Gnss) GetOrCreateConstellation() *NokiaConf_Configure_Groups_Group_Port_Gnss_Constellation {
	if t.Constellation != nil {
		return t.Constellation
	}
	t.Constellation = &NokiaConf_Configure_Groups_Group_Port_Gnss_Constellation{}
	return t.Constellation
}

// GetConstellation returns the value of the Constellation struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Gnss. If the receiver or the field Constellation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Gnss) GetConstellation() *NokiaConf_Configure_Groups_Group_Port_Gnss_Constellation {
	if t != nil && t.Constellation != nil {
		return t.Constellation
	}
	return nil
}

// GetAntennaCableDelay retrieves the value of the leaf AntennaCableDelay from the NokiaConf_Configure_Groups_Group_Port_Gnss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AntennaCableDelay is set, it can
// safely use t.GetAntennaCableDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AntennaCableDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Gnss) GetAntennaCableDelay() uint32 {
	if t == nil || t.AntennaCableDelay == nil {
		return 0
	}
	return *t.AntennaCableDelay
}

// GetElevationMaskAngle retrieves the value of the leaf ElevationMaskAngle from the NokiaConf_Configure_Groups_Group_Port_Gnss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ElevationMaskAngle is set, it can
// safely use t.GetElevationMaskAngle() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ElevationMaskAngle == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Gnss) GetElevationMaskAngle() uint32 {
	if t == nil || t.ElevationMaskAngle == nil {
		return 10
	}
	return *t.ElevationMaskAngle
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Gnss
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Gnss) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AntennaCableDelay == nil {
		var v uint32 = 0
		t.AntennaCableDelay = &v
	}
	if t.ElevationMaskAngle == nil {
		var v uint32 = 10
		t.ElevationMaskAngle = &v
	}
	t.Constellation.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Gnss) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Gnss"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Gnss) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Gnss) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Gnss.
func (*NokiaConf_Configure_Groups_Group_Port_Gnss) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Gnss_Constellation represents the /nokia-conf/configure/groups/group/port/gnss/constellation YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Gnss_Constellation struct {
	Glonass *bool `path:"glonass" module:"nokia-conf"`
	Gps     *bool `path:"gps" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Gnss_Constellation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Gnss_Constellation) IsYANGGoStruct() {}

// GetGlonass retrieves the value of the leaf Glonass from the NokiaConf_Configure_Groups_Group_Port_Gnss_Constellation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Glonass is set, it can
// safely use t.GetGlonass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Glonass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Gnss_Constellation) GetGlonass() bool {
	if t == nil || t.Glonass == nil {
		return false
	}
	return *t.Glonass
}

// GetGps retrieves the value of the leaf Gps from the NokiaConf_Configure_Groups_Group_Port_Gnss_Constellation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gps is set, it can
// safely use t.GetGps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gps == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Gnss_Constellation) GetGps() bool {
	if t == nil || t.Gps == nil {
		return true
	}
	return *t.Gps
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Gnss_Constellation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Gnss_Constellation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Glonass == nil {
		var v bool = false
		t.Glonass = &v
	}
	if t.Gps == nil {
		var v bool = true
		t.Gps = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Gnss_Constellation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Gnss_Constellation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Gnss_Constellation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Gnss_Constellation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Gnss_Constellation.
func (*NokiaConf_Configure_Groups_Group_Port_Gnss_Constellation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation represents the /nokia-conf/configure/groups/group/port/hybrid-buffer-allocation YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation struct {
	EgressWeight  *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_EgressWeight  `path:"egress-weight" module:"nokia-conf"`
	IngressWeight *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_IngressWeight `path:"ingress-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation) IsYANGGoStruct() {}

// GetOrCreateEgressWeight retrieves the value of the EgressWeight field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation) GetOrCreateEgressWeight() *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_EgressWeight {
	if t.EgressWeight != nil {
		return t.EgressWeight
	}
	t.EgressWeight = &NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_EgressWeight{}
	return t.EgressWeight
}

// GetOrCreateIngressWeight retrieves the value of the IngressWeight field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation) GetOrCreateIngressWeight() *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_IngressWeight {
	if t.IngressWeight != nil {
		return t.IngressWeight
	}
	t.IngressWeight = &NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_IngressWeight{}
	return t.IngressWeight
}

// GetEgressWeight returns the value of the EgressWeight struct pointer
// from NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation. If the receiver or the field EgressWeight is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation) GetEgressWeight() *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_EgressWeight {
	if t != nil && t.EgressWeight != nil {
		return t.EgressWeight
	}
	return nil
}

// GetIngressWeight returns the value of the IngressWeight struct pointer
// from NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation. If the receiver or the field IngressWeight is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation) GetIngressWeight() *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_IngressWeight {
	if t != nil && t.IngressWeight != nil {
		return t.IngressWeight
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EgressWeight.PopulateDefaults()
	t.IngressWeight.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation.
func (*NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_EgressWeight represents the /nokia-conf/configure/groups/group/port/hybrid-buffer-allocation/egress-weight YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_EgressWeight struct {
	Access  *uint32 `path:"access" module:"nokia-conf"`
	Network *uint32 `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_EgressWeight implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_EgressWeight) IsYANGGoStruct() {}

// GetAccess retrieves the value of the leaf Access from the NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_EgressWeight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Access is set, it can
// safely use t.GetAccess() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Access == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_EgressWeight) GetAccess() uint32 {
	if t == nil || t.Access == nil {
		return 50
	}
	return *t.Access
}

// GetNetwork retrieves the value of the leaf Network from the NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_EgressWeight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Network is set, it can
// safely use t.GetNetwork() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Network == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_EgressWeight) GetNetwork() uint32 {
	if t == nil || t.Network == nil {
		return 50
	}
	return *t.Network
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_EgressWeight
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_EgressWeight) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Access == nil {
		var v uint32 = 50
		t.Access = &v
	}
	if t.Network == nil {
		var v uint32 = 50
		t.Network = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_EgressWeight) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_EgressWeight"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_EgressWeight) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_EgressWeight) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_EgressWeight.
func (*NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_EgressWeight) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_IngressWeight represents the /nokia-conf/configure/groups/group/port/hybrid-buffer-allocation/ingress-weight YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_IngressWeight struct {
	Access  *uint32 `path:"access" module:"nokia-conf"`
	Network *uint32 `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_IngressWeight implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_IngressWeight) IsYANGGoStruct() {}

// GetAccess retrieves the value of the leaf Access from the NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_IngressWeight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Access is set, it can
// safely use t.GetAccess() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Access == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_IngressWeight) GetAccess() uint32 {
	if t == nil || t.Access == nil {
		return 50
	}
	return *t.Access
}

// GetNetwork retrieves the value of the leaf Network from the NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_IngressWeight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Network is set, it can
// safely use t.GetNetwork() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Network == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_IngressWeight) GetNetwork() uint32 {
	if t == nil || t.Network == nil {
		return 50
	}
	return *t.Network
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_IngressWeight
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_IngressWeight) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Access == nil {
		var v uint32 = 50
		t.Access = &v
	}
	if t.Network == nil {
		var v uint32 = 50
		t.Network = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_IngressWeight) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_IngressWeight"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_IngressWeight) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_IngressWeight) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_IngressWeight.
func (*NokiaConf_Configure_Groups_Group_Port_HybridBufferAllocation_IngressWeight) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation represents the /nokia-conf/configure/groups/group/port/modify-buffer-allocation YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation struct {
	PercentageOfRate *NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation_PercentageOfRate `path:"percentage-of-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation) IsYANGGoStruct() {}

// GetOrCreatePercentageOfRate retrieves the value of the PercentageOfRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation) GetOrCreatePercentageOfRate() *NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation_PercentageOfRate {
	if t.PercentageOfRate != nil {
		return t.PercentageOfRate
	}
	t.PercentageOfRate = &NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation_PercentageOfRate{}
	return t.PercentageOfRate
}

// GetPercentageOfRate returns the value of the PercentageOfRate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation. If the receiver or the field PercentageOfRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation) GetPercentageOfRate() *NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation_PercentageOfRate {
	if t != nil && t.PercentageOfRate != nil {
		return t.PercentageOfRate
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentageOfRate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation.
func (*NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation_PercentageOfRate represents the /nokia-conf/configure/groups/group/port/modify-buffer-allocation/percentage-of-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation_PercentageOfRate struct {
	Egress  *uint32 `path:"egress" module:"nokia-conf"`
	Ingress *uint32 `path:"ingress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation_PercentageOfRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation_PercentageOfRate) IsYANGGoStruct() {
}

// GetEgress retrieves the value of the leaf Egress from the NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation_PercentageOfRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Egress is set, it can
// safely use t.GetEgress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Egress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation_PercentageOfRate) GetEgress() uint32 {
	if t == nil || t.Egress == nil {
		return 0
	}
	return *t.Egress
}

// GetIngress retrieves the value of the leaf Ingress from the NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation_PercentageOfRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ingress is set, it can
// safely use t.GetIngress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ingress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation_PercentageOfRate) GetIngress() uint32 {
	if t == nil || t.Ingress == nil {
		return 100
	}
	return *t.Ingress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation_PercentageOfRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation_PercentageOfRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ingress == nil {
		var v uint32 = 100
		t.Ingress = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation_PercentageOfRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation_PercentageOfRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation_PercentageOfRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation_PercentageOfRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation_PercentageOfRate.
func (*NokiaConf_Configure_Groups_Group_Port_ModifyBufferAllocation_PercentageOfRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Network represents the /nokia-conf/configure/groups/group/port/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Network struct {
	Egress *NokiaConf_Configure_Groups_Group_Port_Network_Egress `path:"egress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Network) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Network) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Port_Network_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Port_Network_Egress{}
	return t.Egress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Network. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Network) GetEgress() *NokiaConf_Configure_Groups_Group_Port_Network_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Network.
func (*NokiaConf_Configure_Groups_Group_Port_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Network_Egress represents the /nokia-conf/configure/groups/group/port/network/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Network_Egress struct {
	Pool map[string]*NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool `path:"pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Network_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Network_Egress) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Groups_Group_Port_Network_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress) NewPool(Name string) (*NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool{
		Name: &Name,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Groups_Group_Port_Network_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.Name = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Network_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress) GetOrCreatePool(Name string) *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool {

	key := Name

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Groups_Group_Port_Network_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress) GetPool(Name string) *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Network_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress) DeletePool(Name string) {
	key := Name

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool struct to the
// list Pool of NokiaConf_Configure_Groups_Group_Port_Network_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress) AppendPool(v *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Network_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Network_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Network_Egress.
func (*NokiaConf_Configure_Groups_Group_Port_Network_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool represents the /nokia-conf/configure/groups/group/port/network/egress/pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool struct {
	AmberAlarmThreshold *uint32                                                            `path:"amber-alarm-threshold" module:"nokia-conf"`
	Name                *string                                                            `path:"name" module:"nokia-conf"`
	RedAlarmThreshold   *uint32                                                            `path:"red-alarm-threshold" module:"nokia-conf"`
	ResvCbs             *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs `path:"resv-cbs" module:"nokia-conf"`
	SlopePolicy         *string                                                            `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool) IsYANGGoStruct() {}

// GetOrCreateResvCbs retrieves the value of the ResvCbs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool) GetOrCreateResvCbs() *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs {
	if t.ResvCbs != nil {
		return t.ResvCbs
	}
	t.ResvCbs = &NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs{}
	return t.ResvCbs
}

// GetResvCbs returns the value of the ResvCbs struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool. If the receiver or the field ResvCbs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool) GetResvCbs() *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs {
	if t != nil && t.ResvCbs != nil {
		return t.ResvCbs
	}
	return nil
}

// GetAmberAlarmThreshold retrieves the value of the leaf AmberAlarmThreshold from the NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AmberAlarmThreshold is set, it can
// safely use t.GetAmberAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AmberAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool) GetAmberAlarmThreshold() uint32 {
	if t == nil || t.AmberAlarmThreshold == nil {
		return 0
	}
	return *t.AmberAlarmThreshold
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRedAlarmThreshold retrieves the value of the leaf RedAlarmThreshold from the NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedAlarmThreshold is set, it can
// safely use t.GetRedAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool) GetRedAlarmThreshold() uint32 {
	if t == nil || t.RedAlarmThreshold == nil {
		return 0
	}
	return *t.RedAlarmThreshold
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ResvCbs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool.
func (*NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs represents the /nokia-conf/configure/groups/group/port/network/egress/pool/resv-cbs YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs struct {
	AmberAlarmAction *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction `path:"amber-alarm-action" module:"nokia-conf"`
	Cbs              NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_Cbs_Union         `path:"cbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs) IsYANGGoStruct() {}

// GetOrCreateAmberAlarmAction retrieves the value of the AmberAlarmAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs) GetOrCreateAmberAlarmAction() *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction {
	if t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	t.AmberAlarmAction = &NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction{}
	return t.AmberAlarmAction
}

// GetAmberAlarmAction returns the value of the AmberAlarmAction struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs. If the receiver or the field AmberAlarmAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs) GetAmberAlarmAction() *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction {
	if t != nil && t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs) GetCbs() NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_Cbs_Enum_auto
	}
	return t.Cbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		t.Cbs = NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_Cbs_Enum_auto
	}
	t.AmberAlarmAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs.
func (*NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction represents the /nokia-conf/configure/groups/group/port/network/egress/pool/resv-cbs/amber-alarm-action YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction struct {
	Max  *uint32 `path:"max" module:"nokia-conf"`
	Step *uint32 `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction) IsYANGGoStruct() {
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction) GetStep() uint32 {
	if t == nil || t.Step == nil {
		return 0
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction.
func (*NokiaConf_Configure_Groups_Group_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Otu represents the /nokia-conf/configure/groups/group/port/otu YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Otu struct {
	AsyncMapping               *bool                                                                 `path:"async-mapping" module:"nokia-conf"`
	Fec                        E_NokiaTypesPort_OtuFecMode                                           `path:"fec" module:"nokia-conf"`
	FineGranularityBer         *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer         `path:"fine-granularity-ber" module:"nokia-conf"`
	Otu2LanDataRate            E_NokiaTypesPort_Otu2LanDataRate                                      `path:"otu2-lan-data-rate" module:"nokia-conf"`
	PathMonitoring             *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring             `path:"path-monitoring" module:"nokia-conf"`
	PayloadStructureIdentifier *NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier `path:"payload-structure-identifier" module:"nokia-conf"`
	ReportAlarm                *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm                `path:"report-alarm" module:"nokia-conf"`
	SdThreshold                *uint32                                                               `path:"sd-threshold" module:"nokia-conf"`
	SectionMonitoring          *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring          `path:"section-monitoring" module:"nokia-conf"`
	SfSdMethod                 E_NokiaTypesPort_OtuSfSdMethod                                        `path:"sf-sd-method" module:"nokia-conf"`
	SfThreshold                *uint32                                                               `path:"sf-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Otu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Otu) IsYANGGoStruct() {}

// GetOrCreateFineGranularityBer retrieves the value of the FineGranularityBer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu) GetOrCreateFineGranularityBer() *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer {
	if t.FineGranularityBer != nil {
		return t.FineGranularityBer
	}
	t.FineGranularityBer = &NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer{}
	return t.FineGranularityBer
}

// GetOrCreatePathMonitoring retrieves the value of the PathMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu) GetOrCreatePathMonitoring() *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring {
	if t.PathMonitoring != nil {
		return t.PathMonitoring
	}
	t.PathMonitoring = &NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring{}
	return t.PathMonitoring
}

// GetOrCreatePayloadStructureIdentifier retrieves the value of the PayloadStructureIdentifier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu) GetOrCreatePayloadStructureIdentifier() *NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier {
	if t.PayloadStructureIdentifier != nil {
		return t.PayloadStructureIdentifier
	}
	t.PayloadStructureIdentifier = &NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier{}
	return t.PayloadStructureIdentifier
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu) GetOrCreateReportAlarm() *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm{}
	return t.ReportAlarm
}

// GetOrCreateSectionMonitoring retrieves the value of the SectionMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu) GetOrCreateSectionMonitoring() *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring {
	if t.SectionMonitoring != nil {
		return t.SectionMonitoring
	}
	t.SectionMonitoring = &NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring{}
	return t.SectionMonitoring
}

// GetFineGranularityBer returns the value of the FineGranularityBer struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Otu. If the receiver or the field FineGranularityBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu) GetFineGranularityBer() *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer {
	if t != nil && t.FineGranularityBer != nil {
		return t.FineGranularityBer
	}
	return nil
}

// GetPathMonitoring returns the value of the PathMonitoring struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Otu. If the receiver or the field PathMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu) GetPathMonitoring() *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring {
	if t != nil && t.PathMonitoring != nil {
		return t.PathMonitoring
	}
	return nil
}

// GetPayloadStructureIdentifier returns the value of the PayloadStructureIdentifier struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Otu. If the receiver or the field PayloadStructureIdentifier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu) GetPayloadStructureIdentifier() *NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier {
	if t != nil && t.PayloadStructureIdentifier != nil {
		return t.PayloadStructureIdentifier
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Otu. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu) GetReportAlarm() *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetSectionMonitoring returns the value of the SectionMonitoring struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Otu. If the receiver or the field SectionMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu) GetSectionMonitoring() *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring {
	if t != nil && t.SectionMonitoring != nil {
		return t.SectionMonitoring
	}
	return nil
}

// GetAsyncMapping retrieves the value of the leaf AsyncMapping from the NokiaConf_Configure_Groups_Group_Port_Otu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsyncMapping is set, it can
// safely use t.GetAsyncMapping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsyncMapping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu) GetAsyncMapping() bool {
	if t == nil || t.AsyncMapping == nil {
		return false
	}
	return *t.AsyncMapping
}

// GetFec retrieves the value of the leaf Fec from the NokiaConf_Configure_Groups_Group_Port_Otu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fec is set, it can
// safely use t.GetFec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu) GetFec() E_NokiaTypesPort_OtuFecMode {
	if t == nil || t.Fec == 0 {
		return 0
	}
	return t.Fec
}

// GetOtu2LanDataRate retrieves the value of the leaf Otu2LanDataRate from the NokiaConf_Configure_Groups_Group_Port_Otu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Otu2LanDataRate is set, it can
// safely use t.GetOtu2LanDataRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Otu2LanDataRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu) GetOtu2LanDataRate() E_NokiaTypesPort_Otu2LanDataRate {
	if t == nil || t.Otu2LanDataRate == 0 {
		return 0
	}
	return t.Otu2LanDataRate
}

// GetSdThreshold retrieves the value of the leaf SdThreshold from the NokiaConf_Configure_Groups_Group_Port_Otu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdThreshold is set, it can
// safely use t.GetSdThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu) GetSdThreshold() uint32 {
	if t == nil || t.SdThreshold == nil {
		return 7
	}
	return *t.SdThreshold
}

// GetSfSdMethod retrieves the value of the leaf SfSdMethod from the NokiaConf_Configure_Groups_Group_Port_Otu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfSdMethod is set, it can
// safely use t.GetSfSdMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfSdMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu) GetSfSdMethod() E_NokiaTypesPort_OtuSfSdMethod {
	if t == nil || t.SfSdMethod == 0 {
		return NokiaTypesPort_OtuSfSdMethod_fec
	}
	return t.SfSdMethod
}

// GetSfThreshold retrieves the value of the leaf SfThreshold from the NokiaConf_Configure_Groups_Group_Port_Otu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfThreshold is set, it can
// safely use t.GetSfThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu) GetSfThreshold() uint32 {
	if t == nil || t.SfThreshold == nil {
		return 5
	}
	return *t.SfThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Otu
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SdThreshold == nil {
		var v uint32 = 7
		t.SdThreshold = &v
	}
	if t.SfSdMethod == 0 {
		t.SfSdMethod = NokiaTypesPort_OtuSfSdMethod_fec
	}
	if t.SfThreshold == nil {
		var v uint32 = 5
		t.SfThreshold = &v
	}
	t.FineGranularityBer.PopulateDefaults()
	t.PathMonitoring.PopulateDefaults()
	t.PayloadStructureIdentifier.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
	t.SectionMonitoring.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Otu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Otu.
func (*NokiaConf_Configure_Groups_Group_Port_Otu) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer represents the /nokia-conf/configure/groups/group/port/otu/fine-granularity-ber YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer struct {
	SignalDegrade *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade `path:"signal-degrade" module:"nokia-conf"`
	SignalFailure *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure `path:"signal-failure" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer) IsYANGGoStruct() {}

// GetOrCreateSignalDegrade retrieves the value of the SignalDegrade field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer) GetOrCreateSignalDegrade() *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade {
	if t.SignalDegrade != nil {
		return t.SignalDegrade
	}
	t.SignalDegrade = &NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade{}
	return t.SignalDegrade
}

// GetOrCreateSignalFailure retrieves the value of the SignalFailure field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer) GetOrCreateSignalFailure() *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure {
	if t.SignalFailure != nil {
		return t.SignalFailure
	}
	t.SignalFailure = &NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure{}
	return t.SignalFailure
}

// GetSignalDegrade returns the value of the SignalDegrade struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer. If the receiver or the field SignalDegrade is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer) GetSignalDegrade() *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade {
	if t != nil && t.SignalDegrade != nil {
		return t.SignalDegrade
	}
	return nil
}

// GetSignalFailure returns the value of the SignalFailure struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer. If the receiver or the field SignalFailure is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer) GetSignalFailure() *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure {
	if t != nil && t.SignalFailure != nil {
		return t.SignalFailure
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SignalDegrade.PopulateDefaults()
	t.SignalFailure.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade represents the /nokia-conf/configure/groups/group/port/otu/fine-granularity-ber/signal-degrade YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade struct {
	Clear *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Clear `path:"clear" module:"nokia-conf"`
	Raise *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Raise `path:"raise" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade) IsYANGGoStruct() {}

// GetOrCreateClear retrieves the value of the Clear field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade) GetOrCreateClear() *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Clear {
	if t.Clear != nil {
		return t.Clear
	}
	t.Clear = &NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Clear{}
	return t.Clear
}

// GetOrCreateRaise retrieves the value of the Raise field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade) GetOrCreateRaise() *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Raise {
	if t.Raise != nil {
		return t.Raise
	}
	t.Raise = &NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Raise{}
	return t.Raise
}

// GetClear returns the value of the Clear struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade. If the receiver or the field Clear is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade) GetClear() *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Clear {
	if t != nil && t.Clear != nil {
		return t.Clear
	}
	return nil
}

// GetRaise returns the value of the Raise struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade. If the receiver or the field Raise is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade) GetRaise() *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Raise {
	if t != nil && t.Raise != nil {
		return t.Raise
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Clear.PopulateDefaults()
	t.Raise.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Clear represents the /nokia-conf/configure/groups/group/port/otu/fine-granularity-ber/signal-degrade/clear YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Clear struct {
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Clear implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Clear) IsYANGGoStruct() {
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Clear
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Clear) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 10
	}
	return *t.Multiplier
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Clear
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Clear) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 8
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Clear
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Clear) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 10
		t.Multiplier = &v
	}
	if t.Threshold == nil {
		var v uint32 = 8
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Clear) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Clear"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Clear) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Clear) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Clear.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Clear) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Raise represents the /nokia-conf/configure/groups/group/port/otu/fine-granularity-ber/signal-degrade/raise YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Raise struct {
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Raise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Raise) IsYANGGoStruct() {
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Raise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Raise) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 10
	}
	return *t.Multiplier
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Raise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Raise) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 7
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Raise
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Raise) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 10
		t.Multiplier = &v
	}
	if t.Threshold == nil {
		var v uint32 = 7
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Raise) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Raise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Raise) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Raise) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Raise.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalDegrade_Raise) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure represents the /nokia-conf/configure/groups/group/port/otu/fine-granularity-ber/signal-failure YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure struct {
	Clear *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Clear `path:"clear" module:"nokia-conf"`
	Raise *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Raise `path:"raise" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure) IsYANGGoStruct() {}

// GetOrCreateClear retrieves the value of the Clear field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure) GetOrCreateClear() *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Clear {
	if t.Clear != nil {
		return t.Clear
	}
	t.Clear = &NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Clear{}
	return t.Clear
}

// GetOrCreateRaise retrieves the value of the Raise field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure) GetOrCreateRaise() *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Raise {
	if t.Raise != nil {
		return t.Raise
	}
	t.Raise = &NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Raise{}
	return t.Raise
}

// GetClear returns the value of the Clear struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure. If the receiver or the field Clear is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure) GetClear() *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Clear {
	if t != nil && t.Clear != nil {
		return t.Clear
	}
	return nil
}

// GetRaise returns the value of the Raise struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure. If the receiver or the field Raise is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure) GetRaise() *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Raise {
	if t != nil && t.Raise != nil {
		return t.Raise
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Clear.PopulateDefaults()
	t.Raise.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Clear represents the /nokia-conf/configure/groups/group/port/otu/fine-granularity-ber/signal-failure/clear YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Clear struct {
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Clear implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Clear) IsYANGGoStruct() {
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Clear
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Clear) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 10
	}
	return *t.Multiplier
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Clear
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Clear) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 6
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Clear
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Clear) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 10
		t.Multiplier = &v
	}
	if t.Threshold == nil {
		var v uint32 = 6
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Clear) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Clear"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Clear) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Clear) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Clear.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Clear) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Raise represents the /nokia-conf/configure/groups/group/port/otu/fine-granularity-ber/signal-failure/raise YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Raise struct {
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Raise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Raise) IsYANGGoStruct() {
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Raise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Raise) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 10
	}
	return *t.Multiplier
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Raise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Raise) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 5
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Raise
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Raise) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 10
		t.Multiplier = &v
	}
	if t.Threshold == nil {
		var v uint32 = 5
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Raise) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Raise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Raise) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Raise) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Raise.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_FineGranularityBer_SignalFailure_Raise) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring represents the /nokia-conf/configure/groups/group/port/otu/path-monitoring YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring struct {
	TrailTraceIdentifier *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier `path:"trail-trace-identifier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring) IsYANGGoStruct() {}

// GetOrCreateTrailTraceIdentifier retrieves the value of the TrailTraceIdentifier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring) GetOrCreateTrailTraceIdentifier() *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier {
	if t.TrailTraceIdentifier != nil {
		return t.TrailTraceIdentifier
	}
	t.TrailTraceIdentifier = &NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier{}
	return t.TrailTraceIdentifier
}

// GetTrailTraceIdentifier returns the value of the TrailTraceIdentifier struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring. If the receiver or the field TrailTraceIdentifier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring) GetTrailTraceIdentifier() *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier {
	if t != nil && t.TrailTraceIdentifier != nil {
		return t.TrailTraceIdentifier
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TrailTraceIdentifier.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier represents the /nokia-conf/configure/groups/group/port/otu/path-monitoring/trail-trace-identifier YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier struct {
	Expected         *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected `path:"expected" module:"nokia-conf"`
	MismatchReaction E_NokiaTypesPort_OtuTimReaction                                                         `path:"mismatch-reaction" module:"nokia-conf"`
	Transmit         *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit `path:"transmit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier) IsYANGGoStruct() {
}

// GetOrCreateExpected retrieves the value of the Expected field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier) GetOrCreateExpected() *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected {
	if t.Expected != nil {
		return t.Expected
	}
	t.Expected = &NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected{}
	return t.Expected
}

// GetOrCreateTransmit retrieves the value of the Transmit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier) GetOrCreateTransmit() *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit {
	if t.Transmit != nil {
		return t.Transmit
	}
	t.Transmit = &NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit{}
	return t.Transmit
}

// GetExpected returns the value of the Expected struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier. If the receiver or the field Expected is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier) GetExpected() *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected {
	if t != nil && t.Expected != nil {
		return t.Expected
	}
	return nil
}

// GetTransmit returns the value of the Transmit struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier. If the receiver or the field Transmit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier) GetTransmit() *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit {
	if t != nil && t.Transmit != nil {
		return t.Transmit
	}
	return nil
}

// GetMismatchReaction retrieves the value of the leaf MismatchReaction from the NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MismatchReaction is set, it can
// safely use t.GetMismatchReaction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MismatchReaction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier) GetMismatchReaction() E_NokiaTypesPort_OtuTimReaction {
	if t == nil || t.MismatchReaction == 0 {
		return 0
	}
	return t.MismatchReaction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Expected.PopulateDefaults()
	t.Transmit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected represents the /nokia-conf/configure/groups/group/port/otu/path-monitoring/trail-trace-identifier/expected YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected struct {
	AutoGenerated YANGEmpty `path:"auto-generated" module:"nokia-conf"`
	Bytes         *string   `path:"bytes" module:"nokia-conf"`
	String        *string   `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected) IsYANGGoStruct() {
}

// GetAutoGenerated retrieves the value of the leaf AutoGenerated from the NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoGenerated is set, it can
// safely use t.GetAutoGenerated() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoGenerated == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected) GetAutoGenerated() YANGEmpty {
	if t == nil || t.AutoGenerated == false {
		return false
	}
	return t.AutoGenerated
}

// GetBytes retrieves the value of the leaf Bytes from the NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bytes is set, it can
// safely use t.GetBytes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bytes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected) GetBytes() string {
	if t == nil || t.Bytes == nil {
		return ""
	}
	return *t.Bytes
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit represents the /nokia-conf/configure/groups/group/port/otu/path-monitoring/trail-trace-identifier/transmit YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit struct {
	AutoGenerated YANGEmpty `path:"auto-generated" module:"nokia-conf"`
	Bytes         *string   `path:"bytes" module:"nokia-conf"`
	String        *string   `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit) IsYANGGoStruct() {
}

// GetAutoGenerated retrieves the value of the leaf AutoGenerated from the NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoGenerated is set, it can
// safely use t.GetAutoGenerated() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoGenerated == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit) GetAutoGenerated() YANGEmpty {
	if t == nil || t.AutoGenerated == false {
		return false
	}
	return t.AutoGenerated
}

// GetBytes retrieves the value of the leaf Bytes from the NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bytes is set, it can
// safely use t.GetBytes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bytes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit) GetBytes() string {
	if t == nil || t.Bytes == nil {
		return ""
	}
	return *t.Bytes
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier represents the /nokia-conf/configure/groups/group/port/otu/payload-structure-identifier YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier struct {
	Payload *NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload `path:"payload" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier) IsYANGGoStruct() {}

// GetOrCreatePayload retrieves the value of the Payload field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier) GetOrCreatePayload() *NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload {
	if t.Payload != nil {
		return t.Payload
	}
	t.Payload = &NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload{}
	return t.Payload
}

// GetPayload returns the value of the Payload struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier. If the receiver or the field Payload is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier) GetPayload() *NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload {
	if t != nil && t.Payload != nil {
		return t.Payload
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Payload.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload represents the /nokia-conf/configure/groups/group/port/otu/payload-structure-identifier/payload YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload struct {
	Expected         E_NokiaTypesPort_OtuPsiPayloadType `path:"expected" module:"nokia-conf"`
	MismatchReaction E_NokiaTypesPort_OtuTimReaction    `path:"mismatch-reaction" module:"nokia-conf"`
	Transmit         E_NokiaTypesPort_OtuPsiPayloadType `path:"transmit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload) IsYANGGoStruct() {
}

// GetExpected retrieves the value of the leaf Expected from the NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expected is set, it can
// safely use t.GetExpected() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expected == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload) GetExpected() E_NokiaTypesPort_OtuPsiPayloadType {
	if t == nil || t.Expected == 0 {
		return NokiaTypesPort_OtuPsiPayloadType_auto
	}
	return t.Expected
}

// GetMismatchReaction retrieves the value of the leaf MismatchReaction from the NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MismatchReaction is set, it can
// safely use t.GetMismatchReaction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MismatchReaction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload) GetMismatchReaction() E_NokiaTypesPort_OtuTimReaction {
	if t == nil || t.MismatchReaction == 0 {
		return 0
	}
	return t.MismatchReaction
}

// GetTransmit retrieves the value of the leaf Transmit from the NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transmit is set, it can
// safely use t.GetTransmit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transmit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload) GetTransmit() E_NokiaTypesPort_OtuPsiPayloadType {
	if t == nil || t.Transmit == 0 {
		return NokiaTypesPort_OtuPsiPayloadType_auto
	}
	return t.Transmit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Expected == 0 {
		t.Expected = NokiaTypesPort_OtuPsiPayloadType_auto
	}
	if t.Transmit == 0 {
		t.Transmit = NokiaTypesPort_OtuPsiPayloadType_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_PayloadStructureIdentifier_Payload) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm represents the /nokia-conf/configure/groups/group/port/otu/report-alarm YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm struct {
	FecFail   *bool `path:"fec-fail" module:"nokia-conf"`
	FecSd     *bool `path:"fec-sd" module:"nokia-conf"`
	FecSf     *bool `path:"fec-sf" module:"nokia-conf"`
	FecUncorr *bool `path:"fec-uncorr" module:"nokia-conf"`
	Loc       *bool `path:"loc" module:"nokia-conf"`
	Lof       *bool `path:"lof" module:"nokia-conf"`
	Lom       *bool `path:"lom" module:"nokia-conf"`
	Los       *bool `path:"los" module:"nokia-conf"`
	OduAis    *bool `path:"odu-ais" module:"nokia-conf"`
	OduBdi    *bool `path:"odu-bdi" module:"nokia-conf"`
	OduLck    *bool `path:"odu-lck" module:"nokia-conf"`
	OduOci    *bool `path:"odu-oci" module:"nokia-conf"`
	OduTim    *bool `path:"odu-tim" module:"nokia-conf"`
	OpuPlm    *bool `path:"opu-plm" module:"nokia-conf"`
	OtuAis    *bool `path:"otu-ais" module:"nokia-conf"`
	OtuBdi    *bool `path:"otu-bdi" module:"nokia-conf"`
	OtuBerSd  *bool `path:"otu-ber-sd" module:"nokia-conf"`
	OtuBerSf  *bool `path:"otu-ber-sf" module:"nokia-conf"`
	OtuBiae   *bool `path:"otu-biae" module:"nokia-conf"`
	OtuIae    *bool `path:"otu-iae" module:"nokia-conf"`
	OtuTim    *bool `path:"otu-tim" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) IsYANGGoStruct() {}

// GetFecFail retrieves the value of the leaf FecFail from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecFail is set, it can
// safely use t.GetFecFail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecFail == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetFecFail() bool {
	if t == nil || t.FecFail == nil {
		return false
	}
	return *t.FecFail
}

// GetFecSd retrieves the value of the leaf FecSd from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecSd is set, it can
// safely use t.GetFecSd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecSd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetFecSd() bool {
	if t == nil || t.FecSd == nil {
		return false
	}
	return *t.FecSd
}

// GetFecSf retrieves the value of the leaf FecSf from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecSf is set, it can
// safely use t.GetFecSf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecSf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetFecSf() bool {
	if t == nil || t.FecSf == nil {
		return true
	}
	return *t.FecSf
}

// GetFecUncorr retrieves the value of the leaf FecUncorr from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecUncorr is set, it can
// safely use t.GetFecUncorr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecUncorr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetFecUncorr() bool {
	if t == nil || t.FecUncorr == nil {
		return false
	}
	return *t.FecUncorr
}

// GetLoc retrieves the value of the leaf Loc from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loc is set, it can
// safely use t.GetLoc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetLoc() bool {
	if t == nil || t.Loc == nil {
		return true
	}
	return *t.Loc
}

// GetLof retrieves the value of the leaf Lof from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lof is set, it can
// safely use t.GetLof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetLof() bool {
	if t == nil || t.Lof == nil {
		return true
	}
	return *t.Lof
}

// GetLom retrieves the value of the leaf Lom from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lom is set, it can
// safely use t.GetLom() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lom == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetLom() bool {
	if t == nil || t.Lom == nil {
		return true
	}
	return *t.Lom
}

// GetLos retrieves the value of the leaf Los from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Los is set, it can
// safely use t.GetLos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Los == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetLos() bool {
	if t == nil || t.Los == nil {
		return true
	}
	return *t.Los
}

// GetOduAis retrieves the value of the leaf OduAis from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OduAis is set, it can
// safely use t.GetOduAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OduAis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetOduAis() bool {
	if t == nil || t.OduAis == nil {
		return false
	}
	return *t.OduAis
}

// GetOduBdi retrieves the value of the leaf OduBdi from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OduBdi is set, it can
// safely use t.GetOduBdi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OduBdi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetOduBdi() bool {
	if t == nil || t.OduBdi == nil {
		return false
	}
	return *t.OduBdi
}

// GetOduLck retrieves the value of the leaf OduLck from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OduLck is set, it can
// safely use t.GetOduLck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OduLck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetOduLck() bool {
	if t == nil || t.OduLck == nil {
		return false
	}
	return *t.OduLck
}

// GetOduOci retrieves the value of the leaf OduOci from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OduOci is set, it can
// safely use t.GetOduOci() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OduOci == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetOduOci() bool {
	if t == nil || t.OduOci == nil {
		return false
	}
	return *t.OduOci
}

// GetOduTim retrieves the value of the leaf OduTim from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OduTim is set, it can
// safely use t.GetOduTim() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OduTim == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetOduTim() bool {
	if t == nil || t.OduTim == nil {
		return false
	}
	return *t.OduTim
}

// GetOpuPlm retrieves the value of the leaf OpuPlm from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OpuPlm is set, it can
// safely use t.GetOpuPlm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OpuPlm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetOpuPlm() bool {
	if t == nil || t.OpuPlm == nil {
		return false
	}
	return *t.OpuPlm
}

// GetOtuAis retrieves the value of the leaf OtuAis from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtuAis is set, it can
// safely use t.GetOtuAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtuAis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetOtuAis() bool {
	if t == nil || t.OtuAis == nil {
		return false
	}
	return *t.OtuAis
}

// GetOtuBdi retrieves the value of the leaf OtuBdi from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtuBdi is set, it can
// safely use t.GetOtuBdi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtuBdi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetOtuBdi() bool {
	if t == nil || t.OtuBdi == nil {
		return true
	}
	return *t.OtuBdi
}

// GetOtuBerSd retrieves the value of the leaf OtuBerSd from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtuBerSd is set, it can
// safely use t.GetOtuBerSd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtuBerSd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetOtuBerSd() bool {
	if t == nil || t.OtuBerSd == nil {
		return false
	}
	return *t.OtuBerSd
}

// GetOtuBerSf retrieves the value of the leaf OtuBerSf from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtuBerSf is set, it can
// safely use t.GetOtuBerSf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtuBerSf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetOtuBerSf() bool {
	if t == nil || t.OtuBerSf == nil {
		return true
	}
	return *t.OtuBerSf
}

// GetOtuBiae retrieves the value of the leaf OtuBiae from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtuBiae is set, it can
// safely use t.GetOtuBiae() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtuBiae == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetOtuBiae() bool {
	if t == nil || t.OtuBiae == nil {
		return false
	}
	return *t.OtuBiae
}

// GetOtuIae retrieves the value of the leaf OtuIae from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtuIae is set, it can
// safely use t.GetOtuIae() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtuIae == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetOtuIae() bool {
	if t == nil || t.OtuIae == nil {
		return false
	}
	return *t.OtuIae
}

// GetOtuTim retrieves the value of the leaf OtuTim from the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtuTim is set, it can
// safely use t.GetOtuTim() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtuTim == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) GetOtuTim() bool {
	if t == nil || t.OtuTim == nil {
		return false
	}
	return *t.OtuTim
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FecFail == nil {
		var v bool = false
		t.FecFail = &v
	}
	if t.FecSd == nil {
		var v bool = false
		t.FecSd = &v
	}
	if t.FecSf == nil {
		var v bool = true
		t.FecSf = &v
	}
	if t.FecUncorr == nil {
		var v bool = false
		t.FecUncorr = &v
	}
	if t.Loc == nil {
		var v bool = true
		t.Loc = &v
	}
	if t.Lof == nil {
		var v bool = true
		t.Lof = &v
	}
	if t.Lom == nil {
		var v bool = true
		t.Lom = &v
	}
	if t.Los == nil {
		var v bool = true
		t.Los = &v
	}
	if t.OduAis == nil {
		var v bool = false
		t.OduAis = &v
	}
	if t.OduBdi == nil {
		var v bool = false
		t.OduBdi = &v
	}
	if t.OduLck == nil {
		var v bool = false
		t.OduLck = &v
	}
	if t.OduOci == nil {
		var v bool = false
		t.OduOci = &v
	}
	if t.OduTim == nil {
		var v bool = false
		t.OduTim = &v
	}
	if t.OpuPlm == nil {
		var v bool = false
		t.OpuPlm = &v
	}
	if t.OtuAis == nil {
		var v bool = false
		t.OtuAis = &v
	}
	if t.OtuBdi == nil {
		var v bool = true
		t.OtuBdi = &v
	}
	if t.OtuBerSd == nil {
		var v bool = false
		t.OtuBerSd = &v
	}
	if t.OtuBerSf == nil {
		var v bool = true
		t.OtuBerSf = &v
	}
	if t.OtuBiae == nil {
		var v bool = false
		t.OtuBiae = &v
	}
	if t.OtuIae == nil {
		var v bool = false
		t.OtuIae = &v
	}
	if t.OtuTim == nil {
		var v bool = false
		t.OtuTim = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring represents the /nokia-conf/configure/groups/group/port/otu/section-monitoring YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring struct {
	TrailTraceIdentifier *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier `path:"trail-trace-identifier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring) IsYANGGoStruct() {}

// GetOrCreateTrailTraceIdentifier retrieves the value of the TrailTraceIdentifier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring) GetOrCreateTrailTraceIdentifier() *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier {
	if t.TrailTraceIdentifier != nil {
		return t.TrailTraceIdentifier
	}
	t.TrailTraceIdentifier = &NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier{}
	return t.TrailTraceIdentifier
}

// GetTrailTraceIdentifier returns the value of the TrailTraceIdentifier struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring. If the receiver or the field TrailTraceIdentifier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring) GetTrailTraceIdentifier() *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier {
	if t != nil && t.TrailTraceIdentifier != nil {
		return t.TrailTraceIdentifier
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TrailTraceIdentifier.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier represents the /nokia-conf/configure/groups/group/port/otu/section-monitoring/trail-trace-identifier YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier struct {
	Expected         *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected `path:"expected" module:"nokia-conf"`
	MismatchReaction E_NokiaTypesPort_OtuTimReaction                                                            `path:"mismatch-reaction" module:"nokia-conf"`
	Transmit         *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit `path:"transmit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier) IsYANGGoStruct() {
}

// GetOrCreateExpected retrieves the value of the Expected field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier) GetOrCreateExpected() *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected {
	if t.Expected != nil {
		return t.Expected
	}
	t.Expected = &NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected{}
	return t.Expected
}

// GetOrCreateTransmit retrieves the value of the Transmit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier) GetOrCreateTransmit() *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit {
	if t.Transmit != nil {
		return t.Transmit
	}
	t.Transmit = &NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit{}
	return t.Transmit
}

// GetExpected returns the value of the Expected struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier. If the receiver or the field Expected is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier) GetExpected() *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected {
	if t != nil && t.Expected != nil {
		return t.Expected
	}
	return nil
}

// GetTransmit returns the value of the Transmit struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier. If the receiver or the field Transmit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier) GetTransmit() *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit {
	if t != nil && t.Transmit != nil {
		return t.Transmit
	}
	return nil
}

// GetMismatchReaction retrieves the value of the leaf MismatchReaction from the NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MismatchReaction is set, it can
// safely use t.GetMismatchReaction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MismatchReaction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier) GetMismatchReaction() E_NokiaTypesPort_OtuTimReaction {
	if t == nil || t.MismatchReaction == 0 {
		return 0
	}
	return t.MismatchReaction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Expected.PopulateDefaults()
	t.Transmit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected represents the /nokia-conf/configure/groups/group/port/otu/section-monitoring/trail-trace-identifier/expected YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected struct {
	AutoGenerated YANGEmpty `path:"auto-generated" module:"nokia-conf"`
	Bytes         *string   `path:"bytes" module:"nokia-conf"`
	String        *string   `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected) IsYANGGoStruct() {
}

// GetAutoGenerated retrieves the value of the leaf AutoGenerated from the NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoGenerated is set, it can
// safely use t.GetAutoGenerated() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoGenerated == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected) GetAutoGenerated() YANGEmpty {
	if t == nil || t.AutoGenerated == false {
		return false
	}
	return t.AutoGenerated
}

// GetBytes retrieves the value of the leaf Bytes from the NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bytes is set, it can
// safely use t.GetBytes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bytes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected) GetBytes() string {
	if t == nil || t.Bytes == nil {
		return ""
	}
	return *t.Bytes
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit represents the /nokia-conf/configure/groups/group/port/otu/section-monitoring/trail-trace-identifier/transmit YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit struct {
	AutoGenerated YANGEmpty `path:"auto-generated" module:"nokia-conf"`
	Bytes         *string   `path:"bytes" module:"nokia-conf"`
	String        *string   `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit) IsYANGGoStruct() {
}

// GetAutoGenerated retrieves the value of the leaf AutoGenerated from the NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoGenerated is set, it can
// safely use t.GetAutoGenerated() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoGenerated == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit) GetAutoGenerated() YANGEmpty {
	if t == nil || t.AutoGenerated == false {
		return false
	}
	return t.AutoGenerated
}

// GetBytes retrieves the value of the leaf Bytes from the NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bytes is set, it can
// safely use t.GetBytes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bytes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit) GetBytes() string {
	if t == nil || t.Bytes == nil {
		return ""
	}
	return *t.Bytes
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit.
func (*NokiaConf_Configure_Groups_Group_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_SonetSdh represents the /nokia-conf/configure/groups/group/port/sonet-sdh YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_SonetSdh struct {
	ClockSource            E_NokiaConf_Configure_Groups_Group_Port_SonetSdh_ClockSource     `path:"clock-source" module:"nokia-conf"`
	Framing                E_NokiaConf_Configure_Groups_Group_Port_SonetSdh_Framing         `path:"framing" module:"nokia-conf"`
	Group                  map[string]*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group `path:"group" module:"nokia-conf"`
	HoldTime               *NokiaConf_Configure_Groups_Group_Port_SonetSdh_HoldTime         `path:"hold-time" module:"nokia-conf"`
	Loopback               E_NokiaConf_Configure_Groups_Group_Port_SonetSdh_Loopback        `path:"loopback" module:"nokia-conf"`
	Path                   map[string]*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path  `path:"path" module:"nokia-conf"`
	ReportAlarm            *NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm      `path:"report-alarm" module:"nokia-conf"`
	ResetPortOnPathDown    *bool                                                            `path:"reset-port-on-path-down" module:"nokia-conf"`
	SdThreshold            *uint32                                                          `path:"sd-threshold" module:"nokia-conf"`
	SectionTrace           *NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace     `path:"section-trace" module:"nokia-conf"`
	SfThreshold            *uint32                                                          `path:"sf-threshold" module:"nokia-conf"`
	SingleFiber            *bool                                                            `path:"single-fiber" module:"nokia-conf"`
	Speed                  E_NokiaConf_Configure_Groups_Group_Port_SonetSdh_Speed           `path:"speed" module:"nokia-conf"`
	SuppressLowOrderAlarms *bool                                                            `path:"suppress-low-order-alarms" module:"nokia-conf"`
	TxDus                  *bool                                                            `path:"tx-dus" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_SonetSdh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Port_SonetSdh struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) NewGroup(GroupIndex string) (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group)
	}

	key := GroupIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group{
		GroupIndex: &GroupIndex,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Port_SonetSdh struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupIndex = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_SonetSdh. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) GetOrCreateGroup(GroupIndex string) *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group {

	key := GroupIndex

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Port_SonetSdh. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) GetGroup(GroupIndex string) *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group {

	if t == nil {
		return nil
	}

	key := GroupIndex

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_SonetSdh. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) DeleteGroup(GroupIndex string) {
	key := GroupIndex

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Port_SonetSdh. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) AppendGroup(v *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group) error {
	if v.GroupIndex == nil {
		return fmt.Errorf("invalid nil key received for GroupIndex")
	}

	key := *v.GroupIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewPath creates a new entry in the Path list of the
// NokiaConf_Configure_Groups_Group_Port_SonetSdh struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) NewPath(PathIndex string) (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[string]*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path)
	}

	key := PathIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Path[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Path", key)
	}

	t.Path[key] = &NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path{
		PathIndex: &PathIndex,
	}

	return t.Path[key], nil
}

// RenamePath renames an entry in the list Path within
// the NokiaConf_Configure_Groups_Group_Port_SonetSdh struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) RenamePath(oldK, newK string) error {
	if _, ok := t.Path[newK]; ok {
		return fmt.Errorf("key %v already exists in Path", newK)
	}

	e, ok := t.Path[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Path", oldK)
	}
	e.PathIndex = &newK

	t.Path[newK] = e
	delete(t.Path, oldK)
	return nil
}

// GetOrCreatePath retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_SonetSdh. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) GetOrCreatePath(PathIndex string) *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path {

	key := PathIndex

	if v, ok := t.Path[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPath(PathIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePath got unexpected error: %v", err))
	}
	return v
}

// GetPath retrieves the value with the specified key from
// the Path map field of NokiaConf_Configure_Groups_Group_Port_SonetSdh. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) GetPath(PathIndex string) *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path {

	if t == nil {
		return nil
	}

	key := PathIndex

	if lm, ok := t.Path[key]; ok {
		return lm
	}
	return nil
}

// DeletePath deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_SonetSdh. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) DeletePath(PathIndex string) {
	key := PathIndex

	delete(t.Path, key)
}

// AppendPath appends the supplied NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path struct to the
// list Path of NokiaConf_Configure_Groups_Group_Port_SonetSdh. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) AppendPath(v *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) error {
	if v.PathIndex == nil {
		return fmt.Errorf("invalid nil key received for PathIndex")
	}

	key := *v.PathIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[string]*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path)
	}

	if _, ok := t.Path[key]; ok {
		return fmt.Errorf("duplicate key for list Path %v", key)
	}

	t.Path[key] = v
	return nil
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) GetOrCreateHoldTime() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Groups_Group_Port_SonetSdh_HoldTime{}
	return t.HoldTime
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) GetOrCreateReportAlarm() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm{}
	return t.ReportAlarm
}

// GetOrCreateSectionTrace retrieves the value of the SectionTrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) GetOrCreateSectionTrace() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace {
	if t.SectionTrace != nil {
		return t.SectionTrace
	}
	t.SectionTrace = &NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace{}
	return t.SectionTrace
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Groups_Group_Port_SonetSdh. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) GetHoldTime() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Groups_Group_Port_SonetSdh. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) GetReportAlarm() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetSectionTrace returns the value of the SectionTrace struct pointer
// from NokiaConf_Configure_Groups_Group_Port_SonetSdh. If the receiver or the field SectionTrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) GetSectionTrace() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace {
	if t != nil && t.SectionTrace != nil {
		return t.SectionTrace
	}
	return nil
}

// GetClockSource retrieves the value of the leaf ClockSource from the NokiaConf_Configure_Groups_Group_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClockSource is set, it can
// safely use t.GetClockSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClockSource == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) GetClockSource() E_NokiaConf_Configure_Groups_Group_Port_SonetSdh_ClockSource {
	if t == nil || t.ClockSource == 0 {
		return 0
	}
	return t.ClockSource
}

// GetFraming retrieves the value of the leaf Framing from the NokiaConf_Configure_Groups_Group_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Framing is set, it can
// safely use t.GetFraming() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Framing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) GetFraming() E_NokiaConf_Configure_Groups_Group_Port_SonetSdh_Framing {
	if t == nil || t.Framing == 0 {
		return NokiaConf_Configure_Groups_Group_Port_SonetSdh_Framing_sonet
	}
	return t.Framing
}

// GetLoopback retrieves the value of the leaf Loopback from the NokiaConf_Configure_Groups_Group_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loopback is set, it can
// safely use t.GetLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) GetLoopback() E_NokiaConf_Configure_Groups_Group_Port_SonetSdh_Loopback {
	if t == nil || t.Loopback == 0 {
		return 0
	}
	return t.Loopback
}

// GetResetPortOnPathDown retrieves the value of the leaf ResetPortOnPathDown from the NokiaConf_Configure_Groups_Group_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResetPortOnPathDown is set, it can
// safely use t.GetResetPortOnPathDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResetPortOnPathDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) GetResetPortOnPathDown() bool {
	if t == nil || t.ResetPortOnPathDown == nil {
		return false
	}
	return *t.ResetPortOnPathDown
}

// GetSdThreshold retrieves the value of the leaf SdThreshold from the NokiaConf_Configure_Groups_Group_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdThreshold is set, it can
// safely use t.GetSdThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) GetSdThreshold() uint32 {
	if t == nil || t.SdThreshold == nil {
		return 6
	}
	return *t.SdThreshold
}

// GetSfThreshold retrieves the value of the leaf SfThreshold from the NokiaConf_Configure_Groups_Group_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfThreshold is set, it can
// safely use t.GetSfThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) GetSfThreshold() uint32 {
	if t == nil || t.SfThreshold == nil {
		return 3
	}
	return *t.SfThreshold
}

// GetSingleFiber retrieves the value of the leaf SingleFiber from the NokiaConf_Configure_Groups_Group_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SingleFiber is set, it can
// safely use t.GetSingleFiber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SingleFiber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) GetSingleFiber() bool {
	if t == nil || t.SingleFiber == nil {
		return false
	}
	return *t.SingleFiber
}

// GetSpeed retrieves the value of the leaf Speed from the NokiaConf_Configure_Groups_Group_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Speed is set, it can
// safely use t.GetSpeed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Speed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) GetSpeed() E_NokiaConf_Configure_Groups_Group_Port_SonetSdh_Speed {
	if t == nil || t.Speed == 0 {
		return 0
	}
	return t.Speed
}

// GetSuppressLowOrderAlarms retrieves the value of the leaf SuppressLowOrderAlarms from the NokiaConf_Configure_Groups_Group_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressLowOrderAlarms is set, it can
// safely use t.GetSuppressLowOrderAlarms() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressLowOrderAlarms == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) GetSuppressLowOrderAlarms() bool {
	if t == nil || t.SuppressLowOrderAlarms == nil {
		return false
	}
	return *t.SuppressLowOrderAlarms
}

// GetTxDus retrieves the value of the leaf TxDus from the NokiaConf_Configure_Groups_Group_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxDus is set, it can
// safely use t.GetTxDus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxDus == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) GetTxDus() bool {
	if t == nil || t.TxDus == nil {
		return false
	}
	return *t.TxDus
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_SonetSdh
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Framing == 0 {
		t.Framing = NokiaConf_Configure_Groups_Group_Port_SonetSdh_Framing_sonet
	}
	if t.ResetPortOnPathDown == nil {
		var v bool = false
		t.ResetPortOnPathDown = &v
	}
	if t.SdThreshold == nil {
		var v uint32 = 6
		t.SdThreshold = &v
	}
	if t.SfThreshold == nil {
		var v uint32 = 3
		t.SfThreshold = &v
	}
	if t.SingleFiber == nil {
		var v bool = false
		t.SingleFiber = &v
	}
	if t.SuppressLowOrderAlarms == nil {
		var v bool = false
		t.SuppressLowOrderAlarms = &v
	}
	if t.TxDus == nil {
		var v bool = false
		t.TxDus = &v
	}
	t.HoldTime.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
	t.SectionTrace.PopulateDefaults()
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.Path {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_SonetSdh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_SonetSdh.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group represents the /nokia-conf/configure/groups/group/port/sonet-sdh/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group struct {
	GroupIndex *string                                `path:"group-index" module:"nokia-conf"`
	Payload    E_NokiaTypesPort_SonetGroupPayloadType `path:"payload" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group) IsYANGGoStruct() {}

// GetGroupIndex retrieves the value of the leaf GroupIndex from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupIndex is set, it can
// safely use t.GetGroupIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group) GetGroupIndex() string {
	if t == nil || t.GroupIndex == nil {
		return ""
	}
	return *t.GroupIndex
}

// GetPayload retrieves the value of the leaf Payload from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Payload is set, it can
// safely use t.GetPayload() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Payload == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group) GetPayload() E_NokiaTypesPort_SonetGroupPayloadType {
	if t == nil || t.Payload == 0 {
		return NokiaTypesPort_SonetGroupPayloadType_tu3
	}
	return t.Payload
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Payload == 0 {
		t.Payload = NokiaTypesPort_SonetGroupPayloadType_tu3
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupIndex == nil {
		return nil, fmt.Errorf("nil value for key GroupIndex")
	}

	return map[string]interface{}{
		"group-index": *t.GroupIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_SonetSdh_HoldTime represents the /nokia-conf/configure/groups/group/port/sonet-sdh/hold-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_SonetSdh_HoldTime struct {
	Down *uint32 `path:"down" module:"nokia-conf"`
	Up   *uint32 `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_SonetSdh_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_HoldTime) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Down is set, it can
// safely use t.GetDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Down == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_HoldTime) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 0
	}
	return *t.Down
}

// GetUp retrieves the value of the leaf Up from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Up is set, it can
// safely use t.GetUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Up == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_HoldTime) GetUp() uint32 {
	if t == nil || t.Up == nil {
		return 5
	}
	return *t.Up
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_SonetSdh_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Up == nil {
		var v uint32 = 5
		t.Up = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_SonetSdh_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_SonetSdh_HoldTime.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path represents the /nokia-conf/configure/groups/group/port/sonet-sdh/path YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path struct {
	AdminState             E_NokiaTypesSros_AdminState                                           `path:"admin-state" module:"nokia-conf"`
	Crc                    *uint32                                                               `path:"crc" module:"nokia-conf"`
	Description            *string                                                               `path:"description" module:"nokia-conf"`
	Egress                 *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress           `path:"egress" module:"nokia-conf"`
	EncapType              E_NokiaTypesPort_SonetPathEncapType                                   `path:"encap-type" module:"nokia-conf"`
	LoadBalancingAlgorithm E_NokiaTypesPort_LoadBalancingAlgorithm                               `path:"load-balancing-algorithm" module:"nokia-conf"`
	MacAddress             *string                                                               `path:"mac-address" module:"nokia-conf"`
	Mode                   E_NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Mode            `path:"mode" module:"nokia-conf"`
	Mtu                    *uint32                                                               `path:"mtu" module:"nokia-conf"`
	Network                *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network          `path:"network" module:"nokia-conf" yangPresence:"true"`
	PathIndex              *string                                                               `path:"path-index" module:"nokia-conf"`
	Payload                E_NokiaTypesPort_SonetPathPayloadType                                 `path:"payload" module:"nokia-conf"`
	Ppp                    *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp              `path:"ppp" module:"nokia-conf" yangPresence:"true"`
	ReportAlarm            *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm      `path:"report-alarm" module:"nokia-conf"`
	Scramble               *bool                                                                 `path:"scramble" module:"nokia-conf"`
	SignalLabel            *string                                                               `path:"signal-label" module:"nokia-conf"`
	TraceString            NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_TraceString_Union `path:"trace-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress{}
	return t.Egress
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network{}
	return t.Network
}

// GetOrCreatePpp retrieves the value of the Ppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetOrCreatePpp() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp {
	if t.Ppp != nil {
		return t.Ppp
	}
	t.Ppp = &NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp{}
	return t.Ppp
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetOrCreateReportAlarm() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm{}
	return t.ReportAlarm
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetEgress() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetNetwork() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetPpp returns the value of the Ppp struct pointer
// from NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path. If the receiver or the field Ppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetPpp() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp {
	if t != nil && t.Ppp != nil {
		return t.Ppp
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetReportAlarm() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCrc retrieves the value of the leaf Crc from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Crc is set, it can
// safely use t.GetCrc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Crc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetCrc() uint32 {
	if t == nil || t.Crc == nil {
		return 0
	}
	return *t.Crc
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEncapType retrieves the value of the leaf EncapType from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapType is set, it can
// safely use t.GetEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetEncapType() E_NokiaTypesPort_SonetPathEncapType {
	if t == nil || t.EncapType == 0 {
		return 0
	}
	return t.EncapType
}

// GetLoadBalancingAlgorithm retrieves the value of the leaf LoadBalancingAlgorithm from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingAlgorithm is set, it can
// safely use t.GetLoadBalancingAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetLoadBalancingAlgorithm() E_NokiaTypesPort_LoadBalancingAlgorithm {
	if t == nil || t.LoadBalancingAlgorithm == 0 {
		return 0
	}
	return t.LoadBalancingAlgorithm
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return "00:00:00:00:00:00"
	}
	return *t.MacAddress
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetMode() E_NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetPathIndex retrieves the value of the leaf PathIndex from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathIndex is set, it can
// safely use t.GetPathIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetPathIndex() string {
	if t == nil || t.PathIndex == nil {
		return ""
	}
	return *t.PathIndex
}

// GetPayload retrieves the value of the leaf Payload from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Payload is set, it can
// safely use t.GetPayload() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Payload == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetPayload() E_NokiaTypesPort_SonetPathPayloadType {
	if t == nil || t.Payload == 0 {
		return 0
	}
	return t.Payload
}

// GetScramble retrieves the value of the leaf Scramble from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scramble is set, it can
// safely use t.GetScramble() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scramble == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetScramble() bool {
	if t == nil || t.Scramble == nil {
		return false
	}
	return *t.Scramble
}

// GetSignalLabel retrieves the value of the leaf SignalLabel from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalLabel is set, it can
// safely use t.GetSignalLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetSignalLabel() string {
	if t == nil || t.SignalLabel == nil {
		return ""
	}
	return *t.SignalLabel
}

// GetTraceString retrieves the value of the leaf TraceString from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TraceString is set, it can
// safely use t.GetTraceString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TraceString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) GetTraceString() NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_TraceString_Union {
	if t == nil || t.TraceString == nil {
		return nil
	}
	return t.TraceString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MacAddress == nil {
		var v string = "00:00:00:00:00:00"
		t.MacAddress = &v
	}
	t.Egress.PopulateDefaults()
	t.Network.PopulateDefaults()
	t.Ppp.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathIndex == nil {
		return nil, fmt.Errorf("nil value for key PathIndex")
	}

	return map[string]interface{}{
		"path-index": *t.PathIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress represents the /nokia-conf/configure/groups/group/port/sonet-sdh/path/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress struct {
	PortSchedulerPolicy *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy `path:"port-scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress) IsYANGGoStruct() {}

// GetOrCreatePortSchedulerPolicy retrieves the value of the PortSchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress) GetOrCreatePortSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy {
	if t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	t.PortSchedulerPolicy = &NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy{}
	return t.PortSchedulerPolicy
}

// GetPortSchedulerPolicy returns the value of the PortSchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress. If the receiver or the field PortSchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress) GetPortSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy {
	if t != nil && t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortSchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy represents the /nokia-conf/configure/groups/group/port/sonet-sdh/path/egress/port-scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                                   `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/port/sonet-sdh/path/egress/port-scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides struct {
	Level   map[NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level `path:"level" module:"nokia-conf"`
	MaxRate *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate                                                                                                                      `path:"max-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) NewLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level{
		PriorityLevel: PriorityLevel,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.PriorityLevel = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) GetOrCreateLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level {

	key := PriorityLevel

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) GetLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) DeleteLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) {
	key := PriorityLevel

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) AppendLevel(v *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) error {
	key := v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateMaxRate retrieves the value of the MaxRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) GetOrCreateMaxRate() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t.MaxRate != nil {
		return t.MaxRate
	}
	t.MaxRate = &NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate{}
	return t.MaxRate
}

// GetMaxRate returns the value of the MaxRate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides. If the receiver or the field MaxRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) GetMaxRate() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t != nil && t.MaxRate != nil {
		return t.MaxRate
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MaxRate.PopulateDefaults()
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level represents the /nokia-conf/configure/groups/group/port/sonet-sdh/path/egress/port-scheduler-policy/overrides/level YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level struct {
	PercentRate   *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate        `path:"percent-rate" module:"nokia-conf"`
	PriorityLevel NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union `path:"priority-level" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate               `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) GetPercentRate() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) GetRate() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) GetPriorityLevel() NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union {
	if t == nil || t.PriorityLevel == nil {
		return nil
	}
	return t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"priority-level": t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate represents the /nokia-conf/configure/groups/group/port/sonet-sdh/path/egress/port-scheduler-policy/overrides/level/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 100
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 100
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 100
		t.Cir = &v
	}
	if t.Pir == nil {
		var v float64 = 100
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate represents the /nokia-conf/configure/groups/group/port/sonet-sdh/path/egress/port-scheduler-policy/overrides/level/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetCir() NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_SchedulerCirRate_Enum_max
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetPir() NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_SchedulerCirRate_Enum_max
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate represents the /nokia-conf/configure/groups/group/port/sonet-sdh/path/egress/port-scheduler-policy/overrides/max-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate struct {
	PercentRate *float64                                                                                                    `path:"percent-rate" module:"nokia-conf"`
	Rate        NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate) IsYANGGoStruct() {
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 100
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetRate() NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentRate == nil {
		var v float64 = 100
		t.PercentRate = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network represents the /nokia-conf/configure/groups/group/port/sonet-sdh/path/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network struct {
	AccountingPolicy *uint32 `path:"accounting-policy" module:"nokia-conf"`
	CollectStats     *bool   `path:"collect-stats" module:"nokia-conf"`
	QueuePolicy      *string `path:"queue-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network) IsYANGGoStruct() {}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetQueuePolicy retrieves the value of the leaf QueuePolicy from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuePolicy is set, it can
// safely use t.GetQueuePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network) GetQueuePolicy() string {
	if t == nil || t.QueuePolicy == nil {
		return ""
	}
	return *t.QueuePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp represents the /nokia-conf/configure/groups/group/port/sonet-sdh/path/ppp YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp struct {
	Keepalive *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive `path:"keepalive" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp) IsYANGGoStruct() {}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp) GetOrCreateKeepalive() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive{}
	return t.Keepalive
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp) GetKeepalive() *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Keepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive represents the /nokia-conf/configure/groups/group/port/sonet-sdh/path/ppp/keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive struct {
	DropCount *uint32                                                                          `path:"drop-count" module:"nokia-conf"`
	Interval  NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive_Interval_Union `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive) IsYANGGoStruct() {}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive) GetInterval() NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive_Interval_Union {
	if t == nil || t.Interval == nil {
		return UnionUint32(10)
	}
	return t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.Interval == nil {
		t.Interval = UnionUint32(10)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_Ppp_Keepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm represents the /nokia-conf/configure/groups/group/port/sonet-sdh/path/report-alarm YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm struct {
	Pais  *bool `path:"pais" module:"nokia-conf"`
	Plcd  *bool `path:"plcd" module:"nokia-conf"`
	Plop  *bool `path:"plop" module:"nokia-conf"`
	Pplm  *bool `path:"pplm" module:"nokia-conf"`
	Prdi  *bool `path:"prdi" module:"nokia-conf"`
	Prei  *bool `path:"prei" module:"nokia-conf"`
	Puneq *bool `path:"puneq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm) IsYANGGoStruct() {}

// GetPais retrieves the value of the leaf Pais from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pais is set, it can
// safely use t.GetPais() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm) GetPais() bool {
	if t == nil || t.Pais == nil {
		return false
	}
	return *t.Pais
}

// GetPlcd retrieves the value of the leaf Plcd from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Plcd is set, it can
// safely use t.GetPlcd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Plcd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm) GetPlcd() bool {
	if t == nil || t.Plcd == nil {
		return false
	}
	return *t.Plcd
}

// GetPlop retrieves the value of the leaf Plop from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Plop is set, it can
// safely use t.GetPlop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Plop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm) GetPlop() bool {
	if t == nil || t.Plop == nil {
		return true
	}
	return *t.Plop
}

// GetPplm retrieves the value of the leaf Pplm from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pplm is set, it can
// safely use t.GetPplm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pplm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm) GetPplm() bool {
	if t == nil || t.Pplm == nil {
		return true
	}
	return *t.Pplm
}

// GetPrdi retrieves the value of the leaf Prdi from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prdi is set, it can
// safely use t.GetPrdi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prdi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm) GetPrdi() bool {
	if t == nil || t.Prdi == nil {
		return false
	}
	return *t.Prdi
}

// GetPrei retrieves the value of the leaf Prei from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prei is set, it can
// safely use t.GetPrei() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prei == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm) GetPrei() bool {
	if t == nil || t.Prei == nil {
		return false
	}
	return *t.Prei
}

// GetPuneq retrieves the value of the leaf Puneq from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Puneq is set, it can
// safely use t.GetPuneq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Puneq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm) GetPuneq() bool {
	if t == nil || t.Puneq == nil {
		return true
	}
	return *t.Puneq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pais == nil {
		var v bool = false
		t.Pais = &v
	}
	if t.Plcd == nil {
		var v bool = false
		t.Plcd = &v
	}
	if t.Plop == nil {
		var v bool = true
		t.Plop = &v
	}
	if t.Pplm == nil {
		var v bool = true
		t.Pplm = &v
	}
	if t.Prdi == nil {
		var v bool = false
		t.Prdi = &v
	}
	if t.Prei == nil {
		var v bool = false
		t.Prei = &v
	}
	if t.Puneq == nil {
		var v bool = true
		t.Puneq = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_Path_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm represents the /nokia-conf/configure/groups/group/port/sonet-sdh/report-alarm YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm struct {
	Lais    *bool `path:"lais" module:"nokia-conf"`
	Lb2ErSd *bool `path:"lb2er-sd" module:"nokia-conf"`
	Lb2ErSf *bool `path:"lb2er-sf" module:"nokia-conf"`
	Loc     *bool `path:"loc" module:"nokia-conf"`
	Lrdi    *bool `path:"lrdi" module:"nokia-conf"`
	Lrei    *bool `path:"lrei" module:"nokia-conf"`
	Slof    *bool `path:"slof" module:"nokia-conf"`
	Slos    *bool `path:"slos" module:"nokia-conf"`
	Ss1F    *bool `path:"ss1f" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm) IsYANGGoStruct() {}

// GetLais retrieves the value of the leaf Lais from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lais is set, it can
// safely use t.GetLais() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm) GetLais() bool {
	if t == nil || t.Lais == nil {
		return false
	}
	return *t.Lais
}

// GetLb2ErSd retrieves the value of the leaf Lb2ErSd from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lb2ErSd is set, it can
// safely use t.GetLb2ErSd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lb2ErSd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm) GetLb2ErSd() bool {
	if t == nil || t.Lb2ErSd == nil {
		return false
	}
	return *t.Lb2ErSd
}

// GetLb2ErSf retrieves the value of the leaf Lb2ErSf from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lb2ErSf is set, it can
// safely use t.GetLb2ErSf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lb2ErSf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm) GetLb2ErSf() bool {
	if t == nil || t.Lb2ErSf == nil {
		return true
	}
	return *t.Lb2ErSf
}

// GetLoc retrieves the value of the leaf Loc from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loc is set, it can
// safely use t.GetLoc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm) GetLoc() bool {
	if t == nil || t.Loc == nil {
		return true
	}
	return *t.Loc
}

// GetLrdi retrieves the value of the leaf Lrdi from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lrdi is set, it can
// safely use t.GetLrdi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lrdi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm) GetLrdi() bool {
	if t == nil || t.Lrdi == nil {
		return true
	}
	return *t.Lrdi
}

// GetLrei retrieves the value of the leaf Lrei from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lrei is set, it can
// safely use t.GetLrei() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lrei == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm) GetLrei() bool {
	if t == nil || t.Lrei == nil {
		return false
	}
	return *t.Lrei
}

// GetSlof retrieves the value of the leaf Slof from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Slof is set, it can
// safely use t.GetSlof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Slof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm) GetSlof() bool {
	if t == nil || t.Slof == nil {
		return true
	}
	return *t.Slof
}

// GetSlos retrieves the value of the leaf Slos from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Slos is set, it can
// safely use t.GetSlos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Slos == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm) GetSlos() bool {
	if t == nil || t.Slos == nil {
		return true
	}
	return *t.Slos
}

// GetSs1F retrieves the value of the leaf Ss1F from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ss1F is set, it can
// safely use t.GetSs1F() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ss1F == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm) GetSs1F() bool {
	if t == nil || t.Ss1F == nil {
		return false
	}
	return *t.Ss1F
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Lais == nil {
		var v bool = false
		t.Lais = &v
	}
	if t.Lb2ErSd == nil {
		var v bool = false
		t.Lb2ErSd = &v
	}
	if t.Lb2ErSf == nil {
		var v bool = true
		t.Lb2ErSf = &v
	}
	if t.Loc == nil {
		var v bool = true
		t.Loc = &v
	}
	if t.Lrdi == nil {
		var v bool = true
		t.Lrdi = &v
	}
	if t.Lrei == nil {
		var v bool = false
		t.Lrei = &v
	}
	if t.Slof == nil {
		var v bool = true
		t.Slof = &v
	}
	if t.Slos == nil {
		var v bool = true
		t.Slos = &v
	}
	if t.Ss1F == nil {
		var v bool = false
		t.Ss1F = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace represents the /nokia-conf/configure/groups/group/port/sonet-sdh/section-trace YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace struct {
	Byte        *string   `path:"byte" module:"nokia-conf"`
	IncrementZ0 YANGEmpty `path:"increment-z0" module:"nokia-conf"`
	String      *string   `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace) IsYANGGoStruct() {}

// GetByte retrieves the value of the leaf Byte from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Byte is set, it can
// safely use t.GetByte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Byte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace) GetByte() string {
	if t == nil || t.Byte == nil {
		return "1"
	}
	return *t.Byte
}

// GetIncrementZ0 retrieves the value of the leaf IncrementZ0 from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncrementZ0 is set, it can
// safely use t.GetIncrementZ0() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncrementZ0 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace) GetIncrementZ0() YANGEmpty {
	if t == nil || t.IncrementZ0 == false {
		return false
	}
	return t.IncrementZ0
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Byte == nil {
		var v string = "1"
		t.Byte = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace.
func (*NokiaConf_Configure_Groups_Group_Port_SonetSdh_SectionTrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm represents the /nokia-conf/configure/groups/group/port/tdm YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm struct {
	Buildout      E_NokiaConf_Configure_Groups_Group_Port_Tdm_Buildout      `path:"buildout" module:"nokia-conf"`
	Ds1           map[string]*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1 `path:"ds1" module:"nokia-conf"`
	Ds3           map[string]*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3 `path:"ds3" module:"nokia-conf"`
	E1            map[string]*NokiaConf_Configure_Groups_Group_Port_Tdm_E1  `path:"e1" module:"nokia-conf"`
	E3            map[string]*NokiaConf_Configure_Groups_Group_Port_Tdm_E3  `path:"e3" module:"nokia-conf"`
	Encoding      E_NokiaConf_Configure_Groups_Group_Port_Tdm_Encoding      `path:"encoding" module:"nokia-conf"`
	HoldTime      *NokiaConf_Configure_Groups_Group_Port_Tdm_HoldTime       `path:"hold-time" module:"nokia-conf"`
	LineImpedance *uint32                                                   `path:"line-impedance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm) IsYANGGoStruct() {}

// NewDs1 creates a new entry in the Ds1 list of the
// NokiaConf_Configure_Groups_Group_Port_Tdm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) NewDs1(Ds1Index string) (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ds1 == nil {
		t.Ds1 = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1)
	}

	key := Ds1Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ds1[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ds1", key)
	}

	t.Ds1[key] = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1{
		Ds1Index: &Ds1Index,
	}

	return t.Ds1[key], nil
}

// RenameDs1 renames an entry in the list Ds1 within
// the NokiaConf_Configure_Groups_Group_Port_Tdm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) RenameDs1(oldK, newK string) error {
	if _, ok := t.Ds1[newK]; ok {
		return fmt.Errorf("key %v already exists in Ds1", newK)
	}

	e, ok := t.Ds1[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ds1", oldK)
	}
	e.Ds1Index = &newK

	t.Ds1[newK] = e
	delete(t.Ds1, oldK)
	return nil
}

// GetOrCreateDs1 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Tdm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) GetOrCreateDs1(Ds1Index string) *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1 {

	key := Ds1Index

	if v, ok := t.Ds1[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDs1(Ds1Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDs1 got unexpected error: %v", err))
	}
	return v
}

// GetDs1 retrieves the value with the specified key from
// the Ds1 map field of NokiaConf_Configure_Groups_Group_Port_Tdm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) GetDs1(Ds1Index string) *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1 {

	if t == nil {
		return nil
	}

	key := Ds1Index

	if lm, ok := t.Ds1[key]; ok {
		return lm
	}
	return nil
}

// DeleteDs1 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Tdm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) DeleteDs1(Ds1Index string) {
	key := Ds1Index

	delete(t.Ds1, key)
}

// AppendDs1 appends the supplied NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1 struct to the
// list Ds1 of NokiaConf_Configure_Groups_Group_Port_Tdm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) AppendDs1(v *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) error {
	if v.Ds1Index == nil {
		return fmt.Errorf("invalid nil key received for Ds1Index")
	}

	key := *v.Ds1Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ds1 == nil {
		t.Ds1 = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1)
	}

	if _, ok := t.Ds1[key]; ok {
		return fmt.Errorf("duplicate key for list Ds1 %v", key)
	}

	t.Ds1[key] = v
	return nil
}

// NewDs3 creates a new entry in the Ds3 list of the
// NokiaConf_Configure_Groups_Group_Port_Tdm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) NewDs3(Ds3Index string) (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ds3 == nil {
		t.Ds3 = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3)
	}

	key := Ds3Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ds3[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ds3", key)
	}

	t.Ds3[key] = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3{
		Ds3Index: &Ds3Index,
	}

	return t.Ds3[key], nil
}

// RenameDs3 renames an entry in the list Ds3 within
// the NokiaConf_Configure_Groups_Group_Port_Tdm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) RenameDs3(oldK, newK string) error {
	if _, ok := t.Ds3[newK]; ok {
		return fmt.Errorf("key %v already exists in Ds3", newK)
	}

	e, ok := t.Ds3[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ds3", oldK)
	}
	e.Ds3Index = &newK

	t.Ds3[newK] = e
	delete(t.Ds3, oldK)
	return nil
}

// GetOrCreateDs3 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Tdm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) GetOrCreateDs3(Ds3Index string) *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3 {

	key := Ds3Index

	if v, ok := t.Ds3[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDs3(Ds3Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDs3 got unexpected error: %v", err))
	}
	return v
}

// GetDs3 retrieves the value with the specified key from
// the Ds3 map field of NokiaConf_Configure_Groups_Group_Port_Tdm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) GetDs3(Ds3Index string) *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3 {

	if t == nil {
		return nil
	}

	key := Ds3Index

	if lm, ok := t.Ds3[key]; ok {
		return lm
	}
	return nil
}

// DeleteDs3 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Tdm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) DeleteDs3(Ds3Index string) {
	key := Ds3Index

	delete(t.Ds3, key)
}

// AppendDs3 appends the supplied NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3 struct to the
// list Ds3 of NokiaConf_Configure_Groups_Group_Port_Tdm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) AppendDs3(v *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) error {
	if v.Ds3Index == nil {
		return fmt.Errorf("invalid nil key received for Ds3Index")
	}

	key := *v.Ds3Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ds3 == nil {
		t.Ds3 = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3)
	}

	if _, ok := t.Ds3[key]; ok {
		return fmt.Errorf("duplicate key for list Ds3 %v", key)
	}

	t.Ds3[key] = v
	return nil
}

// NewE1 creates a new entry in the E1 list of the
// NokiaConf_Configure_Groups_Group_Port_Tdm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) NewE1(E1Index string) (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.E1 == nil {
		t.E1 = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Tdm_E1)
	}

	key := E1Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.E1[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list E1", key)
	}

	t.E1[key] = &NokiaConf_Configure_Groups_Group_Port_Tdm_E1{
		E1Index: &E1Index,
	}

	return t.E1[key], nil
}

// RenameE1 renames an entry in the list E1 within
// the NokiaConf_Configure_Groups_Group_Port_Tdm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) RenameE1(oldK, newK string) error {
	if _, ok := t.E1[newK]; ok {
		return fmt.Errorf("key %v already exists in E1", newK)
	}

	e, ok := t.E1[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in E1", oldK)
	}
	e.E1Index = &newK

	t.E1[newK] = e
	delete(t.E1, oldK)
	return nil
}

// GetOrCreateE1 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Tdm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) GetOrCreateE1(E1Index string) *NokiaConf_Configure_Groups_Group_Port_Tdm_E1 {

	key := E1Index

	if v, ok := t.E1[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewE1(E1Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateE1 got unexpected error: %v", err))
	}
	return v
}

// GetE1 retrieves the value with the specified key from
// the E1 map field of NokiaConf_Configure_Groups_Group_Port_Tdm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) GetE1(E1Index string) *NokiaConf_Configure_Groups_Group_Port_Tdm_E1 {

	if t == nil {
		return nil
	}

	key := E1Index

	if lm, ok := t.E1[key]; ok {
		return lm
	}
	return nil
}

// DeleteE1 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Tdm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) DeleteE1(E1Index string) {
	key := E1Index

	delete(t.E1, key)
}

// AppendE1 appends the supplied NokiaConf_Configure_Groups_Group_Port_Tdm_E1 struct to the
// list E1 of NokiaConf_Configure_Groups_Group_Port_Tdm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Tdm_E1 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) AppendE1(v *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) error {
	if v.E1Index == nil {
		return fmt.Errorf("invalid nil key received for E1Index")
	}

	key := *v.E1Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.E1 == nil {
		t.E1 = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Tdm_E1)
	}

	if _, ok := t.E1[key]; ok {
		return fmt.Errorf("duplicate key for list E1 %v", key)
	}

	t.E1[key] = v
	return nil
}

// NewE3 creates a new entry in the E3 list of the
// NokiaConf_Configure_Groups_Group_Port_Tdm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) NewE3(E3Index string) (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.E3 == nil {
		t.E3 = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Tdm_E3)
	}

	key := E3Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.E3[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list E3", key)
	}

	t.E3[key] = &NokiaConf_Configure_Groups_Group_Port_Tdm_E3{
		E3Index: &E3Index,
	}

	return t.E3[key], nil
}

// RenameE3 renames an entry in the list E3 within
// the NokiaConf_Configure_Groups_Group_Port_Tdm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) RenameE3(oldK, newK string) error {
	if _, ok := t.E3[newK]; ok {
		return fmt.Errorf("key %v already exists in E3", newK)
	}

	e, ok := t.E3[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in E3", oldK)
	}
	e.E3Index = &newK

	t.E3[newK] = e
	delete(t.E3, oldK)
	return nil
}

// GetOrCreateE3 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Tdm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) GetOrCreateE3(E3Index string) *NokiaConf_Configure_Groups_Group_Port_Tdm_E3 {

	key := E3Index

	if v, ok := t.E3[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewE3(E3Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateE3 got unexpected error: %v", err))
	}
	return v
}

// GetE3 retrieves the value with the specified key from
// the E3 map field of NokiaConf_Configure_Groups_Group_Port_Tdm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) GetE3(E3Index string) *NokiaConf_Configure_Groups_Group_Port_Tdm_E3 {

	if t == nil {
		return nil
	}

	key := E3Index

	if lm, ok := t.E3[key]; ok {
		return lm
	}
	return nil
}

// DeleteE3 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Tdm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) DeleteE3(E3Index string) {
	key := E3Index

	delete(t.E3, key)
}

// AppendE3 appends the supplied NokiaConf_Configure_Groups_Group_Port_Tdm_E3 struct to the
// list E3 of NokiaConf_Configure_Groups_Group_Port_Tdm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Tdm_E3 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) AppendE3(v *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) error {
	if v.E3Index == nil {
		return fmt.Errorf("invalid nil key received for E3Index")
	}

	key := *v.E3Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.E3 == nil {
		t.E3 = make(map[string]*NokiaConf_Configure_Groups_Group_Port_Tdm_E3)
	}

	if _, ok := t.E3[key]; ok {
		return fmt.Errorf("duplicate key for list E3 %v", key)
	}

	t.E3[key] = v
	return nil
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) GetOrCreateHoldTime() *NokiaConf_Configure_Groups_Group_Port_Tdm_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Groups_Group_Port_Tdm_HoldTime{}
	return t.HoldTime
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) GetHoldTime() *NokiaConf_Configure_Groups_Group_Port_Tdm_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetBuildout retrieves the value of the leaf Buildout from the NokiaConf_Configure_Groups_Group_Port_Tdm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Buildout is set, it can
// safely use t.GetBuildout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Buildout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) GetBuildout() E_NokiaConf_Configure_Groups_Group_Port_Tdm_Buildout {
	if t == nil || t.Buildout == 0 {
		return NokiaConf_Configure_Groups_Group_Port_Tdm_Buildout_short
	}
	return t.Buildout
}

// GetEncoding retrieves the value of the leaf Encoding from the NokiaConf_Configure_Groups_Group_Port_Tdm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encoding is set, it can
// safely use t.GetEncoding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encoding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) GetEncoding() E_NokiaConf_Configure_Groups_Group_Port_Tdm_Encoding {
	if t == nil || t.Encoding == 0 {
		return 0
	}
	return t.Encoding
}

// GetLineImpedance retrieves the value of the leaf LineImpedance from the NokiaConf_Configure_Groups_Group_Port_Tdm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LineImpedance is set, it can
// safely use t.GetLineImpedance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LineImpedance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) GetLineImpedance() uint32 {
	if t == nil || t.LineImpedance == nil {
		return 0
	}
	return *t.LineImpedance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Buildout == 0 {
		t.Buildout = NokiaConf_Configure_Groups_Group_Port_Tdm_Buildout_short
	}
	t.HoldTime.PopulateDefaults()
	for _, e := range t.Ds1 {
		e.PopulateDefaults()
	}
	for _, e := range t.Ds3 {
		e.PopulateDefaults()
	}
	for _, e := range t.E1 {
		e.PopulateDefaults()
	}
	for _, e := range t.E3 {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1 represents the /nokia-conf/configure/groups/group/port/tdm/ds1 YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1 struct {
	AdminState        E_NokiaTypesSros_AdminState                                                                                                               `path:"admin-state" module:"nokia-conf"`
	BerThreshold      *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_BerThreshold                                                                               `path:"ber-threshold" module:"nokia-conf"`
	ChannelGroup      map[NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ds0Index_Union]*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup `path:"channel-group" module:"nokia-conf"`
	ClockSource       E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ClockSource                                                                               `path:"clock-source" module:"nokia-conf"`
	Ds1Index          *string                                                                                                                                   `path:"ds1-index" module:"nokia-conf"`
	Framing           E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_Framing                                                                                   `path:"framing" module:"nokia-conf"`
	HoldTime          *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_HoldTime                                                                                   `path:"hold-time" module:"nokia-conf"`
	Loopback          E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_Loopback                                                                                  `path:"loopback" module:"nokia-conf"`
	RemoteLoopRespond *bool                                                                                                                                     `path:"remote-loop-respond" module:"nokia-conf"`
	ReportAlarm       *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm                                                                                `path:"report-alarm" module:"nokia-conf"`
	SignalMode        E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_SignalMode                                                                                `path:"signal-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) IsYANGGoStruct() {}

// NewChannelGroup creates a new entry in the ChannelGroup list of the
// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) NewChannelGroup(Ds0Index NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ds0Index_Union) (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChannelGroup == nil {
		t.ChannelGroup = make(map[NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ds0Index_Union]*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup)
	}

	key := Ds0Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ChannelGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ChannelGroup", key)
	}

	t.ChannelGroup[key] = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup{
		Ds0Index: Ds0Index,
	}

	return t.ChannelGroup[key], nil
}

// RenameChannelGroup renames an entry in the list ChannelGroup within
// the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) RenameChannelGroup(oldK, newK NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ds0Index_Union) error {
	if _, ok := t.ChannelGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ChannelGroup", newK)
	}

	e, ok := t.ChannelGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ChannelGroup", oldK)
	}
	e.Ds0Index = newK

	t.ChannelGroup[newK] = e
	delete(t.ChannelGroup, oldK)
	return nil
}

// GetOrCreateChannelGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) GetOrCreateChannelGroup(Ds0Index NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ds0Index_Union) *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup {

	key := Ds0Index

	if v, ok := t.ChannelGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChannelGroup(Ds0Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChannelGroup got unexpected error: %v", err))
	}
	return v
}

// GetChannelGroup retrieves the value with the specified key from
// the ChannelGroup map field of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) GetChannelGroup(Ds0Index NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ds0Index_Union) *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup {

	if t == nil {
		return nil
	}

	key := Ds0Index

	if lm, ok := t.ChannelGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteChannelGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) DeleteChannelGroup(Ds0Index NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ds0Index_Union) {
	key := Ds0Index

	delete(t.ChannelGroup, key)
}

// AppendChannelGroup appends the supplied NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup struct to the
// list ChannelGroup of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) AppendChannelGroup(v *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) error {
	key := v.Ds0Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChannelGroup == nil {
		t.ChannelGroup = make(map[NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ds0Index_Union]*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup)
	}

	if _, ok := t.ChannelGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ChannelGroup %v", key)
	}

	t.ChannelGroup[key] = v
	return nil
}

// GetOrCreateBerThreshold retrieves the value of the BerThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) GetOrCreateBerThreshold() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_BerThreshold {
	if t.BerThreshold != nil {
		return t.BerThreshold
	}
	t.BerThreshold = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_BerThreshold{}
	return t.BerThreshold
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) GetOrCreateHoldTime() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_HoldTime{}
	return t.HoldTime
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) GetOrCreateReportAlarm() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm{}
	return t.ReportAlarm
}

// GetBerThreshold returns the value of the BerThreshold struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1. If the receiver or the field BerThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) GetBerThreshold() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_BerThreshold {
	if t != nil && t.BerThreshold != nil {
		return t.BerThreshold
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) GetHoldTime() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) GetReportAlarm() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetClockSource retrieves the value of the leaf ClockSource from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClockSource is set, it can
// safely use t.GetClockSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClockSource == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) GetClockSource() E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ClockSource {
	if t == nil || t.ClockSource == 0 {
		return 0
	}
	return t.ClockSource
}

// GetDs1Index retrieves the value of the leaf Ds1Index from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ds1Index is set, it can
// safely use t.GetDs1Index() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ds1Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) GetDs1Index() string {
	if t == nil || t.Ds1Index == nil {
		return ""
	}
	return *t.Ds1Index
}

// GetFraming retrieves the value of the leaf Framing from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Framing is set, it can
// safely use t.GetFraming() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Framing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) GetFraming() E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_Framing {
	if t == nil || t.Framing == 0 {
		return NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_Framing_extended_super_frame
	}
	return t.Framing
}

// GetLoopback retrieves the value of the leaf Loopback from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loopback is set, it can
// safely use t.GetLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) GetLoopback() E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_Loopback {
	if t == nil || t.Loopback == 0 {
		return 0
	}
	return t.Loopback
}

// GetRemoteLoopRespond retrieves the value of the leaf RemoteLoopRespond from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteLoopRespond is set, it can
// safely use t.GetRemoteLoopRespond() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteLoopRespond == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) GetRemoteLoopRespond() bool {
	if t == nil || t.RemoteLoopRespond == nil {
		return false
	}
	return *t.RemoteLoopRespond
}

// GetSignalMode retrieves the value of the leaf SignalMode from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalMode is set, it can
// safely use t.GetSignalMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) GetSignalMode() E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_SignalMode {
	if t == nil || t.SignalMode == 0 {
		return 0
	}
	return t.SignalMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Framing == 0 {
		t.Framing = NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_Framing_extended_super_frame
	}
	if t.RemoteLoopRespond == nil {
		var v bool = false
		t.RemoteLoopRespond = &v
	}
	t.BerThreshold.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
	for _, e := range t.ChannelGroup {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ds1Index == nil {
		return nil, fmt.Errorf("nil value for key Ds1Index")
	}

	return map[string]interface{}{
		"ds1-index": *t.Ds1Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_BerThreshold represents the /nokia-conf/configure/groups/group/port/tdm/ds1/ber-threshold YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_BerThreshold struct {
	SignalDegrade *uint32 `path:"signal-degrade" module:"nokia-conf"`
	SignalFailure *uint32 `path:"signal-failure" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_BerThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_BerThreshold) IsYANGGoStruct() {}

// GetSignalDegrade retrieves the value of the leaf SignalDegrade from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_BerThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalDegrade is set, it can
// safely use t.GetSignalDegrade() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalDegrade == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_BerThreshold) GetSignalDegrade() uint32 {
	if t == nil || t.SignalDegrade == nil {
		return 5
	}
	return *t.SignalDegrade
}

// GetSignalFailure retrieves the value of the leaf SignalFailure from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_BerThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalFailure is set, it can
// safely use t.GetSignalFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_BerThreshold) GetSignalFailure() uint32 {
	if t == nil || t.SignalFailure == nil {
		return 50
	}
	return *t.SignalFailure
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_BerThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_BerThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SignalDegrade == nil {
		var v uint32 = 5
		t.SignalDegrade = &v
	}
	if t.SignalFailure == nil {
		var v uint32 = 50
		t.SignalFailure = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_BerThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_BerThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_BerThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_BerThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_BerThreshold.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_BerThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup represents the /nokia-conf/configure/groups/group/port/tdm/ds1/channel-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup struct {
	AdminState             E_NokiaTypesSros_AdminState                                                 `path:"admin-state" module:"nokia-conf"`
	Crc                    *uint32                                                                     `path:"crc" module:"nokia-conf"`
	Description            *string                                                                     `path:"description" module:"nokia-conf"`
	Ds0Index               NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ds0Index_Union   `path:"ds0-index" module:"nokia-conf"`
	Egress                 *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress          `path:"egress" module:"nokia-conf"`
	EncapType              E_NokiaTypesPort_SonetPathEncapType                                         `path:"encap-type" module:"nokia-conf"`
	IdleCycleFlag          E_NokiaTypesPort_TdmDsxIdleCycleFlag                                        `path:"idle-cycle-flag" module:"nokia-conf"`
	IdlePayloadFill        *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill `path:"idle-payload-fill" module:"nokia-conf"`
	IdleSignalFill         *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill  `path:"idle-signal-fill" module:"nokia-conf"`
	LoadBalancingAlgorithm E_NokiaTypesPort_LoadBalancingAlgorithm                                     `path:"load-balancing-algorithm" module:"nokia-conf"`
	MacAddress             *string                                                                     `path:"mac-address" module:"nokia-conf"`
	Mode                   E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Mode           `path:"mode" module:"nokia-conf"`
	Mtu                    *uint32                                                                     `path:"mtu" module:"nokia-conf"`
	Network                *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network         `path:"network" module:"nokia-conf" yangPresence:"true"`
	Ppp                    *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp             `path:"ppp" module:"nokia-conf" yangPresence:"true"`
	Speed                  *uint32                                                                     `path:"speed" module:"nokia-conf"`
	Timeslot               []uint32                                                                    `path:"timeslot" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress{}
	return t.Egress
}

// GetOrCreateIdlePayloadFill retrieves the value of the IdlePayloadFill field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetOrCreateIdlePayloadFill() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill {
	if t.IdlePayloadFill != nil {
		return t.IdlePayloadFill
	}
	t.IdlePayloadFill = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill{}
	return t.IdlePayloadFill
}

// GetOrCreateIdleSignalFill retrieves the value of the IdleSignalFill field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetOrCreateIdleSignalFill() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill {
	if t.IdleSignalFill != nil {
		return t.IdleSignalFill
	}
	t.IdleSignalFill = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill{}
	return t.IdleSignalFill
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network{}
	return t.Network
}

// GetOrCreatePpp retrieves the value of the Ppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetOrCreatePpp() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp {
	if t.Ppp != nil {
		return t.Ppp
	}
	t.Ppp = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp{}
	return t.Ppp
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetEgress() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIdlePayloadFill returns the value of the IdlePayloadFill struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup. If the receiver or the field IdlePayloadFill is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetIdlePayloadFill() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill {
	if t != nil && t.IdlePayloadFill != nil {
		return t.IdlePayloadFill
	}
	return nil
}

// GetIdleSignalFill returns the value of the IdleSignalFill struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup. If the receiver or the field IdleSignalFill is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetIdleSignalFill() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill {
	if t != nil && t.IdleSignalFill != nil {
		return t.IdleSignalFill
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetNetwork() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetPpp returns the value of the Ppp struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup. If the receiver or the field Ppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetPpp() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp {
	if t != nil && t.Ppp != nil {
		return t.Ppp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCrc retrieves the value of the leaf Crc from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Crc is set, it can
// safely use t.GetCrc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Crc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetCrc() uint32 {
	if t == nil || t.Crc == nil {
		return 0
	}
	return *t.Crc
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return "DS0GRP"
	}
	return *t.Description
}

// GetDs0Index retrieves the value of the leaf Ds0Index from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ds0Index is set, it can
// safely use t.GetDs0Index() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ds0Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetDs0Index() NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ds0Index_Union {
	if t == nil || t.Ds0Index == nil {
		return nil
	}
	return t.Ds0Index
}

// GetEncapType retrieves the value of the leaf EncapType from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapType is set, it can
// safely use t.GetEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetEncapType() E_NokiaTypesPort_SonetPathEncapType {
	if t == nil || t.EncapType == 0 {
		return 0
	}
	return t.EncapType
}

// GetIdleCycleFlag retrieves the value of the leaf IdleCycleFlag from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleCycleFlag is set, it can
// safely use t.GetIdleCycleFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleCycleFlag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetIdleCycleFlag() E_NokiaTypesPort_TdmDsxIdleCycleFlag {
	if t == nil || t.IdleCycleFlag == 0 {
		return 0
	}
	return t.IdleCycleFlag
}

// GetLoadBalancingAlgorithm retrieves the value of the leaf LoadBalancingAlgorithm from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingAlgorithm is set, it can
// safely use t.GetLoadBalancingAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetLoadBalancingAlgorithm() E_NokiaTypesPort_LoadBalancingAlgorithm {
	if t == nil || t.LoadBalancingAlgorithm == 0 {
		return 0
	}
	return t.LoadBalancingAlgorithm
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return "00:00:00:00:00:00"
	}
	return *t.MacAddress
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetMode() E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetSpeed retrieves the value of the leaf Speed from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Speed is set, it can
// safely use t.GetSpeed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Speed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetSpeed() uint32 {
	if t == nil || t.Speed == nil {
		return 64
	}
	return *t.Speed
}

// GetTimeslot retrieves the value of the leaf Timeslot from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeslot is set, it can
// safely use t.GetTimeslot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeslot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) GetTimeslot() []uint32 {
	if t == nil || t.Timeslot == nil {
		return nil
	}
	return t.Timeslot
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Description == nil {
		var v string = "DS0GRP"
		t.Description = &v
	}
	if t.MacAddress == nil {
		var v string = "00:00:00:00:00:00"
		t.MacAddress = &v
	}
	if t.Speed == nil {
		var v uint32 = 64
		t.Speed = &v
	}
	t.Egress.PopulateDefaults()
	t.IdlePayloadFill.PopulateDefaults()
	t.IdleSignalFill.PopulateDefaults()
	t.Network.PopulateDefaults()
	t.Ppp.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"ds0-index": t.Ds0Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress represents the /nokia-conf/configure/groups/group/port/tdm/ds1/channel-group/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress struct {
	PortSchedulerPolicy *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy `path:"port-scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress) IsYANGGoStruct() {}

// GetOrCreatePortSchedulerPolicy retrieves the value of the PortSchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress) GetOrCreatePortSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy {
	if t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	t.PortSchedulerPolicy = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy{}
	return t.PortSchedulerPolicy
}

// GetPortSchedulerPolicy returns the value of the PortSchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress. If the receiver or the field PortSchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress) GetPortSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy {
	if t != nil && t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortSchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy represents the /nokia-conf/configure/groups/group/port/tdm/ds1/channel-group/egress/port-scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                                          `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/port/tdm/ds1/channel-group/egress/port-scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides struct {
	Level   map[NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level `path:"level" module:"nokia-conf"`
	MaxRate *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate                                                                                                                             `path:"max-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) NewLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level{
		PriorityLevel: PriorityLevel,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.PriorityLevel = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) GetOrCreateLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level {

	key := PriorityLevel

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) GetLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) DeleteLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) {
	key := PriorityLevel

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) AppendLevel(v *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) error {
	key := v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateMaxRate retrieves the value of the MaxRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) GetOrCreateMaxRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t.MaxRate != nil {
		return t.MaxRate
	}
	t.MaxRate = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate{}
	return t.MaxRate
}

// GetMaxRate returns the value of the MaxRate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides. If the receiver or the field MaxRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) GetMaxRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t != nil && t.MaxRate != nil {
		return t.MaxRate
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MaxRate.PopulateDefaults()
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level represents the /nokia-conf/configure/groups/group/port/tdm/ds1/channel-group/egress/port-scheduler-policy/overrides/level YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level struct {
	PercentRate   *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate        `path:"percent-rate" module:"nokia-conf"`
	PriorityLevel NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union `path:"priority-level" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate               `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetPercentRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetPriorityLevel() NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union {
	if t == nil || t.PriorityLevel == nil {
		return nil
	}
	return t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"priority-level": t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate represents the /nokia-conf/configure/groups/group/port/tdm/ds1/channel-group/egress/port-scheduler-policy/overrides/level/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 100
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 100
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 100
		t.Cir = &v
	}
	if t.Pir == nil {
		var v float64 = 100
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate represents the /nokia-conf/configure/groups/group/port/tdm/ds1/channel-group/egress/port-scheduler-policy/overrides/level/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetCir() NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_SchedulerCirRate_Enum_max
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetPir() NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_SchedulerCirRate_Enum_max
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate represents the /nokia-conf/configure/groups/group/port/tdm/ds1/channel-group/egress/port-scheduler-policy/overrides/max-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate struct {
	PercentRate *float64                                                                                                           `path:"percent-rate" module:"nokia-conf"`
	Rate        NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) IsYANGGoStruct() {
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 100
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetRate() NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentRate == nil {
		var v float64 = 100
		t.PercentRate = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill represents the /nokia-conf/configure/groups/group/port/tdm/ds1/channel-group/idle-payload-fill YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill struct {
	AllOnes YANGEmpty `path:"all-ones" module:"nokia-conf"`
	Pattern *uint32   `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill) IsYANGGoStruct() {}

// GetAllOnes retrieves the value of the leaf AllOnes from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllOnes is set, it can
// safely use t.GetAllOnes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllOnes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill) GetAllOnes() YANGEmpty {
	if t == nil || t.AllOnes == false {
		return false
	}
	return t.AllOnes
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill) GetPattern() uint32 {
	if t == nil || t.Pattern == nil {
		return 0
	}
	return *t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill represents the /nokia-conf/configure/groups/group/port/tdm/ds1/channel-group/idle-signal-fill YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill struct {
	AllOnes YANGEmpty `path:"all-ones" module:"nokia-conf"`
	Pattern *uint32   `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill) IsYANGGoStruct() {}

// GetAllOnes retrieves the value of the leaf AllOnes from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllOnes is set, it can
// safely use t.GetAllOnes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllOnes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill) GetAllOnes() YANGEmpty {
	if t == nil || t.AllOnes == false {
		return false
	}
	return t.AllOnes
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill) GetPattern() uint32 {
	if t == nil || t.Pattern == nil {
		return 0
	}
	return *t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network represents the /nokia-conf/configure/groups/group/port/tdm/ds1/channel-group/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network struct {
	AccountingPolicy *uint32 `path:"accounting-policy" module:"nokia-conf"`
	CollectStats     *bool   `path:"collect-stats" module:"nokia-conf"`
	QueuePolicy      *string `path:"queue-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network) IsYANGGoStruct() {}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetQueuePolicy retrieves the value of the leaf QueuePolicy from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuePolicy is set, it can
// safely use t.GetQueuePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network) GetQueuePolicy() string {
	if t == nil || t.QueuePolicy == nil {
		return ""
	}
	return *t.QueuePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp represents the /nokia-conf/configure/groups/group/port/tdm/ds1/channel-group/ppp YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp struct {
	BerSfLinkDown *bool                                                                     `path:"ber-sf-link-down" module:"nokia-conf"`
	Compress      *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress  `path:"compress" module:"nokia-conf"`
	Keepalive     *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive `path:"keepalive" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp) IsYANGGoStruct() {}

// GetOrCreateCompress retrieves the value of the Compress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp) GetOrCreateCompress() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress {
	if t.Compress != nil {
		return t.Compress
	}
	t.Compress = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress{}
	return t.Compress
}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp) GetOrCreateKeepalive() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive{}
	return t.Keepalive
}

// GetCompress returns the value of the Compress struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp. If the receiver or the field Compress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp) GetCompress() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress {
	if t != nil && t.Compress != nil {
		return t.Compress
	}
	return nil
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp) GetKeepalive() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetBerSfLinkDown retrieves the value of the leaf BerSfLinkDown from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BerSfLinkDown is set, it can
// safely use t.GetBerSfLinkDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BerSfLinkDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp) GetBerSfLinkDown() bool {
	if t == nil || t.BerSfLinkDown == nil {
		return false
	}
	return *t.BerSfLinkDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BerSfLinkDown == nil {
		var v bool = false
		t.BerSfLinkDown = &v
	}
	t.Compress.PopulateDefaults()
	t.Keepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress represents the /nokia-conf/configure/groups/group/port/tdm/ds1/channel-group/ppp/compress YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress struct {
	Acfc *bool `path:"acfc" module:"nokia-conf"`
	Pfc  *bool `path:"pfc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress) IsYANGGoStruct() {}

// GetAcfc retrieves the value of the leaf Acfc from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Acfc is set, it can
// safely use t.GetAcfc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Acfc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress) GetAcfc() bool {
	if t == nil || t.Acfc == nil {
		return false
	}
	return *t.Acfc
}

// GetPfc retrieves the value of the leaf Pfc from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pfc is set, it can
// safely use t.GetPfc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pfc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress) GetPfc() bool {
	if t == nil || t.Pfc == nil {
		return false
	}
	return *t.Pfc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Acfc == nil {
		var v bool = false
		t.Acfc = &v
	}
	if t.Pfc == nil {
		var v bool = false
		t.Pfc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive represents the /nokia-conf/configure/groups/group/port/tdm/ds1/channel-group/ppp/keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive struct {
	DropCount *uint32                                                                                 `path:"drop-count" module:"nokia-conf"`
	Interval  NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive_Interval_Union `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive) IsYANGGoStruct() {}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive) GetInterval() NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive_Interval_Union {
	if t == nil || t.Interval == nil {
		return UnionUint32(10)
	}
	return t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.Interval == nil {
		t.Interval = UnionUint32(10)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_HoldTime represents the /nokia-conf/configure/groups/group/port/tdm/ds1/hold-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_HoldTime struct {
	Down *uint32 `path:"down" module:"nokia-conf"`
	Up   *uint32 `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_HoldTime) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Down is set, it can
// safely use t.GetDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Down == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_HoldTime) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 0
	}
	return *t.Down
}

// GetUp retrieves the value of the leaf Up from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Up is set, it can
// safely use t.GetUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Up == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_HoldTime) GetUp() uint32 {
	if t == nil || t.Up == nil {
		return 0
	}
	return *t.Up
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Down == nil {
		var v uint32 = 0
		t.Down = &v
	}
	if t.Up == nil {
		var v uint32 = 0
		t.Up = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_HoldTime.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm represents the /nokia-conf/configure/groups/group/port/tdm/ds1/report-alarm YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm struct {
	Ais    *bool `path:"ais" module:"nokia-conf"`
	BerSd  *bool `path:"ber-sd" module:"nokia-conf"`
	BerSf  *bool `path:"ber-sf" module:"nokia-conf"`
	Looped *bool `path:"looped" module:"nokia-conf"`
	Los    *bool `path:"los" module:"nokia-conf"`
	Oof    *bool `path:"oof" module:"nokia-conf"`
	Rai    *bool `path:"rai" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm) IsYANGGoStruct() {}

// GetAis retrieves the value of the leaf Ais from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ais is set, it can
// safely use t.GetAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm) GetAis() bool {
	if t == nil || t.Ais == nil {
		return true
	}
	return *t.Ais
}

// GetBerSd retrieves the value of the leaf BerSd from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BerSd is set, it can
// safely use t.GetBerSd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BerSd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm) GetBerSd() bool {
	if t == nil || t.BerSd == nil {
		return false
	}
	return *t.BerSd
}

// GetBerSf retrieves the value of the leaf BerSf from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BerSf is set, it can
// safely use t.GetBerSf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BerSf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm) GetBerSf() bool {
	if t == nil || t.BerSf == nil {
		return false
	}
	return *t.BerSf
}

// GetLooped retrieves the value of the leaf Looped from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Looped is set, it can
// safely use t.GetLooped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Looped == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm) GetLooped() bool {
	if t == nil || t.Looped == nil {
		return false
	}
	return *t.Looped
}

// GetLos retrieves the value of the leaf Los from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Los is set, it can
// safely use t.GetLos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Los == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm) GetLos() bool {
	if t == nil || t.Los == nil {
		return true
	}
	return *t.Los
}

// GetOof retrieves the value of the leaf Oof from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Oof is set, it can
// safely use t.GetOof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Oof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm) GetOof() bool {
	if t == nil || t.Oof == nil {
		return false
	}
	return *t.Oof
}

// GetRai retrieves the value of the leaf Rai from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rai is set, it can
// safely use t.GetRai() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rai == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm) GetRai() bool {
	if t == nil || t.Rai == nil {
		return false
	}
	return *t.Rai
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ais == nil {
		var v bool = true
		t.Ais = &v
	}
	if t.BerSd == nil {
		var v bool = false
		t.BerSd = &v
	}
	if t.BerSf == nil {
		var v bool = false
		t.BerSf = &v
	}
	if t.Looped == nil {
		var v bool = false
		t.Looped = &v
	}
	if t.Los == nil {
		var v bool = true
		t.Los = &v
	}
	if t.Oof == nil {
		var v bool = false
		t.Oof = &v
	}
	if t.Rai == nil {
		var v bool = false
		t.Rai = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds1_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3 represents the /nokia-conf/configure/groups/group/port/tdm/ds3 YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3 struct {
	AdminState             E_NokiaTypesSros_AdminState                                        `path:"admin-state" module:"nokia-conf"`
	Channelized            E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Channelized        `path:"channelized" module:"nokia-conf"`
	ClockSource            E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ClockSource        `path:"clock-source" module:"nokia-conf"`
	Crc                    *uint32                                                            `path:"crc" module:"nokia-conf"`
	Description            *string                                                            `path:"description" module:"nokia-conf"`
	Ds3Index               *string                                                            `path:"ds3-index" module:"nokia-conf"`
	Egress                 *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress              `path:"egress" module:"nokia-conf"`
	EncapType              E_NokiaTypesPort_SonetPathEncapType                                `path:"encap-type" module:"nokia-conf"`
	FeacLoopRespond        *bool                                                              `path:"feac-loop-respond" module:"nokia-conf"`
	Framing                E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Framing            `path:"framing" module:"nokia-conf"`
	IdleCycleFlag          E_NokiaTypesPort_TdmDsxIdleCycleFlag                               `path:"idle-cycle-flag" module:"nokia-conf"`
	LoadBalancingAlgorithm E_NokiaTypesPort_LoadBalancingAlgorithm                            `path:"load-balancing-algorithm" module:"nokia-conf"`
	Loopback               E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Loopback           `path:"loopback" module:"nokia-conf"`
	MacAddress             *string                                                            `path:"mac-address" module:"nokia-conf"`
	MaintenanceDataLink    *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink `path:"maintenance-data-link" module:"nokia-conf"`
	Mode                   E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Mode               `path:"mode" module:"nokia-conf"`
	Mtu                    *uint32                                                            `path:"mtu" module:"nokia-conf"`
	Network                *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network             `path:"network" module:"nokia-conf" yangPresence:"true"`
	Ppp                    *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp                 `path:"ppp" module:"nokia-conf" yangPresence:"true"`
	ReportAlarm            *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm         `path:"report-alarm" module:"nokia-conf"`
	Scramble               *bool                                                              `path:"scramble" module:"nokia-conf"`
	Subrate                *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate             `path:"subrate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress{}
	return t.Egress
}

// GetOrCreateMaintenanceDataLink retrieves the value of the MaintenanceDataLink field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetOrCreateMaintenanceDataLink() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink {
	if t.MaintenanceDataLink != nil {
		return t.MaintenanceDataLink
	}
	t.MaintenanceDataLink = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink{}
	return t.MaintenanceDataLink
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network{}
	return t.Network
}

// GetOrCreatePpp retrieves the value of the Ppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetOrCreatePpp() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp {
	if t.Ppp != nil {
		return t.Ppp
	}
	t.Ppp = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp{}
	return t.Ppp
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetOrCreateReportAlarm() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm{}
	return t.ReportAlarm
}

// GetOrCreateSubrate retrieves the value of the Subrate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetOrCreateSubrate() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate {
	if t.Subrate != nil {
		return t.Subrate
	}
	t.Subrate = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate{}
	return t.Subrate
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetEgress() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetMaintenanceDataLink returns the value of the MaintenanceDataLink struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3. If the receiver or the field MaintenanceDataLink is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetMaintenanceDataLink() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink {
	if t != nil && t.MaintenanceDataLink != nil {
		return t.MaintenanceDataLink
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetNetwork() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetPpp returns the value of the Ppp struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3. If the receiver or the field Ppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetPpp() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp {
	if t != nil && t.Ppp != nil {
		return t.Ppp
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetReportAlarm() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetSubrate returns the value of the Subrate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3. If the receiver or the field Subrate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetSubrate() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate {
	if t != nil && t.Subrate != nil {
		return t.Subrate
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetChannelized retrieves the value of the leaf Channelized from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Channelized is set, it can
// safely use t.GetChannelized() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Channelized == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetChannelized() E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Channelized {
	if t == nil || t.Channelized == 0 {
		return 0
	}
	return t.Channelized
}

// GetClockSource retrieves the value of the leaf ClockSource from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClockSource is set, it can
// safely use t.GetClockSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClockSource == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetClockSource() E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ClockSource {
	if t == nil || t.ClockSource == 0 {
		return NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ClockSource_node_timed
	}
	return t.ClockSource
}

// GetCrc retrieves the value of the leaf Crc from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Crc is set, it can
// safely use t.GetCrc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Crc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetCrc() uint32 {
	if t == nil || t.Crc == nil {
		return 0
	}
	return *t.Crc
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetDescription() string {
	if t == nil || t.Description == nil {
		return "DS3"
	}
	return *t.Description
}

// GetDs3Index retrieves the value of the leaf Ds3Index from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ds3Index is set, it can
// safely use t.GetDs3Index() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ds3Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetDs3Index() string {
	if t == nil || t.Ds3Index == nil {
		return ""
	}
	return *t.Ds3Index
}

// GetEncapType retrieves the value of the leaf EncapType from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapType is set, it can
// safely use t.GetEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetEncapType() E_NokiaTypesPort_SonetPathEncapType {
	if t == nil || t.EncapType == 0 {
		return 0
	}
	return t.EncapType
}

// GetFeacLoopRespond retrieves the value of the leaf FeacLoopRespond from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FeacLoopRespond is set, it can
// safely use t.GetFeacLoopRespond() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FeacLoopRespond == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetFeacLoopRespond() bool {
	if t == nil || t.FeacLoopRespond == nil {
		return false
	}
	return *t.FeacLoopRespond
}

// GetFraming retrieves the value of the leaf Framing from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Framing is set, it can
// safely use t.GetFraming() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Framing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetFraming() E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Framing {
	if t == nil || t.Framing == 0 {
		return NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Framing_c_bit
	}
	return t.Framing
}

// GetIdleCycleFlag retrieves the value of the leaf IdleCycleFlag from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleCycleFlag is set, it can
// safely use t.GetIdleCycleFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleCycleFlag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetIdleCycleFlag() E_NokiaTypesPort_TdmDsxIdleCycleFlag {
	if t == nil || t.IdleCycleFlag == 0 {
		return 0
	}
	return t.IdleCycleFlag
}

// GetLoadBalancingAlgorithm retrieves the value of the leaf LoadBalancingAlgorithm from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingAlgorithm is set, it can
// safely use t.GetLoadBalancingAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetLoadBalancingAlgorithm() E_NokiaTypesPort_LoadBalancingAlgorithm {
	if t == nil || t.LoadBalancingAlgorithm == 0 {
		return 0
	}
	return t.LoadBalancingAlgorithm
}

// GetLoopback retrieves the value of the leaf Loopback from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loopback is set, it can
// safely use t.GetLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetLoopback() E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Loopback {
	if t == nil || t.Loopback == 0 {
		return 0
	}
	return t.Loopback
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return "00:00:00:00:00:00"
	}
	return *t.MacAddress
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetMode() E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetScramble retrieves the value of the leaf Scramble from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scramble is set, it can
// safely use t.GetScramble() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scramble == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) GetScramble() bool {
	if t == nil || t.Scramble == nil {
		return false
	}
	return *t.Scramble
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ClockSource == 0 {
		t.ClockSource = NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ClockSource_node_timed
	}
	if t.Description == nil {
		var v string = "DS3"
		t.Description = &v
	}
	if t.FeacLoopRespond == nil {
		var v bool = false
		t.FeacLoopRespond = &v
	}
	if t.Framing == 0 {
		t.Framing = NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Framing_c_bit
	}
	if t.MacAddress == nil {
		var v string = "00:00:00:00:00:00"
		t.MacAddress = &v
	}
	t.Egress.PopulateDefaults()
	t.MaintenanceDataLink.PopulateDefaults()
	t.Network.PopulateDefaults()
	t.Ppp.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
	t.Subrate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ds3Index == nil {
		return nil, fmt.Errorf("nil value for key Ds3Index")
	}

	return map[string]interface{}{
		"ds3-index": *t.Ds3Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress represents the /nokia-conf/configure/groups/group/port/tdm/ds3/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress struct {
	PortSchedulerPolicy *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy `path:"port-scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress) IsYANGGoStruct() {}

// GetOrCreatePortSchedulerPolicy retrieves the value of the PortSchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress) GetOrCreatePortSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy {
	if t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	t.PortSchedulerPolicy = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy{}
	return t.PortSchedulerPolicy
}

// GetPortSchedulerPolicy returns the value of the PortSchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress. If the receiver or the field PortSchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress) GetPortSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy {
	if t != nil && t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortSchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy represents the /nokia-conf/configure/groups/group/port/tdm/ds3/egress/port-scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                             `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/port/tdm/ds3/egress/port-scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides struct {
	Level   map[NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level `path:"level" module:"nokia-conf"`
	MaxRate *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate                                                                                                                `path:"max-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) NewLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level{
		PriorityLevel: PriorityLevel,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.PriorityLevel = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) GetOrCreateLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level {

	key := PriorityLevel

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) GetLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) DeleteLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) {
	key := PriorityLevel

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) AppendLevel(v *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) error {
	key := v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateMaxRate retrieves the value of the MaxRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) GetOrCreateMaxRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t.MaxRate != nil {
		return t.MaxRate
	}
	t.MaxRate = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate{}
	return t.MaxRate
}

// GetMaxRate returns the value of the MaxRate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides. If the receiver or the field MaxRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) GetMaxRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t != nil && t.MaxRate != nil {
		return t.MaxRate
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MaxRate.PopulateDefaults()
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level represents the /nokia-conf/configure/groups/group/port/tdm/ds3/egress/port-scheduler-policy/overrides/level YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level struct {
	PercentRate   *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate        `path:"percent-rate" module:"nokia-conf"`
	PriorityLevel NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union `path:"priority-level" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate               `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) GetPercentRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) GetRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) GetPriorityLevel() NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union {
	if t == nil || t.PriorityLevel == nil {
		return nil
	}
	return t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"priority-level": t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate represents the /nokia-conf/configure/groups/group/port/tdm/ds3/egress/port-scheduler-policy/overrides/level/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 100
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 100
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 100
		t.Cir = &v
	}
	if t.Pir == nil {
		var v float64 = 100
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate represents the /nokia-conf/configure/groups/group/port/tdm/ds3/egress/port-scheduler-policy/overrides/level/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetCir() NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_SchedulerCirRate_Enum_max
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetPir() NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_SchedulerCirRate_Enum_max
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate represents the /nokia-conf/configure/groups/group/port/tdm/ds3/egress/port-scheduler-policy/overrides/max-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate struct {
	PercentRate *float64                                                                                              `path:"percent-rate" module:"nokia-conf"`
	Rate        NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate) IsYANGGoStruct() {
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 100
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetRate() NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentRate == nil {
		var v float64 = 100
		t.PercentRate = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink represents the /nokia-conf/configure/groups/group/port/tdm/ds3/maintenance-data-link YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink struct {
	EquipmentIdCode     *string                                                                                `path:"equipment-id-code" module:"nokia-conf"`
	FacilityIdCode      *string                                                                                `path:"facility-id-code" module:"nokia-conf"`
	FrameIdCode         *string                                                                                `path:"frame-id-code" module:"nokia-conf"`
	GeneratorString     *string                                                                                `path:"generator-string" module:"nokia-conf"`
	LocationIdCode      *string                                                                                `path:"location-id-code" module:"nokia-conf"`
	PortString          *string                                                                                `path:"port-string" module:"nokia-conf"`
	TransmitMessageType *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType `path:"transmit-message-type" module:"nokia-conf"`
	UnitIdCode          *string                                                                                `path:"unit-id-code" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink) IsYANGGoStruct() {}

// GetOrCreateTransmitMessageType retrieves the value of the TransmitMessageType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink) GetOrCreateTransmitMessageType() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType {
	if t.TransmitMessageType != nil {
		return t.TransmitMessageType
	}
	t.TransmitMessageType = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType{}
	return t.TransmitMessageType
}

// GetTransmitMessageType returns the value of the TransmitMessageType struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink. If the receiver or the field TransmitMessageType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink) GetTransmitMessageType() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType {
	if t != nil && t.TransmitMessageType != nil {
		return t.TransmitMessageType
	}
	return nil
}

// GetEquipmentIdCode retrieves the value of the leaf EquipmentIdCode from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EquipmentIdCode is set, it can
// safely use t.GetEquipmentIdCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EquipmentIdCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink) GetEquipmentIdCode() string {
	if t == nil || t.EquipmentIdCode == nil {
		return ""
	}
	return *t.EquipmentIdCode
}

// GetFacilityIdCode retrieves the value of the leaf FacilityIdCode from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FacilityIdCode is set, it can
// safely use t.GetFacilityIdCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FacilityIdCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink) GetFacilityIdCode() string {
	if t == nil || t.FacilityIdCode == nil {
		return ""
	}
	return *t.FacilityIdCode
}

// GetFrameIdCode retrieves the value of the leaf FrameIdCode from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameIdCode is set, it can
// safely use t.GetFrameIdCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameIdCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink) GetFrameIdCode() string {
	if t == nil || t.FrameIdCode == nil {
		return ""
	}
	return *t.FrameIdCode
}

// GetGeneratorString retrieves the value of the leaf GeneratorString from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GeneratorString is set, it can
// safely use t.GetGeneratorString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GeneratorString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink) GetGeneratorString() string {
	if t == nil || t.GeneratorString == nil {
		return ""
	}
	return *t.GeneratorString
}

// GetLocationIdCode retrieves the value of the leaf LocationIdCode from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocationIdCode is set, it can
// safely use t.GetLocationIdCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocationIdCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink) GetLocationIdCode() string {
	if t == nil || t.LocationIdCode == nil {
		return ""
	}
	return *t.LocationIdCode
}

// GetPortString retrieves the value of the leaf PortString from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortString is set, it can
// safely use t.GetPortString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink) GetPortString() string {
	if t == nil || t.PortString == nil {
		return ""
	}
	return *t.PortString
}

// GetUnitIdCode retrieves the value of the leaf UnitIdCode from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnitIdCode is set, it can
// safely use t.GetUnitIdCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnitIdCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink) GetUnitIdCode() string {
	if t == nil || t.UnitIdCode == nil {
		return ""
	}
	return *t.UnitIdCode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TransmitMessageType.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType represents the /nokia-conf/configure/groups/group/port/tdm/ds3/maintenance-data-link/transmit-message-type YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType struct {
	IdleSignal *bool `path:"idle-signal" module:"nokia-conf"`
	Path       *bool `path:"path" module:"nokia-conf"`
	TestSignal *bool `path:"test-signal" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType) IsYANGGoStruct() {
}

// GetIdleSignal retrieves the value of the leaf IdleSignal from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleSignal is set, it can
// safely use t.GetIdleSignal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleSignal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType) GetIdleSignal() bool {
	if t == nil || t.IdleSignal == nil {
		return false
	}
	return *t.IdleSignal
}

// GetPath retrieves the value of the leaf Path from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Path is set, it can
// safely use t.GetPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Path == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType) GetPath() bool {
	if t == nil || t.Path == nil {
		return false
	}
	return *t.Path
}

// GetTestSignal retrieves the value of the leaf TestSignal from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TestSignal is set, it can
// safely use t.GetTestSignal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TestSignal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType) GetTestSignal() bool {
	if t == nil || t.TestSignal == nil {
		return false
	}
	return *t.TestSignal
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IdleSignal == nil {
		var v bool = false
		t.IdleSignal = &v
	}
	if t.Path == nil {
		var v bool = false
		t.Path = &v
	}
	if t.TestSignal == nil {
		var v bool = false
		t.TestSignal = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network represents the /nokia-conf/configure/groups/group/port/tdm/ds3/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network struct {
	AccountingPolicy *uint32 `path:"accounting-policy" module:"nokia-conf"`
	CollectStats     *bool   `path:"collect-stats" module:"nokia-conf"`
	QueuePolicy      *string `path:"queue-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network) IsYANGGoStruct() {}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetQueuePolicy retrieves the value of the leaf QueuePolicy from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuePolicy is set, it can
// safely use t.GetQueuePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network) GetQueuePolicy() string {
	if t == nil || t.QueuePolicy == nil {
		return ""
	}
	return *t.QueuePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp represents the /nokia-conf/configure/groups/group/port/tdm/ds3/ppp YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp struct {
	Keepalive *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive `path:"keepalive" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp) IsYANGGoStruct() {}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp) GetOrCreateKeepalive() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive{}
	return t.Keepalive
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp) GetKeepalive() *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Keepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive represents the /nokia-conf/configure/groups/group/port/tdm/ds3/ppp/keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive struct {
	DropCount *uint32                                                                    `path:"drop-count" module:"nokia-conf"`
	Interval  NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive_Interval_Union `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive) IsYANGGoStruct() {}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive) GetInterval() NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive_Interval_Union {
	if t == nil || t.Interval == nil {
		return UnionUint32(10)
	}
	return t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.Interval == nil {
		t.Interval = UnionUint32(10)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Ppp_Keepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm represents the /nokia-conf/configure/groups/group/port/tdm/ds3/report-alarm YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm struct {
	Ais    *bool `path:"ais" module:"nokia-conf"`
	Looped *bool `path:"looped" module:"nokia-conf"`
	Los    *bool `path:"los" module:"nokia-conf"`
	Oof    *bool `path:"oof" module:"nokia-conf"`
	Rai    *bool `path:"rai" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm) IsYANGGoStruct() {}

// GetAis retrieves the value of the leaf Ais from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ais is set, it can
// safely use t.GetAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm) GetAis() bool {
	if t == nil || t.Ais == nil {
		return true
	}
	return *t.Ais
}

// GetLooped retrieves the value of the leaf Looped from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Looped is set, it can
// safely use t.GetLooped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Looped == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm) GetLooped() bool {
	if t == nil || t.Looped == nil {
		return false
	}
	return *t.Looped
}

// GetLos retrieves the value of the leaf Los from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Los is set, it can
// safely use t.GetLos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Los == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm) GetLos() bool {
	if t == nil || t.Los == nil {
		return true
	}
	return *t.Los
}

// GetOof retrieves the value of the leaf Oof from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Oof is set, it can
// safely use t.GetOof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Oof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm) GetOof() bool {
	if t == nil || t.Oof == nil {
		return false
	}
	return *t.Oof
}

// GetRai retrieves the value of the leaf Rai from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rai is set, it can
// safely use t.GetRai() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rai == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm) GetRai() bool {
	if t == nil || t.Rai == nil {
		return false
	}
	return *t.Rai
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ais == nil {
		var v bool = true
		t.Ais = &v
	}
	if t.Looped == nil {
		var v bool = false
		t.Looped = &v
	}
	if t.Los == nil {
		var v bool = true
		t.Los = &v
	}
	if t.Oof == nil {
		var v bool = false
		t.Oof = &v
	}
	if t.Rai == nil {
		var v bool = false
		t.Rai = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate represents the /nokia-conf/configure/groups/group/port/tdm/ds3/subrate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate struct {
	CsuMode  E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate_CsuMode `path:"csu-mode" module:"nokia-conf"`
	RateStep *uint32                                                         `path:"rate-step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate) IsYANGGoStruct() {}

// GetCsuMode retrieves the value of the leaf CsuMode from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CsuMode is set, it can
// safely use t.GetCsuMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CsuMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate) GetCsuMode() E_NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate_CsuMode {
	if t == nil || t.CsuMode == 0 {
		return 0
	}
	return t.CsuMode
}

// GetRateStep retrieves the value of the leaf RateStep from the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateStep is set, it can
// safely use t.GetRateStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateStep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate) GetRateStep() uint32 {
	if t == nil || t.RateStep == nil {
		return 0
	}
	return *t.RateStep
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_Ds3_Subrate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E1 represents the /nokia-conf/configure/groups/group/port/tdm/e1 YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E1 struct {
	AdminState   E_NokiaTypesSros_AdminState                                                                                                             `path:"admin-state" module:"nokia-conf"`
	BerThreshold *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_BerThreshold                                                                              `path:"ber-threshold" module:"nokia-conf"`
	ChannelGroup map[NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ds0Index_Union]*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup `path:"channel-group" module:"nokia-conf"`
	ClockSource  E_NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ClockSource                                                                              `path:"clock-source" module:"nokia-conf"`
	E1Index      *string                                                                                                                                 `path:"e1-index" module:"nokia-conf"`
	Framing      E_NokiaConf_Configure_Groups_Group_Port_Tdm_E1_Framing                                                                                  `path:"framing" module:"nokia-conf"`
	HoldTime     *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_HoldTime                                                                                  `path:"hold-time" module:"nokia-conf"`
	Loopback     E_NokiaConf_Configure_Groups_Group_Port_Tdm_E1_Loopback                                                                                 `path:"loopback" module:"nokia-conf"`
	NationalBits *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits                                                                              `path:"national-bits" module:"nokia-conf"`
	ReportAlarm  *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm                                                                               `path:"report-alarm" module:"nokia-conf"`
	SignalMode   E_NokiaConf_Configure_Groups_Group_Port_Tdm_E1_SignalMode                                                                               `path:"signal-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1) IsYANGGoStruct() {}

// NewChannelGroup creates a new entry in the ChannelGroup list of the
// NokiaConf_Configure_Groups_Group_Port_Tdm_E1 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) NewChannelGroup(Ds0Index NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ds0Index_Union) (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChannelGroup == nil {
		t.ChannelGroup = make(map[NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ds0Index_Union]*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup)
	}

	key := Ds0Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ChannelGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ChannelGroup", key)
	}

	t.ChannelGroup[key] = &NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup{
		Ds0Index: Ds0Index,
	}

	return t.ChannelGroup[key], nil
}

// RenameChannelGroup renames an entry in the list ChannelGroup within
// the NokiaConf_Configure_Groups_Group_Port_Tdm_E1 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) RenameChannelGroup(oldK, newK NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ds0Index_Union) error {
	if _, ok := t.ChannelGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ChannelGroup", newK)
	}

	e, ok := t.ChannelGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ChannelGroup", oldK)
	}
	e.Ds0Index = newK

	t.ChannelGroup[newK] = e
	delete(t.ChannelGroup, oldK)
	return nil
}

// GetOrCreateChannelGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Tdm_E1. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) GetOrCreateChannelGroup(Ds0Index NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ds0Index_Union) *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup {

	key := Ds0Index

	if v, ok := t.ChannelGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChannelGroup(Ds0Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChannelGroup got unexpected error: %v", err))
	}
	return v
}

// GetChannelGroup retrieves the value with the specified key from
// the ChannelGroup map field of NokiaConf_Configure_Groups_Group_Port_Tdm_E1. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) GetChannelGroup(Ds0Index NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ds0Index_Union) *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup {

	if t == nil {
		return nil
	}

	key := Ds0Index

	if lm, ok := t.ChannelGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteChannelGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Tdm_E1. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) DeleteChannelGroup(Ds0Index NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ds0Index_Union) {
	key := Ds0Index

	delete(t.ChannelGroup, key)
}

// AppendChannelGroup appends the supplied NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup struct to the
// list ChannelGroup of NokiaConf_Configure_Groups_Group_Port_Tdm_E1. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) AppendChannelGroup(v *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) error {
	key := v.Ds0Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChannelGroup == nil {
		t.ChannelGroup = make(map[NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ds0Index_Union]*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup)
	}

	if _, ok := t.ChannelGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ChannelGroup %v", key)
	}

	t.ChannelGroup[key] = v
	return nil
}

// GetOrCreateBerThreshold retrieves the value of the BerThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) GetOrCreateBerThreshold() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_BerThreshold {
	if t.BerThreshold != nil {
		return t.BerThreshold
	}
	t.BerThreshold = &NokiaConf_Configure_Groups_Group_Port_Tdm_E1_BerThreshold{}
	return t.BerThreshold
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) GetOrCreateHoldTime() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Groups_Group_Port_Tdm_E1_HoldTime{}
	return t.HoldTime
}

// GetOrCreateNationalBits retrieves the value of the NationalBits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) GetOrCreateNationalBits() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits {
	if t.NationalBits != nil {
		return t.NationalBits
	}
	t.NationalBits = &NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits{}
	return t.NationalBits
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) GetOrCreateReportAlarm() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm{}
	return t.ReportAlarm
}

// GetBerThreshold returns the value of the BerThreshold struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E1. If the receiver or the field BerThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) GetBerThreshold() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_BerThreshold {
	if t != nil && t.BerThreshold != nil {
		return t.BerThreshold
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E1. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) GetHoldTime() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetNationalBits returns the value of the NationalBits struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E1. If the receiver or the field NationalBits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) GetNationalBits() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits {
	if t != nil && t.NationalBits != nil {
		return t.NationalBits
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E1. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) GetReportAlarm() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetClockSource retrieves the value of the leaf ClockSource from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClockSource is set, it can
// safely use t.GetClockSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClockSource == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) GetClockSource() E_NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ClockSource {
	if t == nil || t.ClockSource == 0 {
		return 0
	}
	return t.ClockSource
}

// GetE1Index retrieves the value of the leaf E1Index from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if E1Index is set, it can
// safely use t.GetE1Index() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.E1Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) GetE1Index() string {
	if t == nil || t.E1Index == nil {
		return ""
	}
	return *t.E1Index
}

// GetFraming retrieves the value of the leaf Framing from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Framing is set, it can
// safely use t.GetFraming() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Framing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) GetFraming() E_NokiaConf_Configure_Groups_Group_Port_Tdm_E1_Framing {
	if t == nil || t.Framing == 0 {
		return NokiaConf_Configure_Groups_Group_Port_Tdm_E1_Framing_g704
	}
	return t.Framing
}

// GetLoopback retrieves the value of the leaf Loopback from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loopback is set, it can
// safely use t.GetLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) GetLoopback() E_NokiaConf_Configure_Groups_Group_Port_Tdm_E1_Loopback {
	if t == nil || t.Loopback == 0 {
		return 0
	}
	return t.Loopback
}

// GetSignalMode retrieves the value of the leaf SignalMode from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalMode is set, it can
// safely use t.GetSignalMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) GetSignalMode() E_NokiaConf_Configure_Groups_Group_Port_Tdm_E1_SignalMode {
	if t == nil || t.SignalMode == 0 {
		return 0
	}
	return t.SignalMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E1
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Framing == 0 {
		t.Framing = NokiaConf_Configure_Groups_Group_Port_Tdm_E1_Framing_g704
	}
	t.BerThreshold.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.NationalBits.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
	for _, e := range t.ChannelGroup {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Tdm_E1 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) ΛListKeyMap() (map[string]interface{}, error) {
	if t.E1Index == nil {
		return nil, fmt.Errorf("nil value for key E1Index")
	}

	return map[string]interface{}{
		"e1-index": *t.E1Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E1.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E1_BerThreshold represents the /nokia-conf/configure/groups/group/port/tdm/e1/ber-threshold YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E1_BerThreshold struct {
	SignalDegrade *uint32 `path:"signal-degrade" module:"nokia-conf"`
	SignalFailure *uint32 `path:"signal-failure" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E1_BerThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_BerThreshold) IsYANGGoStruct() {}

// GetSignalDegrade retrieves the value of the leaf SignalDegrade from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_BerThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalDegrade is set, it can
// safely use t.GetSignalDegrade() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalDegrade == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_BerThreshold) GetSignalDegrade() uint32 {
	if t == nil || t.SignalDegrade == nil {
		return 5
	}
	return *t.SignalDegrade
}

// GetSignalFailure retrieves the value of the leaf SignalFailure from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_BerThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalFailure is set, it can
// safely use t.GetSignalFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_BerThreshold) GetSignalFailure() uint32 {
	if t == nil || t.SignalFailure == nil {
		return 50
	}
	return *t.SignalFailure
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_BerThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_BerThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SignalDegrade == nil {
		var v uint32 = 5
		t.SignalDegrade = &v
	}
	if t.SignalFailure == nil {
		var v uint32 = 50
		t.SignalFailure = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_BerThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E1_BerThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_BerThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_BerThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E1_BerThreshold.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_BerThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup represents the /nokia-conf/configure/groups/group/port/tdm/e1/channel-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup struct {
	AdminState             E_NokiaTypesSros_AdminState                                                `path:"admin-state" module:"nokia-conf"`
	Crc                    *uint32                                                                    `path:"crc" module:"nokia-conf"`
	Description            *string                                                                    `path:"description" module:"nokia-conf"`
	Ds0Index               NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ds0Index_Union   `path:"ds0-index" module:"nokia-conf"`
	Egress                 *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress          `path:"egress" module:"nokia-conf"`
	EncapType              E_NokiaTypesPort_SonetPathEncapType                                        `path:"encap-type" module:"nokia-conf"`
	IdleCycleFlag          E_NokiaTypesPort_TdmDsxIdleCycleFlag                                       `path:"idle-cycle-flag" module:"nokia-conf"`
	IdlePayloadFill        *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdlePayloadFill `path:"idle-payload-fill" module:"nokia-conf"`
	IdleSignalFill         *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdleSignalFill  `path:"idle-signal-fill" module:"nokia-conf"`
	LoadBalancingAlgorithm E_NokiaTypesPort_LoadBalancingAlgorithm                                    `path:"load-balancing-algorithm" module:"nokia-conf"`
	MacAddress             *string                                                                    `path:"mac-address" module:"nokia-conf"`
	Mode                   E_NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Mode           `path:"mode" module:"nokia-conf"`
	Mtu                    *uint32                                                                    `path:"mtu" module:"nokia-conf"`
	Network                *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network         `path:"network" module:"nokia-conf" yangPresence:"true"`
	Ppp                    *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp             `path:"ppp" module:"nokia-conf" yangPresence:"true"`
	Speed                  *uint32                                                                    `path:"speed" module:"nokia-conf"`
	Timeslot               []uint32                                                                   `path:"timeslot" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress{}
	return t.Egress
}

// GetOrCreateIdlePayloadFill retrieves the value of the IdlePayloadFill field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetOrCreateIdlePayloadFill() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdlePayloadFill {
	if t.IdlePayloadFill != nil {
		return t.IdlePayloadFill
	}
	t.IdlePayloadFill = &NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdlePayloadFill{}
	return t.IdlePayloadFill
}

// GetOrCreateIdleSignalFill retrieves the value of the IdleSignalFill field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetOrCreateIdleSignalFill() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdleSignalFill {
	if t.IdleSignalFill != nil {
		return t.IdleSignalFill
	}
	t.IdleSignalFill = &NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdleSignalFill{}
	return t.IdleSignalFill
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network{}
	return t.Network
}

// GetOrCreatePpp retrieves the value of the Ppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetOrCreatePpp() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp {
	if t.Ppp != nil {
		return t.Ppp
	}
	t.Ppp = &NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp{}
	return t.Ppp
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetEgress() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIdlePayloadFill returns the value of the IdlePayloadFill struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup. If the receiver or the field IdlePayloadFill is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetIdlePayloadFill() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdlePayloadFill {
	if t != nil && t.IdlePayloadFill != nil {
		return t.IdlePayloadFill
	}
	return nil
}

// GetIdleSignalFill returns the value of the IdleSignalFill struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup. If the receiver or the field IdleSignalFill is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetIdleSignalFill() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdleSignalFill {
	if t != nil && t.IdleSignalFill != nil {
		return t.IdleSignalFill
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetNetwork() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetPpp returns the value of the Ppp struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup. If the receiver or the field Ppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetPpp() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp {
	if t != nil && t.Ppp != nil {
		return t.Ppp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCrc retrieves the value of the leaf Crc from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Crc is set, it can
// safely use t.GetCrc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Crc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetCrc() uint32 {
	if t == nil || t.Crc == nil {
		return 0
	}
	return *t.Crc
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return "DS0GRP"
	}
	return *t.Description
}

// GetDs0Index retrieves the value of the leaf Ds0Index from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ds0Index is set, it can
// safely use t.GetDs0Index() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ds0Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetDs0Index() NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ds0Index_Union {
	if t == nil || t.Ds0Index == nil {
		return nil
	}
	return t.Ds0Index
}

// GetEncapType retrieves the value of the leaf EncapType from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapType is set, it can
// safely use t.GetEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetEncapType() E_NokiaTypesPort_SonetPathEncapType {
	if t == nil || t.EncapType == 0 {
		return 0
	}
	return t.EncapType
}

// GetIdleCycleFlag retrieves the value of the leaf IdleCycleFlag from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleCycleFlag is set, it can
// safely use t.GetIdleCycleFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleCycleFlag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetIdleCycleFlag() E_NokiaTypesPort_TdmDsxIdleCycleFlag {
	if t == nil || t.IdleCycleFlag == 0 {
		return 0
	}
	return t.IdleCycleFlag
}

// GetLoadBalancingAlgorithm retrieves the value of the leaf LoadBalancingAlgorithm from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingAlgorithm is set, it can
// safely use t.GetLoadBalancingAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetLoadBalancingAlgorithm() E_NokiaTypesPort_LoadBalancingAlgorithm {
	if t == nil || t.LoadBalancingAlgorithm == 0 {
		return 0
	}
	return t.LoadBalancingAlgorithm
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return "00:00:00:00:00:00"
	}
	return *t.MacAddress
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetMode() E_NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetSpeed retrieves the value of the leaf Speed from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Speed is set, it can
// safely use t.GetSpeed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Speed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetSpeed() uint32 {
	if t == nil || t.Speed == nil {
		return 64
	}
	return *t.Speed
}

// GetTimeslot retrieves the value of the leaf Timeslot from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeslot is set, it can
// safely use t.GetTimeslot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeslot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) GetTimeslot() []uint32 {
	if t == nil || t.Timeslot == nil {
		return nil
	}
	return t.Timeslot
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Description == nil {
		var v string = "DS0GRP"
		t.Description = &v
	}
	if t.MacAddress == nil {
		var v string = "00:00:00:00:00:00"
		t.MacAddress = &v
	}
	if t.Speed == nil {
		var v uint32 = 64
		t.Speed = &v
	}
	t.Egress.PopulateDefaults()
	t.IdlePayloadFill.PopulateDefaults()
	t.IdleSignalFill.PopulateDefaults()
	t.Network.PopulateDefaults()
	t.Ppp.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"ds0-index": t.Ds0Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress represents the /nokia-conf/configure/groups/group/port/tdm/e1/channel-group/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress struct {
	PortSchedulerPolicy *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy `path:"port-scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress) IsYANGGoStruct() {}

// GetOrCreatePortSchedulerPolicy retrieves the value of the PortSchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress) GetOrCreatePortSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy {
	if t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	t.PortSchedulerPolicy = &NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy{}
	return t.PortSchedulerPolicy
}

// GetPortSchedulerPolicy returns the value of the PortSchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress. If the receiver or the field PortSchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress) GetPortSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy {
	if t != nil && t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortSchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy represents the /nokia-conf/configure/groups/group/port/tdm/e1/channel-group/egress/port-scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                                         `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/port/tdm/e1/channel-group/egress/port-scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides struct {
	Level   map[NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level `path:"level" module:"nokia-conf"`
	MaxRate *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate                                                                                                                            `path:"max-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) NewLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level{
		PriorityLevel: PriorityLevel,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.PriorityLevel = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) GetOrCreateLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level {

	key := PriorityLevel

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) GetLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) DeleteLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) {
	key := PriorityLevel

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) AppendLevel(v *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) error {
	key := v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateMaxRate retrieves the value of the MaxRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) GetOrCreateMaxRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t.MaxRate != nil {
		return t.MaxRate
	}
	t.MaxRate = &NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate{}
	return t.MaxRate
}

// GetMaxRate returns the value of the MaxRate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides. If the receiver or the field MaxRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) GetMaxRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t != nil && t.MaxRate != nil {
		return t.MaxRate
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MaxRate.PopulateDefaults()
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level represents the /nokia-conf/configure/groups/group/port/tdm/e1/channel-group/egress/port-scheduler-policy/overrides/level YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level struct {
	PercentRate   *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate        `path:"percent-rate" module:"nokia-conf"`
	PriorityLevel NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union `path:"priority-level" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate               `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetPercentRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetPriorityLevel() NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union {
	if t == nil || t.PriorityLevel == nil {
		return nil
	}
	return t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"priority-level": t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate represents the /nokia-conf/configure/groups/group/port/tdm/e1/channel-group/egress/port-scheduler-policy/overrides/level/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 100
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 100
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 100
		t.Cir = &v
	}
	if t.Pir == nil {
		var v float64 = 100
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate represents the /nokia-conf/configure/groups/group/port/tdm/e1/channel-group/egress/port-scheduler-policy/overrides/level/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetCir() NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_SchedulerCirRate_Enum_max
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetPir() NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_SchedulerCirRate_Enum_max
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate represents the /nokia-conf/configure/groups/group/port/tdm/e1/channel-group/egress/port-scheduler-policy/overrides/max-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate struct {
	PercentRate *float64                                                                                                          `path:"percent-rate" module:"nokia-conf"`
	Rate        NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) IsYANGGoStruct() {
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 100
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetRate() NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentRate == nil {
		var v float64 = 100
		t.PercentRate = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdlePayloadFill represents the /nokia-conf/configure/groups/group/port/tdm/e1/channel-group/idle-payload-fill YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdlePayloadFill struct {
	AllOnes YANGEmpty `path:"all-ones" module:"nokia-conf"`
	Pattern *uint32   `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdlePayloadFill implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdlePayloadFill) IsYANGGoStruct() {}

// GetAllOnes retrieves the value of the leaf AllOnes from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdlePayloadFill
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllOnes is set, it can
// safely use t.GetAllOnes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllOnes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdlePayloadFill) GetAllOnes() YANGEmpty {
	if t == nil || t.AllOnes == false {
		return false
	}
	return t.AllOnes
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdlePayloadFill
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdlePayloadFill) GetPattern() uint32 {
	if t == nil || t.Pattern == nil {
		return 0
	}
	return *t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdlePayloadFill
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdlePayloadFill) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdlePayloadFill) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdlePayloadFill"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdlePayloadFill) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdlePayloadFill) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdlePayloadFill.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdlePayloadFill) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdleSignalFill represents the /nokia-conf/configure/groups/group/port/tdm/e1/channel-group/idle-signal-fill YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdleSignalFill struct {
	AllOnes YANGEmpty `path:"all-ones" module:"nokia-conf"`
	Pattern *uint32   `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdleSignalFill implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdleSignalFill) IsYANGGoStruct() {}

// GetAllOnes retrieves the value of the leaf AllOnes from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdleSignalFill
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllOnes is set, it can
// safely use t.GetAllOnes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllOnes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdleSignalFill) GetAllOnes() YANGEmpty {
	if t == nil || t.AllOnes == false {
		return false
	}
	return t.AllOnes
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdleSignalFill
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdleSignalFill) GetPattern() uint32 {
	if t == nil || t.Pattern == nil {
		return 0
	}
	return *t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdleSignalFill
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdleSignalFill) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdleSignalFill) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdleSignalFill"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdleSignalFill) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdleSignalFill) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdleSignalFill.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_IdleSignalFill) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network represents the /nokia-conf/configure/groups/group/port/tdm/e1/channel-group/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network struct {
	AccountingPolicy *uint32 `path:"accounting-policy" module:"nokia-conf"`
	CollectStats     *bool   `path:"collect-stats" module:"nokia-conf"`
	QueuePolicy      *string `path:"queue-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network) IsYANGGoStruct() {}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetQueuePolicy retrieves the value of the leaf QueuePolicy from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuePolicy is set, it can
// safely use t.GetQueuePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network) GetQueuePolicy() string {
	if t == nil || t.QueuePolicy == nil {
		return ""
	}
	return *t.QueuePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp represents the /nokia-conf/configure/groups/group/port/tdm/e1/channel-group/ppp YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp struct {
	BerSfLinkDown *bool                                                                    `path:"ber-sf-link-down" module:"nokia-conf"`
	Compress      *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Compress  `path:"compress" module:"nokia-conf"`
	Keepalive     *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive `path:"keepalive" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp) IsYANGGoStruct() {}

// GetOrCreateCompress retrieves the value of the Compress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp) GetOrCreateCompress() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Compress {
	if t.Compress != nil {
		return t.Compress
	}
	t.Compress = &NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Compress{}
	return t.Compress
}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp) GetOrCreateKeepalive() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive{}
	return t.Keepalive
}

// GetCompress returns the value of the Compress struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp. If the receiver or the field Compress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp) GetCompress() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Compress {
	if t != nil && t.Compress != nil {
		return t.Compress
	}
	return nil
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp) GetKeepalive() *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetBerSfLinkDown retrieves the value of the leaf BerSfLinkDown from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BerSfLinkDown is set, it can
// safely use t.GetBerSfLinkDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BerSfLinkDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp) GetBerSfLinkDown() bool {
	if t == nil || t.BerSfLinkDown == nil {
		return false
	}
	return *t.BerSfLinkDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BerSfLinkDown == nil {
		var v bool = false
		t.BerSfLinkDown = &v
	}
	t.Compress.PopulateDefaults()
	t.Keepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Compress represents the /nokia-conf/configure/groups/group/port/tdm/e1/channel-group/ppp/compress YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Compress struct {
	Acfc *bool `path:"acfc" module:"nokia-conf"`
	Pfc  *bool `path:"pfc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Compress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Compress) IsYANGGoStruct() {}

// GetAcfc retrieves the value of the leaf Acfc from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Compress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Acfc is set, it can
// safely use t.GetAcfc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Acfc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Compress) GetAcfc() bool {
	if t == nil || t.Acfc == nil {
		return false
	}
	return *t.Acfc
}

// GetPfc retrieves the value of the leaf Pfc from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Compress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pfc is set, it can
// safely use t.GetPfc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pfc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Compress) GetPfc() bool {
	if t == nil || t.Pfc == nil {
		return false
	}
	return *t.Pfc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Compress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Compress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Acfc == nil {
		var v bool = false
		t.Acfc = &v
	}
	if t.Pfc == nil {
		var v bool = false
		t.Pfc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Compress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Compress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Compress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Compress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Compress.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Compress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive represents the /nokia-conf/configure/groups/group/port/tdm/e1/channel-group/ppp/keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive struct {
	DropCount *uint32                                                                                `path:"drop-count" module:"nokia-conf"`
	Interval  NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive_Interval_Union `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive) IsYANGGoStruct() {}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive) GetInterval() NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive_Interval_Union {
	if t == nil || t.Interval == nil {
		return UnionUint32(10)
	}
	return t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.Interval == nil {
		t.Interval = UnionUint32(10)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E1_HoldTime represents the /nokia-conf/configure/groups/group/port/tdm/e1/hold-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E1_HoldTime struct {
	Down *uint32 `path:"down" module:"nokia-conf"`
	Up   *uint32 `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E1_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_HoldTime) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Down is set, it can
// safely use t.GetDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Down == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_HoldTime) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 0
	}
	return *t.Down
}

// GetUp retrieves the value of the leaf Up from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Up is set, it can
// safely use t.GetUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Up == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_HoldTime) GetUp() uint32 {
	if t == nil || t.Up == nil {
		return 0
	}
	return *t.Up
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Down == nil {
		var v uint32 = 0
		t.Down = &v
	}
	if t.Up == nil {
		var v uint32 = 0
		t.Up = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E1_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E1_HoldTime.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits represents the /nokia-conf/configure/groups/group/port/tdm/e1/national-bits YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits struct {
	Sa4 *bool `path:"sa4" module:"nokia-conf"`
	Sa5 *bool `path:"sa5" module:"nokia-conf"`
	Sa6 *bool `path:"sa6" module:"nokia-conf"`
	Sa7 *bool `path:"sa7" module:"nokia-conf"`
	Sa8 *bool `path:"sa8" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits) IsYANGGoStruct() {}

// GetSa4 retrieves the value of the leaf Sa4 from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sa4 is set, it can
// safely use t.GetSa4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sa4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits) GetSa4() bool {
	if t == nil || t.Sa4 == nil {
		return false
	}
	return *t.Sa4
}

// GetSa5 retrieves the value of the leaf Sa5 from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sa5 is set, it can
// safely use t.GetSa5() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sa5 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits) GetSa5() bool {
	if t == nil || t.Sa5 == nil {
		return false
	}
	return *t.Sa5
}

// GetSa6 retrieves the value of the leaf Sa6 from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sa6 is set, it can
// safely use t.GetSa6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sa6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits) GetSa6() bool {
	if t == nil || t.Sa6 == nil {
		return false
	}
	return *t.Sa6
}

// GetSa7 retrieves the value of the leaf Sa7 from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sa7 is set, it can
// safely use t.GetSa7() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sa7 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits) GetSa7() bool {
	if t == nil || t.Sa7 == nil {
		return false
	}
	return *t.Sa7
}

// GetSa8 retrieves the value of the leaf Sa8 from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sa8 is set, it can
// safely use t.GetSa8() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sa8 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits) GetSa8() bool {
	if t == nil || t.Sa8 == nil {
		return false
	}
	return *t.Sa8
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Sa4 == nil {
		var v bool = false
		t.Sa4 = &v
	}
	if t.Sa5 == nil {
		var v bool = false
		t.Sa5 = &v
	}
	if t.Sa6 == nil {
		var v bool = false
		t.Sa6 = &v
	}
	if t.Sa7 == nil {
		var v bool = false
		t.Sa7 = &v
	}
	if t.Sa8 == nil {
		var v bool = false
		t.Sa8 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_NationalBits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm represents the /nokia-conf/configure/groups/group/port/tdm/e1/report-alarm YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm struct {
	Ais    *bool `path:"ais" module:"nokia-conf"`
	BerSd  *bool `path:"ber-sd" module:"nokia-conf"`
	BerSf  *bool `path:"ber-sf" module:"nokia-conf"`
	Looped *bool `path:"looped" module:"nokia-conf"`
	Los    *bool `path:"los" module:"nokia-conf"`
	Oof    *bool `path:"oof" module:"nokia-conf"`
	Rai    *bool `path:"rai" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm) IsYANGGoStruct() {}

// GetAis retrieves the value of the leaf Ais from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ais is set, it can
// safely use t.GetAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm) GetAis() bool {
	if t == nil || t.Ais == nil {
		return true
	}
	return *t.Ais
}

// GetBerSd retrieves the value of the leaf BerSd from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BerSd is set, it can
// safely use t.GetBerSd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BerSd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm) GetBerSd() bool {
	if t == nil || t.BerSd == nil {
		return false
	}
	return *t.BerSd
}

// GetBerSf retrieves the value of the leaf BerSf from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BerSf is set, it can
// safely use t.GetBerSf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BerSf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm) GetBerSf() bool {
	if t == nil || t.BerSf == nil {
		return false
	}
	return *t.BerSf
}

// GetLooped retrieves the value of the leaf Looped from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Looped is set, it can
// safely use t.GetLooped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Looped == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm) GetLooped() bool {
	if t == nil || t.Looped == nil {
		return false
	}
	return *t.Looped
}

// GetLos retrieves the value of the leaf Los from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Los is set, it can
// safely use t.GetLos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Los == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm) GetLos() bool {
	if t == nil || t.Los == nil {
		return true
	}
	return *t.Los
}

// GetOof retrieves the value of the leaf Oof from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Oof is set, it can
// safely use t.GetOof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Oof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm) GetOof() bool {
	if t == nil || t.Oof == nil {
		return false
	}
	return *t.Oof
}

// GetRai retrieves the value of the leaf Rai from the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rai is set, it can
// safely use t.GetRai() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rai == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm) GetRai() bool {
	if t == nil || t.Rai == nil {
		return false
	}
	return *t.Rai
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ais == nil {
		var v bool = true
		t.Ais = &v
	}
	if t.BerSd == nil {
		var v bool = false
		t.BerSd = &v
	}
	if t.BerSf == nil {
		var v bool = false
		t.BerSf = &v
	}
	if t.Looped == nil {
		var v bool = false
		t.Looped = &v
	}
	if t.Los == nil {
		var v bool = true
		t.Los = &v
	}
	if t.Oof == nil {
		var v bool = false
		t.Oof = &v
	}
	if t.Rai == nil {
		var v bool = false
		t.Rai = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E1_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E3 represents the /nokia-conf/configure/groups/group/port/tdm/e3 YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E3 struct {
	AdminState             E_NokiaTypesSros_AdminState                                `path:"admin-state" module:"nokia-conf"`
	ClockSource            E_NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ClockSource `path:"clock-source" module:"nokia-conf"`
	Crc                    *uint32                                                    `path:"crc" module:"nokia-conf"`
	Description            *string                                                    `path:"description" module:"nokia-conf"`
	E3Index                *string                                                    `path:"e3-index" module:"nokia-conf"`
	Egress                 *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress       `path:"egress" module:"nokia-conf"`
	EncapType              E_NokiaTypesPort_SonetPathEncapType                        `path:"encap-type" module:"nokia-conf"`
	Framing                E_NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Framing     `path:"framing" module:"nokia-conf"`
	IdleCycleFlag          E_NokiaTypesPort_TdmDsxIdleCycleFlag                       `path:"idle-cycle-flag" module:"nokia-conf"`
	LoadBalancingAlgorithm E_NokiaTypesPort_LoadBalancingAlgorithm                    `path:"load-balancing-algorithm" module:"nokia-conf"`
	Loopback               E_NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Loopback    `path:"loopback" module:"nokia-conf"`
	MacAddress             *string                                                    `path:"mac-address" module:"nokia-conf"`
	Mode                   E_NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Mode        `path:"mode" module:"nokia-conf"`
	Mtu                    *uint32                                                    `path:"mtu" module:"nokia-conf"`
	Network                *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network      `path:"network" module:"nokia-conf" yangPresence:"true"`
	Ppp                    *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp          `path:"ppp" module:"nokia-conf" yangPresence:"true"`
	ReportAlarm            *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm  `path:"report-alarm" module:"nokia-conf"`
	Scramble               *bool                                                      `path:"scramble" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress{}
	return t.Egress
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network{}
	return t.Network
}

// GetOrCreatePpp retrieves the value of the Ppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetOrCreatePpp() *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp {
	if t.Ppp != nil {
		return t.Ppp
	}
	t.Ppp = &NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp{}
	return t.Ppp
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetOrCreateReportAlarm() *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm{}
	return t.ReportAlarm
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E3. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetEgress() *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E3. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetNetwork() *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetPpp returns the value of the Ppp struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E3. If the receiver or the field Ppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetPpp() *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp {
	if t != nil && t.Ppp != nil {
		return t.Ppp
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E3. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetReportAlarm() *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetClockSource retrieves the value of the leaf ClockSource from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClockSource is set, it can
// safely use t.GetClockSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClockSource == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetClockSource() E_NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ClockSource {
	if t == nil || t.ClockSource == 0 {
		return NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ClockSource_node_timed
	}
	return t.ClockSource
}

// GetCrc retrieves the value of the leaf Crc from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Crc is set, it can
// safely use t.GetCrc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Crc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetCrc() uint32 {
	if t == nil || t.Crc == nil {
		return 0
	}
	return *t.Crc
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetDescription() string {
	if t == nil || t.Description == nil {
		return "E3"
	}
	return *t.Description
}

// GetE3Index retrieves the value of the leaf E3Index from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if E3Index is set, it can
// safely use t.GetE3Index() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.E3Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetE3Index() string {
	if t == nil || t.E3Index == nil {
		return ""
	}
	return *t.E3Index
}

// GetEncapType retrieves the value of the leaf EncapType from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapType is set, it can
// safely use t.GetEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetEncapType() E_NokiaTypesPort_SonetPathEncapType {
	if t == nil || t.EncapType == 0 {
		return 0
	}
	return t.EncapType
}

// GetFraming retrieves the value of the leaf Framing from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Framing is set, it can
// safely use t.GetFraming() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Framing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetFraming() E_NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Framing {
	if t == nil || t.Framing == 0 {
		return NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Framing_g751
	}
	return t.Framing
}

// GetIdleCycleFlag retrieves the value of the leaf IdleCycleFlag from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleCycleFlag is set, it can
// safely use t.GetIdleCycleFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleCycleFlag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetIdleCycleFlag() E_NokiaTypesPort_TdmDsxIdleCycleFlag {
	if t == nil || t.IdleCycleFlag == 0 {
		return 0
	}
	return t.IdleCycleFlag
}

// GetLoadBalancingAlgorithm retrieves the value of the leaf LoadBalancingAlgorithm from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingAlgorithm is set, it can
// safely use t.GetLoadBalancingAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetLoadBalancingAlgorithm() E_NokiaTypesPort_LoadBalancingAlgorithm {
	if t == nil || t.LoadBalancingAlgorithm == 0 {
		return 0
	}
	return t.LoadBalancingAlgorithm
}

// GetLoopback retrieves the value of the leaf Loopback from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loopback is set, it can
// safely use t.GetLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetLoopback() E_NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Loopback {
	if t == nil || t.Loopback == 0 {
		return 0
	}
	return t.Loopback
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return "00:00:00:00:00:00"
	}
	return *t.MacAddress
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetMode() E_NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetScramble retrieves the value of the leaf Scramble from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scramble is set, it can
// safely use t.GetScramble() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scramble == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) GetScramble() bool {
	if t == nil || t.Scramble == nil {
		return false
	}
	return *t.Scramble
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ClockSource == 0 {
		t.ClockSource = NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ClockSource_node_timed
	}
	if t.Description == nil {
		var v string = "E3"
		t.Description = &v
	}
	if t.Framing == 0 {
		t.Framing = NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Framing_g751
	}
	if t.MacAddress == nil {
		var v string = "00:00:00:00:00:00"
		t.MacAddress = &v
	}
	t.Egress.PopulateDefaults()
	t.Network.PopulateDefaults()
	t.Ppp.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Tdm_E3 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) ΛListKeyMap() (map[string]interface{}, error) {
	if t.E3Index == nil {
		return nil, fmt.Errorf("nil value for key E3Index")
	}

	return map[string]interface{}{
		"e3-index": *t.E3Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E3.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress represents the /nokia-conf/configure/groups/group/port/tdm/e3/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress struct {
	PortSchedulerPolicy *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy `path:"port-scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress) IsYANGGoStruct() {}

// GetOrCreatePortSchedulerPolicy retrieves the value of the PortSchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress) GetOrCreatePortSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy {
	if t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	t.PortSchedulerPolicy = &NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy{}
	return t.PortSchedulerPolicy
}

// GetPortSchedulerPolicy returns the value of the PortSchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress. If the receiver or the field PortSchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress) GetPortSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy {
	if t != nil && t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortSchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy represents the /nokia-conf/configure/groups/group/port/tdm/e3/egress/port-scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                            `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/port/tdm/e3/egress/port-scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides struct {
	Level   map[NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level `path:"level" module:"nokia-conf"`
	MaxRate *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate                                                                                                               `path:"max-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) NewLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level{
		PriorityLevel: PriorityLevel,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.PriorityLevel = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) GetOrCreateLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level {

	key := PriorityLevel

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) GetLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) DeleteLevel(PriorityLevel NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union) {
	key := PriorityLevel

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) AppendLevel(v *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) error {
	key := v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateMaxRate retrieves the value of the MaxRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) GetOrCreateMaxRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t.MaxRate != nil {
		return t.MaxRate
	}
	t.MaxRate = &NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate{}
	return t.MaxRate
}

// GetMaxRate returns the value of the MaxRate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides. If the receiver or the field MaxRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) GetMaxRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t != nil && t.MaxRate != nil {
		return t.MaxRate
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MaxRate.PopulateDefaults()
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level represents the /nokia-conf/configure/groups/group/port/tdm/e3/egress/port-scheduler-policy/overrides/level YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level struct {
	PercentRate   *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate        `path:"percent-rate" module:"nokia-conf"`
	PriorityLevel NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union `path:"priority-level" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate               `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) GetPercentRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) GetRate() *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) GetPriorityLevel() NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PriorityLevel_Union {
	if t == nil || t.PriorityLevel == nil {
		return nil
	}
	return t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"priority-level": t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate represents the /nokia-conf/configure/groups/group/port/tdm/e3/egress/port-scheduler-policy/overrides/level/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 100
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 100
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 100
		t.Cir = &v
	}
	if t.Pir == nil {
		var v float64 = 100
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate represents the /nokia-conf/configure/groups/group/port/tdm/e3/egress/port-scheduler-policy/overrides/level/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetCir() NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_SchedulerCirRate_Enum_max
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetPir() NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_SchedulerCirRate_Enum_max
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate represents the /nokia-conf/configure/groups/group/port/tdm/e3/egress/port-scheduler-policy/overrides/max-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate struct {
	PercentRate *float64                                                                                             `path:"percent-rate" module:"nokia-conf"`
	Rate        NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate) IsYANGGoStruct() {
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 100
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetRate() NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentRate == nil {
		var v float64 = 100
		t.PercentRate = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network represents the /nokia-conf/configure/groups/group/port/tdm/e3/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network struct {
	AccountingPolicy *uint32 `path:"accounting-policy" module:"nokia-conf"`
	CollectStats     *bool   `path:"collect-stats" module:"nokia-conf"`
	QueuePolicy      *string `path:"queue-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network) IsYANGGoStruct() {}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetQueuePolicy retrieves the value of the leaf QueuePolicy from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuePolicy is set, it can
// safely use t.GetQueuePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network) GetQueuePolicy() string {
	if t == nil || t.QueuePolicy == nil {
		return ""
	}
	return *t.QueuePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp represents the /nokia-conf/configure/groups/group/port/tdm/e3/ppp YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp struct {
	Keepalive *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive `path:"keepalive" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp) IsYANGGoStruct() {}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp) GetOrCreateKeepalive() *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive{}
	return t.Keepalive
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp) GetKeepalive() *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Keepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive represents the /nokia-conf/configure/groups/group/port/tdm/e3/ppp/keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive struct {
	DropCount *uint32                                                                   `path:"drop-count" module:"nokia-conf"`
	Interval  NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive_Interval_Union `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive) IsYANGGoStruct() {}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive) GetInterval() NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive_Interval_Union {
	if t == nil || t.Interval == nil {
		return UnionUint32(10)
	}
	return t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.Interval == nil {
		t.Interval = UnionUint32(10)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_Ppp_Keepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm represents the /nokia-conf/configure/groups/group/port/tdm/e3/report-alarm YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm struct {
	Ais    *bool `path:"ais" module:"nokia-conf"`
	Looped *bool `path:"looped" module:"nokia-conf"`
	Los    *bool `path:"los" module:"nokia-conf"`
	Oof    *bool `path:"oof" module:"nokia-conf"`
	Rai    *bool `path:"rai" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm) IsYANGGoStruct() {}

// GetAis retrieves the value of the leaf Ais from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ais is set, it can
// safely use t.GetAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm) GetAis() bool {
	if t == nil || t.Ais == nil {
		return true
	}
	return *t.Ais
}

// GetLooped retrieves the value of the leaf Looped from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Looped is set, it can
// safely use t.GetLooped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Looped == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm) GetLooped() bool {
	if t == nil || t.Looped == nil {
		return false
	}
	return *t.Looped
}

// GetLos retrieves the value of the leaf Los from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Los is set, it can
// safely use t.GetLos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Los == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm) GetLos() bool {
	if t == nil || t.Los == nil {
		return true
	}
	return *t.Los
}

// GetOof retrieves the value of the leaf Oof from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Oof is set, it can
// safely use t.GetOof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Oof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm) GetOof() bool {
	if t == nil || t.Oof == nil {
		return false
	}
	return *t.Oof
}

// GetRai retrieves the value of the leaf Rai from the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rai is set, it can
// safely use t.GetRai() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rai == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm) GetRai() bool {
	if t == nil || t.Rai == nil {
		return false
	}
	return *t.Rai
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ais == nil {
		var v bool = true
		t.Ais = &v
	}
	if t.Looped == nil {
		var v bool = false
		t.Looped = &v
	}
	if t.Los == nil {
		var v bool = true
		t.Los = &v
	}
	if t.Oof == nil {
		var v bool = false
		t.Oof = &v
	}
	if t.Rai == nil {
		var v bool = false
		t.Rai = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_E3_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Tdm_HoldTime represents the /nokia-conf/configure/groups/group/port/tdm/hold-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Tdm_HoldTime struct {
	Down *uint32 `path:"down" module:"nokia-conf"`
	Up   *uint32 `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Tdm_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_HoldTime) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the NokiaConf_Configure_Groups_Group_Port_Tdm_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Down is set, it can
// safely use t.GetDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Down == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_HoldTime) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 5
	}
	return *t.Down
}

// GetUp retrieves the value of the leaf Up from the NokiaConf_Configure_Groups_Group_Port_Tdm_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Up is set, it can
// safely use t.GetUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Up == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_HoldTime) GetUp() uint32 {
	if t == nil || t.Up == nil {
		return 0
	}
	return *t.Up
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Tdm_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Down == nil {
		var v uint32 = 5
		t.Down = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Tdm_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Tdm_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Tdm_HoldTime.
func (*NokiaConf_Configure_Groups_Group_Port_Tdm_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Port_Transceiver represents the /nokia-conf/configure/groups/group/port/transceiver YANG schema element.
type NokiaConf_Configure_Groups_Group_Port_Transceiver struct {
	DigitalCoherentOptics *bool `path:"digital-coherent-optics" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Port_Transceiver implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Port_Transceiver) IsYANGGoStruct() {}

// GetDigitalCoherentOptics retrieves the value of the leaf DigitalCoherentOptics from the NokiaConf_Configure_Groups_Group_Port_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DigitalCoherentOptics is set, it can
// safely use t.GetDigitalCoherentOptics() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DigitalCoherentOptics == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Port_Transceiver) GetDigitalCoherentOptics() bool {
	if t == nil || t.DigitalCoherentOptics == nil {
		return false
	}
	return *t.DigitalCoherentOptics
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Port_Transceiver
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Port_Transceiver) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DigitalCoherentOptics == nil {
		var v bool = false
		t.DigitalCoherentOptics = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Transceiver) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Port_Transceiver"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Port_Transceiver) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Port_Transceiver) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Port_Transceiver.
func (*NokiaConf_Configure_Groups_Group_Port_Transceiver) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PwPort represents the /nokia-conf/configure/groups/group/pw-port YANG schema element.
type NokiaConf_Configure_Groups_Group_PwPort struct {
	Description *string                                                                                                  `path:"description" module:"nokia-conf"`
	Dot1QEtype  *string                                                                                                  `path:"dot1q-etype" module:"nokia-conf"`
	EncapType   E_NokiaConf_Configure_Groups_Group_PwPort_EncapType                                                      `path:"encap-type" module:"nokia-conf"`
	Epipe       map[string]*NokiaConf_Configure_Groups_Group_PwPort_Epipe                                                `path:"epipe" module:"nokia-conf"`
	OperGroup   *string                                                                                                  `path:"oper-group" module:"nokia-conf"`
	PwPortId    NokiaConf_Configure_Groups_Group_PwPort_PwPortId_Union                                                   `path:"pw-port-id" module:"nokia-conf"`
	QinqEtype   *string                                                                                                  `path:"qinq-etype" module:"nokia-conf"`
	Sdp         map[NokiaConf_Configure_Groups_Group_PwPort_Sdp_SdpId_Union]*NokiaConf_Configure_Groups_Group_PwPort_Sdp `path:"sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PwPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PwPort) IsYANGGoStruct() {}

// NewEpipe creates a new entry in the Epipe list of the
// NokiaConf_Configure_Groups_Group_PwPort struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_PwPort) NewEpipe(ServiceName string) (*NokiaConf_Configure_Groups_Group_PwPort_Epipe, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Epipe == nil {
		t.Epipe = make(map[string]*NokiaConf_Configure_Groups_Group_PwPort_Epipe)
	}

	key := ServiceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Epipe[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Epipe", key)
	}

	t.Epipe[key] = &NokiaConf_Configure_Groups_Group_PwPort_Epipe{
		ServiceName: &ServiceName,
	}

	return t.Epipe[key], nil
}

// RenameEpipe renames an entry in the list Epipe within
// the NokiaConf_Configure_Groups_Group_PwPort struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_PwPort) RenameEpipe(oldK, newK string) error {
	if _, ok := t.Epipe[newK]; ok {
		return fmt.Errorf("key %v already exists in Epipe", newK)
	}

	e, ok := t.Epipe[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Epipe", oldK)
	}
	e.ServiceName = &newK

	t.Epipe[newK] = e
	delete(t.Epipe, oldK)
	return nil
}

// GetOrCreateEpipe retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PwPort. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_PwPort) GetOrCreateEpipe(ServiceName string) *NokiaConf_Configure_Groups_Group_PwPort_Epipe {

	key := ServiceName

	if v, ok := t.Epipe[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEpipe(ServiceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEpipe got unexpected error: %v", err))
	}
	return v
}

// GetEpipe retrieves the value with the specified key from
// the Epipe map field of NokiaConf_Configure_Groups_Group_PwPort. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PwPort) GetEpipe(ServiceName string) *NokiaConf_Configure_Groups_Group_PwPort_Epipe {

	if t == nil {
		return nil
	}

	key := ServiceName

	if lm, ok := t.Epipe[key]; ok {
		return lm
	}
	return nil
}

// DeleteEpipe deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PwPort. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_PwPort) DeleteEpipe(ServiceName string) {
	key := ServiceName

	delete(t.Epipe, key)
}

// AppendEpipe appends the supplied NokiaConf_Configure_Groups_Group_PwPort_Epipe struct to the
// list Epipe of NokiaConf_Configure_Groups_Group_PwPort. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PwPort_Epipe already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_PwPort) AppendEpipe(v *NokiaConf_Configure_Groups_Group_PwPort_Epipe) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key received for ServiceName")
	}

	key := *v.ServiceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Epipe == nil {
		t.Epipe = make(map[string]*NokiaConf_Configure_Groups_Group_PwPort_Epipe)
	}

	if _, ok := t.Epipe[key]; ok {
		return fmt.Errorf("duplicate key for list Epipe %v", key)
	}

	t.Epipe[key] = v
	return nil
}

// NewSdp creates a new entry in the Sdp list of the
// NokiaConf_Configure_Groups_Group_PwPort struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_PwPort) NewSdp(SdpId NokiaConf_Configure_Groups_Group_PwPort_Sdp_SdpId_Union) (*NokiaConf_Configure_Groups_Group_PwPort_Sdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sdp == nil {
		t.Sdp = make(map[NokiaConf_Configure_Groups_Group_PwPort_Sdp_SdpId_Union]*NokiaConf_Configure_Groups_Group_PwPort_Sdp)
	}

	key := SdpId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sdp", key)
	}

	t.Sdp[key] = &NokiaConf_Configure_Groups_Group_PwPort_Sdp{
		SdpId: SdpId,
	}

	return t.Sdp[key], nil
}

// RenameSdp renames an entry in the list Sdp within
// the NokiaConf_Configure_Groups_Group_PwPort struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_PwPort) RenameSdp(oldK, newK NokiaConf_Configure_Groups_Group_PwPort_Sdp_SdpId_Union) error {
	if _, ok := t.Sdp[newK]; ok {
		return fmt.Errorf("key %v already exists in Sdp", newK)
	}

	e, ok := t.Sdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sdp", oldK)
	}
	e.SdpId = newK

	t.Sdp[newK] = e
	delete(t.Sdp, oldK)
	return nil
}

// GetOrCreateSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PwPort. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_PwPort) GetOrCreateSdp(SdpId NokiaConf_Configure_Groups_Group_PwPort_Sdp_SdpId_Union) *NokiaConf_Configure_Groups_Group_PwPort_Sdp {

	key := SdpId

	if v, ok := t.Sdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSdp(SdpId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSdp got unexpected error: %v", err))
	}
	return v
}

// GetSdp retrieves the value with the specified key from
// the Sdp map field of NokiaConf_Configure_Groups_Group_PwPort. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PwPort) GetSdp(SdpId NokiaConf_Configure_Groups_Group_PwPort_Sdp_SdpId_Union) *NokiaConf_Configure_Groups_Group_PwPort_Sdp {

	if t == nil {
		return nil
	}

	key := SdpId

	if lm, ok := t.Sdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_PwPort. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_PwPort) DeleteSdp(SdpId NokiaConf_Configure_Groups_Group_PwPort_Sdp_SdpId_Union) {
	key := SdpId

	delete(t.Sdp, key)
}

// AppendSdp appends the supplied NokiaConf_Configure_Groups_Group_PwPort_Sdp struct to the
// list Sdp of NokiaConf_Configure_Groups_Group_PwPort. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PwPort_Sdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_PwPort) AppendSdp(v *NokiaConf_Configure_Groups_Group_PwPort_Sdp) error {
	key := v.SdpId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sdp == nil {
		t.Sdp = make(map[NokiaConf_Configure_Groups_Group_PwPort_Sdp_SdpId_Union]*NokiaConf_Configure_Groups_Group_PwPort_Sdp)
	}

	if _, ok := t.Sdp[key]; ok {
		return fmt.Errorf("duplicate key for list Sdp %v", key)
	}

	t.Sdp[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort) GetDescription() string {
	if t == nil || t.Description == nil {
		return "PW Port"
	}
	return *t.Description
}

// GetDot1QEtype retrieves the value of the leaf Dot1QEtype from the NokiaConf_Configure_Groups_Group_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1QEtype is set, it can
// safely use t.GetDot1QEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1QEtype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort) GetDot1QEtype() string {
	if t == nil || t.Dot1QEtype == nil {
		return "33024"
	}
	return *t.Dot1QEtype
}

// GetEncapType retrieves the value of the leaf EncapType from the NokiaConf_Configure_Groups_Group_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapType is set, it can
// safely use t.GetEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort) GetEncapType() E_NokiaConf_Configure_Groups_Group_PwPort_EncapType {
	if t == nil || t.EncapType == 0 {
		return NokiaConf_Configure_Groups_Group_PwPort_EncapType_dot1q
	}
	return t.EncapType
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Groups_Group_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetPwPortId retrieves the value of the leaf PwPortId from the NokiaConf_Configure_Groups_Group_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PwPortId is set, it can
// safely use t.GetPwPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PwPortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort) GetPwPortId() NokiaConf_Configure_Groups_Group_PwPort_PwPortId_Union {
	if t == nil || t.PwPortId == nil {
		return nil
	}
	return t.PwPortId
}

// GetQinqEtype retrieves the value of the leaf QinqEtype from the NokiaConf_Configure_Groups_Group_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QinqEtype is set, it can
// safely use t.GetQinqEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QinqEtype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort) GetQinqEtype() string {
	if t == nil || t.QinqEtype == nil {
		return "33024"
	}
	return *t.QinqEtype
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PwPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PwPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Description == nil {
		var v string = "PW Port"
		t.Description = &v
	}
	if t.Dot1QEtype == nil {
		var v string = "33024"
		t.Dot1QEtype = &v
	}
	if t.EncapType == 0 {
		t.EncapType = NokiaConf_Configure_Groups_Group_PwPort_EncapType_dot1q
	}
	if t.QinqEtype == nil {
		var v string = "33024"
		t.QinqEtype = &v
	}
	for _, e := range t.Epipe {
		e.PopulateDefaults()
	}
	for _, e := range t.Sdp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PwPort struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PwPort) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"pw-port-id": t.PwPortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PwPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PwPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PwPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PwPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PwPort.
func (*NokiaConf_Configure_Groups_Group_PwPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PwPort_Epipe represents the /nokia-conf/configure/groups/group/pw-port/epipe YANG schema element.
type NokiaConf_Configure_Groups_Group_PwPort_Epipe struct {
	AdminState                   E_NokiaTypesSros_AdminState                           `path:"admin-state" module:"nokia-conf"`
	DownOnPeerTldpPwStatusFaults *bool                                                 `path:"down-on-peer-tldp-pw-status-faults" module:"nokia-conf"`
	Egress                       *NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress `path:"egress" module:"nokia-conf"`
	FpeId                        *uint32                                               `path:"fpe-id" module:"nokia-conf"`
	MonitorOperGroup             *string                                               `path:"monitor-oper-group" module:"nokia-conf"`
	OperUpOnMhStandby            *bool                                                 `path:"oper-up-on-mh-standby" module:"nokia-conf"`
	ServiceName                  *string                                               `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PwPort_Epipe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PwPort_Epipe) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress{}
	return t.Egress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_PwPort_Epipe. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe) GetEgress() *NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_PwPort_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetDownOnPeerTldpPwStatusFaults retrieves the value of the leaf DownOnPeerTldpPwStatusFaults from the NokiaConf_Configure_Groups_Group_PwPort_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DownOnPeerTldpPwStatusFaults is set, it can
// safely use t.GetDownOnPeerTldpPwStatusFaults() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DownOnPeerTldpPwStatusFaults == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe) GetDownOnPeerTldpPwStatusFaults() bool {
	if t == nil || t.DownOnPeerTldpPwStatusFaults == nil {
		return false
	}
	return *t.DownOnPeerTldpPwStatusFaults
}

// GetFpeId retrieves the value of the leaf FpeId from the NokiaConf_Configure_Groups_Group_PwPort_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpeId is set, it can
// safely use t.GetFpeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpeId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe) GetFpeId() uint32 {
	if t == nil || t.FpeId == nil {
		return 0
	}
	return *t.FpeId
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Groups_Group_PwPort_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetOperUpOnMhStandby retrieves the value of the leaf OperUpOnMhStandby from the NokiaConf_Configure_Groups_Group_PwPort_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperUpOnMhStandby is set, it can
// safely use t.GetOperUpOnMhStandby() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperUpOnMhStandby == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe) GetOperUpOnMhStandby() bool {
	if t == nil || t.OperUpOnMhStandby == nil {
		return false
	}
	return *t.OperUpOnMhStandby
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_PwPort_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PwPort_Epipe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.DownOnPeerTldpPwStatusFaults == nil {
		var v bool = false
		t.DownOnPeerTldpPwStatusFaults = &v
	}
	if t.OperUpOnMhStandby == nil {
		var v bool = false
		t.OperUpOnMhStandby = &v
	}
	t.Egress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PwPort_Epipe struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"service-name": *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PwPort_Epipe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PwPort_Epipe.
func (*NokiaConf_Configure_Groups_Group_PwPort_Epipe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress represents the /nokia-conf/configure/groups/group/pw-port/epipe/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress struct {
	Shaper *NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress_Shaper `path:"shaper" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress) IsYANGGoStruct() {}

// GetOrCreateShaper retrieves the value of the Shaper field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress) GetOrCreateShaper() *NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress_Shaper {
	if t.Shaper != nil {
		return t.Shaper
	}
	t.Shaper = &NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress_Shaper{}
	return t.Shaper
}

// GetShaper returns the value of the Shaper struct pointer
// from NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress. If the receiver or the field Shaper is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress) GetShaper() *NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress_Shaper {
	if t != nil && t.Shaper != nil {
		return t.Shaper
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Shaper.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress.
func (*NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress_Shaper represents the /nokia-conf/configure/groups/group/pw-port/epipe/egress/shaper YANG schema element.
type NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress_Shaper struct {
	IntermediateDestinationId *string `path:"intermediate-destination-id" module:"nokia-conf"`
	VirtualPort               *string `path:"virtual-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress_Shaper implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress_Shaper) IsYANGGoStruct() {}

// GetIntermediateDestinationId retrieves the value of the leaf IntermediateDestinationId from the NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress_Shaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IntermediateDestinationId is set, it can
// safely use t.GetIntermediateDestinationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IntermediateDestinationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress_Shaper) GetIntermediateDestinationId() string {
	if t == nil || t.IntermediateDestinationId == nil {
		return ""
	}
	return *t.IntermediateDestinationId
}

// GetVirtualPort retrieves the value of the leaf VirtualPort from the NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress_Shaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualPort is set, it can
// safely use t.GetVirtualPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress_Shaper) GetVirtualPort() string {
	if t == nil || t.VirtualPort == nil {
		return ""
	}
	return *t.VirtualPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress_Shaper
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress_Shaper) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress_Shaper) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress_Shaper"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress_Shaper) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress_Shaper) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress_Shaper.
func (*NokiaConf_Configure_Groups_Group_PwPort_Epipe_Egress_Shaper) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PwPort_Sdp represents the /nokia-conf/configure/groups/group/pw-port/sdp YANG schema element.
type NokiaConf_Configure_Groups_Group_PwPort_Sdp struct {
	AdminState       E_NokiaTypesSros_AdminState                             `path:"admin-state" module:"nokia-conf"`
	AdvServiceMtu    *int32                                                  `path:"adv-service-mtu" module:"nokia-conf"`
	ControlWord      *bool                                                   `path:"control-word" module:"nokia-conf"`
	Egress           *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress     `path:"egress" module:"nokia-conf"`
	EntropyLabel     *bool                                                   `path:"entropy-label" module:"nokia-conf"`
	Ingress          *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Ingress    `path:"ingress" module:"nokia-conf"`
	MonitorOperGroup *string                                                 `path:"monitor-oper-group" module:"nokia-conf"`
	SdpId            NokiaConf_Configure_Groups_Group_PwPort_Sdp_SdpId_Union `path:"sdp-id" module:"nokia-conf"`
	VcId             *uint32                                                 `path:"vc-id" module:"nokia-conf"`
	VcType           E_NokiaTypesServices_PwPortSdpBindVcType                `path:"vc-type" module:"nokia-conf"`
	VlanVcTag        *uint32                                                 `path:"vlan-vc-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PwPort_Sdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PwPort_Sdp) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_PwPort_Sdp_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_PwPort_Sdp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp) GetEgress() *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_PwPort_Sdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp) GetIngress() *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_PwPort_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAdvServiceMtu retrieves the value of the leaf AdvServiceMtu from the NokiaConf_Configure_Groups_Group_PwPort_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvServiceMtu is set, it can
// safely use t.GetAdvServiceMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvServiceMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp) GetAdvServiceMtu() int32 {
	if t == nil || t.AdvServiceMtu == nil {
		return 0
	}
	return *t.AdvServiceMtu
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Groups_Group_PwPort_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Groups_Group_PwPort_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp) GetEntropyLabel() bool {
	if t == nil || t.EntropyLabel == nil {
		return false
	}
	return *t.EntropyLabel
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Groups_Group_PwPort_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetSdpId retrieves the value of the leaf SdpId from the NokiaConf_Configure_Groups_Group_PwPort_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpId is set, it can
// safely use t.GetSdpId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp) GetSdpId() NokiaConf_Configure_Groups_Group_PwPort_Sdp_SdpId_Union {
	if t == nil || t.SdpId == nil {
		return nil
	}
	return t.SdpId
}

// GetVcId retrieves the value of the leaf VcId from the NokiaConf_Configure_Groups_Group_PwPort_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcId is set, it can
// safely use t.GetVcId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp) GetVcId() uint32 {
	if t == nil || t.VcId == nil {
		return 0
	}
	return *t.VcId
}

// GetVcType retrieves the value of the leaf VcType from the NokiaConf_Configure_Groups_Group_PwPort_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcType is set, it can
// safely use t.GetVcType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp) GetVcType() E_NokiaTypesServices_PwPortSdpBindVcType {
	if t == nil || t.VcType == 0 {
		return NokiaTypesServices_PwPortSdpBindVcType_ether
	}
	return t.VcType
}

// GetVlanVcTag retrieves the value of the leaf VlanVcTag from the NokiaConf_Configure_Groups_Group_PwPort_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanVcTag is set, it can
// safely use t.GetVlanVcTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanVcTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp) GetVlanVcTag() uint32 {
	if t == nil || t.VlanVcTag == nil {
		return 0
	}
	return *t.VlanVcTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PwPort_Sdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	if t.EntropyLabel == nil {
		var v bool = false
		t.EntropyLabel = &v
	}
	if t.VcType == 0 {
		t.VcType = NokiaTypesServices_PwPortSdpBindVcType_ether
	}
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_PwPort_Sdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"sdp-id": t.SdpId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PwPort_Sdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PwPort_Sdp.
func (*NokiaConf_Configure_Groups_Group_PwPort_Sdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress represents the /nokia-conf/configure/groups/group/pw-port/sdp/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress struct {
	Shaper  *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper `path:"shaper" module:"nokia-conf"`
	VcLabel *uint32                                                    `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress) IsYANGGoStruct() {}

// GetOrCreateShaper retrieves the value of the Shaper field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress) GetOrCreateShaper() *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper {
	if t.Shaper != nil {
		return t.Shaper
	}
	t.Shaper = &NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper{}
	return t.Shaper
}

// GetShaper returns the value of the Shaper struct pointer
// from NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress. If the receiver or the field Shaper is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress) GetShaper() *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper {
	if t != nil && t.Shaper != nil {
		return t.Shaper
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Shaper.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress.
func (*NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper represents the /nokia-conf/configure/groups/group/pw-port/sdp/egress/shaper YANG schema element.
type NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper struct {
	IntermediateDestinationId *string `path:"intermediate-destination-id" module:"nokia-conf"`
	PwSapSecondaryShaper      *string `path:"pw-sap-secondary-shaper" module:"nokia-conf"`
	VirtualPort               *string `path:"virtual-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper) IsYANGGoStruct() {}

// GetIntermediateDestinationId retrieves the value of the leaf IntermediateDestinationId from the NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IntermediateDestinationId is set, it can
// safely use t.GetIntermediateDestinationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IntermediateDestinationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper) GetIntermediateDestinationId() string {
	if t == nil || t.IntermediateDestinationId == nil {
		return ""
	}
	return *t.IntermediateDestinationId
}

// GetPwSapSecondaryShaper retrieves the value of the leaf PwSapSecondaryShaper from the NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PwSapSecondaryShaper is set, it can
// safely use t.GetPwSapSecondaryShaper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PwSapSecondaryShaper == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper) GetPwSapSecondaryShaper() string {
	if t == nil || t.PwSapSecondaryShaper == nil {
		return ""
	}
	return *t.PwSapSecondaryShaper
}

// GetVirtualPort retrieves the value of the leaf VirtualPort from the NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualPort is set, it can
// safely use t.GetVirtualPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper) GetVirtualPort() string {
	if t == nil || t.VirtualPort == nil {
		return ""
	}
	return *t.VirtualPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper.
func (*NokiaConf_Configure_Groups_Group_PwPort_Sdp_Egress_Shaper) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_PwPort_Sdp_Ingress represents the /nokia-conf/configure/groups/group/pw-port/sdp/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_PwPort_Sdp_Ingress struct {
	VcLabel *uint32 `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_PwPort_Sdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_PwPort_Sdp_Ingress) IsYANGGoStruct() {}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Groups_Group_PwPort_Sdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_PwPort_Sdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_PwPort_Sdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_PwPort_Sdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_PwPort_Sdp_Ingress.
func (*NokiaConf_Configure_Groups_Group_PwPort_Sdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Python represents the /nokia-conf/configure/groups/group/python YANG schema element.
type NokiaConf_Configure_Groups_Group_Python struct {
	PythonPolicy map[string]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy `path:"python-policy" module:"nokia-conf"`
	PythonScript map[string]*NokiaConf_Configure_Groups_Group_Python_PythonScript `path:"python-script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Python implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Python) IsYANGGoStruct() {}

// NewPythonPolicy creates a new entry in the PythonPolicy list of the
// NokiaConf_Configure_Groups_Group_Python struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Python) NewPythonPolicy(Name string) (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PythonPolicy == nil {
		t.PythonPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PythonPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PythonPolicy", key)
	}

	t.PythonPolicy[key] = &NokiaConf_Configure_Groups_Group_Python_PythonPolicy{
		Name: &Name,
	}

	return t.PythonPolicy[key], nil
}

// RenamePythonPolicy renames an entry in the list PythonPolicy within
// the NokiaConf_Configure_Groups_Group_Python struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Python) RenamePythonPolicy(oldK, newK string) error {
	if _, ok := t.PythonPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in PythonPolicy", newK)
	}

	e, ok := t.PythonPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PythonPolicy", oldK)
	}
	e.Name = &newK

	t.PythonPolicy[newK] = e
	delete(t.PythonPolicy, oldK)
	return nil
}

// GetOrCreatePythonPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Python. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Python) GetOrCreatePythonPolicy(Name string) *NokiaConf_Configure_Groups_Group_Python_PythonPolicy {

	key := Name

	if v, ok := t.PythonPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPythonPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePythonPolicy got unexpected error: %v", err))
	}
	return v
}

// GetPythonPolicy retrieves the value with the specified key from
// the PythonPolicy map field of NokiaConf_Configure_Groups_Group_Python. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Python) GetPythonPolicy(Name string) *NokiaConf_Configure_Groups_Group_Python_PythonPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PythonPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeletePythonPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Python. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Python) DeletePythonPolicy(Name string) {
	key := Name

	delete(t.PythonPolicy, key)
}

// AppendPythonPolicy appends the supplied NokiaConf_Configure_Groups_Group_Python_PythonPolicy struct to the
// list PythonPolicy of NokiaConf_Configure_Groups_Group_Python. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Python_PythonPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Python) AppendPythonPolicy(v *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PythonPolicy == nil {
		t.PythonPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy)
	}

	if _, ok := t.PythonPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list PythonPolicy %v", key)
	}

	t.PythonPolicy[key] = v
	return nil
}

// NewPythonScript creates a new entry in the PythonScript list of the
// NokiaConf_Configure_Groups_Group_Python struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Python) NewPythonScript(Name string) (*NokiaConf_Configure_Groups_Group_Python_PythonScript, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PythonScript == nil {
		t.PythonScript = make(map[string]*NokiaConf_Configure_Groups_Group_Python_PythonScript)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PythonScript[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PythonScript", key)
	}

	t.PythonScript[key] = &NokiaConf_Configure_Groups_Group_Python_PythonScript{
		Name: &Name,
	}

	return t.PythonScript[key], nil
}

// RenamePythonScript renames an entry in the list PythonScript within
// the NokiaConf_Configure_Groups_Group_Python struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Python) RenamePythonScript(oldK, newK string) error {
	if _, ok := t.PythonScript[newK]; ok {
		return fmt.Errorf("key %v already exists in PythonScript", newK)
	}

	e, ok := t.PythonScript[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PythonScript", oldK)
	}
	e.Name = &newK

	t.PythonScript[newK] = e
	delete(t.PythonScript, oldK)
	return nil
}

// GetOrCreatePythonScript retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Python. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Python) GetOrCreatePythonScript(Name string) *NokiaConf_Configure_Groups_Group_Python_PythonScript {

	key := Name

	if v, ok := t.PythonScript[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPythonScript(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePythonScript got unexpected error: %v", err))
	}
	return v
}

// GetPythonScript retrieves the value with the specified key from
// the PythonScript map field of NokiaConf_Configure_Groups_Group_Python. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Python) GetPythonScript(Name string) *NokiaConf_Configure_Groups_Group_Python_PythonScript {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PythonScript[key]; ok {
		return lm
	}
	return nil
}

// DeletePythonScript deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Python. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Python) DeletePythonScript(Name string) {
	key := Name

	delete(t.PythonScript, key)
}

// AppendPythonScript appends the supplied NokiaConf_Configure_Groups_Group_Python_PythonScript struct to the
// list PythonScript of NokiaConf_Configure_Groups_Group_Python. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Python_PythonScript already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Python) AppendPythonScript(v *NokiaConf_Configure_Groups_Group_Python_PythonScript) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PythonScript == nil {
		t.PythonScript = make(map[string]*NokiaConf_Configure_Groups_Group_Python_PythonScript)
	}

	if _, ok := t.PythonScript[key]; ok {
		return fmt.Errorf("duplicate key for list PythonScript %v", key)
	}

	t.PythonScript[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Python
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Python) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PythonPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.PythonScript {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Python"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Python) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Python.
func (*NokiaConf_Configure_Groups_Group_Python) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Python_PythonPolicy represents the /nokia-conf/configure/groups/group/python/python-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Python_PythonPolicy struct {
	Cache       *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache                                                                          `path:"cache" module:"nokia-conf" yangPresence:"true"`
	Description *string                                                                                                                              `path:"description" module:"nokia-conf"`
	Dhcp        map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp         `path:"dhcp" module:"nokia-conf"`
	Dhcp6       map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6       `path:"dhcp6" module:"nokia-conf"`
	Diameter    map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter `path:"diameter" module:"nokia-conf"`
	Gtpv1C      map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C     `path:"gtpv1-c" module:"nokia-conf"`
	Gtpv2C      map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C     `path:"gtpv2-c" module:"nokia-conf"`
	Name        *string                                                                                                                              `path:"name" module:"nokia-conf"`
	NatGroup    *uint32                                                                                                                              `path:"nat-group" module:"nokia-conf"`
	Pppoe       map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe       `path:"pppoe" module:"nokia-conf"`
	Radius      map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius     `path:"radius" module:"nokia-conf"`
	Syslog      *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Syslog                                                                         `path:"syslog" module:"nokia-conf" yangPresence:"true"`
	Vsd         *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Vsd                                                                            `path:"vsd" module:"nokia-conf" yangPresence:"true"`
	WlanGwGroup *uint32                                                                                                                              `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Python_PythonPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_Key represents the key for list Dhcp of element /nokia-conf/configure/groups/group/python/python-policy.
type NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_Key struct {
	MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_MessageType_Union `path:"message-type"`
	Direction   NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_Direction_Union   `path:"direction"`
}

// NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_Key represents the key for list Dhcp6 of element /nokia-conf/configure/groups/group/python/python-policy.
type NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_Key struct {
	MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_MessageType_Union `path:"message-type"`
	Direction   NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_Direction_Union   `path:"direction"`
}

// NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_Key represents the key for list Diameter of element /nokia-conf/configure/groups/group/python/python-policy.
type NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_Key struct {
	MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_MessageType_Union `path:"message-type"`
	Direction   NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_Direction_Union   `path:"direction"`
}

// NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_Key represents the key for list Gtpv1C of element /nokia-conf/configure/groups/group/python/python-policy.
type NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_Key struct {
	MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_MessageType_Union `path:"message-type"`
	Direction   NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_Direction_Union   `path:"direction"`
}

// NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_Key represents the key for list Gtpv2C of element /nokia-conf/configure/groups/group/python/python-policy.
type NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_Key struct {
	MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_MessageType_Union `path:"message-type"`
	Direction   NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_Direction_Union   `path:"direction"`
}

// NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_Key represents the key for list Pppoe of element /nokia-conf/configure/groups/group/python/python-policy.
type NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_Key struct {
	MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_MessageType_Union `path:"message-type"`
	Direction   NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_Direction_Union   `path:"direction"`
}

// NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_Key represents the key for list Radius of element /nokia-conf/configure/groups/group/python/python-policy.
type NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_Key struct {
	MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_MessageType_Union `path:"message-type"`
	Direction   NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_Direction_Union   `path:"direction"`
}

// NewDhcp creates a new entry in the Dhcp list of the
// NokiaConf_Configure_Groups_Group_Python_PythonPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) NewDhcp(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_Direction_Union) (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcp == nil {
		t.Dhcp = make(map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp)
	}

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dhcp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dhcp", key)
	}

	t.Dhcp[key] = &NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp{
		MessageType: MessageType,
		Direction:   Direction,
	}

	return t.Dhcp[key], nil
}

// RenameDhcp renames an entry in the list Dhcp within
// the NokiaConf_Configure_Groups_Group_Python_PythonPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) RenameDhcp(oldK, newK NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_Key) error {
	if _, ok := t.Dhcp[newK]; ok {
		return fmt.Errorf("key %v already exists in Dhcp", newK)
	}

	e, ok := t.Dhcp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dhcp", oldK)
	}
	e.MessageType = newK.MessageType
	e.Direction = newK.Direction

	t.Dhcp[newK] = e
	delete(t.Dhcp, oldK)
	return nil
}

// GetOrCreateDhcp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetOrCreateDhcp(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_Direction_Union) *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp {

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if v, ok := t.Dhcp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDhcp(MessageType, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDhcp got unexpected error: %v", err))
	}
	return v
}

// GetDhcp retrieves the value with the specified key from
// the Dhcp map field of NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetDhcp(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_Direction_Union) *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if lm, ok := t.Dhcp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDhcp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) DeleteDhcp(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_Direction_Union) {
	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	delete(t.Dhcp, key)
}

// AppendDhcp appends the supplied NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp struct to the
// list Dhcp of NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) AppendDhcp(v *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp) error {
	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_Key{
		MessageType: v.MessageType,
		Direction:   v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcp == nil {
		t.Dhcp = make(map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp)
	}

	if _, ok := t.Dhcp[key]; ok {
		return fmt.Errorf("duplicate key for list Dhcp %v", key)
	}

	t.Dhcp[key] = v
	return nil
}

// NewDhcp6 creates a new entry in the Dhcp6 list of the
// NokiaConf_Configure_Groups_Group_Python_PythonPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) NewDhcp6(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_Direction_Union) (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcp6 == nil {
		t.Dhcp6 = make(map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6)
	}

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dhcp6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dhcp6", key)
	}

	t.Dhcp6[key] = &NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6{
		MessageType: MessageType,
		Direction:   Direction,
	}

	return t.Dhcp6[key], nil
}

// RenameDhcp6 renames an entry in the list Dhcp6 within
// the NokiaConf_Configure_Groups_Group_Python_PythonPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) RenameDhcp6(oldK, newK NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_Key) error {
	if _, ok := t.Dhcp6[newK]; ok {
		return fmt.Errorf("key %v already exists in Dhcp6", newK)
	}

	e, ok := t.Dhcp6[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dhcp6", oldK)
	}
	e.MessageType = newK.MessageType
	e.Direction = newK.Direction

	t.Dhcp6[newK] = e
	delete(t.Dhcp6, oldK)
	return nil
}

// GetOrCreateDhcp6 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetOrCreateDhcp6(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_Direction_Union) *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6 {

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if v, ok := t.Dhcp6[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDhcp6(MessageType, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDhcp6 got unexpected error: %v", err))
	}
	return v
}

// GetDhcp6 retrieves the value with the specified key from
// the Dhcp6 map field of NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetDhcp6(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_Direction_Union) *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6 {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if lm, ok := t.Dhcp6[key]; ok {
		return lm
	}
	return nil
}

// DeleteDhcp6 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) DeleteDhcp6(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_Direction_Union) {
	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	delete(t.Dhcp6, key)
}

// AppendDhcp6 appends the supplied NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6 struct to the
// list Dhcp6 of NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) AppendDhcp6(v *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6) error {
	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_Key{
		MessageType: v.MessageType,
		Direction:   v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcp6 == nil {
		t.Dhcp6 = make(map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6)
	}

	if _, ok := t.Dhcp6[key]; ok {
		return fmt.Errorf("duplicate key for list Dhcp6 %v", key)
	}

	t.Dhcp6[key] = v
	return nil
}

// NewDiameter creates a new entry in the Diameter list of the
// NokiaConf_Configure_Groups_Group_Python_PythonPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) NewDiameter(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_Direction_Union) (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Diameter == nil {
		t.Diameter = make(map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter)
	}

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Diameter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Diameter", key)
	}

	t.Diameter[key] = &NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter{
		MessageType: MessageType,
		Direction:   Direction,
	}

	return t.Diameter[key], nil
}

// RenameDiameter renames an entry in the list Diameter within
// the NokiaConf_Configure_Groups_Group_Python_PythonPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) RenameDiameter(oldK, newK NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_Key) error {
	if _, ok := t.Diameter[newK]; ok {
		return fmt.Errorf("key %v already exists in Diameter", newK)
	}

	e, ok := t.Diameter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Diameter", oldK)
	}
	e.MessageType = newK.MessageType
	e.Direction = newK.Direction

	t.Diameter[newK] = e
	delete(t.Diameter, oldK)
	return nil
}

// GetOrCreateDiameter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetOrCreateDiameter(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_Direction_Union) *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter {

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if v, ok := t.Diameter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDiameter(MessageType, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDiameter got unexpected error: %v", err))
	}
	return v
}

// GetDiameter retrieves the value with the specified key from
// the Diameter map field of NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetDiameter(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_Direction_Union) *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if lm, ok := t.Diameter[key]; ok {
		return lm
	}
	return nil
}

// DeleteDiameter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) DeleteDiameter(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_Direction_Union) {
	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	delete(t.Diameter, key)
}

// AppendDiameter appends the supplied NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter struct to the
// list Diameter of NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) AppendDiameter(v *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter) error {
	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_Key{
		MessageType: v.MessageType,
		Direction:   v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Diameter == nil {
		t.Diameter = make(map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter)
	}

	if _, ok := t.Diameter[key]; ok {
		return fmt.Errorf("duplicate key for list Diameter %v", key)
	}

	t.Diameter[key] = v
	return nil
}

// NewGtpv1C creates a new entry in the Gtpv1C list of the
// NokiaConf_Configure_Groups_Group_Python_PythonPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) NewGtpv1C(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_Direction_Union) (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Gtpv1C == nil {
		t.Gtpv1C = make(map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C)
	}

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Gtpv1C[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Gtpv1C", key)
	}

	t.Gtpv1C[key] = &NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C{
		MessageType: MessageType,
		Direction:   Direction,
	}

	return t.Gtpv1C[key], nil
}

// RenameGtpv1C renames an entry in the list Gtpv1C within
// the NokiaConf_Configure_Groups_Group_Python_PythonPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) RenameGtpv1C(oldK, newK NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_Key) error {
	if _, ok := t.Gtpv1C[newK]; ok {
		return fmt.Errorf("key %v already exists in Gtpv1C", newK)
	}

	e, ok := t.Gtpv1C[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Gtpv1C", oldK)
	}
	e.MessageType = newK.MessageType
	e.Direction = newK.Direction

	t.Gtpv1C[newK] = e
	delete(t.Gtpv1C, oldK)
	return nil
}

// GetOrCreateGtpv1C retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetOrCreateGtpv1C(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_Direction_Union) *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C {

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if v, ok := t.Gtpv1C[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGtpv1C(MessageType, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGtpv1C got unexpected error: %v", err))
	}
	return v
}

// GetGtpv1C retrieves the value with the specified key from
// the Gtpv1C map field of NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetGtpv1C(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_Direction_Union) *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if lm, ok := t.Gtpv1C[key]; ok {
		return lm
	}
	return nil
}

// DeleteGtpv1C deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) DeleteGtpv1C(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_Direction_Union) {
	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	delete(t.Gtpv1C, key)
}

// AppendGtpv1C appends the supplied NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C struct to the
// list Gtpv1C of NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) AppendGtpv1C(v *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C) error {
	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_Key{
		MessageType: v.MessageType,
		Direction:   v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Gtpv1C == nil {
		t.Gtpv1C = make(map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C)
	}

	if _, ok := t.Gtpv1C[key]; ok {
		return fmt.Errorf("duplicate key for list Gtpv1C %v", key)
	}

	t.Gtpv1C[key] = v
	return nil
}

// NewGtpv2C creates a new entry in the Gtpv2C list of the
// NokiaConf_Configure_Groups_Group_Python_PythonPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) NewGtpv2C(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_Direction_Union) (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Gtpv2C == nil {
		t.Gtpv2C = make(map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C)
	}

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Gtpv2C[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Gtpv2C", key)
	}

	t.Gtpv2C[key] = &NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C{
		MessageType: MessageType,
		Direction:   Direction,
	}

	return t.Gtpv2C[key], nil
}

// RenameGtpv2C renames an entry in the list Gtpv2C within
// the NokiaConf_Configure_Groups_Group_Python_PythonPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) RenameGtpv2C(oldK, newK NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_Key) error {
	if _, ok := t.Gtpv2C[newK]; ok {
		return fmt.Errorf("key %v already exists in Gtpv2C", newK)
	}

	e, ok := t.Gtpv2C[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Gtpv2C", oldK)
	}
	e.MessageType = newK.MessageType
	e.Direction = newK.Direction

	t.Gtpv2C[newK] = e
	delete(t.Gtpv2C, oldK)
	return nil
}

// GetOrCreateGtpv2C retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetOrCreateGtpv2C(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_Direction_Union) *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C {

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if v, ok := t.Gtpv2C[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGtpv2C(MessageType, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGtpv2C got unexpected error: %v", err))
	}
	return v
}

// GetGtpv2C retrieves the value with the specified key from
// the Gtpv2C map field of NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetGtpv2C(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_Direction_Union) *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if lm, ok := t.Gtpv2C[key]; ok {
		return lm
	}
	return nil
}

// DeleteGtpv2C deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) DeleteGtpv2C(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_Direction_Union) {
	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	delete(t.Gtpv2C, key)
}

// AppendGtpv2C appends the supplied NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C struct to the
// list Gtpv2C of NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) AppendGtpv2C(v *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C) error {
	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_Key{
		MessageType: v.MessageType,
		Direction:   v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Gtpv2C == nil {
		t.Gtpv2C = make(map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C)
	}

	if _, ok := t.Gtpv2C[key]; ok {
		return fmt.Errorf("duplicate key for list Gtpv2C %v", key)
	}

	t.Gtpv2C[key] = v
	return nil
}

// NewPppoe creates a new entry in the Pppoe list of the
// NokiaConf_Configure_Groups_Group_Python_PythonPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) NewPppoe(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_Direction_Union) (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pppoe == nil {
		t.Pppoe = make(map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe)
	}

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pppoe[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pppoe", key)
	}

	t.Pppoe[key] = &NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe{
		MessageType: MessageType,
		Direction:   Direction,
	}

	return t.Pppoe[key], nil
}

// RenamePppoe renames an entry in the list Pppoe within
// the NokiaConf_Configure_Groups_Group_Python_PythonPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) RenamePppoe(oldK, newK NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_Key) error {
	if _, ok := t.Pppoe[newK]; ok {
		return fmt.Errorf("key %v already exists in Pppoe", newK)
	}

	e, ok := t.Pppoe[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pppoe", oldK)
	}
	e.MessageType = newK.MessageType
	e.Direction = newK.Direction

	t.Pppoe[newK] = e
	delete(t.Pppoe, oldK)
	return nil
}

// GetOrCreatePppoe retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetOrCreatePppoe(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_Direction_Union) *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe {

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if v, ok := t.Pppoe[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPppoe(MessageType, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePppoe got unexpected error: %v", err))
	}
	return v
}

// GetPppoe retrieves the value with the specified key from
// the Pppoe map field of NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetPppoe(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_Direction_Union) *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if lm, ok := t.Pppoe[key]; ok {
		return lm
	}
	return nil
}

// DeletePppoe deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) DeletePppoe(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_Direction_Union) {
	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	delete(t.Pppoe, key)
}

// AppendPppoe appends the supplied NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe struct to the
// list Pppoe of NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) AppendPppoe(v *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe) error {
	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_Key{
		MessageType: v.MessageType,
		Direction:   v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pppoe == nil {
		t.Pppoe = make(map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe)
	}

	if _, ok := t.Pppoe[key]; ok {
		return fmt.Errorf("duplicate key for list Pppoe %v", key)
	}

	t.Pppoe[key] = v
	return nil
}

// NewRadius creates a new entry in the Radius list of the
// NokiaConf_Configure_Groups_Group_Python_PythonPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) NewRadius(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_Direction_Union) (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Radius == nil {
		t.Radius = make(map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius)
	}

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Radius[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Radius", key)
	}

	t.Radius[key] = &NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius{
		MessageType: MessageType,
		Direction:   Direction,
	}

	return t.Radius[key], nil
}

// RenameRadius renames an entry in the list Radius within
// the NokiaConf_Configure_Groups_Group_Python_PythonPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) RenameRadius(oldK, newK NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_Key) error {
	if _, ok := t.Radius[newK]; ok {
		return fmt.Errorf("key %v already exists in Radius", newK)
	}

	e, ok := t.Radius[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Radius", oldK)
	}
	e.MessageType = newK.MessageType
	e.Direction = newK.Direction

	t.Radius[newK] = e
	delete(t.Radius, oldK)
	return nil
}

// GetOrCreateRadius retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetOrCreateRadius(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_Direction_Union) *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius {

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if v, ok := t.Radius[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRadius(MessageType, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRadius got unexpected error: %v", err))
	}
	return v
}

// GetRadius retrieves the value with the specified key from
// the Radius map field of NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetRadius(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_Direction_Union) *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if lm, ok := t.Radius[key]; ok {
		return lm
	}
	return nil
}

// DeleteRadius deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) DeleteRadius(MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_MessageType_Union, Direction NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_Direction_Union) {
	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	delete(t.Radius, key)
}

// AppendRadius appends the supplied NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius struct to the
// list Radius of NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) AppendRadius(v *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius) error {
	key := NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_Key{
		MessageType: v.MessageType,
		Direction:   v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Radius == nil {
		t.Radius = make(map[NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_Key]*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius)
	}

	if _, ok := t.Radius[key]; ok {
		return fmt.Errorf("duplicate key for list Radius %v", key)
	}

	t.Radius[key] = v
	return nil
}

// GetOrCreateCache retrieves the value of the Cache field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetOrCreateCache() *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache {
	if t.Cache != nil {
		return t.Cache
	}
	t.Cache = &NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache{}
	return t.Cache
}

// GetOrCreateSyslog retrieves the value of the Syslog field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetOrCreateSyslog() *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Syslog {
	if t.Syslog != nil {
		return t.Syslog
	}
	t.Syslog = &NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Syslog{}
	return t.Syslog
}

// GetOrCreateVsd retrieves the value of the Vsd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetOrCreateVsd() *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Vsd {
	if t.Vsd != nil {
		return t.Vsd
	}
	t.Vsd = &NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Vsd{}
	return t.Vsd
}

// GetCache returns the value of the Cache struct pointer
// from NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the receiver or the field Cache is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetCache() *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache {
	if t != nil && t.Cache != nil {
		return t.Cache
	}
	return nil
}

// GetSyslog returns the value of the Syslog struct pointer
// from NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the receiver or the field Syslog is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetSyslog() *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Syslog {
	if t != nil && t.Syslog != nil {
		return t.Syslog
	}
	return nil
}

// GetVsd returns the value of the Vsd struct pointer
// from NokiaConf_Configure_Groups_Group_Python_PythonPolicy. If the receiver or the field Vsd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetVsd() *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Vsd {
	if t != nil && t.Vsd != nil {
		return t.Vsd
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNatGroup retrieves the value of the leaf NatGroup from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatGroup is set, it can
// safely use t.GetNatGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetNatGroup() uint32 {
	if t == nil || t.NatGroup == nil {
		return 0
	}
	return *t.NatGroup
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Python_PythonPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Cache.PopulateDefaults()
	t.Syslog.PopulateDefaults()
	t.Vsd.PopulateDefaults()
	for _, e := range t.Dhcp {
		e.PopulateDefaults()
	}
	for _, e := range t.Dhcp6 {
		e.PopulateDefaults()
	}
	for _, e := range t.Diameter {
		e.PopulateDefaults()
	}
	for _, e := range t.Gtpv1C {
		e.PopulateDefaults()
	}
	for _, e := range t.Gtpv2C {
		e.PopulateDefaults()
	}
	for _, e := range t.Pppoe {
		e.PopulateDefaults()
	}
	for _, e := range t.Radius {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Python_PythonPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Python_PythonPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Python_PythonPolicy.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache represents the /nokia-conf/configure/groups/group/python/python-policy/cache YANG schema element.
type NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache struct {
	AdminState       E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	EntrySize        *int32                                                                       `path:"entry-size" module:"nokia-conf"`
	MaxEntries       *int32                                                                       `path:"max-entries" module:"nokia-conf"`
	MaxEntryLifetime *uint32                                                                      `path:"max-entry-lifetime" module:"nokia-conf"`
	McsPeer          *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_McsPeer          `path:"mcs-peer" module:"nokia-conf" yangPresence:"true"`
	MinimumLifetimes *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes `path:"minimum-lifetimes" module:"nokia-conf"`
	Persistence      *bool                                                                        `path:"persistence" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache) IsYANGGoStruct() {}

// GetOrCreateMcsPeer retrieves the value of the McsPeer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache) GetOrCreateMcsPeer() *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_McsPeer {
	if t.McsPeer != nil {
		return t.McsPeer
	}
	t.McsPeer = &NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_McsPeer{}
	return t.McsPeer
}

// GetOrCreateMinimumLifetimes retrieves the value of the MinimumLifetimes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache) GetOrCreateMinimumLifetimes() *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes {
	if t.MinimumLifetimes != nil {
		return t.MinimumLifetimes
	}
	t.MinimumLifetimes = &NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes{}
	return t.MinimumLifetimes
}

// GetMcsPeer returns the value of the McsPeer struct pointer
// from NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache. If the receiver or the field McsPeer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache) GetMcsPeer() *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_McsPeer {
	if t != nil && t.McsPeer != nil {
		return t.McsPeer
	}
	return nil
}

// GetMinimumLifetimes returns the value of the MinimumLifetimes struct pointer
// from NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache. If the receiver or the field MinimumLifetimes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache) GetMinimumLifetimes() *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes {
	if t != nil && t.MinimumLifetimes != nil {
		return t.MinimumLifetimes
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEntrySize retrieves the value of the leaf EntrySize from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntrySize is set, it can
// safely use t.GetEntrySize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntrySize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache) GetEntrySize() int32 {
	if t == nil || t.EntrySize == nil {
		return 256
	}
	return *t.EntrySize
}

// GetMaxEntries retrieves the value of the leaf MaxEntries from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntries is set, it can
// safely use t.GetMaxEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache) GetMaxEntries() int32 {
	if t == nil || t.MaxEntries == nil {
		return 128000
	}
	return *t.MaxEntries
}

// GetMaxEntryLifetime retrieves the value of the leaf MaxEntryLifetime from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntryLifetime is set, it can
// safely use t.GetMaxEntryLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntryLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache) GetMaxEntryLifetime() uint32 {
	if t == nil || t.MaxEntryLifetime == nil {
		return 86400
	}
	return *t.MaxEntryLifetime
}

// GetPersistence retrieves the value of the leaf Persistence from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Persistence is set, it can
// safely use t.GetPersistence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Persistence == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache) GetPersistence() bool {
	if t == nil || t.Persistence == nil {
		return false
	}
	return *t.Persistence
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.EntrySize == nil {
		var v int32 = 256
		t.EntrySize = &v
	}
	if t.MaxEntries == nil {
		var v int32 = 128000
		t.MaxEntries = &v
	}
	if t.MaxEntryLifetime == nil {
		var v uint32 = 86400
		t.MaxEntryLifetime = &v
	}
	if t.Persistence == nil {
		var v bool = false
		t.Persistence = &v
	}
	t.McsPeer.PopulateDefaults()
	t.MinimumLifetimes.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_McsPeer represents the /nokia-conf/configure/groups/group/python/python-policy/cache/mcs-peer YANG schema element.
type NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_McsPeer struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
	SyncTag   *string `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_McsPeer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_McsPeer) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_McsPeer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_McsPeer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_McsPeer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_McsPeer) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_McsPeer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_McsPeer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_McsPeer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_McsPeer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_McsPeer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_McsPeer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_McsPeer.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_McsPeer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes represents the /nokia-conf/configure/groups/group/python/python-policy/cache/minimum-lifetimes YANG schema element.
type NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes struct {
	HighAvailability       *uint32 `path:"high-availability" module:"nokia-conf"`
	MultiChassisRedundancy *uint32 `path:"multi-chassis-redundancy" module:"nokia-conf"`
	Persistence            *uint32 `path:"persistence" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes) IsYANGGoStruct() {
}

// GetHighAvailability retrieves the value of the leaf HighAvailability from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighAvailability is set, it can
// safely use t.GetHighAvailability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighAvailability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes) GetHighAvailability() uint32 {
	if t == nil || t.HighAvailability == nil {
		return 0
	}
	return *t.HighAvailability
}

// GetMultiChassisRedundancy retrieves the value of the leaf MultiChassisRedundancy from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiChassisRedundancy is set, it can
// safely use t.GetMultiChassisRedundancy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiChassisRedundancy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes) GetMultiChassisRedundancy() uint32 {
	if t == nil || t.MultiChassisRedundancy == nil {
		return 0
	}
	return *t.MultiChassisRedundancy
}

// GetPersistence retrieves the value of the leaf Persistence from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Persistence is set, it can
// safely use t.GetPersistence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Persistence == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes) GetPersistence() uint32 {
	if t == nil || t.Persistence == nil {
		return 0
	}
	return *t.Persistence
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Cache_MinimumLifetimes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp represents the /nokia-conf/configure/groups/group/python/python-policy/dhcp YANG schema element.
type NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp struct {
	Direction   NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_Direction_Union   `path:"direction" module:"nokia-conf"`
	MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_MessageType_Union `path:"message-type" module:"nokia-conf"`
	Script      *string                                                                     `path:"script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp) IsYANGGoStruct() {}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp) GetDirection() NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetMessageType retrieves the value of the leaf MessageType from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageType is set, it can
// safely use t.GetMessageType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp) GetMessageType() NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp_MessageType_Union {
	if t == nil || t.MessageType == nil {
		return nil
	}
	return t.MessageType
}

// GetScript retrieves the value of the leaf Script from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Script is set, it can
// safely use t.GetScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Script == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp) GetScript() string {
	if t == nil || t.Script == nil {
		return ""
	}
	return *t.Script
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":    t.Direction,
		"message-type": t.MessageType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6 represents the /nokia-conf/configure/groups/group/python/python-policy/dhcp6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6 struct {
	Direction   NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_Direction_Union   `path:"direction" module:"nokia-conf"`
	MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_MessageType_Union `path:"message-type" module:"nokia-conf"`
	Script      *string                                                                      `path:"script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6) IsYANGGoStruct() {}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6) GetDirection() NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetMessageType retrieves the value of the leaf MessageType from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageType is set, it can
// safely use t.GetMessageType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6) GetMessageType() NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6_MessageType_Union {
	if t == nil || t.MessageType == nil {
		return nil
	}
	return t.MessageType
}

// GetScript retrieves the value of the leaf Script from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Script is set, it can
// safely use t.GetScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Script == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6) GetScript() string {
	if t == nil || t.Script == nil {
		return ""
	}
	return *t.Script
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":    t.Direction,
		"message-type": t.MessageType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Dhcp6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter represents the /nokia-conf/configure/groups/group/python/python-policy/diameter YANG schema element.
type NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter struct {
	Direction   NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_Direction_Union   `path:"direction" module:"nokia-conf"`
	MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_MessageType_Union `path:"message-type" module:"nokia-conf"`
	Script      *string                                                                         `path:"script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter) IsYANGGoStruct() {}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter) GetDirection() NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetMessageType retrieves the value of the leaf MessageType from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageType is set, it can
// safely use t.GetMessageType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter) GetMessageType() NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter_MessageType_Union {
	if t == nil || t.MessageType == nil {
		return nil
	}
	return t.MessageType
}

// GetScript retrieves the value of the leaf Script from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Script is set, it can
// safely use t.GetScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Script == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter) GetScript() string {
	if t == nil || t.Script == nil {
		return ""
	}
	return *t.Script
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":    t.Direction,
		"message-type": t.MessageType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Diameter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C represents the /nokia-conf/configure/groups/group/python/python-policy/gtpv1-c YANG schema element.
type NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C struct {
	Direction   NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_Direction_Union   `path:"direction" module:"nokia-conf"`
	MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_MessageType_Union `path:"message-type" module:"nokia-conf"`
	Script      *string                                                                       `path:"script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C) IsYANGGoStruct() {}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C) GetDirection() NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetMessageType retrieves the value of the leaf MessageType from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageType is set, it can
// safely use t.GetMessageType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C) GetMessageType() NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C_MessageType_Union {
	if t == nil || t.MessageType == nil {
		return nil
	}
	return t.MessageType
}

// GetScript retrieves the value of the leaf Script from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Script is set, it can
// safely use t.GetScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Script == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C) GetScript() string {
	if t == nil || t.Script == nil {
		return ""
	}
	return *t.Script
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":    t.Direction,
		"message-type": t.MessageType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv1C) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C represents the /nokia-conf/configure/groups/group/python/python-policy/gtpv2-c YANG schema element.
type NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C struct {
	Direction   NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_Direction_Union   `path:"direction" module:"nokia-conf"`
	MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_MessageType_Union `path:"message-type" module:"nokia-conf"`
	Script      *string                                                                       `path:"script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C) IsYANGGoStruct() {}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C) GetDirection() NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetMessageType retrieves the value of the leaf MessageType from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageType is set, it can
// safely use t.GetMessageType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C) GetMessageType() NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C_MessageType_Union {
	if t == nil || t.MessageType == nil {
		return nil
	}
	return t.MessageType
}

// GetScript retrieves the value of the leaf Script from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Script is set, it can
// safely use t.GetScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Script == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C) GetScript() string {
	if t == nil || t.Script == nil {
		return ""
	}
	return *t.Script
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":    t.Direction,
		"message-type": t.MessageType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Gtpv2C) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe represents the /nokia-conf/configure/groups/group/python/python-policy/pppoe YANG schema element.
type NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe struct {
	Direction   NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_Direction_Union   `path:"direction" module:"nokia-conf"`
	MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_MessageType_Union `path:"message-type" module:"nokia-conf"`
	Script      *string                                                                      `path:"script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe) IsYANGGoStruct() {}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe) GetDirection() NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetMessageType retrieves the value of the leaf MessageType from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageType is set, it can
// safely use t.GetMessageType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe) GetMessageType() NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe_MessageType_Union {
	if t == nil || t.MessageType == nil {
		return nil
	}
	return t.MessageType
}

// GetScript retrieves the value of the leaf Script from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Script is set, it can
// safely use t.GetScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Script == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe) GetScript() string {
	if t == nil || t.Script == nil {
		return ""
	}
	return *t.Script
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":    t.Direction,
		"message-type": t.MessageType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Pppoe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius represents the /nokia-conf/configure/groups/group/python/python-policy/radius YANG schema element.
type NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius struct {
	Direction   NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_Direction_Union   `path:"direction" module:"nokia-conf"`
	MessageType NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_MessageType_Union `path:"message-type" module:"nokia-conf"`
	Script      *string                                                                       `path:"script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius) IsYANGGoStruct() {}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius) GetDirection() NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetMessageType retrieves the value of the leaf MessageType from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageType is set, it can
// safely use t.GetMessageType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius) GetMessageType() NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius_MessageType_Union {
	if t == nil || t.MessageType == nil {
		return nil
	}
	return t.MessageType
}

// GetScript retrieves the value of the leaf Script from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Script is set, it can
// safely use t.GetScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Script == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius) GetScript() string {
	if t == nil || t.Script == nil {
		return ""
	}
	return *t.Script
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":    t.Direction,
		"message-type": t.MessageType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Radius) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Syslog represents the /nokia-conf/configure/groups/group/python/python-policy/syslog YANG schema element.
type NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Syslog struct {
	Script *string `path:"script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Syslog implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Syslog) IsYANGGoStruct() {}

// GetScript retrieves the value of the leaf Script from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Script is set, it can
// safely use t.GetScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Script == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Syslog) GetScript() string {
	if t == nil || t.Script == nil {
		return ""
	}
	return *t.Script
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Syslog
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Syslog) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Syslog) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Syslog"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Syslog) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Syslog) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Syslog.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Syslog) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Vsd represents the /nokia-conf/configure/groups/group/python/python-policy/vsd YANG schema element.
type NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Vsd struct {
	Script *string `path:"script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Vsd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Vsd) IsYANGGoStruct() {}

// GetScript retrieves the value of the leaf Script from the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Vsd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Script is set, it can
// safely use t.GetScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Script == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Vsd) GetScript() string {
	if t == nil || t.Script == nil {
		return ""
	}
	return *t.Script
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Vsd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Vsd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Vsd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Vsd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Vsd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Vsd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Vsd.
func (*NokiaConf_Configure_Groups_Group_Python_PythonPolicy_Vsd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Python_PythonScript represents the /nokia-conf/configure/groups/group/python/python-script YANG schema element.
type NokiaConf_Configure_Groups_Group_Python_PythonScript struct {
	ActionOnFail E_NokiaConf_Configure_Groups_Group_Python_PythonScript_ActionOnFail `path:"action-on-fail" module:"nokia-conf"`
	AdminState   E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	Description  *string                                                             `path:"description" module:"nokia-conf"`
	Name         *string                                                             `path:"name" module:"nokia-conf"`
	Protection   *NokiaConf_Configure_Groups_Group_Python_PythonScript_Protection    `path:"protection" module:"nokia-conf"`
	Urls         []string                                                            `path:"urls" module:"nokia-conf"`
	Version      E_NokiaConf_Configure_Groups_Group_Python_PythonScript_Version      `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Python_PythonScript implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Python_PythonScript) IsYANGGoStruct() {}

// GetOrCreateProtection retrieves the value of the Protection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonScript) GetOrCreateProtection() *NokiaConf_Configure_Groups_Group_Python_PythonScript_Protection {
	if t.Protection != nil {
		return t.Protection
	}
	t.Protection = &NokiaConf_Configure_Groups_Group_Python_PythonScript_Protection{}
	return t.Protection
}

// GetProtection returns the value of the Protection struct pointer
// from NokiaConf_Configure_Groups_Group_Python_PythonScript. If the receiver or the field Protection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonScript) GetProtection() *NokiaConf_Configure_Groups_Group_Python_PythonScript_Protection {
	if t != nil && t.Protection != nil {
		return t.Protection
	}
	return nil
}

// GetActionOnFail retrieves the value of the leaf ActionOnFail from the NokiaConf_Configure_Groups_Group_Python_PythonScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActionOnFail is set, it can
// safely use t.GetActionOnFail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActionOnFail == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonScript) GetActionOnFail() E_NokiaConf_Configure_Groups_Group_Python_PythonScript_ActionOnFail {
	if t == nil || t.ActionOnFail == 0 {
		return NokiaConf_Configure_Groups_Group_Python_PythonScript_ActionOnFail_drop
	}
	return t.ActionOnFail
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Python_PythonScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonScript) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Python_PythonScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonScript) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Python_PythonScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonScript) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetUrls retrieves the value of the leaf Urls from the NokiaConf_Configure_Groups_Group_Python_PythonScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Urls is set, it can
// safely use t.GetUrls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Urls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonScript) GetUrls() []string {
	if t == nil || t.Urls == nil {
		return nil
	}
	return t.Urls
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Python_PythonScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonScript) GetVersion() E_NokiaConf_Configure_Groups_Group_Python_PythonScript_Version {
	if t == nil || t.Version == 0 {
		return NokiaConf_Configure_Groups_Group_Python_PythonScript_Version_python2
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Python_PythonScript
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonScript) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ActionOnFail == 0 {
		t.ActionOnFail = NokiaConf_Configure_Groups_Group_Python_PythonScript_ActionOnFail_drop
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Version == 0 {
		t.Version = NokiaConf_Configure_Groups_Group_Python_PythonScript_Version_python2
	}
	t.Protection.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Python_PythonScript struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonScript) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonScript) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Python_PythonScript"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonScript) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonScript) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Python_PythonScript.
func (*NokiaConf_Configure_Groups_Group_Python_PythonScript) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Python_PythonScript_Protection represents the /nokia-conf/configure/groups/group/python/python-script/protection YANG schema element.
type NokiaConf_Configure_Groups_Group_Python_PythonScript_Protection struct {
	HmacSha256 *string `path:"hmac-sha256" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Python_PythonScript_Protection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Python_PythonScript_Protection) IsYANGGoStruct() {}

// GetHmacSha256 retrieves the value of the leaf HmacSha256 from the NokiaConf_Configure_Groups_Group_Python_PythonScript_Protection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HmacSha256 is set, it can
// safely use t.GetHmacSha256() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HmacSha256 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonScript_Protection) GetHmacSha256() string {
	if t == nil || t.HmacSha256 == nil {
		return ""
	}
	return *t.HmacSha256
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Python_PythonScript_Protection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonScript_Protection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonScript_Protection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Python_PythonScript_Protection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonScript_Protection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Python_PythonScript_Protection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Python_PythonScript_Protection.
func (*NokiaConf_Configure_Groups_Group_Python_PythonScript_Protection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos represents the /nokia-conf/configure/groups/group/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos struct {
	AdvConfigPolicy             map[string]*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy                                                                                     `path:"adv-config-policy" module:"nokia-conf"`
	AtmTdProfile                map[NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_AtmTdProfileId_Union]*NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile                        `path:"atm-td-profile" module:"nokia-conf"`
	Dot1PFcMap                  map[string]*NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap                                                                                          `path:"dot1p-fc-map" module:"nokia-conf"`
	DscpFcMap                   map[string]*NokiaConf_Configure_Groups_Group_Qos_DscpFcMap                                                                                           `path:"dscp-fc-map" module:"nokia-conf"`
	EgressRemarkPolicy          map[string]*NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy                                                                                  `path:"egress-remark-policy" module:"nokia-conf"`
	FcDot1PMap                  map[string]*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap                                                                                          `path:"fc-dot1p-map" module:"nokia-conf"`
	FcDscpMap                   map[string]*NokiaConf_Configure_Groups_Group_Qos_FcDscpMap                                                                                           `path:"fc-dscp-map" module:"nokia-conf"`
	FcLspExpMap                 map[string]*NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap                                                                                         `path:"fc-lsp-exp-map" module:"nokia-conf"`
	FpResourcePolicy            map[string]*NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy                                                                                    `path:"fp-resource-policy" module:"nokia-conf"`
	HsAttachmentPolicy          map[string]*NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy                                                                                  `path:"hs-attachment-policy" module:"nokia-conf"`
	HsPoolPolicy                map[string]*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy                                                                                        `path:"hs-pool-policy" module:"nokia-conf"`
	HsPortPoolPolicy            map[string]*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy                                                                                    `path:"hs-port-pool-policy" module:"nokia-conf"`
	HsSchedulerPolicy           map[string]*NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy                                                                                   `path:"hs-scheduler-policy" module:"nokia-conf"`
	HsmdaPoolPolicy             map[string]*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy                                                                                     `path:"hsmda-pool-policy" module:"nokia-conf"`
	HsmdaSchedulerPolicy        map[string]*NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy                                                                                `path:"hsmda-scheduler-policy" module:"nokia-conf"`
	HsmdaSlopePolicy            map[string]*NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy                                                                                    `path:"hsmda-slope-policy" module:"nokia-conf"`
	HsmdaWrrPolicy              map[string]*NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy                                                                                      `path:"hsmda-wrr-policy" module:"nokia-conf"`
	HwAggShaperSchedulerPolicy  map[string]*NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy                                                                          `path:"hw-agg-shaper-scheduler-policy" module:"nokia-conf"`
	IngressClassificationPolicy map[string]*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy                                                                         `path:"ingress-classification-policy" module:"nokia-conf"`
	LspExpFcMap                 map[string]*NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap                                                                                         `path:"lsp-exp-fc-map" module:"nokia-conf"`
	MatchList                   *NokiaConf_Configure_Groups_Group_Qos_MatchList                                                                                                      `path:"match-list" module:"nokia-conf"`
	McFrProfileEgress           map[NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_McFrEgressProfIndex_Union]*NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress         `path:"mc-fr-profile-egress" module:"nokia-conf"`
	McFrProfileIngress          map[NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_McFrIngressProfIndex_Union]*NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress      `path:"mc-fr-profile-ingress" module:"nokia-conf"`
	MdAutoId                    *NokiaConf_Configure_Groups_Group_Qos_MdAutoId                                                                                                       `path:"md-auto-id" module:"nokia-conf"`
	MlpppProfileEgress          map[NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_McMlpppEgressProfIndex_Union]*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress    `path:"mlppp-profile-egress" module:"nokia-conf"`
	MlpppProfileIngress         map[NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_McMlpppIngressProfIndex_Union]*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress `path:"mlppp-profile-ingress" module:"nokia-conf"`
	Network                     map[string]*NokiaConf_Configure_Groups_Group_Qos_Network                                                                                             `path:"network" module:"nokia-conf"`
	NetworkIngress              map[string]*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress                                                                                      `path:"network-ingress" module:"nokia-conf"`
	NetworkQueue                map[string]*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue                                                                                        `path:"network-queue" module:"nokia-conf"`
	PacketByteOffset            *NokiaConf_Configure_Groups_Group_Qos_PacketByteOffset                                                                                               `path:"packet-byte-offset" module:"nokia-conf" yangPresence:"true"`
	PolicerControlPolicy        map[string]*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy                                                                                `path:"policer-control-policy" module:"nokia-conf"`
	PortQosPolicy               map[string]*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy                                                                                       `path:"port-qos-policy" module:"nokia-conf"`
	PortSchedulerPolicy         map[string]*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy                                                                                 `path:"port-scheduler-policy" module:"nokia-conf"`
	PostPolicerMapping          map[string]*NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping                                                                                  `path:"post-policer-mapping" module:"nokia-conf"`
	QueueGroupRedirectList      map[string]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList                                                                              `path:"queue-group-redirect-list" module:"nokia-conf"`
	QueueGroupTemplates         *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates                                                                                            `path:"queue-group-templates" module:"nokia-conf" yangPresence:"true"`
	QueueMgmtPolicy             map[string]*NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy                                                                                     `path:"queue-mgmt-policy" module:"nokia-conf"`
	SapEgress                   map[string]*NokiaConf_Configure_Groups_Group_Qos_SapEgress                                                                                           `path:"sap-egress" module:"nokia-conf"`
	SapIngress                  map[string]*NokiaConf_Configure_Groups_Group_Qos_SapIngress                                                                                          `path:"sap-ingress" module:"nokia-conf"`
	SchedulerPolicy             map[string]*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy                                                                                     `path:"scheduler-policy" module:"nokia-conf"`
	SharedQueue                 map[string]*NokiaConf_Configure_Groups_Group_Qos_SharedQueue                                                                                         `path:"shared-queue" module:"nokia-conf"`
	SlopePolicy                 map[string]*NokiaConf_Configure_Groups_Group_Qos_SlopePolicy                                                                                         `path:"slope-policy" module:"nokia-conf"`
	VlanQosPolicy               map[string]*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy                                                                                       `path:"vlan-qos-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos) IsYANGGoStruct() {}

// NewAdvConfigPolicy creates a new entry in the AdvConfigPolicy list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewAdvConfigPolicy(AdvConfigPolicyName string) (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdvConfigPolicy == nil {
		t.AdvConfigPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy)
	}

	key := AdvConfigPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdvConfigPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdvConfigPolicy", key)
	}

	t.AdvConfigPolicy[key] = &NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy{
		AdvConfigPolicyName: &AdvConfigPolicyName,
	}

	return t.AdvConfigPolicy[key], nil
}

// RenameAdvConfigPolicy renames an entry in the list AdvConfigPolicy within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameAdvConfigPolicy(oldK, newK string) error {
	if _, ok := t.AdvConfigPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in AdvConfigPolicy", newK)
	}

	e, ok := t.AdvConfigPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdvConfigPolicy", oldK)
	}
	e.AdvConfigPolicyName = &newK

	t.AdvConfigPolicy[newK] = e
	delete(t.AdvConfigPolicy, oldK)
	return nil
}

// GetOrCreateAdvConfigPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateAdvConfigPolicy(AdvConfigPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy {

	key := AdvConfigPolicyName

	if v, ok := t.AdvConfigPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdvConfigPolicy(AdvConfigPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdvConfigPolicy got unexpected error: %v", err))
	}
	return v
}

// GetAdvConfigPolicy retrieves the value with the specified key from
// the AdvConfigPolicy map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetAdvConfigPolicy(AdvConfigPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy {

	if t == nil {
		return nil
	}

	key := AdvConfigPolicyName

	if lm, ok := t.AdvConfigPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdvConfigPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteAdvConfigPolicy(AdvConfigPolicyName string) {
	key := AdvConfigPolicyName

	delete(t.AdvConfigPolicy, key)
}

// AppendAdvConfigPolicy appends the supplied NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy struct to the
// list AdvConfigPolicy of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendAdvConfigPolicy(v *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy) error {
	if v.AdvConfigPolicyName == nil {
		return fmt.Errorf("invalid nil key received for AdvConfigPolicyName")
	}

	key := *v.AdvConfigPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdvConfigPolicy == nil {
		t.AdvConfigPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy)
	}

	if _, ok := t.AdvConfigPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list AdvConfigPolicy %v", key)
	}

	t.AdvConfigPolicy[key] = v
	return nil
}

// NewAtmTdProfile creates a new entry in the AtmTdProfile list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewAtmTdProfile(AtmTdProfileId NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_AtmTdProfileId_Union) (*NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AtmTdProfile == nil {
		t.AtmTdProfile = make(map[NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_AtmTdProfileId_Union]*NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile)
	}

	key := AtmTdProfileId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AtmTdProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AtmTdProfile", key)
	}

	t.AtmTdProfile[key] = &NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile{
		AtmTdProfileId: AtmTdProfileId,
	}

	return t.AtmTdProfile[key], nil
}

// RenameAtmTdProfile renames an entry in the list AtmTdProfile within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameAtmTdProfile(oldK, newK NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_AtmTdProfileId_Union) error {
	if _, ok := t.AtmTdProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in AtmTdProfile", newK)
	}

	e, ok := t.AtmTdProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AtmTdProfile", oldK)
	}
	e.AtmTdProfileId = newK

	t.AtmTdProfile[newK] = e
	delete(t.AtmTdProfile, oldK)
	return nil
}

// GetOrCreateAtmTdProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateAtmTdProfile(AtmTdProfileId NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_AtmTdProfileId_Union) *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile {

	key := AtmTdProfileId

	if v, ok := t.AtmTdProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAtmTdProfile(AtmTdProfileId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAtmTdProfile got unexpected error: %v", err))
	}
	return v
}

// GetAtmTdProfile retrieves the value with the specified key from
// the AtmTdProfile map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetAtmTdProfile(AtmTdProfileId NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_AtmTdProfileId_Union) *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile {

	if t == nil {
		return nil
	}

	key := AtmTdProfileId

	if lm, ok := t.AtmTdProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteAtmTdProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteAtmTdProfile(AtmTdProfileId NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_AtmTdProfileId_Union) {
	key := AtmTdProfileId

	delete(t.AtmTdProfile, key)
}

// AppendAtmTdProfile appends the supplied NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile struct to the
// list AtmTdProfile of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendAtmTdProfile(v *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile) error {
	key := v.AtmTdProfileId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AtmTdProfile == nil {
		t.AtmTdProfile = make(map[NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_AtmTdProfileId_Union]*NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile)
	}

	if _, ok := t.AtmTdProfile[key]; ok {
		return fmt.Errorf("duplicate key for list AtmTdProfile %v", key)
	}

	t.AtmTdProfile[key] = v
	return nil
}

// NewDot1PFcMap creates a new entry in the Dot1PFcMap list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewDot1PFcMap(Dot1PFcMapName string) (*NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1PFcMap == nil {
		t.Dot1PFcMap = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap)
	}

	key := Dot1PFcMapName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dot1PFcMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dot1PFcMap", key)
	}

	t.Dot1PFcMap[key] = &NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap{
		Dot1PFcMapName: &Dot1PFcMapName,
	}

	return t.Dot1PFcMap[key], nil
}

// RenameDot1PFcMap renames an entry in the list Dot1PFcMap within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameDot1PFcMap(oldK, newK string) error {
	if _, ok := t.Dot1PFcMap[newK]; ok {
		return fmt.Errorf("key %v already exists in Dot1PFcMap", newK)
	}

	e, ok := t.Dot1PFcMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dot1PFcMap", oldK)
	}
	e.Dot1PFcMapName = &newK

	t.Dot1PFcMap[newK] = e
	delete(t.Dot1PFcMap, oldK)
	return nil
}

// GetOrCreateDot1PFcMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateDot1PFcMap(Dot1PFcMapName string) *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap {

	key := Dot1PFcMapName

	if v, ok := t.Dot1PFcMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDot1PFcMap(Dot1PFcMapName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDot1PFcMap got unexpected error: %v", err))
	}
	return v
}

// GetDot1PFcMap retrieves the value with the specified key from
// the Dot1PFcMap map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetDot1PFcMap(Dot1PFcMapName string) *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap {

	if t == nil {
		return nil
	}

	key := Dot1PFcMapName

	if lm, ok := t.Dot1PFcMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteDot1PFcMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteDot1PFcMap(Dot1PFcMapName string) {
	key := Dot1PFcMapName

	delete(t.Dot1PFcMap, key)
}

// AppendDot1PFcMap appends the supplied NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap struct to the
// list Dot1PFcMap of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendDot1PFcMap(v *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap) error {
	if v.Dot1PFcMapName == nil {
		return fmt.Errorf("invalid nil key received for Dot1PFcMapName")
	}

	key := *v.Dot1PFcMapName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1PFcMap == nil {
		t.Dot1PFcMap = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap)
	}

	if _, ok := t.Dot1PFcMap[key]; ok {
		return fmt.Errorf("duplicate key for list Dot1PFcMap %v", key)
	}

	t.Dot1PFcMap[key] = v
	return nil
}

// NewDscpFcMap creates a new entry in the DscpFcMap list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewDscpFcMap(DscpFcMapName string) (*NokiaConf_Configure_Groups_Group_Qos_DscpFcMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DscpFcMap == nil {
		t.DscpFcMap = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_DscpFcMap)
	}

	key := DscpFcMapName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DscpFcMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DscpFcMap", key)
	}

	t.DscpFcMap[key] = &NokiaConf_Configure_Groups_Group_Qos_DscpFcMap{
		DscpFcMapName: &DscpFcMapName,
	}

	return t.DscpFcMap[key], nil
}

// RenameDscpFcMap renames an entry in the list DscpFcMap within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameDscpFcMap(oldK, newK string) error {
	if _, ok := t.DscpFcMap[newK]; ok {
		return fmt.Errorf("key %v already exists in DscpFcMap", newK)
	}

	e, ok := t.DscpFcMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DscpFcMap", oldK)
	}
	e.DscpFcMapName = &newK

	t.DscpFcMap[newK] = e
	delete(t.DscpFcMap, oldK)
	return nil
}

// GetOrCreateDscpFcMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateDscpFcMap(DscpFcMapName string) *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap {

	key := DscpFcMapName

	if v, ok := t.DscpFcMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscpFcMap(DscpFcMapName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscpFcMap got unexpected error: %v", err))
	}
	return v
}

// GetDscpFcMap retrieves the value with the specified key from
// the DscpFcMap map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetDscpFcMap(DscpFcMapName string) *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap {

	if t == nil {
		return nil
	}

	key := DscpFcMapName

	if lm, ok := t.DscpFcMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscpFcMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteDscpFcMap(DscpFcMapName string) {
	key := DscpFcMapName

	delete(t.DscpFcMap, key)
}

// AppendDscpFcMap appends the supplied NokiaConf_Configure_Groups_Group_Qos_DscpFcMap struct to the
// list DscpFcMap of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_DscpFcMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendDscpFcMap(v *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap) error {
	if v.DscpFcMapName == nil {
		return fmt.Errorf("invalid nil key received for DscpFcMapName")
	}

	key := *v.DscpFcMapName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DscpFcMap == nil {
		t.DscpFcMap = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_DscpFcMap)
	}

	if _, ok := t.DscpFcMap[key]; ok {
		return fmt.Errorf("duplicate key for list DscpFcMap %v", key)
	}

	t.DscpFcMap[key] = v
	return nil
}

// NewEgressRemarkPolicy creates a new entry in the EgressRemarkPolicy list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewEgressRemarkPolicy(EgressRemarkPolicyName string) (*NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EgressRemarkPolicy == nil {
		t.EgressRemarkPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy)
	}

	key := EgressRemarkPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EgressRemarkPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EgressRemarkPolicy", key)
	}

	t.EgressRemarkPolicy[key] = &NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy{
		EgressRemarkPolicyName: &EgressRemarkPolicyName,
	}

	return t.EgressRemarkPolicy[key], nil
}

// RenameEgressRemarkPolicy renames an entry in the list EgressRemarkPolicy within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameEgressRemarkPolicy(oldK, newK string) error {
	if _, ok := t.EgressRemarkPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in EgressRemarkPolicy", newK)
	}

	e, ok := t.EgressRemarkPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EgressRemarkPolicy", oldK)
	}
	e.EgressRemarkPolicyName = &newK

	t.EgressRemarkPolicy[newK] = e
	delete(t.EgressRemarkPolicy, oldK)
	return nil
}

// GetOrCreateEgressRemarkPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateEgressRemarkPolicy(EgressRemarkPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy {

	key := EgressRemarkPolicyName

	if v, ok := t.EgressRemarkPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEgressRemarkPolicy(EgressRemarkPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEgressRemarkPolicy got unexpected error: %v", err))
	}
	return v
}

// GetEgressRemarkPolicy retrieves the value with the specified key from
// the EgressRemarkPolicy map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetEgressRemarkPolicy(EgressRemarkPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy {

	if t == nil {
		return nil
	}

	key := EgressRemarkPolicyName

	if lm, ok := t.EgressRemarkPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteEgressRemarkPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteEgressRemarkPolicy(EgressRemarkPolicyName string) {
	key := EgressRemarkPolicyName

	delete(t.EgressRemarkPolicy, key)
}

// AppendEgressRemarkPolicy appends the supplied NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy struct to the
// list EgressRemarkPolicy of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendEgressRemarkPolicy(v *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy) error {
	if v.EgressRemarkPolicyName == nil {
		return fmt.Errorf("invalid nil key received for EgressRemarkPolicyName")
	}

	key := *v.EgressRemarkPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EgressRemarkPolicy == nil {
		t.EgressRemarkPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy)
	}

	if _, ok := t.EgressRemarkPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list EgressRemarkPolicy %v", key)
	}

	t.EgressRemarkPolicy[key] = v
	return nil
}

// NewFcDot1PMap creates a new entry in the FcDot1PMap list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewFcDot1PMap(FcDot1PMapName string) (*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FcDot1PMap == nil {
		t.FcDot1PMap = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap)
	}

	key := FcDot1PMapName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FcDot1PMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FcDot1PMap", key)
	}

	t.FcDot1PMap[key] = &NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap{
		FcDot1PMapName: &FcDot1PMapName,
	}

	return t.FcDot1PMap[key], nil
}

// RenameFcDot1PMap renames an entry in the list FcDot1PMap within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameFcDot1PMap(oldK, newK string) error {
	if _, ok := t.FcDot1PMap[newK]; ok {
		return fmt.Errorf("key %v already exists in FcDot1PMap", newK)
	}

	e, ok := t.FcDot1PMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FcDot1PMap", oldK)
	}
	e.FcDot1PMapName = &newK

	t.FcDot1PMap[newK] = e
	delete(t.FcDot1PMap, oldK)
	return nil
}

// GetOrCreateFcDot1PMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateFcDot1PMap(FcDot1PMapName string) *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap {

	key := FcDot1PMapName

	if v, ok := t.FcDot1PMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFcDot1PMap(FcDot1PMapName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFcDot1PMap got unexpected error: %v", err))
	}
	return v
}

// GetFcDot1PMap retrieves the value with the specified key from
// the FcDot1PMap map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetFcDot1PMap(FcDot1PMapName string) *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap {

	if t == nil {
		return nil
	}

	key := FcDot1PMapName

	if lm, ok := t.FcDot1PMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteFcDot1PMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteFcDot1PMap(FcDot1PMapName string) {
	key := FcDot1PMapName

	delete(t.FcDot1PMap, key)
}

// AppendFcDot1PMap appends the supplied NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap struct to the
// list FcDot1PMap of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendFcDot1PMap(v *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap) error {
	if v.FcDot1PMapName == nil {
		return fmt.Errorf("invalid nil key received for FcDot1PMapName")
	}

	key := *v.FcDot1PMapName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FcDot1PMap == nil {
		t.FcDot1PMap = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap)
	}

	if _, ok := t.FcDot1PMap[key]; ok {
		return fmt.Errorf("duplicate key for list FcDot1PMap %v", key)
	}

	t.FcDot1PMap[key] = v
	return nil
}

// NewFcDscpMap creates a new entry in the FcDscpMap list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewFcDscpMap(FcDscpMapName string) (*NokiaConf_Configure_Groups_Group_Qos_FcDscpMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FcDscpMap == nil {
		t.FcDscpMap = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_FcDscpMap)
	}

	key := FcDscpMapName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FcDscpMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FcDscpMap", key)
	}

	t.FcDscpMap[key] = &NokiaConf_Configure_Groups_Group_Qos_FcDscpMap{
		FcDscpMapName: &FcDscpMapName,
	}

	return t.FcDscpMap[key], nil
}

// RenameFcDscpMap renames an entry in the list FcDscpMap within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameFcDscpMap(oldK, newK string) error {
	if _, ok := t.FcDscpMap[newK]; ok {
		return fmt.Errorf("key %v already exists in FcDscpMap", newK)
	}

	e, ok := t.FcDscpMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FcDscpMap", oldK)
	}
	e.FcDscpMapName = &newK

	t.FcDscpMap[newK] = e
	delete(t.FcDscpMap, oldK)
	return nil
}

// GetOrCreateFcDscpMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateFcDscpMap(FcDscpMapName string) *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap {

	key := FcDscpMapName

	if v, ok := t.FcDscpMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFcDscpMap(FcDscpMapName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFcDscpMap got unexpected error: %v", err))
	}
	return v
}

// GetFcDscpMap retrieves the value with the specified key from
// the FcDscpMap map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetFcDscpMap(FcDscpMapName string) *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap {

	if t == nil {
		return nil
	}

	key := FcDscpMapName

	if lm, ok := t.FcDscpMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteFcDscpMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteFcDscpMap(FcDscpMapName string) {
	key := FcDscpMapName

	delete(t.FcDscpMap, key)
}

// AppendFcDscpMap appends the supplied NokiaConf_Configure_Groups_Group_Qos_FcDscpMap struct to the
// list FcDscpMap of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_FcDscpMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendFcDscpMap(v *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap) error {
	if v.FcDscpMapName == nil {
		return fmt.Errorf("invalid nil key received for FcDscpMapName")
	}

	key := *v.FcDscpMapName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FcDscpMap == nil {
		t.FcDscpMap = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_FcDscpMap)
	}

	if _, ok := t.FcDscpMap[key]; ok {
		return fmt.Errorf("duplicate key for list FcDscpMap %v", key)
	}

	t.FcDscpMap[key] = v
	return nil
}

// NewFcLspExpMap creates a new entry in the FcLspExpMap list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewFcLspExpMap(FcLspExpMapName string) (*NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FcLspExpMap == nil {
		t.FcLspExpMap = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap)
	}

	key := FcLspExpMapName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FcLspExpMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FcLspExpMap", key)
	}

	t.FcLspExpMap[key] = &NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap{
		FcLspExpMapName: &FcLspExpMapName,
	}

	return t.FcLspExpMap[key], nil
}

// RenameFcLspExpMap renames an entry in the list FcLspExpMap within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameFcLspExpMap(oldK, newK string) error {
	if _, ok := t.FcLspExpMap[newK]; ok {
		return fmt.Errorf("key %v already exists in FcLspExpMap", newK)
	}

	e, ok := t.FcLspExpMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FcLspExpMap", oldK)
	}
	e.FcLspExpMapName = &newK

	t.FcLspExpMap[newK] = e
	delete(t.FcLspExpMap, oldK)
	return nil
}

// GetOrCreateFcLspExpMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateFcLspExpMap(FcLspExpMapName string) *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap {

	key := FcLspExpMapName

	if v, ok := t.FcLspExpMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFcLspExpMap(FcLspExpMapName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFcLspExpMap got unexpected error: %v", err))
	}
	return v
}

// GetFcLspExpMap retrieves the value with the specified key from
// the FcLspExpMap map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetFcLspExpMap(FcLspExpMapName string) *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap {

	if t == nil {
		return nil
	}

	key := FcLspExpMapName

	if lm, ok := t.FcLspExpMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteFcLspExpMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteFcLspExpMap(FcLspExpMapName string) {
	key := FcLspExpMapName

	delete(t.FcLspExpMap, key)
}

// AppendFcLspExpMap appends the supplied NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap struct to the
// list FcLspExpMap of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendFcLspExpMap(v *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap) error {
	if v.FcLspExpMapName == nil {
		return fmt.Errorf("invalid nil key received for FcLspExpMapName")
	}

	key := *v.FcLspExpMapName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FcLspExpMap == nil {
		t.FcLspExpMap = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap)
	}

	if _, ok := t.FcLspExpMap[key]; ok {
		return fmt.Errorf("duplicate key for list FcLspExpMap %v", key)
	}

	t.FcLspExpMap[key] = v
	return nil
}

// NewFpResourcePolicy creates a new entry in the FpResourcePolicy list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewFpResourcePolicy(FpResourcePolicyName string) (*NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FpResourcePolicy == nil {
		t.FpResourcePolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy)
	}

	key := FpResourcePolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FpResourcePolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FpResourcePolicy", key)
	}

	t.FpResourcePolicy[key] = &NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy{
		FpResourcePolicyName: &FpResourcePolicyName,
	}

	return t.FpResourcePolicy[key], nil
}

// RenameFpResourcePolicy renames an entry in the list FpResourcePolicy within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameFpResourcePolicy(oldK, newK string) error {
	if _, ok := t.FpResourcePolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in FpResourcePolicy", newK)
	}

	e, ok := t.FpResourcePolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FpResourcePolicy", oldK)
	}
	e.FpResourcePolicyName = &newK

	t.FpResourcePolicy[newK] = e
	delete(t.FpResourcePolicy, oldK)
	return nil
}

// GetOrCreateFpResourcePolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateFpResourcePolicy(FpResourcePolicyName string) *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy {

	key := FpResourcePolicyName

	if v, ok := t.FpResourcePolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFpResourcePolicy(FpResourcePolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFpResourcePolicy got unexpected error: %v", err))
	}
	return v
}

// GetFpResourcePolicy retrieves the value with the specified key from
// the FpResourcePolicy map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetFpResourcePolicy(FpResourcePolicyName string) *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy {

	if t == nil {
		return nil
	}

	key := FpResourcePolicyName

	if lm, ok := t.FpResourcePolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteFpResourcePolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteFpResourcePolicy(FpResourcePolicyName string) {
	key := FpResourcePolicyName

	delete(t.FpResourcePolicy, key)
}

// AppendFpResourcePolicy appends the supplied NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy struct to the
// list FpResourcePolicy of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendFpResourcePolicy(v *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy) error {
	if v.FpResourcePolicyName == nil {
		return fmt.Errorf("invalid nil key received for FpResourcePolicyName")
	}

	key := *v.FpResourcePolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FpResourcePolicy == nil {
		t.FpResourcePolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy)
	}

	if _, ok := t.FpResourcePolicy[key]; ok {
		return fmt.Errorf("duplicate key for list FpResourcePolicy %v", key)
	}

	t.FpResourcePolicy[key] = v
	return nil
}

// NewHsAttachmentPolicy creates a new entry in the HsAttachmentPolicy list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewHsAttachmentPolicy(Name string) (*NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsAttachmentPolicy == nil {
		t.HsAttachmentPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsAttachmentPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsAttachmentPolicy", key)
	}

	t.HsAttachmentPolicy[key] = &NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy{
		Name: &Name,
	}

	return t.HsAttachmentPolicy[key], nil
}

// RenameHsAttachmentPolicy renames an entry in the list HsAttachmentPolicy within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameHsAttachmentPolicy(oldK, newK string) error {
	if _, ok := t.HsAttachmentPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HsAttachmentPolicy", newK)
	}

	e, ok := t.HsAttachmentPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsAttachmentPolicy", oldK)
	}
	e.Name = &newK

	t.HsAttachmentPolicy[newK] = e
	delete(t.HsAttachmentPolicy, oldK)
	return nil
}

// GetOrCreateHsAttachmentPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateHsAttachmentPolicy(Name string) *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy {

	key := Name

	if v, ok := t.HsAttachmentPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsAttachmentPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsAttachmentPolicy got unexpected error: %v", err))
	}
	return v
}

// GetHsAttachmentPolicy retrieves the value with the specified key from
// the HsAttachmentPolicy map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetHsAttachmentPolicy(Name string) *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.HsAttachmentPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsAttachmentPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteHsAttachmentPolicy(Name string) {
	key := Name

	delete(t.HsAttachmentPolicy, key)
}

// AppendHsAttachmentPolicy appends the supplied NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy struct to the
// list HsAttachmentPolicy of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendHsAttachmentPolicy(v *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsAttachmentPolicy == nil {
		t.HsAttachmentPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy)
	}

	if _, ok := t.HsAttachmentPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HsAttachmentPolicy %v", key)
	}

	t.HsAttachmentPolicy[key] = v
	return nil
}

// NewHsPoolPolicy creates a new entry in the HsPoolPolicy list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewHsPoolPolicy(Name string) (*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsPoolPolicy == nil {
		t.HsPoolPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsPoolPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsPoolPolicy", key)
	}

	t.HsPoolPolicy[key] = &NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy{
		Name: &Name,
	}

	return t.HsPoolPolicy[key], nil
}

// RenameHsPoolPolicy renames an entry in the list HsPoolPolicy within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameHsPoolPolicy(oldK, newK string) error {
	if _, ok := t.HsPoolPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HsPoolPolicy", newK)
	}

	e, ok := t.HsPoolPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsPoolPolicy", oldK)
	}
	e.Name = &newK

	t.HsPoolPolicy[newK] = e
	delete(t.HsPoolPolicy, oldK)
	return nil
}

// GetOrCreateHsPoolPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateHsPoolPolicy(Name string) *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy {

	key := Name

	if v, ok := t.HsPoolPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsPoolPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsPoolPolicy got unexpected error: %v", err))
	}
	return v
}

// GetHsPoolPolicy retrieves the value with the specified key from
// the HsPoolPolicy map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetHsPoolPolicy(Name string) *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.HsPoolPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsPoolPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteHsPoolPolicy(Name string) {
	key := Name

	delete(t.HsPoolPolicy, key)
}

// AppendHsPoolPolicy appends the supplied NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy struct to the
// list HsPoolPolicy of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendHsPoolPolicy(v *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsPoolPolicy == nil {
		t.HsPoolPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy)
	}

	if _, ok := t.HsPoolPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HsPoolPolicy %v", key)
	}

	t.HsPoolPolicy[key] = v
	return nil
}

// NewHsPortPoolPolicy creates a new entry in the HsPortPoolPolicy list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewHsPortPoolPolicy(Name string) (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsPortPoolPolicy == nil {
		t.HsPortPoolPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsPortPoolPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsPortPoolPolicy", key)
	}

	t.HsPortPoolPolicy[key] = &NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy{
		Name: &Name,
	}

	return t.HsPortPoolPolicy[key], nil
}

// RenameHsPortPoolPolicy renames an entry in the list HsPortPoolPolicy within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameHsPortPoolPolicy(oldK, newK string) error {
	if _, ok := t.HsPortPoolPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HsPortPoolPolicy", newK)
	}

	e, ok := t.HsPortPoolPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsPortPoolPolicy", oldK)
	}
	e.Name = &newK

	t.HsPortPoolPolicy[newK] = e
	delete(t.HsPortPoolPolicy, oldK)
	return nil
}

// GetOrCreateHsPortPoolPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateHsPortPoolPolicy(Name string) *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy {

	key := Name

	if v, ok := t.HsPortPoolPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsPortPoolPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsPortPoolPolicy got unexpected error: %v", err))
	}
	return v
}

// GetHsPortPoolPolicy retrieves the value with the specified key from
// the HsPortPoolPolicy map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetHsPortPoolPolicy(Name string) *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.HsPortPoolPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsPortPoolPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteHsPortPoolPolicy(Name string) {
	key := Name

	delete(t.HsPortPoolPolicy, key)
}

// AppendHsPortPoolPolicy appends the supplied NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy struct to the
// list HsPortPoolPolicy of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendHsPortPoolPolicy(v *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsPortPoolPolicy == nil {
		t.HsPortPoolPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy)
	}

	if _, ok := t.HsPortPoolPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HsPortPoolPolicy %v", key)
	}

	t.HsPortPoolPolicy[key] = v
	return nil
}

// NewHsSchedulerPolicy creates a new entry in the HsSchedulerPolicy list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewHsSchedulerPolicy(Name string) (*NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsSchedulerPolicy == nil {
		t.HsSchedulerPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsSchedulerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsSchedulerPolicy", key)
	}

	t.HsSchedulerPolicy[key] = &NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy{
		Name: &Name,
	}

	return t.HsSchedulerPolicy[key], nil
}

// RenameHsSchedulerPolicy renames an entry in the list HsSchedulerPolicy within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameHsSchedulerPolicy(oldK, newK string) error {
	if _, ok := t.HsSchedulerPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HsSchedulerPolicy", newK)
	}

	e, ok := t.HsSchedulerPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsSchedulerPolicy", oldK)
	}
	e.Name = &newK

	t.HsSchedulerPolicy[newK] = e
	delete(t.HsSchedulerPolicy, oldK)
	return nil
}

// GetOrCreateHsSchedulerPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateHsSchedulerPolicy(Name string) *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy {

	key := Name

	if v, ok := t.HsSchedulerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsSchedulerPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsSchedulerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetHsSchedulerPolicy retrieves the value with the specified key from
// the HsSchedulerPolicy map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetHsSchedulerPolicy(Name string) *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.HsSchedulerPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsSchedulerPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteHsSchedulerPolicy(Name string) {
	key := Name

	delete(t.HsSchedulerPolicy, key)
}

// AppendHsSchedulerPolicy appends the supplied NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy struct to the
// list HsSchedulerPolicy of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendHsSchedulerPolicy(v *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsSchedulerPolicy == nil {
		t.HsSchedulerPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy)
	}

	if _, ok := t.HsSchedulerPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HsSchedulerPolicy %v", key)
	}

	t.HsSchedulerPolicy[key] = v
	return nil
}

// NewHsmdaPoolPolicy creates a new entry in the HsmdaPoolPolicy list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewHsmdaPoolPolicy(HsmdaPoolPolicyName string) (*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsmdaPoolPolicy == nil {
		t.HsmdaPoolPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy)
	}

	key := HsmdaPoolPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsmdaPoolPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsmdaPoolPolicy", key)
	}

	t.HsmdaPoolPolicy[key] = &NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy{
		HsmdaPoolPolicyName: &HsmdaPoolPolicyName,
	}

	return t.HsmdaPoolPolicy[key], nil
}

// RenameHsmdaPoolPolicy renames an entry in the list HsmdaPoolPolicy within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameHsmdaPoolPolicy(oldK, newK string) error {
	if _, ok := t.HsmdaPoolPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HsmdaPoolPolicy", newK)
	}

	e, ok := t.HsmdaPoolPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsmdaPoolPolicy", oldK)
	}
	e.HsmdaPoolPolicyName = &newK

	t.HsmdaPoolPolicy[newK] = e
	delete(t.HsmdaPoolPolicy, oldK)
	return nil
}

// GetOrCreateHsmdaPoolPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateHsmdaPoolPolicy(HsmdaPoolPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy {

	key := HsmdaPoolPolicyName

	if v, ok := t.HsmdaPoolPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsmdaPoolPolicy(HsmdaPoolPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsmdaPoolPolicy got unexpected error: %v", err))
	}
	return v
}

// GetHsmdaPoolPolicy retrieves the value with the specified key from
// the HsmdaPoolPolicy map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetHsmdaPoolPolicy(HsmdaPoolPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy {

	if t == nil {
		return nil
	}

	key := HsmdaPoolPolicyName

	if lm, ok := t.HsmdaPoolPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsmdaPoolPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteHsmdaPoolPolicy(HsmdaPoolPolicyName string) {
	key := HsmdaPoolPolicyName

	delete(t.HsmdaPoolPolicy, key)
}

// AppendHsmdaPoolPolicy appends the supplied NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy struct to the
// list HsmdaPoolPolicy of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendHsmdaPoolPolicy(v *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy) error {
	if v.HsmdaPoolPolicyName == nil {
		return fmt.Errorf("invalid nil key received for HsmdaPoolPolicyName")
	}

	key := *v.HsmdaPoolPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsmdaPoolPolicy == nil {
		t.HsmdaPoolPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy)
	}

	if _, ok := t.HsmdaPoolPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HsmdaPoolPolicy %v", key)
	}

	t.HsmdaPoolPolicy[key] = v
	return nil
}

// NewHsmdaSchedulerPolicy creates a new entry in the HsmdaSchedulerPolicy list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewHsmdaSchedulerPolicy(HsmdaSchedulerPolicyName string) (*NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsmdaSchedulerPolicy == nil {
		t.HsmdaSchedulerPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy)
	}

	key := HsmdaSchedulerPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsmdaSchedulerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsmdaSchedulerPolicy", key)
	}

	t.HsmdaSchedulerPolicy[key] = &NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy{
		HsmdaSchedulerPolicyName: &HsmdaSchedulerPolicyName,
	}

	return t.HsmdaSchedulerPolicy[key], nil
}

// RenameHsmdaSchedulerPolicy renames an entry in the list HsmdaSchedulerPolicy within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameHsmdaSchedulerPolicy(oldK, newK string) error {
	if _, ok := t.HsmdaSchedulerPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HsmdaSchedulerPolicy", newK)
	}

	e, ok := t.HsmdaSchedulerPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsmdaSchedulerPolicy", oldK)
	}
	e.HsmdaSchedulerPolicyName = &newK

	t.HsmdaSchedulerPolicy[newK] = e
	delete(t.HsmdaSchedulerPolicy, oldK)
	return nil
}

// GetOrCreateHsmdaSchedulerPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateHsmdaSchedulerPolicy(HsmdaSchedulerPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy {

	key := HsmdaSchedulerPolicyName

	if v, ok := t.HsmdaSchedulerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsmdaSchedulerPolicy(HsmdaSchedulerPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsmdaSchedulerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetHsmdaSchedulerPolicy retrieves the value with the specified key from
// the HsmdaSchedulerPolicy map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetHsmdaSchedulerPolicy(HsmdaSchedulerPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy {

	if t == nil {
		return nil
	}

	key := HsmdaSchedulerPolicyName

	if lm, ok := t.HsmdaSchedulerPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsmdaSchedulerPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteHsmdaSchedulerPolicy(HsmdaSchedulerPolicyName string) {
	key := HsmdaSchedulerPolicyName

	delete(t.HsmdaSchedulerPolicy, key)
}

// AppendHsmdaSchedulerPolicy appends the supplied NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy struct to the
// list HsmdaSchedulerPolicy of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendHsmdaSchedulerPolicy(v *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) error {
	if v.HsmdaSchedulerPolicyName == nil {
		return fmt.Errorf("invalid nil key received for HsmdaSchedulerPolicyName")
	}

	key := *v.HsmdaSchedulerPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsmdaSchedulerPolicy == nil {
		t.HsmdaSchedulerPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy)
	}

	if _, ok := t.HsmdaSchedulerPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HsmdaSchedulerPolicy %v", key)
	}

	t.HsmdaSchedulerPolicy[key] = v
	return nil
}

// NewHsmdaSlopePolicy creates a new entry in the HsmdaSlopePolicy list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewHsmdaSlopePolicy(HsmdaSlopePolicyName string) (*NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsmdaSlopePolicy == nil {
		t.HsmdaSlopePolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy)
	}

	key := HsmdaSlopePolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsmdaSlopePolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsmdaSlopePolicy", key)
	}

	t.HsmdaSlopePolicy[key] = &NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy{
		HsmdaSlopePolicyName: &HsmdaSlopePolicyName,
	}

	return t.HsmdaSlopePolicy[key], nil
}

// RenameHsmdaSlopePolicy renames an entry in the list HsmdaSlopePolicy within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameHsmdaSlopePolicy(oldK, newK string) error {
	if _, ok := t.HsmdaSlopePolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HsmdaSlopePolicy", newK)
	}

	e, ok := t.HsmdaSlopePolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsmdaSlopePolicy", oldK)
	}
	e.HsmdaSlopePolicyName = &newK

	t.HsmdaSlopePolicy[newK] = e
	delete(t.HsmdaSlopePolicy, oldK)
	return nil
}

// GetOrCreateHsmdaSlopePolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateHsmdaSlopePolicy(HsmdaSlopePolicyName string) *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy {

	key := HsmdaSlopePolicyName

	if v, ok := t.HsmdaSlopePolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsmdaSlopePolicy(HsmdaSlopePolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsmdaSlopePolicy got unexpected error: %v", err))
	}
	return v
}

// GetHsmdaSlopePolicy retrieves the value with the specified key from
// the HsmdaSlopePolicy map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetHsmdaSlopePolicy(HsmdaSlopePolicyName string) *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy {

	if t == nil {
		return nil
	}

	key := HsmdaSlopePolicyName

	if lm, ok := t.HsmdaSlopePolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsmdaSlopePolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteHsmdaSlopePolicy(HsmdaSlopePolicyName string) {
	key := HsmdaSlopePolicyName

	delete(t.HsmdaSlopePolicy, key)
}

// AppendHsmdaSlopePolicy appends the supplied NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy struct to the
// list HsmdaSlopePolicy of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendHsmdaSlopePolicy(v *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy) error {
	if v.HsmdaSlopePolicyName == nil {
		return fmt.Errorf("invalid nil key received for HsmdaSlopePolicyName")
	}

	key := *v.HsmdaSlopePolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsmdaSlopePolicy == nil {
		t.HsmdaSlopePolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy)
	}

	if _, ok := t.HsmdaSlopePolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HsmdaSlopePolicy %v", key)
	}

	t.HsmdaSlopePolicy[key] = v
	return nil
}

// NewHsmdaWrrPolicy creates a new entry in the HsmdaWrrPolicy list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewHsmdaWrrPolicy(HsmdaWrrPolicyName string) (*NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsmdaWrrPolicy == nil {
		t.HsmdaWrrPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy)
	}

	key := HsmdaWrrPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsmdaWrrPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsmdaWrrPolicy", key)
	}

	t.HsmdaWrrPolicy[key] = &NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy{
		HsmdaWrrPolicyName: &HsmdaWrrPolicyName,
	}

	return t.HsmdaWrrPolicy[key], nil
}

// RenameHsmdaWrrPolicy renames an entry in the list HsmdaWrrPolicy within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameHsmdaWrrPolicy(oldK, newK string) error {
	if _, ok := t.HsmdaWrrPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HsmdaWrrPolicy", newK)
	}

	e, ok := t.HsmdaWrrPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsmdaWrrPolicy", oldK)
	}
	e.HsmdaWrrPolicyName = &newK

	t.HsmdaWrrPolicy[newK] = e
	delete(t.HsmdaWrrPolicy, oldK)
	return nil
}

// GetOrCreateHsmdaWrrPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateHsmdaWrrPolicy(HsmdaWrrPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy {

	key := HsmdaWrrPolicyName

	if v, ok := t.HsmdaWrrPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsmdaWrrPolicy(HsmdaWrrPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsmdaWrrPolicy got unexpected error: %v", err))
	}
	return v
}

// GetHsmdaWrrPolicy retrieves the value with the specified key from
// the HsmdaWrrPolicy map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetHsmdaWrrPolicy(HsmdaWrrPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy {

	if t == nil {
		return nil
	}

	key := HsmdaWrrPolicyName

	if lm, ok := t.HsmdaWrrPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsmdaWrrPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteHsmdaWrrPolicy(HsmdaWrrPolicyName string) {
	key := HsmdaWrrPolicyName

	delete(t.HsmdaWrrPolicy, key)
}

// AppendHsmdaWrrPolicy appends the supplied NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy struct to the
// list HsmdaWrrPolicy of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendHsmdaWrrPolicy(v *NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy) error {
	if v.HsmdaWrrPolicyName == nil {
		return fmt.Errorf("invalid nil key received for HsmdaWrrPolicyName")
	}

	key := *v.HsmdaWrrPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsmdaWrrPolicy == nil {
		t.HsmdaWrrPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy)
	}

	if _, ok := t.HsmdaWrrPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HsmdaWrrPolicy %v", key)
	}

	t.HsmdaWrrPolicy[key] = v
	return nil
}

// NewHwAggShaperSchedulerPolicy creates a new entry in the HwAggShaperSchedulerPolicy list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewHwAggShaperSchedulerPolicy(Name string) (*NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HwAggShaperSchedulerPolicy == nil {
		t.HwAggShaperSchedulerPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HwAggShaperSchedulerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HwAggShaperSchedulerPolicy", key)
	}

	t.HwAggShaperSchedulerPolicy[key] = &NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy{
		Name: &Name,
	}

	return t.HwAggShaperSchedulerPolicy[key], nil
}

// RenameHwAggShaperSchedulerPolicy renames an entry in the list HwAggShaperSchedulerPolicy within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameHwAggShaperSchedulerPolicy(oldK, newK string) error {
	if _, ok := t.HwAggShaperSchedulerPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HwAggShaperSchedulerPolicy", newK)
	}

	e, ok := t.HwAggShaperSchedulerPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HwAggShaperSchedulerPolicy", oldK)
	}
	e.Name = &newK

	t.HwAggShaperSchedulerPolicy[newK] = e
	delete(t.HwAggShaperSchedulerPolicy, oldK)
	return nil
}

// GetOrCreateHwAggShaperSchedulerPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateHwAggShaperSchedulerPolicy(Name string) *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy {

	key := Name

	if v, ok := t.HwAggShaperSchedulerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHwAggShaperSchedulerPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHwAggShaperSchedulerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetHwAggShaperSchedulerPolicy retrieves the value with the specified key from
// the HwAggShaperSchedulerPolicy map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetHwAggShaperSchedulerPolicy(Name string) *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.HwAggShaperSchedulerPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHwAggShaperSchedulerPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteHwAggShaperSchedulerPolicy(Name string) {
	key := Name

	delete(t.HwAggShaperSchedulerPolicy, key)
}

// AppendHwAggShaperSchedulerPolicy appends the supplied NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy struct to the
// list HwAggShaperSchedulerPolicy of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendHwAggShaperSchedulerPolicy(v *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HwAggShaperSchedulerPolicy == nil {
		t.HwAggShaperSchedulerPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy)
	}

	if _, ok := t.HwAggShaperSchedulerPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HwAggShaperSchedulerPolicy %v", key)
	}

	t.HwAggShaperSchedulerPolicy[key] = v
	return nil
}

// NewIngressClassificationPolicy creates a new entry in the IngressClassificationPolicy list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewIngressClassificationPolicy(IngressClassificationPolicyName string) (*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IngressClassificationPolicy == nil {
		t.IngressClassificationPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy)
	}

	key := IngressClassificationPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IngressClassificationPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IngressClassificationPolicy", key)
	}

	t.IngressClassificationPolicy[key] = &NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy{
		IngressClassificationPolicyName: &IngressClassificationPolicyName,
	}

	return t.IngressClassificationPolicy[key], nil
}

// RenameIngressClassificationPolicy renames an entry in the list IngressClassificationPolicy within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameIngressClassificationPolicy(oldK, newK string) error {
	if _, ok := t.IngressClassificationPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in IngressClassificationPolicy", newK)
	}

	e, ok := t.IngressClassificationPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IngressClassificationPolicy", oldK)
	}
	e.IngressClassificationPolicyName = &newK

	t.IngressClassificationPolicy[newK] = e
	delete(t.IngressClassificationPolicy, oldK)
	return nil
}

// GetOrCreateIngressClassificationPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateIngressClassificationPolicy(IngressClassificationPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy {

	key := IngressClassificationPolicyName

	if v, ok := t.IngressClassificationPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIngressClassificationPolicy(IngressClassificationPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIngressClassificationPolicy got unexpected error: %v", err))
	}
	return v
}

// GetIngressClassificationPolicy retrieves the value with the specified key from
// the IngressClassificationPolicy map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetIngressClassificationPolicy(IngressClassificationPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy {

	if t == nil {
		return nil
	}

	key := IngressClassificationPolicyName

	if lm, ok := t.IngressClassificationPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteIngressClassificationPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteIngressClassificationPolicy(IngressClassificationPolicyName string) {
	key := IngressClassificationPolicyName

	delete(t.IngressClassificationPolicy, key)
}

// AppendIngressClassificationPolicy appends the supplied NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy struct to the
// list IngressClassificationPolicy of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendIngressClassificationPolicy(v *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) error {
	if v.IngressClassificationPolicyName == nil {
		return fmt.Errorf("invalid nil key received for IngressClassificationPolicyName")
	}

	key := *v.IngressClassificationPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IngressClassificationPolicy == nil {
		t.IngressClassificationPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy)
	}

	if _, ok := t.IngressClassificationPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list IngressClassificationPolicy %v", key)
	}

	t.IngressClassificationPolicy[key] = v
	return nil
}

// NewLspExpFcMap creates a new entry in the LspExpFcMap list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewLspExpFcMap(LspExpFcMapName string) (*NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspExpFcMap == nil {
		t.LspExpFcMap = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap)
	}

	key := LspExpFcMapName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LspExpFcMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LspExpFcMap", key)
	}

	t.LspExpFcMap[key] = &NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap{
		LspExpFcMapName: &LspExpFcMapName,
	}

	return t.LspExpFcMap[key], nil
}

// RenameLspExpFcMap renames an entry in the list LspExpFcMap within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameLspExpFcMap(oldK, newK string) error {
	if _, ok := t.LspExpFcMap[newK]; ok {
		return fmt.Errorf("key %v already exists in LspExpFcMap", newK)
	}

	e, ok := t.LspExpFcMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LspExpFcMap", oldK)
	}
	e.LspExpFcMapName = &newK

	t.LspExpFcMap[newK] = e
	delete(t.LspExpFcMap, oldK)
	return nil
}

// GetOrCreateLspExpFcMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateLspExpFcMap(LspExpFcMapName string) *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap {

	key := LspExpFcMapName

	if v, ok := t.LspExpFcMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLspExpFcMap(LspExpFcMapName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLspExpFcMap got unexpected error: %v", err))
	}
	return v
}

// GetLspExpFcMap retrieves the value with the specified key from
// the LspExpFcMap map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetLspExpFcMap(LspExpFcMapName string) *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap {

	if t == nil {
		return nil
	}

	key := LspExpFcMapName

	if lm, ok := t.LspExpFcMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteLspExpFcMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteLspExpFcMap(LspExpFcMapName string) {
	key := LspExpFcMapName

	delete(t.LspExpFcMap, key)
}

// AppendLspExpFcMap appends the supplied NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap struct to the
// list LspExpFcMap of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendLspExpFcMap(v *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap) error {
	if v.LspExpFcMapName == nil {
		return fmt.Errorf("invalid nil key received for LspExpFcMapName")
	}

	key := *v.LspExpFcMapName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspExpFcMap == nil {
		t.LspExpFcMap = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap)
	}

	if _, ok := t.LspExpFcMap[key]; ok {
		return fmt.Errorf("duplicate key for list LspExpFcMap %v", key)
	}

	t.LspExpFcMap[key] = v
	return nil
}

// NewMcFrProfileEgress creates a new entry in the McFrProfileEgress list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewMcFrProfileEgress(McFrEgressProfIndex NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_McFrEgressProfIndex_Union) (*NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.McFrProfileEgress == nil {
		t.McFrProfileEgress = make(map[NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_McFrEgressProfIndex_Union]*NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress)
	}

	key := McFrEgressProfIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.McFrProfileEgress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list McFrProfileEgress", key)
	}

	t.McFrProfileEgress[key] = &NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress{
		McFrEgressProfIndex: McFrEgressProfIndex,
	}

	return t.McFrProfileEgress[key], nil
}

// RenameMcFrProfileEgress renames an entry in the list McFrProfileEgress within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameMcFrProfileEgress(oldK, newK NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_McFrEgressProfIndex_Union) error {
	if _, ok := t.McFrProfileEgress[newK]; ok {
		return fmt.Errorf("key %v already exists in McFrProfileEgress", newK)
	}

	e, ok := t.McFrProfileEgress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in McFrProfileEgress", oldK)
	}
	e.McFrEgressProfIndex = newK

	t.McFrProfileEgress[newK] = e
	delete(t.McFrProfileEgress, oldK)
	return nil
}

// GetOrCreateMcFrProfileEgress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateMcFrProfileEgress(McFrEgressProfIndex NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_McFrEgressProfIndex_Union) *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress {

	key := McFrEgressProfIndex

	if v, ok := t.McFrProfileEgress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMcFrProfileEgress(McFrEgressProfIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMcFrProfileEgress got unexpected error: %v", err))
	}
	return v
}

// GetMcFrProfileEgress retrieves the value with the specified key from
// the McFrProfileEgress map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetMcFrProfileEgress(McFrEgressProfIndex NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_McFrEgressProfIndex_Union) *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress {

	if t == nil {
		return nil
	}

	key := McFrEgressProfIndex

	if lm, ok := t.McFrProfileEgress[key]; ok {
		return lm
	}
	return nil
}

// DeleteMcFrProfileEgress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteMcFrProfileEgress(McFrEgressProfIndex NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_McFrEgressProfIndex_Union) {
	key := McFrEgressProfIndex

	delete(t.McFrProfileEgress, key)
}

// AppendMcFrProfileEgress appends the supplied NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress struct to the
// list McFrProfileEgress of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendMcFrProfileEgress(v *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress) error {
	key := v.McFrEgressProfIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.McFrProfileEgress == nil {
		t.McFrProfileEgress = make(map[NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_McFrEgressProfIndex_Union]*NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress)
	}

	if _, ok := t.McFrProfileEgress[key]; ok {
		return fmt.Errorf("duplicate key for list McFrProfileEgress %v", key)
	}

	t.McFrProfileEgress[key] = v
	return nil
}

// NewMcFrProfileIngress creates a new entry in the McFrProfileIngress list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewMcFrProfileIngress(McFrIngressProfIndex NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_McFrIngressProfIndex_Union) (*NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.McFrProfileIngress == nil {
		t.McFrProfileIngress = make(map[NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_McFrIngressProfIndex_Union]*NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress)
	}

	key := McFrIngressProfIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.McFrProfileIngress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list McFrProfileIngress", key)
	}

	t.McFrProfileIngress[key] = &NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress{
		McFrIngressProfIndex: McFrIngressProfIndex,
	}

	return t.McFrProfileIngress[key], nil
}

// RenameMcFrProfileIngress renames an entry in the list McFrProfileIngress within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameMcFrProfileIngress(oldK, newK NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_McFrIngressProfIndex_Union) error {
	if _, ok := t.McFrProfileIngress[newK]; ok {
		return fmt.Errorf("key %v already exists in McFrProfileIngress", newK)
	}

	e, ok := t.McFrProfileIngress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in McFrProfileIngress", oldK)
	}
	e.McFrIngressProfIndex = newK

	t.McFrProfileIngress[newK] = e
	delete(t.McFrProfileIngress, oldK)
	return nil
}

// GetOrCreateMcFrProfileIngress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateMcFrProfileIngress(McFrIngressProfIndex NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_McFrIngressProfIndex_Union) *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress {

	key := McFrIngressProfIndex

	if v, ok := t.McFrProfileIngress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMcFrProfileIngress(McFrIngressProfIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMcFrProfileIngress got unexpected error: %v", err))
	}
	return v
}

// GetMcFrProfileIngress retrieves the value with the specified key from
// the McFrProfileIngress map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetMcFrProfileIngress(McFrIngressProfIndex NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_McFrIngressProfIndex_Union) *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress {

	if t == nil {
		return nil
	}

	key := McFrIngressProfIndex

	if lm, ok := t.McFrProfileIngress[key]; ok {
		return lm
	}
	return nil
}

// DeleteMcFrProfileIngress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteMcFrProfileIngress(McFrIngressProfIndex NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_McFrIngressProfIndex_Union) {
	key := McFrIngressProfIndex

	delete(t.McFrProfileIngress, key)
}

// AppendMcFrProfileIngress appends the supplied NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress struct to the
// list McFrProfileIngress of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendMcFrProfileIngress(v *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress) error {
	key := v.McFrIngressProfIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.McFrProfileIngress == nil {
		t.McFrProfileIngress = make(map[NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_McFrIngressProfIndex_Union]*NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress)
	}

	if _, ok := t.McFrProfileIngress[key]; ok {
		return fmt.Errorf("duplicate key for list McFrProfileIngress %v", key)
	}

	t.McFrProfileIngress[key] = v
	return nil
}

// NewMlpppProfileEgress creates a new entry in the MlpppProfileEgress list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewMlpppProfileEgress(McMlpppEgressProfIndex NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_McMlpppEgressProfIndex_Union) (*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MlpppProfileEgress == nil {
		t.MlpppProfileEgress = make(map[NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_McMlpppEgressProfIndex_Union]*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress)
	}

	key := McMlpppEgressProfIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MlpppProfileEgress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MlpppProfileEgress", key)
	}

	t.MlpppProfileEgress[key] = &NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress{
		McMlpppEgressProfIndex: McMlpppEgressProfIndex,
	}

	return t.MlpppProfileEgress[key], nil
}

// RenameMlpppProfileEgress renames an entry in the list MlpppProfileEgress within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameMlpppProfileEgress(oldK, newK NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_McMlpppEgressProfIndex_Union) error {
	if _, ok := t.MlpppProfileEgress[newK]; ok {
		return fmt.Errorf("key %v already exists in MlpppProfileEgress", newK)
	}

	e, ok := t.MlpppProfileEgress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MlpppProfileEgress", oldK)
	}
	e.McMlpppEgressProfIndex = newK

	t.MlpppProfileEgress[newK] = e
	delete(t.MlpppProfileEgress, oldK)
	return nil
}

// GetOrCreateMlpppProfileEgress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateMlpppProfileEgress(McMlpppEgressProfIndex NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_McMlpppEgressProfIndex_Union) *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress {

	key := McMlpppEgressProfIndex

	if v, ok := t.MlpppProfileEgress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMlpppProfileEgress(McMlpppEgressProfIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMlpppProfileEgress got unexpected error: %v", err))
	}
	return v
}

// GetMlpppProfileEgress retrieves the value with the specified key from
// the MlpppProfileEgress map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetMlpppProfileEgress(McMlpppEgressProfIndex NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_McMlpppEgressProfIndex_Union) *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress {

	if t == nil {
		return nil
	}

	key := McMlpppEgressProfIndex

	if lm, ok := t.MlpppProfileEgress[key]; ok {
		return lm
	}
	return nil
}

// DeleteMlpppProfileEgress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteMlpppProfileEgress(McMlpppEgressProfIndex NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_McMlpppEgressProfIndex_Union) {
	key := McMlpppEgressProfIndex

	delete(t.MlpppProfileEgress, key)
}

// AppendMlpppProfileEgress appends the supplied NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress struct to the
// list MlpppProfileEgress of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendMlpppProfileEgress(v *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) error {
	key := v.McMlpppEgressProfIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MlpppProfileEgress == nil {
		t.MlpppProfileEgress = make(map[NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_McMlpppEgressProfIndex_Union]*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress)
	}

	if _, ok := t.MlpppProfileEgress[key]; ok {
		return fmt.Errorf("duplicate key for list MlpppProfileEgress %v", key)
	}

	t.MlpppProfileEgress[key] = v
	return nil
}

// NewMlpppProfileIngress creates a new entry in the MlpppProfileIngress list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewMlpppProfileIngress(McMlpppIngressProfIndex NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_McMlpppIngressProfIndex_Union) (*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MlpppProfileIngress == nil {
		t.MlpppProfileIngress = make(map[NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_McMlpppIngressProfIndex_Union]*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress)
	}

	key := McMlpppIngressProfIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MlpppProfileIngress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MlpppProfileIngress", key)
	}

	t.MlpppProfileIngress[key] = &NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress{
		McMlpppIngressProfIndex: McMlpppIngressProfIndex,
	}

	return t.MlpppProfileIngress[key], nil
}

// RenameMlpppProfileIngress renames an entry in the list MlpppProfileIngress within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameMlpppProfileIngress(oldK, newK NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_McMlpppIngressProfIndex_Union) error {
	if _, ok := t.MlpppProfileIngress[newK]; ok {
		return fmt.Errorf("key %v already exists in MlpppProfileIngress", newK)
	}

	e, ok := t.MlpppProfileIngress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MlpppProfileIngress", oldK)
	}
	e.McMlpppIngressProfIndex = newK

	t.MlpppProfileIngress[newK] = e
	delete(t.MlpppProfileIngress, oldK)
	return nil
}

// GetOrCreateMlpppProfileIngress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateMlpppProfileIngress(McMlpppIngressProfIndex NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_McMlpppIngressProfIndex_Union) *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress {

	key := McMlpppIngressProfIndex

	if v, ok := t.MlpppProfileIngress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMlpppProfileIngress(McMlpppIngressProfIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMlpppProfileIngress got unexpected error: %v", err))
	}
	return v
}

// GetMlpppProfileIngress retrieves the value with the specified key from
// the MlpppProfileIngress map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetMlpppProfileIngress(McMlpppIngressProfIndex NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_McMlpppIngressProfIndex_Union) *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress {

	if t == nil {
		return nil
	}

	key := McMlpppIngressProfIndex

	if lm, ok := t.MlpppProfileIngress[key]; ok {
		return lm
	}
	return nil
}

// DeleteMlpppProfileIngress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteMlpppProfileIngress(McMlpppIngressProfIndex NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_McMlpppIngressProfIndex_Union) {
	key := McMlpppIngressProfIndex

	delete(t.MlpppProfileIngress, key)
}

// AppendMlpppProfileIngress appends the supplied NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress struct to the
// list MlpppProfileIngress of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendMlpppProfileIngress(v *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress) error {
	key := v.McMlpppIngressProfIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MlpppProfileIngress == nil {
		t.MlpppProfileIngress = make(map[NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_McMlpppIngressProfIndex_Union]*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress)
	}

	if _, ok := t.MlpppProfileIngress[key]; ok {
		return fmt.Errorf("duplicate key for list MlpppProfileIngress %v", key)
	}

	t.MlpppProfileIngress[key] = v
	return nil
}

// NewNetwork creates a new entry in the Network list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewNetwork(NetworkPolicyName string) (*NokiaConf_Configure_Groups_Group_Qos_Network, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Network == nil {
		t.Network = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_Network)
	}

	key := NetworkPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Network[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Network", key)
	}

	t.Network[key] = &NokiaConf_Configure_Groups_Group_Qos_Network{
		NetworkPolicyName: &NetworkPolicyName,
	}

	return t.Network[key], nil
}

// RenameNetwork renames an entry in the list Network within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameNetwork(oldK, newK string) error {
	if _, ok := t.Network[newK]; ok {
		return fmt.Errorf("key %v already exists in Network", newK)
	}

	e, ok := t.Network[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Network", oldK)
	}
	e.NetworkPolicyName = &newK

	t.Network[newK] = e
	delete(t.Network, oldK)
	return nil
}

// GetOrCreateNetwork retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateNetwork(NetworkPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_Network {

	key := NetworkPolicyName

	if v, ok := t.Network[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetwork(NetworkPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetwork got unexpected error: %v", err))
	}
	return v
}

// GetNetwork retrieves the value with the specified key from
// the Network map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetNetwork(NetworkPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_Network {

	if t == nil {
		return nil
	}

	key := NetworkPolicyName

	if lm, ok := t.Network[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetwork deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteNetwork(NetworkPolicyName string) {
	key := NetworkPolicyName

	delete(t.Network, key)
}

// AppendNetwork appends the supplied NokiaConf_Configure_Groups_Group_Qos_Network struct to the
// list Network of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_Network already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendNetwork(v *NokiaConf_Configure_Groups_Group_Qos_Network) error {
	if v.NetworkPolicyName == nil {
		return fmt.Errorf("invalid nil key received for NetworkPolicyName")
	}

	key := *v.NetworkPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Network == nil {
		t.Network = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_Network)
	}

	if _, ok := t.Network[key]; ok {
		return fmt.Errorf("duplicate key for list Network %v", key)
	}

	t.Network[key] = v
	return nil
}

// NewNetworkIngress creates a new entry in the NetworkIngress list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewNetworkIngress(NetworkIngressPolicyName string) (*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkIngress == nil {
		t.NetworkIngress = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress)
	}

	key := NetworkIngressPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkIngress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkIngress", key)
	}

	t.NetworkIngress[key] = &NokiaConf_Configure_Groups_Group_Qos_NetworkIngress{
		NetworkIngressPolicyName: &NetworkIngressPolicyName,
	}

	return t.NetworkIngress[key], nil
}

// RenameNetworkIngress renames an entry in the list NetworkIngress within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameNetworkIngress(oldK, newK string) error {
	if _, ok := t.NetworkIngress[newK]; ok {
		return fmt.Errorf("key %v already exists in NetworkIngress", newK)
	}

	e, ok := t.NetworkIngress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NetworkIngress", oldK)
	}
	e.NetworkIngressPolicyName = &newK

	t.NetworkIngress[newK] = e
	delete(t.NetworkIngress, oldK)
	return nil
}

// GetOrCreateNetworkIngress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateNetworkIngress(NetworkIngressPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress {

	key := NetworkIngressPolicyName

	if v, ok := t.NetworkIngress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetworkIngress(NetworkIngressPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetworkIngress got unexpected error: %v", err))
	}
	return v
}

// GetNetworkIngress retrieves the value with the specified key from
// the NetworkIngress map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetNetworkIngress(NetworkIngressPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress {

	if t == nil {
		return nil
	}

	key := NetworkIngressPolicyName

	if lm, ok := t.NetworkIngress[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetworkIngress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteNetworkIngress(NetworkIngressPolicyName string) {
	key := NetworkIngressPolicyName

	delete(t.NetworkIngress, key)
}

// AppendNetworkIngress appends the supplied NokiaConf_Configure_Groups_Group_Qos_NetworkIngress struct to the
// list NetworkIngress of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_NetworkIngress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendNetworkIngress(v *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) error {
	if v.NetworkIngressPolicyName == nil {
		return fmt.Errorf("invalid nil key received for NetworkIngressPolicyName")
	}

	key := *v.NetworkIngressPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkIngress == nil {
		t.NetworkIngress = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress)
	}

	if _, ok := t.NetworkIngress[key]; ok {
		return fmt.Errorf("duplicate key for list NetworkIngress %v", key)
	}

	t.NetworkIngress[key] = v
	return nil
}

// NewNetworkQueue creates a new entry in the NetworkQueue list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewNetworkQueue(NetworkQueuePolicy string) (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkQueue == nil {
		t.NetworkQueue = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue)
	}

	key := NetworkQueuePolicy

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkQueue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkQueue", key)
	}

	t.NetworkQueue[key] = &NokiaConf_Configure_Groups_Group_Qos_NetworkQueue{
		NetworkQueuePolicy: &NetworkQueuePolicy,
	}

	return t.NetworkQueue[key], nil
}

// RenameNetworkQueue renames an entry in the list NetworkQueue within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameNetworkQueue(oldK, newK string) error {
	if _, ok := t.NetworkQueue[newK]; ok {
		return fmt.Errorf("key %v already exists in NetworkQueue", newK)
	}

	e, ok := t.NetworkQueue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NetworkQueue", oldK)
	}
	e.NetworkQueuePolicy = &newK

	t.NetworkQueue[newK] = e
	delete(t.NetworkQueue, oldK)
	return nil
}

// GetOrCreateNetworkQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateNetworkQueue(NetworkQueuePolicy string) *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue {

	key := NetworkQueuePolicy

	if v, ok := t.NetworkQueue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetworkQueue(NetworkQueuePolicy)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetworkQueue got unexpected error: %v", err))
	}
	return v
}

// GetNetworkQueue retrieves the value with the specified key from
// the NetworkQueue map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetNetworkQueue(NetworkQueuePolicy string) *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue {

	if t == nil {
		return nil
	}

	key := NetworkQueuePolicy

	if lm, ok := t.NetworkQueue[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetworkQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteNetworkQueue(NetworkQueuePolicy string) {
	key := NetworkQueuePolicy

	delete(t.NetworkQueue, key)
}

// AppendNetworkQueue appends the supplied NokiaConf_Configure_Groups_Group_Qos_NetworkQueue struct to the
// list NetworkQueue of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_NetworkQueue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendNetworkQueue(v *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) error {
	if v.NetworkQueuePolicy == nil {
		return fmt.Errorf("invalid nil key received for NetworkQueuePolicy")
	}

	key := *v.NetworkQueuePolicy

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkQueue == nil {
		t.NetworkQueue = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue)
	}

	if _, ok := t.NetworkQueue[key]; ok {
		return fmt.Errorf("duplicate key for list NetworkQueue %v", key)
	}

	t.NetworkQueue[key] = v
	return nil
}

// NewPolicerControlPolicy creates a new entry in the PolicerControlPolicy list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewPolicerControlPolicy(PolicerControlPolicyName string) (*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicerControlPolicy == nil {
		t.PolicerControlPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy)
	}

	key := PolicerControlPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicerControlPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicerControlPolicy", key)
	}

	t.PolicerControlPolicy[key] = &NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy{
		PolicerControlPolicyName: &PolicerControlPolicyName,
	}

	return t.PolicerControlPolicy[key], nil
}

// RenamePolicerControlPolicy renames an entry in the list PolicerControlPolicy within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenamePolicerControlPolicy(oldK, newK string) error {
	if _, ok := t.PolicerControlPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicerControlPolicy", newK)
	}

	e, ok := t.PolicerControlPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicerControlPolicy", oldK)
	}
	e.PolicerControlPolicyName = &newK

	t.PolicerControlPolicy[newK] = e
	delete(t.PolicerControlPolicy, oldK)
	return nil
}

// GetOrCreatePolicerControlPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreatePolicerControlPolicy(PolicerControlPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy {

	key := PolicerControlPolicyName

	if v, ok := t.PolicerControlPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicerControlPolicy(PolicerControlPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicerControlPolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicerControlPolicy retrieves the value with the specified key from
// the PolicerControlPolicy map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetPolicerControlPolicy(PolicerControlPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy {

	if t == nil {
		return nil
	}

	key := PolicerControlPolicyName

	if lm, ok := t.PolicerControlPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicerControlPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeletePolicerControlPolicy(PolicerControlPolicyName string) {
	key := PolicerControlPolicyName

	delete(t.PolicerControlPolicy, key)
}

// AppendPolicerControlPolicy appends the supplied NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy struct to the
// list PolicerControlPolicy of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendPolicerControlPolicy(v *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy) error {
	if v.PolicerControlPolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicerControlPolicyName")
	}

	key := *v.PolicerControlPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicerControlPolicy == nil {
		t.PolicerControlPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy)
	}

	if _, ok := t.PolicerControlPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list PolicerControlPolicy %v", key)
	}

	t.PolicerControlPolicy[key] = v
	return nil
}

// NewPortQosPolicy creates a new entry in the PortQosPolicy list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewPortQosPolicy(PortQosPolicyName string) (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortQosPolicy == nil {
		t.PortQosPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy)
	}

	key := PortQosPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortQosPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortQosPolicy", key)
	}

	t.PortQosPolicy[key] = &NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy{
		PortQosPolicyName: &PortQosPolicyName,
	}

	return t.PortQosPolicy[key], nil
}

// RenamePortQosPolicy renames an entry in the list PortQosPolicy within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenamePortQosPolicy(oldK, newK string) error {
	if _, ok := t.PortQosPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in PortQosPolicy", newK)
	}

	e, ok := t.PortQosPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortQosPolicy", oldK)
	}
	e.PortQosPolicyName = &newK

	t.PortQosPolicy[newK] = e
	delete(t.PortQosPolicy, oldK)
	return nil
}

// GetOrCreatePortQosPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreatePortQosPolicy(PortQosPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy {

	key := PortQosPolicyName

	if v, ok := t.PortQosPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortQosPolicy(PortQosPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortQosPolicy got unexpected error: %v", err))
	}
	return v
}

// GetPortQosPolicy retrieves the value with the specified key from
// the PortQosPolicy map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetPortQosPolicy(PortQosPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy {

	if t == nil {
		return nil
	}

	key := PortQosPolicyName

	if lm, ok := t.PortQosPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeletePortQosPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeletePortQosPolicy(PortQosPolicyName string) {
	key := PortQosPolicyName

	delete(t.PortQosPolicy, key)
}

// AppendPortQosPolicy appends the supplied NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy struct to the
// list PortQosPolicy of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendPortQosPolicy(v *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) error {
	if v.PortQosPolicyName == nil {
		return fmt.Errorf("invalid nil key received for PortQosPolicyName")
	}

	key := *v.PortQosPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortQosPolicy == nil {
		t.PortQosPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy)
	}

	if _, ok := t.PortQosPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list PortQosPolicy %v", key)
	}

	t.PortQosPolicy[key] = v
	return nil
}

// NewPortSchedulerPolicy creates a new entry in the PortSchedulerPolicy list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewPortSchedulerPolicy(Name string) (*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortSchedulerPolicy == nil {
		t.PortSchedulerPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortSchedulerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortSchedulerPolicy", key)
	}

	t.PortSchedulerPolicy[key] = &NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy{
		Name: &Name,
	}

	return t.PortSchedulerPolicy[key], nil
}

// RenamePortSchedulerPolicy renames an entry in the list PortSchedulerPolicy within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenamePortSchedulerPolicy(oldK, newK string) error {
	if _, ok := t.PortSchedulerPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in PortSchedulerPolicy", newK)
	}

	e, ok := t.PortSchedulerPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortSchedulerPolicy", oldK)
	}
	e.Name = &newK

	t.PortSchedulerPolicy[newK] = e
	delete(t.PortSchedulerPolicy, oldK)
	return nil
}

// GetOrCreatePortSchedulerPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreatePortSchedulerPolicy(Name string) *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy {

	key := Name

	if v, ok := t.PortSchedulerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortSchedulerPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortSchedulerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetPortSchedulerPolicy retrieves the value with the specified key from
// the PortSchedulerPolicy map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetPortSchedulerPolicy(Name string) *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PortSchedulerPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeletePortSchedulerPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeletePortSchedulerPolicy(Name string) {
	key := Name

	delete(t.PortSchedulerPolicy, key)
}

// AppendPortSchedulerPolicy appends the supplied NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy struct to the
// list PortSchedulerPolicy of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendPortSchedulerPolicy(v *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortSchedulerPolicy == nil {
		t.PortSchedulerPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy)
	}

	if _, ok := t.PortSchedulerPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list PortSchedulerPolicy %v", key)
	}

	t.PortSchedulerPolicy[key] = v
	return nil
}

// NewPostPolicerMapping creates a new entry in the PostPolicerMapping list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewPostPolicerMapping(Name string) (*NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PostPolicerMapping == nil {
		t.PostPolicerMapping = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PostPolicerMapping[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PostPolicerMapping", key)
	}

	t.PostPolicerMapping[key] = &NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping{
		Name: &Name,
	}

	return t.PostPolicerMapping[key], nil
}

// RenamePostPolicerMapping renames an entry in the list PostPolicerMapping within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenamePostPolicerMapping(oldK, newK string) error {
	if _, ok := t.PostPolicerMapping[newK]; ok {
		return fmt.Errorf("key %v already exists in PostPolicerMapping", newK)
	}

	e, ok := t.PostPolicerMapping[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PostPolicerMapping", oldK)
	}
	e.Name = &newK

	t.PostPolicerMapping[newK] = e
	delete(t.PostPolicerMapping, oldK)
	return nil
}

// GetOrCreatePostPolicerMapping retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreatePostPolicerMapping(Name string) *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping {

	key := Name

	if v, ok := t.PostPolicerMapping[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPostPolicerMapping(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePostPolicerMapping got unexpected error: %v", err))
	}
	return v
}

// GetPostPolicerMapping retrieves the value with the specified key from
// the PostPolicerMapping map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetPostPolicerMapping(Name string) *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PostPolicerMapping[key]; ok {
		return lm
	}
	return nil
}

// DeletePostPolicerMapping deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeletePostPolicerMapping(Name string) {
	key := Name

	delete(t.PostPolicerMapping, key)
}

// AppendPostPolicerMapping appends the supplied NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping struct to the
// list PostPolicerMapping of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendPostPolicerMapping(v *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PostPolicerMapping == nil {
		t.PostPolicerMapping = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping)
	}

	if _, ok := t.PostPolicerMapping[key]; ok {
		return fmt.Errorf("duplicate key for list PostPolicerMapping %v", key)
	}

	t.PostPolicerMapping[key] = v
	return nil
}

// NewQueueGroupRedirectList creates a new entry in the QueueGroupRedirectList list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewQueueGroupRedirectList(Name string) (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroupRedirectList == nil {
		t.QueueGroupRedirectList = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueGroupRedirectList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueGroupRedirectList", key)
	}

	t.QueueGroupRedirectList[key] = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList{
		Name: &Name,
	}

	return t.QueueGroupRedirectList[key], nil
}

// RenameQueueGroupRedirectList renames an entry in the list QueueGroupRedirectList within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameQueueGroupRedirectList(oldK, newK string) error {
	if _, ok := t.QueueGroupRedirectList[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueGroupRedirectList", newK)
	}

	e, ok := t.QueueGroupRedirectList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueGroupRedirectList", oldK)
	}
	e.Name = &newK

	t.QueueGroupRedirectList[newK] = e
	delete(t.QueueGroupRedirectList, oldK)
	return nil
}

// GetOrCreateQueueGroupRedirectList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateQueueGroupRedirectList(Name string) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList {

	key := Name

	if v, ok := t.QueueGroupRedirectList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueGroupRedirectList(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueGroupRedirectList got unexpected error: %v", err))
	}
	return v
}

// GetQueueGroupRedirectList retrieves the value with the specified key from
// the QueueGroupRedirectList map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetQueueGroupRedirectList(Name string) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.QueueGroupRedirectList[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueGroupRedirectList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteQueueGroupRedirectList(Name string) {
	key := Name

	delete(t.QueueGroupRedirectList, key)
}

// AppendQueueGroupRedirectList appends the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList struct to the
// list QueueGroupRedirectList of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendQueueGroupRedirectList(v *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroupRedirectList == nil {
		t.QueueGroupRedirectList = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList)
	}

	if _, ok := t.QueueGroupRedirectList[key]; ok {
		return fmt.Errorf("duplicate key for list QueueGroupRedirectList %v", key)
	}

	t.QueueGroupRedirectList[key] = v
	return nil
}

// NewQueueMgmtPolicy creates a new entry in the QueueMgmtPolicy list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewQueueMgmtPolicy(QueueMgmtPolicyName string) (*NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueMgmtPolicy == nil {
		t.QueueMgmtPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy)
	}

	key := QueueMgmtPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueMgmtPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueMgmtPolicy", key)
	}

	t.QueueMgmtPolicy[key] = &NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy{
		QueueMgmtPolicyName: &QueueMgmtPolicyName,
	}

	return t.QueueMgmtPolicy[key], nil
}

// RenameQueueMgmtPolicy renames an entry in the list QueueMgmtPolicy within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameQueueMgmtPolicy(oldK, newK string) error {
	if _, ok := t.QueueMgmtPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueMgmtPolicy", newK)
	}

	e, ok := t.QueueMgmtPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueMgmtPolicy", oldK)
	}
	e.QueueMgmtPolicyName = &newK

	t.QueueMgmtPolicy[newK] = e
	delete(t.QueueMgmtPolicy, oldK)
	return nil
}

// GetOrCreateQueueMgmtPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateQueueMgmtPolicy(QueueMgmtPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy {

	key := QueueMgmtPolicyName

	if v, ok := t.QueueMgmtPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueMgmtPolicy(QueueMgmtPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueMgmtPolicy got unexpected error: %v", err))
	}
	return v
}

// GetQueueMgmtPolicy retrieves the value with the specified key from
// the QueueMgmtPolicy map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetQueueMgmtPolicy(QueueMgmtPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy {

	if t == nil {
		return nil
	}

	key := QueueMgmtPolicyName

	if lm, ok := t.QueueMgmtPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueMgmtPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteQueueMgmtPolicy(QueueMgmtPolicyName string) {
	key := QueueMgmtPolicyName

	delete(t.QueueMgmtPolicy, key)
}

// AppendQueueMgmtPolicy appends the supplied NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy struct to the
// list QueueMgmtPolicy of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendQueueMgmtPolicy(v *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) error {
	if v.QueueMgmtPolicyName == nil {
		return fmt.Errorf("invalid nil key received for QueueMgmtPolicyName")
	}

	key := *v.QueueMgmtPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueMgmtPolicy == nil {
		t.QueueMgmtPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy)
	}

	if _, ok := t.QueueMgmtPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list QueueMgmtPolicy %v", key)
	}

	t.QueueMgmtPolicy[key] = v
	return nil
}

// NewSapEgress creates a new entry in the SapEgress list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewSapEgress(SapEgressPolicyName string) (*NokiaConf_Configure_Groups_Group_Qos_SapEgress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SapEgress == nil {
		t.SapEgress = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_SapEgress)
	}

	key := SapEgressPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SapEgress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SapEgress", key)
	}

	t.SapEgress[key] = &NokiaConf_Configure_Groups_Group_Qos_SapEgress{
		SapEgressPolicyName: &SapEgressPolicyName,
	}

	return t.SapEgress[key], nil
}

// RenameSapEgress renames an entry in the list SapEgress within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameSapEgress(oldK, newK string) error {
	if _, ok := t.SapEgress[newK]; ok {
		return fmt.Errorf("key %v already exists in SapEgress", newK)
	}

	e, ok := t.SapEgress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SapEgress", oldK)
	}
	e.SapEgressPolicyName = &newK

	t.SapEgress[newK] = e
	delete(t.SapEgress, oldK)
	return nil
}

// GetOrCreateSapEgress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateSapEgress(SapEgressPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_SapEgress {

	key := SapEgressPolicyName

	if v, ok := t.SapEgress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSapEgress(SapEgressPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSapEgress got unexpected error: %v", err))
	}
	return v
}

// GetSapEgress retrieves the value with the specified key from
// the SapEgress map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetSapEgress(SapEgressPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_SapEgress {

	if t == nil {
		return nil
	}

	key := SapEgressPolicyName

	if lm, ok := t.SapEgress[key]; ok {
		return lm
	}
	return nil
}

// DeleteSapEgress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteSapEgress(SapEgressPolicyName string) {
	key := SapEgressPolicyName

	delete(t.SapEgress, key)
}

// AppendSapEgress appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress struct to the
// list SapEgress of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendSapEgress(v *NokiaConf_Configure_Groups_Group_Qos_SapEgress) error {
	if v.SapEgressPolicyName == nil {
		return fmt.Errorf("invalid nil key received for SapEgressPolicyName")
	}

	key := *v.SapEgressPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SapEgress == nil {
		t.SapEgress = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_SapEgress)
	}

	if _, ok := t.SapEgress[key]; ok {
		return fmt.Errorf("duplicate key for list SapEgress %v", key)
	}

	t.SapEgress[key] = v
	return nil
}

// NewSapIngress creates a new entry in the SapIngress list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewSapIngress(SapIngressPolicyName string) (*NokiaConf_Configure_Groups_Group_Qos_SapIngress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SapIngress == nil {
		t.SapIngress = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_SapIngress)
	}

	key := SapIngressPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SapIngress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SapIngress", key)
	}

	t.SapIngress[key] = &NokiaConf_Configure_Groups_Group_Qos_SapIngress{
		SapIngressPolicyName: &SapIngressPolicyName,
	}

	return t.SapIngress[key], nil
}

// RenameSapIngress renames an entry in the list SapIngress within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameSapIngress(oldK, newK string) error {
	if _, ok := t.SapIngress[newK]; ok {
		return fmt.Errorf("key %v already exists in SapIngress", newK)
	}

	e, ok := t.SapIngress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SapIngress", oldK)
	}
	e.SapIngressPolicyName = &newK

	t.SapIngress[newK] = e
	delete(t.SapIngress, oldK)
	return nil
}

// GetOrCreateSapIngress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateSapIngress(SapIngressPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_SapIngress {

	key := SapIngressPolicyName

	if v, ok := t.SapIngress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSapIngress(SapIngressPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSapIngress got unexpected error: %v", err))
	}
	return v
}

// GetSapIngress retrieves the value with the specified key from
// the SapIngress map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetSapIngress(SapIngressPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_SapIngress {

	if t == nil {
		return nil
	}

	key := SapIngressPolicyName

	if lm, ok := t.SapIngress[key]; ok {
		return lm
	}
	return nil
}

// DeleteSapIngress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteSapIngress(SapIngressPolicyName string) {
	key := SapIngressPolicyName

	delete(t.SapIngress, key)
}

// AppendSapIngress appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress struct to the
// list SapIngress of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendSapIngress(v *NokiaConf_Configure_Groups_Group_Qos_SapIngress) error {
	if v.SapIngressPolicyName == nil {
		return fmt.Errorf("invalid nil key received for SapIngressPolicyName")
	}

	key := *v.SapIngressPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SapIngress == nil {
		t.SapIngress = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_SapIngress)
	}

	if _, ok := t.SapIngress[key]; ok {
		return fmt.Errorf("duplicate key for list SapIngress %v", key)
	}

	t.SapIngress[key] = v
	return nil
}

// NewSchedulerPolicy creates a new entry in the SchedulerPolicy list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewSchedulerPolicy(SchedulerPolicyName string) (*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulerPolicy == nil {
		t.SchedulerPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy)
	}

	key := SchedulerPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SchedulerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SchedulerPolicy", key)
	}

	t.SchedulerPolicy[key] = &NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy{
		SchedulerPolicyName: &SchedulerPolicyName,
	}

	return t.SchedulerPolicy[key], nil
}

// RenameSchedulerPolicy renames an entry in the list SchedulerPolicy within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameSchedulerPolicy(oldK, newK string) error {
	if _, ok := t.SchedulerPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in SchedulerPolicy", newK)
	}

	e, ok := t.SchedulerPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SchedulerPolicy", oldK)
	}
	e.SchedulerPolicyName = &newK

	t.SchedulerPolicy[newK] = e
	delete(t.SchedulerPolicy, oldK)
	return nil
}

// GetOrCreateSchedulerPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateSchedulerPolicy(SchedulerPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy {

	key := SchedulerPolicyName

	if v, ok := t.SchedulerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSchedulerPolicy(SchedulerPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSchedulerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetSchedulerPolicy retrieves the value with the specified key from
// the SchedulerPolicy map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetSchedulerPolicy(SchedulerPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy {

	if t == nil {
		return nil
	}

	key := SchedulerPolicyName

	if lm, ok := t.SchedulerPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteSchedulerPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteSchedulerPolicy(SchedulerPolicyName string) {
	key := SchedulerPolicyName

	delete(t.SchedulerPolicy, key)
}

// AppendSchedulerPolicy appends the supplied NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy struct to the
// list SchedulerPolicy of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendSchedulerPolicy(v *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy) error {
	if v.SchedulerPolicyName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerPolicyName")
	}

	key := *v.SchedulerPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulerPolicy == nil {
		t.SchedulerPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy)
	}

	if _, ok := t.SchedulerPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list SchedulerPolicy %v", key)
	}

	t.SchedulerPolicy[key] = v
	return nil
}

// NewSharedQueue creates a new entry in the SharedQueue list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewSharedQueue(SharedQueuePolicyName string) (*NokiaConf_Configure_Groups_Group_Qos_SharedQueue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SharedQueue == nil {
		t.SharedQueue = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_SharedQueue)
	}

	key := SharedQueuePolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SharedQueue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SharedQueue", key)
	}

	t.SharedQueue[key] = &NokiaConf_Configure_Groups_Group_Qos_SharedQueue{
		SharedQueuePolicyName: &SharedQueuePolicyName,
	}

	return t.SharedQueue[key], nil
}

// RenameSharedQueue renames an entry in the list SharedQueue within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameSharedQueue(oldK, newK string) error {
	if _, ok := t.SharedQueue[newK]; ok {
		return fmt.Errorf("key %v already exists in SharedQueue", newK)
	}

	e, ok := t.SharedQueue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SharedQueue", oldK)
	}
	e.SharedQueuePolicyName = &newK

	t.SharedQueue[newK] = e
	delete(t.SharedQueue, oldK)
	return nil
}

// GetOrCreateSharedQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateSharedQueue(SharedQueuePolicyName string) *NokiaConf_Configure_Groups_Group_Qos_SharedQueue {

	key := SharedQueuePolicyName

	if v, ok := t.SharedQueue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSharedQueue(SharedQueuePolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSharedQueue got unexpected error: %v", err))
	}
	return v
}

// GetSharedQueue retrieves the value with the specified key from
// the SharedQueue map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetSharedQueue(SharedQueuePolicyName string) *NokiaConf_Configure_Groups_Group_Qos_SharedQueue {

	if t == nil {
		return nil
	}

	key := SharedQueuePolicyName

	if lm, ok := t.SharedQueue[key]; ok {
		return lm
	}
	return nil
}

// DeleteSharedQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteSharedQueue(SharedQueuePolicyName string) {
	key := SharedQueuePolicyName

	delete(t.SharedQueue, key)
}

// AppendSharedQueue appends the supplied NokiaConf_Configure_Groups_Group_Qos_SharedQueue struct to the
// list SharedQueue of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SharedQueue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendSharedQueue(v *NokiaConf_Configure_Groups_Group_Qos_SharedQueue) error {
	if v.SharedQueuePolicyName == nil {
		return fmt.Errorf("invalid nil key received for SharedQueuePolicyName")
	}

	key := *v.SharedQueuePolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SharedQueue == nil {
		t.SharedQueue = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_SharedQueue)
	}

	if _, ok := t.SharedQueue[key]; ok {
		return fmt.Errorf("duplicate key for list SharedQueue %v", key)
	}

	t.SharedQueue[key] = v
	return nil
}

// NewSlopePolicy creates a new entry in the SlopePolicy list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewSlopePolicy(SlopePolicyName string) (*NokiaConf_Configure_Groups_Group_Qos_SlopePolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SlopePolicy == nil {
		t.SlopePolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_SlopePolicy)
	}

	key := SlopePolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SlopePolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SlopePolicy", key)
	}

	t.SlopePolicy[key] = &NokiaConf_Configure_Groups_Group_Qos_SlopePolicy{
		SlopePolicyName: &SlopePolicyName,
	}

	return t.SlopePolicy[key], nil
}

// RenameSlopePolicy renames an entry in the list SlopePolicy within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameSlopePolicy(oldK, newK string) error {
	if _, ok := t.SlopePolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in SlopePolicy", newK)
	}

	e, ok := t.SlopePolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SlopePolicy", oldK)
	}
	e.SlopePolicyName = &newK

	t.SlopePolicy[newK] = e
	delete(t.SlopePolicy, oldK)
	return nil
}

// GetOrCreateSlopePolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateSlopePolicy(SlopePolicyName string) *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy {

	key := SlopePolicyName

	if v, ok := t.SlopePolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSlopePolicy(SlopePolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSlopePolicy got unexpected error: %v", err))
	}
	return v
}

// GetSlopePolicy retrieves the value with the specified key from
// the SlopePolicy map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetSlopePolicy(SlopePolicyName string) *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy {

	if t == nil {
		return nil
	}

	key := SlopePolicyName

	if lm, ok := t.SlopePolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteSlopePolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteSlopePolicy(SlopePolicyName string) {
	key := SlopePolicyName

	delete(t.SlopePolicy, key)
}

// AppendSlopePolicy appends the supplied NokiaConf_Configure_Groups_Group_Qos_SlopePolicy struct to the
// list SlopePolicy of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SlopePolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendSlopePolicy(v *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy) error {
	if v.SlopePolicyName == nil {
		return fmt.Errorf("invalid nil key received for SlopePolicyName")
	}

	key := *v.SlopePolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SlopePolicy == nil {
		t.SlopePolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_SlopePolicy)
	}

	if _, ok := t.SlopePolicy[key]; ok {
		return fmt.Errorf("duplicate key for list SlopePolicy %v", key)
	}

	t.SlopePolicy[key] = v
	return nil
}

// NewVlanQosPolicy creates a new entry in the VlanQosPolicy list of the
// NokiaConf_Configure_Groups_Group_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos) NewVlanQosPolicy(VlanQosPolicyName string) (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VlanQosPolicy == nil {
		t.VlanQosPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy)
	}

	key := VlanQosPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VlanQosPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VlanQosPolicy", key)
	}

	t.VlanQosPolicy[key] = &NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy{
		VlanQosPolicyName: &VlanQosPolicyName,
	}

	return t.VlanQosPolicy[key], nil
}

// RenameVlanQosPolicy renames an entry in the list VlanQosPolicy within
// the NokiaConf_Configure_Groups_Group_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos) RenameVlanQosPolicy(oldK, newK string) error {
	if _, ok := t.VlanQosPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in VlanQosPolicy", newK)
	}

	e, ok := t.VlanQosPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VlanQosPolicy", oldK)
	}
	e.VlanQosPolicyName = &newK

	t.VlanQosPolicy[newK] = e
	delete(t.VlanQosPolicy, oldK)
	return nil
}

// GetOrCreateVlanQosPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateVlanQosPolicy(VlanQosPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy {

	key := VlanQosPolicyName

	if v, ok := t.VlanQosPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVlanQosPolicy(VlanQosPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVlanQosPolicy got unexpected error: %v", err))
	}
	return v
}

// GetVlanQosPolicy retrieves the value with the specified key from
// the VlanQosPolicy map field of NokiaConf_Configure_Groups_Group_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetVlanQosPolicy(VlanQosPolicyName string) *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy {

	if t == nil {
		return nil
	}

	key := VlanQosPolicyName

	if lm, ok := t.VlanQosPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteVlanQosPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos) DeleteVlanQosPolicy(VlanQosPolicyName string) {
	key := VlanQosPolicyName

	delete(t.VlanQosPolicy, key)
}

// AppendVlanQosPolicy appends the supplied NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy struct to the
// list VlanQosPolicy of NokiaConf_Configure_Groups_Group_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos) AppendVlanQosPolicy(v *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) error {
	if v.VlanQosPolicyName == nil {
		return fmt.Errorf("invalid nil key received for VlanQosPolicyName")
	}

	key := *v.VlanQosPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VlanQosPolicy == nil {
		t.VlanQosPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy)
	}

	if _, ok := t.VlanQosPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list VlanQosPolicy %v", key)
	}

	t.VlanQosPolicy[key] = v
	return nil
}

// GetOrCreateMatchList retrieves the value of the MatchList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateMatchList() *NokiaConf_Configure_Groups_Group_Qos_MatchList {
	if t.MatchList != nil {
		return t.MatchList
	}
	t.MatchList = &NokiaConf_Configure_Groups_Group_Qos_MatchList{}
	return t.MatchList
}

// GetOrCreateMdAutoId retrieves the value of the MdAutoId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateMdAutoId() *NokiaConf_Configure_Groups_Group_Qos_MdAutoId {
	if t.MdAutoId != nil {
		return t.MdAutoId
	}
	t.MdAutoId = &NokiaConf_Configure_Groups_Group_Qos_MdAutoId{}
	return t.MdAutoId
}

// GetOrCreatePacketByteOffset retrieves the value of the PacketByteOffset field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreatePacketByteOffset() *NokiaConf_Configure_Groups_Group_Qos_PacketByteOffset {
	if t.PacketByteOffset != nil {
		return t.PacketByteOffset
	}
	t.PacketByteOffset = &NokiaConf_Configure_Groups_Group_Qos_PacketByteOffset{}
	return t.PacketByteOffset
}

// GetOrCreateQueueGroupTemplates retrieves the value of the QueueGroupTemplates field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetOrCreateQueueGroupTemplates() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates {
	if t.QueueGroupTemplates != nil {
		return t.QueueGroupTemplates
	}
	t.QueueGroupTemplates = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates{}
	return t.QueueGroupTemplates
}

// GetMatchList returns the value of the MatchList struct pointer
// from NokiaConf_Configure_Groups_Group_Qos. If the receiver or the field MatchList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetMatchList() *NokiaConf_Configure_Groups_Group_Qos_MatchList {
	if t != nil && t.MatchList != nil {
		return t.MatchList
	}
	return nil
}

// GetMdAutoId returns the value of the MdAutoId struct pointer
// from NokiaConf_Configure_Groups_Group_Qos. If the receiver or the field MdAutoId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetMdAutoId() *NokiaConf_Configure_Groups_Group_Qos_MdAutoId {
	if t != nil && t.MdAutoId != nil {
		return t.MdAutoId
	}
	return nil
}

// GetPacketByteOffset returns the value of the PacketByteOffset struct pointer
// from NokiaConf_Configure_Groups_Group_Qos. If the receiver or the field PacketByteOffset is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetPacketByteOffset() *NokiaConf_Configure_Groups_Group_Qos_PacketByteOffset {
	if t != nil && t.PacketByteOffset != nil {
		return t.PacketByteOffset
	}
	return nil
}

// GetQueueGroupTemplates returns the value of the QueueGroupTemplates struct pointer
// from NokiaConf_Configure_Groups_Group_Qos. If the receiver or the field QueueGroupTemplates is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos) GetQueueGroupTemplates() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates {
	if t != nil && t.QueueGroupTemplates != nil {
		return t.QueueGroupTemplates
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MatchList.PopulateDefaults()
	t.MdAutoId.PopulateDefaults()
	t.PacketByteOffset.PopulateDefaults()
	t.QueueGroupTemplates.PopulateDefaults()
	for _, e := range t.AdvConfigPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.AtmTdProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.Dot1PFcMap {
		e.PopulateDefaults()
	}
	for _, e := range t.DscpFcMap {
		e.PopulateDefaults()
	}
	for _, e := range t.EgressRemarkPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.FcDot1PMap {
		e.PopulateDefaults()
	}
	for _, e := range t.FcDscpMap {
		e.PopulateDefaults()
	}
	for _, e := range t.FcLspExpMap {
		e.PopulateDefaults()
	}
	for _, e := range t.FpResourcePolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.HsAttachmentPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.HsPoolPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.HsPortPoolPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.HsSchedulerPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.HsmdaPoolPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.HsmdaSchedulerPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.HsmdaSlopePolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.HsmdaWrrPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.HwAggShaperSchedulerPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.IngressClassificationPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.LspExpFcMap {
		e.PopulateDefaults()
	}
	for _, e := range t.McFrProfileEgress {
		e.PopulateDefaults()
	}
	for _, e := range t.McFrProfileIngress {
		e.PopulateDefaults()
	}
	for _, e := range t.MlpppProfileEgress {
		e.PopulateDefaults()
	}
	for _, e := range t.MlpppProfileIngress {
		e.PopulateDefaults()
	}
	for _, e := range t.Network {
		e.PopulateDefaults()
	}
	for _, e := range t.NetworkIngress {
		e.PopulateDefaults()
	}
	for _, e := range t.NetworkQueue {
		e.PopulateDefaults()
	}
	for _, e := range t.PolicerControlPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.PortQosPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.PortSchedulerPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.PostPolicerMapping {
		e.PopulateDefaults()
	}
	for _, e := range t.QueueGroupRedirectList {
		e.PopulateDefaults()
	}
	for _, e := range t.QueueMgmtPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.SapEgress {
		e.PopulateDefaults()
	}
	for _, e := range t.SapIngress {
		e.PopulateDefaults()
	}
	for _, e := range t.SchedulerPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.SharedQueue {
		e.PopulateDefaults()
	}
	for _, e := range t.SlopePolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.VlanQosPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos.
func (*NokiaConf_Configure_Groups_Group_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy represents the /nokia-conf/configure/groups/group/qos/adv-config-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy struct {
	AdvConfigPolicyName *string                                                            `path:"adv-config-policy-name" module:"nokia-conf"`
	ChildControl        *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl `path:"child-control" module:"nokia-conf"`
	Description         *string                                                            `path:"description" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy) IsYANGGoStruct() {}

// GetOrCreateChildControl retrieves the value of the ChildControl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy) GetOrCreateChildControl() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl {
	if t.ChildControl != nil {
		return t.ChildControl
	}
	t.ChildControl = &NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl{}
	return t.ChildControl
}

// GetChildControl returns the value of the ChildControl struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy. If the receiver or the field ChildControl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy) GetChildControl() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl {
	if t != nil && t.ChildControl != nil {
		return t.ChildControl
	}
	return nil
}

// GetAdvConfigPolicyName retrieves the value of the leaf AdvConfigPolicyName from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvConfigPolicyName is set, it can
// safely use t.GetAdvConfigPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvConfigPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy) GetAdvConfigPolicyName() string {
	if t == nil || t.AdvConfigPolicyName == nil {
		return ""
	}
	return *t.AdvConfigPolicyName
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ChildControl.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AdvConfigPolicyName == nil {
		return nil, fmt.Errorf("nil value for key AdvConfigPolicyName")
	}

	return map[string]interface{}{
		"adv-config-policy-name": *t.AdvConfigPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl represents the /nokia-conf/configure/groups/group/qos/adv-config-policy/child-control YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl struct {
	BandwidthDistribution *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution `path:"bandwidth-distribution" module:"nokia-conf"`
	OfferedMeasurement    *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement    `path:"offered-measurement" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl) IsYANGGoStruct() {}

// GetOrCreateBandwidthDistribution retrieves the value of the BandwidthDistribution field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl) GetOrCreateBandwidthDistribution() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution {
	if t.BandwidthDistribution != nil {
		return t.BandwidthDistribution
	}
	t.BandwidthDistribution = &NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution{}
	return t.BandwidthDistribution
}

// GetOrCreateOfferedMeasurement retrieves the value of the OfferedMeasurement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl) GetOrCreateOfferedMeasurement() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement {
	if t.OfferedMeasurement != nil {
		return t.OfferedMeasurement
	}
	t.OfferedMeasurement = &NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement{}
	return t.OfferedMeasurement
}

// GetBandwidthDistribution returns the value of the BandwidthDistribution struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl. If the receiver or the field BandwidthDistribution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl) GetBandwidthDistribution() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution {
	if t != nil && t.BandwidthDistribution != nil {
		return t.BandwidthDistribution
	}
	return nil
}

// GetOfferedMeasurement returns the value of the OfferedMeasurement struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl. If the receiver or the field OfferedMeasurement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl) GetOfferedMeasurement() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement {
	if t != nil && t.OfferedMeasurement != nil {
		return t.OfferedMeasurement
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BandwidthDistribution.PopulateDefaults()
	t.OfferedMeasurement.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution represents the /nokia-conf/configure/groups/group/qos/adv-config-policy/child-control/bandwidth-distribution YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution struct {
	AboveOfferedAllowance       *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance `path:"above-offered-allowance" module:"nokia-conf"`
	AboveOfferedCap             *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap       `path:"above-offered-cap" module:"nokia-conf"`
	EnqueueOnPirZero            *bool                                                                                                          `path:"enqueue-on-pir-zero" module:"nokia-conf"`
	Granularity                 *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity           `path:"granularity" module:"nokia-conf"`
	InternalSchedulerWeightMode E_NokiaTypesQos_InternalSchedulerWeightMode                                                                    `path:"internal-scheduler-weight-mode" module:"nokia-conf"`
	LimitPirZeroDrain           *bool                                                                                                          `path:"limit-pir-zero-drain" module:"nokia-conf"`
	LubInitMinPir               *bool                                                                                                          `path:"lub-init-min-pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) IsYANGGoStruct() {
}

// GetOrCreateAboveOfferedAllowance retrieves the value of the AboveOfferedAllowance field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) GetOrCreateAboveOfferedAllowance() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance {
	if t.AboveOfferedAllowance != nil {
		return t.AboveOfferedAllowance
	}
	t.AboveOfferedAllowance = &NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance{}
	return t.AboveOfferedAllowance
}

// GetOrCreateAboveOfferedCap retrieves the value of the AboveOfferedCap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) GetOrCreateAboveOfferedCap() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap {
	if t.AboveOfferedCap != nil {
		return t.AboveOfferedCap
	}
	t.AboveOfferedCap = &NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap{}
	return t.AboveOfferedCap
}

// GetOrCreateGranularity retrieves the value of the Granularity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) GetOrCreateGranularity() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity {
	if t.Granularity != nil {
		return t.Granularity
	}
	t.Granularity = &NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity{}
	return t.Granularity
}

// GetAboveOfferedAllowance returns the value of the AboveOfferedAllowance struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution. If the receiver or the field AboveOfferedAllowance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) GetAboveOfferedAllowance() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance {
	if t != nil && t.AboveOfferedAllowance != nil {
		return t.AboveOfferedAllowance
	}
	return nil
}

// GetAboveOfferedCap returns the value of the AboveOfferedCap struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution. If the receiver or the field AboveOfferedCap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) GetAboveOfferedCap() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap {
	if t != nil && t.AboveOfferedCap != nil {
		return t.AboveOfferedCap
	}
	return nil
}

// GetGranularity returns the value of the Granularity struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution. If the receiver or the field Granularity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) GetGranularity() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity {
	if t != nil && t.Granularity != nil {
		return t.Granularity
	}
	return nil
}

// GetEnqueueOnPirZero retrieves the value of the leaf EnqueueOnPirZero from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnqueueOnPirZero is set, it can
// safely use t.GetEnqueueOnPirZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnqueueOnPirZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) GetEnqueueOnPirZero() bool {
	if t == nil || t.EnqueueOnPirZero == nil {
		return false
	}
	return *t.EnqueueOnPirZero
}

// GetInternalSchedulerWeightMode retrieves the value of the leaf InternalSchedulerWeightMode from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalSchedulerWeightMode is set, it can
// safely use t.GetInternalSchedulerWeightMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalSchedulerWeightMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) GetInternalSchedulerWeightMode() E_NokiaTypesQos_InternalSchedulerWeightMode {
	if t == nil || t.InternalSchedulerWeightMode == 0 {
		return 0
	}
	return t.InternalSchedulerWeightMode
}

// GetLimitPirZeroDrain retrieves the value of the leaf LimitPirZeroDrain from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitPirZeroDrain is set, it can
// safely use t.GetLimitPirZeroDrain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitPirZeroDrain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) GetLimitPirZeroDrain() bool {
	if t == nil || t.LimitPirZeroDrain == nil {
		return false
	}
	return *t.LimitPirZeroDrain
}

// GetLubInitMinPir retrieves the value of the leaf LubInitMinPir from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LubInitMinPir is set, it can
// safely use t.GetLubInitMinPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LubInitMinPir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) GetLubInitMinPir() bool {
	if t == nil || t.LubInitMinPir == nil {
		return false
	}
	return *t.LubInitMinPir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EnqueueOnPirZero == nil {
		var v bool = false
		t.EnqueueOnPirZero = &v
	}
	if t.LimitPirZeroDrain == nil {
		var v bool = false
		t.LimitPirZeroDrain = &v
	}
	if t.LubInitMinPir == nil {
		var v bool = false
		t.LubInitMinPir = &v
	}
	t.AboveOfferedAllowance.PopulateDefaults()
	t.AboveOfferedCap.PopulateDefaults()
	t.Granularity.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance represents the /nokia-conf/configure/groups/group/qos/adv-config-policy/child-control/bandwidth-distribution/above-offered-allowance YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance struct {
	DeltaConsumedAggRate        *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate        `path:"delta-consumed-agg-rate" module:"nokia-conf"`
	DeltaConsumedHigherTierRate *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate `path:"delta-consumed-higher-tier-rate" module:"nokia-conf"`
	UnconsumedAggRate           *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate           `path:"unconsumed-agg-rate" module:"nokia-conf"`
	UnconsumedHigherTierRate    *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate    `path:"unconsumed-higher-tier-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) IsYANGGoStruct() {
}

// GetOrCreateDeltaConsumedAggRate retrieves the value of the DeltaConsumedAggRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) GetOrCreateDeltaConsumedAggRate() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate {
	if t.DeltaConsumedAggRate != nil {
		return t.DeltaConsumedAggRate
	}
	t.DeltaConsumedAggRate = &NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate{}
	return t.DeltaConsumedAggRate
}

// GetOrCreateDeltaConsumedHigherTierRate retrieves the value of the DeltaConsumedHigherTierRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) GetOrCreateDeltaConsumedHigherTierRate() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate {
	if t.DeltaConsumedHigherTierRate != nil {
		return t.DeltaConsumedHigherTierRate
	}
	t.DeltaConsumedHigherTierRate = &NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate{}
	return t.DeltaConsumedHigherTierRate
}

// GetOrCreateUnconsumedAggRate retrieves the value of the UnconsumedAggRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) GetOrCreateUnconsumedAggRate() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate {
	if t.UnconsumedAggRate != nil {
		return t.UnconsumedAggRate
	}
	t.UnconsumedAggRate = &NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate{}
	return t.UnconsumedAggRate
}

// GetOrCreateUnconsumedHigherTierRate retrieves the value of the UnconsumedHigherTierRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) GetOrCreateUnconsumedHigherTierRate() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate {
	if t.UnconsumedHigherTierRate != nil {
		return t.UnconsumedHigherTierRate
	}
	t.UnconsumedHigherTierRate = &NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate{}
	return t.UnconsumedHigherTierRate
}

// GetDeltaConsumedAggRate returns the value of the DeltaConsumedAggRate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance. If the receiver or the field DeltaConsumedAggRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) GetDeltaConsumedAggRate() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate {
	if t != nil && t.DeltaConsumedAggRate != nil {
		return t.DeltaConsumedAggRate
	}
	return nil
}

// GetDeltaConsumedHigherTierRate returns the value of the DeltaConsumedHigherTierRate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance. If the receiver or the field DeltaConsumedHigherTierRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) GetDeltaConsumedHigherTierRate() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate {
	if t != nil && t.DeltaConsumedHigherTierRate != nil {
		return t.DeltaConsumedHigherTierRate
	}
	return nil
}

// GetUnconsumedAggRate returns the value of the UnconsumedAggRate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance. If the receiver or the field UnconsumedAggRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) GetUnconsumedAggRate() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate {
	if t != nil && t.UnconsumedAggRate != nil {
		return t.UnconsumedAggRate
	}
	return nil
}

// GetUnconsumedHigherTierRate returns the value of the UnconsumedHigherTierRate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance. If the receiver or the field UnconsumedHigherTierRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) GetUnconsumedHigherTierRate() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate {
	if t != nil && t.UnconsumedHigherTierRate != nil {
		return t.UnconsumedHigherTierRate
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DeltaConsumedAggRate.PopulateDefaults()
	t.DeltaConsumedHigherTierRate.PopulateDefaults()
	t.UnconsumedAggRate.PopulateDefaults()
	t.UnconsumedHigherTierRate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate represents the /nokia-conf/configure/groups/group/qos/adv-config-policy/child-control/bandwidth-distribution/above-offered-allowance/delta-consumed-agg-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate struct {
	Percent *float64 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate) IsYANGGoStruct() {
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate) GetPercent() float64 {
	if t == nil || t.Percent == nil {
		return 20.00
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Percent == nil {
		var v float64 = 20.00
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate represents the /nokia-conf/configure/groups/group/qos/adv-config-policy/child-control/bandwidth-distribution/above-offered-allowance/delta-consumed-higher-tier-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate struct {
	Percent *float64 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate) IsYANGGoStruct() {
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate) GetPercent() float64 {
	if t == nil || t.Percent == nil {
		return 5.00
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Percent == nil {
		var v float64 = 5.00
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate represents the /nokia-conf/configure/groups/group/qos/adv-config-policy/child-control/bandwidth-distribution/above-offered-allowance/unconsumed-agg-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate struct {
	Percent *float64 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate) IsYANGGoStruct() {
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate) GetPercent() float64 {
	if t == nil || t.Percent == nil {
		return 100.00
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Percent == nil {
		var v float64 = 100.00
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate represents the /nokia-conf/configure/groups/group/qos/adv-config-policy/child-control/bandwidth-distribution/above-offered-allowance/unconsumed-higher-tier-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate struct {
	Percent *float64 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate) IsYANGGoStruct() {
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate) GetPercent() float64 {
	if t == nil || t.Percent == nil {
		return 100.00
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Percent == nil {
		var v float64 = 100.00
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap represents the /nokia-conf/configure/groups/group/qos/adv-config-policy/child-control/bandwidth-distribution/above-offered-cap YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap struct {
	Percent *float64                                                                                                           `path:"percent" module:"nokia-conf"`
	Rate    NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap) IsYANGGoStruct() {
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap) GetPercent() float64 {
	if t == nil || t.Percent == nil {
		return 0.0
	}
	return *t.Percent
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap) GetRate() NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity represents the /nokia-conf/configure/groups/group/qos/adv-config-policy/child-control/bandwidth-distribution/granularity YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity struct {
	Percent *float64 `path:"percent" module:"nokia-conf"`
	Rate    *int64   `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity) IsYANGGoStruct() {
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity) GetPercent() float64 {
	if t == nil || t.Percent == nil {
		return 0.0
	}
	return *t.Percent
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement represents the /nokia-conf/configure/groups/group/qos/adv-config-policy/child-control/offered-measurement YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement struct {
	Add               *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add               `path:"add" module:"nokia-conf"`
	FastStart         *bool                                                                                                   `path:"fast-start" module:"nokia-conf"`
	FastStop          *bool                                                                                                   `path:"fast-stop" module:"nokia-conf"`
	Granularity       *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity       `path:"granularity" module:"nokia-conf"`
	HoldTime          *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime          `path:"hold-time" module:"nokia-conf"`
	MaxDecrement      *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement      `path:"max-decrement" module:"nokia-conf"`
	SampleInterval    *uint32                                                                                                 `path:"sample-interval" module:"nokia-conf"`
	TimeAverageFactor *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor `path:"time-average-factor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) IsYANGGoStruct() {
}

// GetOrCreateAdd retrieves the value of the Add field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetOrCreateAdd() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add {
	if t.Add != nil {
		return t.Add
	}
	t.Add = &NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add{}
	return t.Add
}

// GetOrCreateGranularity retrieves the value of the Granularity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetOrCreateGranularity() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity {
	if t.Granularity != nil {
		return t.Granularity
	}
	t.Granularity = &NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity{}
	return t.Granularity
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetOrCreateHoldTime() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime{}
	return t.HoldTime
}

// GetOrCreateMaxDecrement retrieves the value of the MaxDecrement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetOrCreateMaxDecrement() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement {
	if t.MaxDecrement != nil {
		return t.MaxDecrement
	}
	t.MaxDecrement = &NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement{}
	return t.MaxDecrement
}

// GetOrCreateTimeAverageFactor retrieves the value of the TimeAverageFactor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetOrCreateTimeAverageFactor() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor {
	if t.TimeAverageFactor != nil {
		return t.TimeAverageFactor
	}
	t.TimeAverageFactor = &NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor{}
	return t.TimeAverageFactor
}

// GetAdd returns the value of the Add struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement. If the receiver or the field Add is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetAdd() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add {
	if t != nil && t.Add != nil {
		return t.Add
	}
	return nil
}

// GetGranularity returns the value of the Granularity struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement. If the receiver or the field Granularity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetGranularity() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity {
	if t != nil && t.Granularity != nil {
		return t.Granularity
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetHoldTime() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetMaxDecrement returns the value of the MaxDecrement struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement. If the receiver or the field MaxDecrement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetMaxDecrement() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement {
	if t != nil && t.MaxDecrement != nil {
		return t.MaxDecrement
	}
	return nil
}

// GetTimeAverageFactor returns the value of the TimeAverageFactor struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement. If the receiver or the field TimeAverageFactor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetTimeAverageFactor() *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor {
	if t != nil && t.TimeAverageFactor != nil {
		return t.TimeAverageFactor
	}
	return nil
}

// GetFastStart retrieves the value of the leaf FastStart from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastStart is set, it can
// safely use t.GetFastStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastStart == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetFastStart() bool {
	if t == nil || t.FastStart == nil {
		return false
	}
	return *t.FastStart
}

// GetFastStop retrieves the value of the leaf FastStop from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastStop is set, it can
// safely use t.GetFastStop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastStop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetFastStop() bool {
	if t == nil || t.FastStop == nil {
		return false
	}
	return *t.FastStop
}

// GetSampleInterval retrieves the value of the leaf SampleInterval from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleInterval is set, it can
// safely use t.GetSampleInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetSampleInterval() uint32 {
	if t == nil || t.SampleInterval == nil {
		return 1
	}
	return *t.SampleInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastStart == nil {
		var v bool = false
		t.FastStart = &v
	}
	if t.FastStop == nil {
		var v bool = false
		t.FastStop = &v
	}
	if t.SampleInterval == nil {
		var v uint32 = 1
		t.SampleInterval = &v
	}
	t.Add.PopulateDefaults()
	t.Granularity.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.MaxDecrement.PopulateDefaults()
	t.TimeAverageFactor.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add represents the /nokia-conf/configure/groups/group/qos/adv-config-policy/child-control/offered-measurement/add YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add struct {
	ActiveMinOnly *bool    `path:"active-min-only" module:"nokia-conf"`
	MinOnly       *bool    `path:"min-only" module:"nokia-conf"`
	Percent       *float64 `path:"percent" module:"nokia-conf"`
	Rate          *int64   `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add) IsYANGGoStruct() {
}

// GetActiveMinOnly retrieves the value of the leaf ActiveMinOnly from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveMinOnly is set, it can
// safely use t.GetActiveMinOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveMinOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add) GetActiveMinOnly() bool {
	if t == nil || t.ActiveMinOnly == nil {
		return false
	}
	return *t.ActiveMinOnly
}

// GetMinOnly retrieves the value of the leaf MinOnly from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinOnly is set, it can
// safely use t.GetMinOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add) GetMinOnly() bool {
	if t == nil || t.MinOnly == nil {
		return false
	}
	return *t.MinOnly
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add) GetPercent() float64 {
	if t == nil || t.Percent == nil {
		return 0.0
	}
	return *t.Percent
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ActiveMinOnly == nil {
		var v bool = false
		t.ActiveMinOnly = &v
	}
	if t.MinOnly == nil {
		var v bool = false
		t.MinOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity represents the /nokia-conf/configure/groups/group/qos/adv-config-policy/child-control/offered-measurement/granularity YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity struct {
	Percent *float64 `path:"percent" module:"nokia-conf"`
	Rate    *int64   `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity) IsYANGGoStruct() {
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity) GetPercent() float64 {
	if t == nil || t.Percent == nil {
		return 0.0
	}
	return *t.Percent
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime represents the /nokia-conf/configure/groups/group/qos/adv-config-policy/child-control/offered-measurement/hold-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime struct {
	ActiveMinOnly *bool   `path:"active-min-only" module:"nokia-conf"`
	HighRate      *uint32 `path:"high-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime) IsYANGGoStruct() {
}

// GetActiveMinOnly retrieves the value of the leaf ActiveMinOnly from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveMinOnly is set, it can
// safely use t.GetActiveMinOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveMinOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime) GetActiveMinOnly() bool {
	if t == nil || t.ActiveMinOnly == nil {
		return false
	}
	return *t.ActiveMinOnly
}

// GetHighRate retrieves the value of the leaf HighRate from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighRate is set, it can
// safely use t.GetHighRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime) GetHighRate() uint32 {
	if t == nil || t.HighRate == nil {
		return 0
	}
	return *t.HighRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ActiveMinOnly == nil {
		var v bool = false
		t.ActiveMinOnly = &v
	}
	if t.HighRate == nil {
		var v uint32 = 0
		t.HighRate = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement represents the /nokia-conf/configure/groups/group/qos/adv-config-policy/child-control/offered-measurement/max-decrement YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement struct {
	Percent *float64 `path:"percent" module:"nokia-conf"`
	Rate    *int64   `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement) IsYANGGoStruct() {
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement) GetPercent() float64 {
	if t == nil || t.Percent == nil {
		return 0.0
	}
	return *t.Percent
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor represents the /nokia-conf/configure/groups/group/qos/adv-config-policy/child-control/offered-measurement/time-average-factor YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor struct {
	DecOnly         *bool   `path:"dec-only" module:"nokia-conf"`
	WeightingFactor *uint32 `path:"weighting-factor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor) IsYANGGoStruct() {
}

// GetDecOnly retrieves the value of the leaf DecOnly from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DecOnly is set, it can
// safely use t.GetDecOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DecOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor) GetDecOnly() bool {
	if t == nil || t.DecOnly == nil {
		return false
	}
	return *t.DecOnly
}

// GetWeightingFactor retrieves the value of the leaf WeightingFactor from the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WeightingFactor is set, it can
// safely use t.GetWeightingFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WeightingFactor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor) GetWeightingFactor() uint32 {
	if t == nil || t.WeightingFactor == nil {
		return 0
	}
	return *t.WeightingFactor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DecOnly == nil {
		var v bool = false
		t.DecOnly = &v
	}
	if t.WeightingFactor == nil {
		var v uint32 = 0
		t.WeightingFactor = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor.
func (*NokiaConf_Configure_Groups_Group_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile represents the /nokia-conf/configure/groups/group/qos/atm-td-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile struct {
	AtmTdProfileId  NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_AtmTdProfileId_Union `path:"atm-td-profile-id" module:"nokia-conf"`
	ClpTagging      *bool                                                                  `path:"clp-tagging" module:"nokia-conf"`
	Description     *string                                                                `path:"description" module:"nokia-conf"`
	DescriptorType  E_NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_DescriptorType     `path:"descriptor-type" module:"nokia-conf"`
	Policing        *bool                                                                  `path:"policing" module:"nokia-conf"`
	ServiceCategory E_NokiaTypesQos_AtmServiceCategory                                     `path:"service-category" module:"nokia-conf"`
	Shaping         *bool                                                                  `path:"shaping" module:"nokia-conf"`
	Traffic         *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic             `path:"traffic" module:"nokia-conf"`
	Weight          *int32                                                                 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile) IsYANGGoStruct() {}

// GetOrCreateTraffic retrieves the value of the Traffic field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile) GetOrCreateTraffic() *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic {
	if t.Traffic != nil {
		return t.Traffic
	}
	t.Traffic = &NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic{}
	return t.Traffic
}

// GetTraffic returns the value of the Traffic struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile. If the receiver or the field Traffic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile) GetTraffic() *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic {
	if t != nil && t.Traffic != nil {
		return t.Traffic
	}
	return nil
}

// GetAtmTdProfileId retrieves the value of the leaf AtmTdProfileId from the NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AtmTdProfileId is set, it can
// safely use t.GetAtmTdProfileId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AtmTdProfileId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile) GetAtmTdProfileId() NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_AtmTdProfileId_Union {
	if t == nil || t.AtmTdProfileId == nil {
		return nil
	}
	return t.AtmTdProfileId
}

// GetClpTagging retrieves the value of the leaf ClpTagging from the NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClpTagging is set, it can
// safely use t.GetClpTagging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClpTagging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile) GetClpTagging() bool {
	if t == nil || t.ClpTagging == nil {
		return false
	}
	return *t.ClpTagging
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDescriptorType retrieves the value of the leaf DescriptorType from the NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DescriptorType is set, it can
// safely use t.GetDescriptorType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DescriptorType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile) GetDescriptorType() E_NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_DescriptorType {
	if t == nil || t.DescriptorType == 0 {
		return 0
	}
	return t.DescriptorType
}

// GetPolicing retrieves the value of the leaf Policing from the NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policing is set, it can
// safely use t.GetPolicing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile) GetPolicing() bool {
	if t == nil || t.Policing == nil {
		return false
	}
	return *t.Policing
}

// GetServiceCategory retrieves the value of the leaf ServiceCategory from the NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceCategory is set, it can
// safely use t.GetServiceCategory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceCategory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile) GetServiceCategory() E_NokiaTypesQos_AtmServiceCategory {
	if t == nil || t.ServiceCategory == 0 {
		return NokiaTypesQos_AtmServiceCategory_ubr
	}
	return t.ServiceCategory
}

// GetShaping retrieves the value of the leaf Shaping from the NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Shaping is set, it can
// safely use t.GetShaping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Shaping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile) GetShaping() bool {
	if t == nil || t.Shaping == nil {
		return false
	}
	return *t.Shaping
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClpTagging == nil {
		var v bool = false
		t.ClpTagging = &v
	}
	if t.Policing == nil {
		var v bool = false
		t.Policing = &v
	}
	if t.ServiceCategory == 0 {
		t.ServiceCategory = NokiaTypesQos_AtmServiceCategory_ubr
	}
	t.Traffic.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"atm-td-profile-id": t.AtmTdProfileId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile.
func (*NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic represents the /nokia-conf/configure/groups/group/qos/atm-td-profile/traffic YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic struct {
	Cdvt *uint32 `path:"cdvt" module:"nokia-conf"`
	Mbs  *uint32 `path:"mbs" module:"nokia-conf"`
	Mir  *uint32 `path:"mir" module:"nokia-conf"`
	Pir  *uint32 `path:"pir" module:"nokia-conf"`
	Sir  *uint32 `path:"sir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic) IsYANGGoStruct() {}

// GetCdvt retrieves the value of the leaf Cdvt from the NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cdvt is set, it can
// safely use t.GetCdvt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cdvt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic) GetCdvt() uint32 {
	if t == nil || t.Cdvt == nil {
		return 250
	}
	return *t.Cdvt
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic) GetMbs() uint32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetMir retrieves the value of the leaf Mir from the NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mir is set, it can
// safely use t.GetMir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic) GetMir() uint32 {
	if t == nil || t.Mir == nil {
		return 0
	}
	return *t.Mir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic) GetPir() uint32 {
	if t == nil || t.Pir == nil {
		return 0
	}
	return *t.Pir
}

// GetSir retrieves the value of the leaf Sir from the NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sir is set, it can
// safely use t.GetSir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic) GetSir() uint32 {
	if t == nil || t.Sir == nil {
		return 0
	}
	return *t.Sir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cdvt == nil {
		var v uint32 = 250
		t.Cdvt = &v
	}
	if t.Mir == nil {
		var v uint32 = 0
		t.Mir = &v
	}
	if t.Sir == nil {
		var v uint32 = 0
		t.Sir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic.
func (*NokiaConf_Configure_Groups_Group_Qos_AtmTdProfile_Traffic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap represents the /nokia-conf/configure/groups/group/qos/dot1p-fc-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap struct {
	DefaultAction  *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_DefaultAction                                                                    `path:"default-action" module:"nokia-conf"`
	Dot1P          map[NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P_Dot1PValue_Union]*NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P `path:"dot1p" module:"nokia-conf"`
	Dot1PFcMapName *string                                                                                                                           `path:"dot1p-fc-map-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap) IsYANGGoStruct() {}

// NewDot1P creates a new entry in the Dot1P list of the
// NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap) NewDot1P(Dot1PValue NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P_Dot1PValue_Union) (*NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P_Dot1PValue_Union]*NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P)
	}

	key := Dot1PValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dot1P[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dot1P", key)
	}

	t.Dot1P[key] = &NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P{
		Dot1PValue: Dot1PValue,
	}

	return t.Dot1P[key], nil
}

// RenameDot1P renames an entry in the list Dot1P within
// the NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap) RenameDot1P(oldK, newK NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P_Dot1PValue_Union) error {
	if _, ok := t.Dot1P[newK]; ok {
		return fmt.Errorf("key %v already exists in Dot1P", newK)
	}

	e, ok := t.Dot1P[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dot1P", oldK)
	}
	e.Dot1PValue = newK

	t.Dot1P[newK] = e
	delete(t.Dot1P, oldK)
	return nil
}

// GetOrCreateDot1P retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap) GetOrCreateDot1P(Dot1PValue NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P_Dot1PValue_Union) *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P {

	key := Dot1PValue

	if v, ok := t.Dot1P[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDot1P(Dot1PValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDot1P got unexpected error: %v", err))
	}
	return v
}

// GetDot1P retrieves the value with the specified key from
// the Dot1P map field of NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap) GetDot1P(Dot1PValue NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P_Dot1PValue_Union) *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P {

	if t == nil {
		return nil
	}

	key := Dot1PValue

	if lm, ok := t.Dot1P[key]; ok {
		return lm
	}
	return nil
}

// DeleteDot1P deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap) DeleteDot1P(Dot1PValue NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P_Dot1PValue_Union) {
	key := Dot1PValue

	delete(t.Dot1P, key)
}

// AppendDot1P appends the supplied NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P struct to the
// list Dot1P of NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap) AppendDot1P(v *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P) error {
	key := v.Dot1PValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P_Dot1PValue_Union]*NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P)
	}

	if _, ok := t.Dot1P[key]; ok {
		return fmt.Errorf("duplicate key for list Dot1P %v", key)
	}

	t.Dot1P[key] = v
	return nil
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap) GetOrCreateDefaultAction() *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_DefaultAction{}
	return t.DefaultAction
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap) GetDefaultAction() *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetDot1PFcMapName retrieves the value of the leaf Dot1PFcMapName from the NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PFcMapName is set, it can
// safely use t.GetDot1PFcMapName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PFcMapName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap) GetDot1PFcMapName() string {
	if t == nil || t.Dot1PFcMapName == nil {
		return ""
	}
	return *t.Dot1PFcMapName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefaultAction.PopulateDefaults()
	for _, e := range t.Dot1P {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Dot1PFcMapName == nil {
		return nil, fmt.Errorf("nil value for key Dot1PFcMapName")
	}

	return map[string]interface{}{
		"dot1p-fc-map-name": *t.Dot1PFcMapName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap.
func (*NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_DefaultAction represents the /nokia-conf/configure/groups/group/qos/dot1p-fc-map/default-action YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_DefaultAction struct {
	Fc      E_NokiaTypesSros_FcName   `path:"fc" module:"nokia-conf"`
	Profile E_NokiaTypesQos_ProfileDe `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_DefaultAction) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_DefaultAction) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return NokiaTypesSros_FcName_be
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_DefaultAction) GetProfile() E_NokiaTypesQos_ProfileDe {
	if t == nil || t.Profile == 0 {
		return NokiaTypesQos_ProfileDe_out
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Fc == 0 {
		t.Fc = NokiaTypesSros_FcName_be
	}
	if t.Profile == 0 {
		t.Profile = NokiaTypesQos_ProfileDe_out
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_DefaultAction.
func (*NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P represents the /nokia-conf/configure/groups/group/qos/dot1p-fc-map/dot1p YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P struct {
	Dot1PValue NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P_Dot1PValue_Union `path:"dot1p-value" module:"nokia-conf"`
	Fc         E_NokiaTypesSros_FcName                                                `path:"fc" module:"nokia-conf"`
	Profile    E_NokiaTypesQos_ProfileDe                                              `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P) IsYANGGoStruct() {}

// GetDot1PValue retrieves the value of the leaf Dot1PValue from the NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PValue is set, it can
// safely use t.GetDot1PValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P) GetDot1PValue() NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P_Dot1PValue_Union {
	if t == nil || t.Dot1PValue == nil {
		return nil
	}
	return t.Dot1PValue
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P) GetProfile() E_NokiaTypesQos_ProfileDe {
	if t == nil || t.Profile == 0 {
		return NokiaTypesQos_ProfileDe_in
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Profile == 0 {
		t.Profile = NokiaTypesQos_ProfileDe_in
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dot1p-value": t.Dot1PValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P.
func (*NokiaConf_Configure_Groups_Group_Qos_Dot1PFcMap_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_DscpFcMap represents the /nokia-conf/configure/groups/group/qos/dscp-fc-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_DscpFcMap struct {
	DefaultAction *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_DefaultAction                                                               `path:"default-action" module:"nokia-conf"`
	Dscp          map[NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp_DscpName_Union]*NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp `path:"dscp" module:"nokia-conf"`
	DscpFcMapName *string                                                                                                                     `path:"dscp-fc-map-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_DscpFcMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_DscpFcMap) IsYANGGoStruct() {}

// NewDscp creates a new entry in the Dscp list of the
// NokiaConf_Configure_Groups_Group_Qos_DscpFcMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap) NewDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp_DscpName_Union) (*NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp_DscpName_Union]*NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp)
	}

	key := DscpName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dscp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dscp", key)
	}

	t.Dscp[key] = &NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp{
		DscpName: DscpName,
	}

	return t.Dscp[key], nil
}

// RenameDscp renames an entry in the list Dscp within
// the NokiaConf_Configure_Groups_Group_Qos_DscpFcMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap) RenameDscp(oldK, newK NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp_DscpName_Union) error {
	if _, ok := t.Dscp[newK]; ok {
		return fmt.Errorf("key %v already exists in Dscp", newK)
	}

	e, ok := t.Dscp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dscp", oldK)
	}
	e.DscpName = newK

	t.Dscp[newK] = e
	delete(t.Dscp, oldK)
	return nil
}

// GetOrCreateDscp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_DscpFcMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap) GetOrCreateDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp_DscpName_Union) *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp {

	key := DscpName

	if v, ok := t.Dscp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscp(DscpName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscp got unexpected error: %v", err))
	}
	return v
}

// GetDscp retrieves the value with the specified key from
// the Dscp map field of NokiaConf_Configure_Groups_Group_Qos_DscpFcMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap) GetDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp_DscpName_Union) *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp {

	if t == nil {
		return nil
	}

	key := DscpName

	if lm, ok := t.Dscp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_DscpFcMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap) DeleteDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp_DscpName_Union) {
	key := DscpName

	delete(t.Dscp, key)
}

// AppendDscp appends the supplied NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp struct to the
// list Dscp of NokiaConf_Configure_Groups_Group_Qos_DscpFcMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap) AppendDscp(v *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp) error {
	key := v.DscpName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp_DscpName_Union]*NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp)
	}

	if _, ok := t.Dscp[key]; ok {
		return fmt.Errorf("duplicate key for list Dscp %v", key)
	}

	t.Dscp[key] = v
	return nil
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap) GetOrCreateDefaultAction() *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_DefaultAction{}
	return t.DefaultAction
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_DscpFcMap. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap) GetDefaultAction() *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetDscpFcMapName retrieves the value of the leaf DscpFcMapName from the NokiaConf_Configure_Groups_Group_Qos_DscpFcMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpFcMapName is set, it can
// safely use t.GetDscpFcMapName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpFcMapName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap) GetDscpFcMapName() string {
	if t == nil || t.DscpFcMapName == nil {
		return ""
	}
	return *t.DscpFcMapName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_DscpFcMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefaultAction.PopulateDefaults()
	for _, e := range t.Dscp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_DscpFcMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DscpFcMapName == nil {
		return nil, fmt.Errorf("nil value for key DscpFcMapName")
	}

	return map[string]interface{}{
		"dscp-fc-map-name": *t.DscpFcMapName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_DscpFcMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_DscpFcMap.
func (*NokiaConf_Configure_Groups_Group_Qos_DscpFcMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_DefaultAction represents the /nokia-conf/configure/groups/group/qos/dscp-fc-map/default-action YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_DefaultAction struct {
	Fc      E_NokiaTypesSros_FcName `path:"fc" module:"nokia-conf"`
	Profile E_NokiaTypesQos_Profile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_DefaultAction) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_DefaultAction) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return NokiaTypesSros_FcName_be
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_DefaultAction) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return NokiaTypesQos_Profile_out
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Fc == 0 {
		t.Fc = NokiaTypesSros_FcName_be
	}
	if t.Profile == 0 {
		t.Profile = NokiaTypesQos_Profile_out
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_DefaultAction.
func (*NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp represents the /nokia-conf/configure/groups/group/qos/dscp-fc-map/dscp YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp struct {
	DscpName NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp_DscpName_Union `path:"dscp-name" module:"nokia-conf"`
	Fc       E_NokiaTypesSros_FcName                                            `path:"fc" module:"nokia-conf"`
	Profile  E_NokiaTypesQos_Profile                                            `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp) IsYANGGoStruct() {}

// GetDscpName retrieves the value of the leaf DscpName from the NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpName is set, it can
// safely use t.GetDscpName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp) GetDscpName() NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp_DscpName_Union {
	if t == nil || t.DscpName == nil {
		return nil
	}
	return t.DscpName
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return NokiaTypesQos_Profile_in
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Profile == 0 {
		t.Profile = NokiaTypesQos_Profile_in
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dscp-name": t.DscpName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp.
func (*NokiaConf_Configure_Groups_Group_Qos_DscpFcMap_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy represents the /nokia-conf/configure/groups/group/qos/egress-remark-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy struct {
	Description            *string                                                                                                                                 `path:"description" module:"nokia-conf"`
	EgressRemarkPolicyName *string                                                                                                                                 `path:"egress-remark-policy-name" module:"nokia-conf"`
	Fc                     map[NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc `path:"fc" module:"nokia-conf"`
	FcDot1PMap             *string                                                                                                                                 `path:"fc-dot1p-map" module:"nokia-conf"`
	FcDscpMap              *string                                                                                                                                 `path:"fc-dscp-map" module:"nokia-conf"`
	FcLspExpMap            *string                                                                                                                                 `path:"fc-lsp-exp-map" module:"nokia-conf"`
	Scope                  E_NokiaTypesQos_ItemScope                                                                                                               `path:"scope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy) NewFc(FcName NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_FcName_Union) (*NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy) RenameFc(oldK, newK NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_FcName_Union) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy) GetOrCreateFc(FcName NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy) GetFc(FcName NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy) DeleteFc(FcName NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_FcName_Union) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy) AppendFc(v *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEgressRemarkPolicyName retrieves the value of the leaf EgressRemarkPolicyName from the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressRemarkPolicyName is set, it can
// safely use t.GetEgressRemarkPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressRemarkPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy) GetEgressRemarkPolicyName() string {
	if t == nil || t.EgressRemarkPolicyName == nil {
		return ""
	}
	return *t.EgressRemarkPolicyName
}

// GetFcDot1PMap retrieves the value of the leaf FcDot1PMap from the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcDot1PMap is set, it can
// safely use t.GetFcDot1PMap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcDot1PMap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy) GetFcDot1PMap() string {
	if t == nil || t.FcDot1PMap == nil {
		return ""
	}
	return *t.FcDot1PMap
}

// GetFcDscpMap retrieves the value of the leaf FcDscpMap from the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcDscpMap is set, it can
// safely use t.GetFcDscpMap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcDscpMap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy) GetFcDscpMap() string {
	if t == nil || t.FcDscpMap == nil {
		return ""
	}
	return *t.FcDscpMap
}

// GetFcLspExpMap retrieves the value of the leaf FcLspExpMap from the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcLspExpMap is set, it can
// safely use t.GetFcLspExpMap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcLspExpMap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy) GetFcLspExpMap() string {
	if t == nil || t.FcLspExpMap == nil {
		return ""
	}
	return *t.FcLspExpMap
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy) GetScope() E_NokiaTypesQos_ItemScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesQos_ItemScope_template
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Scope == 0 {
		t.Scope = NokiaTypesQos_ItemScope_template
	}
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EgressRemarkPolicyName == nil {
		return nil, fmt.Errorf("nil value for key EgressRemarkPolicyName")
	}

	return map[string]interface{}{
		"egress-remark-policy-name": *t.EgressRemarkPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy.
func (*NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc represents the /nokia-conf/configure/groups/group/qos/egress-remark-policy/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc struct {
	DeMark *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_DeMark      `path:"de-mark" module:"nokia-conf" yangPresence:"true"`
	Dot1P  *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P       `path:"dot1p" module:"nokia-conf"`
	Dscp   *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp        `path:"dscp" module:"nokia-conf"`
	FcName NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_FcName_Union `path:"fc-name" module:"nokia-conf"`
	LspExp *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp      `path:"lsp-exp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc) IsYANGGoStruct() {}

// GetOrCreateDeMark retrieves the value of the DeMark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc) GetOrCreateDeMark() *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_DeMark {
	if t.DeMark != nil {
		return t.DeMark
	}
	t.DeMark = &NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_DeMark{}
	return t.DeMark
}

// GetOrCreateDot1P retrieves the value of the Dot1P field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc) GetOrCreateDot1P() *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P {
	if t.Dot1P != nil {
		return t.Dot1P
	}
	t.Dot1P = &NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P{}
	return t.Dot1P
}

// GetOrCreateDscp retrieves the value of the Dscp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc) GetOrCreateDscp() *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp {
	if t.Dscp != nil {
		return t.Dscp
	}
	t.Dscp = &NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp{}
	return t.Dscp
}

// GetOrCreateLspExp retrieves the value of the LspExp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc) GetOrCreateLspExp() *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp {
	if t.LspExp != nil {
		return t.LspExp
	}
	t.LspExp = &NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp{}
	return t.LspExp
}

// GetDeMark returns the value of the DeMark struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc. If the receiver or the field DeMark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc) GetDeMark() *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_DeMark {
	if t != nil && t.DeMark != nil {
		return t.DeMark
	}
	return nil
}

// GetDot1P returns the value of the Dot1P struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc. If the receiver or the field Dot1P is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc) GetDot1P() *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P {
	if t != nil && t.Dot1P != nil {
		return t.Dot1P
	}
	return nil
}

// GetDscp returns the value of the Dscp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc. If the receiver or the field Dscp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc) GetDscp() *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp {
	if t != nil && t.Dscp != nil {
		return t.Dscp
	}
	return nil
}

// GetLspExp returns the value of the LspExp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc. If the receiver or the field LspExp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc) GetLspExp() *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp {
	if t != nil && t.LspExp != nil {
		return t.LspExp
	}
	return nil
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc) GetFcName() NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_FcName_Union {
	if t == nil || t.FcName == nil {
		return nil
	}
	return t.FcName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DeMark.PopulateDefaults()
	t.Dot1P.PopulateDefaults()
	t.Dscp.PopulateDefaults()
	t.LspExp.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc.
func (*NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_DeMark represents the /nokia-conf/configure/groups/group/qos/egress-remark-policy/fc/de-mark YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_DeMark struct {
	Force *int32 `path:"force" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_DeMark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_DeMark) IsYANGGoStruct() {}

// GetForce retrieves the value of the leaf Force from the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_DeMark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Force is set, it can
// safely use t.GetForce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Force == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_DeMark) GetForce() int32 {
	if t == nil || t.Force == nil {
		return 0
	}
	return *t.Force
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_DeMark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_DeMark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_DeMark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_DeMark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_DeMark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_DeMark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_DeMark.
func (*NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_DeMark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P represents the /nokia-conf/configure/groups/group/qos/egress-remark-policy/fc/dot1p YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P struct {
	Exceed     *int32 `path:"exceed" module:"nokia-conf"`
	InProfile  *int32 `path:"in-profile" module:"nokia-conf"`
	Inplus     *int32 `path:"inplus" module:"nokia-conf"`
	OutProfile *int32 `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P) IsYANGGoStruct() {}

// GetExceed retrieves the value of the leaf Exceed from the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exceed is set, it can
// safely use t.GetExceed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exceed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P) GetExceed() int32 {
	if t == nil || t.Exceed == nil {
		return 0
	}
	return *t.Exceed
}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P) GetInProfile() int32 {
	if t == nil || t.InProfile == nil {
		return 0
	}
	return *t.InProfile
}

// GetInplus retrieves the value of the leaf Inplus from the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Inplus is set, it can
// safely use t.GetInplus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Inplus == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P) GetInplus() int32 {
	if t == nil || t.Inplus == nil {
		return 0
	}
	return *t.Inplus
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P) GetOutProfile() int32 {
	if t == nil || t.OutProfile == nil {
		return 0
	}
	return *t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P.
func (*NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp represents the /nokia-conf/configure/groups/group/qos/egress-remark-policy/fc/dscp YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp struct {
	Exceed     E_NokiaTypesQos_DscpName `path:"exceed" module:"nokia-conf"`
	InProfile  E_NokiaTypesQos_DscpName `path:"in-profile" module:"nokia-conf"`
	Inplus     E_NokiaTypesQos_DscpName `path:"inplus" module:"nokia-conf"`
	OutProfile E_NokiaTypesQos_DscpName `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp) IsYANGGoStruct() {}

// GetExceed retrieves the value of the leaf Exceed from the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exceed is set, it can
// safely use t.GetExceed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exceed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp) GetExceed() E_NokiaTypesQos_DscpName {
	if t == nil || t.Exceed == 0 {
		return 0
	}
	return t.Exceed
}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp) GetInProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.InProfile == 0 {
		return 0
	}
	return t.InProfile
}

// GetInplus retrieves the value of the leaf Inplus from the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Inplus is set, it can
// safely use t.GetInplus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Inplus == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp) GetInplus() E_NokiaTypesQos_DscpName {
	if t == nil || t.Inplus == 0 {
		return 0
	}
	return t.Inplus
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp) GetOutProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.OutProfile == 0 {
		return 0
	}
	return t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp.
func (*NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp represents the /nokia-conf/configure/groups/group/qos/egress-remark-policy/fc/lsp-exp YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp struct {
	Exceed     *int32 `path:"exceed" module:"nokia-conf"`
	InProfile  *int32 `path:"in-profile" module:"nokia-conf"`
	Inplus     *int32 `path:"inplus" module:"nokia-conf"`
	OutProfile *int32 `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp) IsYANGGoStruct() {}

// GetExceed retrieves the value of the leaf Exceed from the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exceed is set, it can
// safely use t.GetExceed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exceed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp) GetExceed() int32 {
	if t == nil || t.Exceed == nil {
		return 0
	}
	return *t.Exceed
}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp) GetInProfile() int32 {
	if t == nil || t.InProfile == nil {
		return 0
	}
	return *t.InProfile
}

// GetInplus retrieves the value of the leaf Inplus from the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Inplus is set, it can
// safely use t.GetInplus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Inplus == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp) GetInplus() int32 {
	if t == nil || t.Inplus == nil {
		return 0
	}
	return *t.Inplus
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp) GetOutProfile() int32 {
	if t == nil || t.OutProfile == nil {
		return 0
	}
	return *t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp.
func (*NokiaConf_Configure_Groups_Group_Qos_EgressRemarkPolicy_Fc_LspExp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap represents the /nokia-conf/configure/groups/group/qos/fc-dot1p-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap struct {
	Fc             map[NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc `path:"fc" module:"nokia-conf"`
	FcDot1PMapName *string                                                                                                                 `path:"fc-dot1p-map-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap) NewFc(FcName NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_FcName_Union) (*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap) RenameFc(oldK, newK NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_FcName_Union) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap) GetOrCreateFc(FcName NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap) GetFc(FcName NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap) DeleteFc(FcName NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_FcName_Union) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap) AppendFc(v *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// GetFcDot1PMapName retrieves the value of the leaf FcDot1PMapName from the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcDot1PMapName is set, it can
// safely use t.GetFcDot1PMapName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcDot1PMapName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap) GetFcDot1PMapName() string {
	if t == nil || t.FcDot1PMapName == nil {
		return ""
	}
	return *t.FcDot1PMapName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FcDot1PMapName == nil {
		return nil, fmt.Errorf("nil value for key FcDot1PMapName")
	}

	return map[string]interface{}{
		"fc-dot1p-map-name": *t.FcDot1PMapName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc represents the /nokia-conf/configure/groups/group/qos/fc-dot1p-map/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc struct {
	DeMark      *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMark      `path:"de-mark" module:"nokia-conf" yangPresence:"true"`
	DeMarkInner *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkInner `path:"de-mark-inner" module:"nokia-conf" yangPresence:"true"`
	DeMarkOuter *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkOuter `path:"de-mark-outer" module:"nokia-conf" yangPresence:"true"`
	Dot1P       *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1P       `path:"dot1p" module:"nokia-conf"`
	Dot1PInner  *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1PInner  `path:"dot1p-inner" module:"nokia-conf"`
	Dot1POuter  *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1POuter  `path:"dot1p-outer" module:"nokia-conf"`
	FcName      NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_FcName_Union `path:"fc-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) IsYANGGoStruct() {}

// GetOrCreateDeMark retrieves the value of the DeMark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) GetOrCreateDeMark() *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMark {
	if t.DeMark != nil {
		return t.DeMark
	}
	t.DeMark = &NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMark{}
	return t.DeMark
}

// GetOrCreateDeMarkInner retrieves the value of the DeMarkInner field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) GetOrCreateDeMarkInner() *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkInner {
	if t.DeMarkInner != nil {
		return t.DeMarkInner
	}
	t.DeMarkInner = &NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkInner{}
	return t.DeMarkInner
}

// GetOrCreateDeMarkOuter retrieves the value of the DeMarkOuter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) GetOrCreateDeMarkOuter() *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkOuter {
	if t.DeMarkOuter != nil {
		return t.DeMarkOuter
	}
	t.DeMarkOuter = &NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkOuter{}
	return t.DeMarkOuter
}

// GetOrCreateDot1P retrieves the value of the Dot1P field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) GetOrCreateDot1P() *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1P {
	if t.Dot1P != nil {
		return t.Dot1P
	}
	t.Dot1P = &NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1P{}
	return t.Dot1P
}

// GetOrCreateDot1PInner retrieves the value of the Dot1PInner field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) GetOrCreateDot1PInner() *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1PInner {
	if t.Dot1PInner != nil {
		return t.Dot1PInner
	}
	t.Dot1PInner = &NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1PInner{}
	return t.Dot1PInner
}

// GetOrCreateDot1POuter retrieves the value of the Dot1POuter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) GetOrCreateDot1POuter() *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1POuter {
	if t.Dot1POuter != nil {
		return t.Dot1POuter
	}
	t.Dot1POuter = &NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1POuter{}
	return t.Dot1POuter
}

// GetDeMark returns the value of the DeMark struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc. If the receiver or the field DeMark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) GetDeMark() *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMark {
	if t != nil && t.DeMark != nil {
		return t.DeMark
	}
	return nil
}

// GetDeMarkInner returns the value of the DeMarkInner struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc. If the receiver or the field DeMarkInner is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) GetDeMarkInner() *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkInner {
	if t != nil && t.DeMarkInner != nil {
		return t.DeMarkInner
	}
	return nil
}

// GetDeMarkOuter returns the value of the DeMarkOuter struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc. If the receiver or the field DeMarkOuter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) GetDeMarkOuter() *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkOuter {
	if t != nil && t.DeMarkOuter != nil {
		return t.DeMarkOuter
	}
	return nil
}

// GetDot1P returns the value of the Dot1P struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc. If the receiver or the field Dot1P is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) GetDot1P() *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1P {
	if t != nil && t.Dot1P != nil {
		return t.Dot1P
	}
	return nil
}

// GetDot1PInner returns the value of the Dot1PInner struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc. If the receiver or the field Dot1PInner is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) GetDot1PInner() *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1PInner {
	if t != nil && t.Dot1PInner != nil {
		return t.Dot1PInner
	}
	return nil
}

// GetDot1POuter returns the value of the Dot1POuter struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc. If the receiver or the field Dot1POuter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) GetDot1POuter() *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1POuter {
	if t != nil && t.Dot1POuter != nil {
		return t.Dot1POuter
	}
	return nil
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) GetFcName() NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_FcName_Union {
	if t == nil || t.FcName == nil {
		return nil
	}
	return t.FcName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DeMark.PopulateDefaults()
	t.DeMarkInner.PopulateDefaults()
	t.DeMarkOuter.PopulateDefaults()
	t.Dot1P.PopulateDefaults()
	t.Dot1PInner.PopulateDefaults()
	t.Dot1POuter.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMark represents the /nokia-conf/configure/groups/group/qos/fc-dot1p-map/fc/de-mark YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMark struct {
	Force *int32 `path:"force" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMark) IsYANGGoStruct() {}

// GetForce retrieves the value of the leaf Force from the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Force is set, it can
// safely use t.GetForce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Force == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMark) GetForce() int32 {
	if t == nil || t.Force == nil {
		return 0
	}
	return *t.Force
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMark.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkInner represents the /nokia-conf/configure/groups/group/qos/fc-dot1p-map/fc/de-mark-inner YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkInner struct {
	Force *int32 `path:"force" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkInner implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkInner) IsYANGGoStruct() {}

// GetForce retrieves the value of the leaf Force from the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkInner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Force is set, it can
// safely use t.GetForce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Force == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkInner) GetForce() int32 {
	if t == nil || t.Force == nil {
		return 0
	}
	return *t.Force
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkInner
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkInner) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkInner) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkInner"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkInner) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkInner) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkInner.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkInner) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkOuter represents the /nokia-conf/configure/groups/group/qos/fc-dot1p-map/fc/de-mark-outer YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkOuter struct {
	Force *int32 `path:"force" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkOuter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkOuter) IsYANGGoStruct() {}

// GetForce retrieves the value of the leaf Force from the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkOuter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Force is set, it can
// safely use t.GetForce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Force == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkOuter) GetForce() int32 {
	if t == nil || t.Force == nil {
		return 0
	}
	return *t.Force
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkOuter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkOuter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkOuter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkOuter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkOuter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkOuter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkOuter.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_DeMarkOuter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1P represents the /nokia-conf/configure/groups/group/qos/fc-dot1p-map/fc/dot1p YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1P struct {
	InProfile  *int32 `path:"in-profile" module:"nokia-conf"`
	OutProfile *int32 `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1P) IsYANGGoStruct() {}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1P) GetInProfile() int32 {
	if t == nil || t.InProfile == nil {
		return 0
	}
	return *t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1P) GetOutProfile() int32 {
	if t == nil || t.OutProfile == nil {
		return 0
	}
	return *t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1P.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1PInner represents the /nokia-conf/configure/groups/group/qos/fc-dot1p-map/fc/dot1p-inner YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1PInner struct {
	InProfile  *int32 `path:"in-profile" module:"nokia-conf"`
	OutProfile *int32 `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1PInner implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1PInner) IsYANGGoStruct() {}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1PInner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1PInner) GetInProfile() int32 {
	if t == nil || t.InProfile == nil {
		return 0
	}
	return *t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1PInner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1PInner) GetOutProfile() int32 {
	if t == nil || t.OutProfile == nil {
		return 0
	}
	return *t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1PInner
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1PInner) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1PInner) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1PInner"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1PInner) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1PInner) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1PInner.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1PInner) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1POuter represents the /nokia-conf/configure/groups/group/qos/fc-dot1p-map/fc/dot1p-outer YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1POuter struct {
	InProfile  *int32 `path:"in-profile" module:"nokia-conf"`
	OutProfile *int32 `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1POuter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1POuter) IsYANGGoStruct() {}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1POuter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1POuter) GetInProfile() int32 {
	if t == nil || t.InProfile == nil {
		return 0
	}
	return *t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1POuter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1POuter) GetOutProfile() int32 {
	if t == nil || t.OutProfile == nil {
		return 0
	}
	return *t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1POuter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1POuter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1POuter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1POuter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1POuter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1POuter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1POuter.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDot1PMap_Fc_Dot1POuter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_FcDscpMap represents the /nokia-conf/configure/groups/group/qos/fc-dscp-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_FcDscpMap struct {
	Fc            map[NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc `path:"fc" module:"nokia-conf"`
	FcDscpMapName *string                                                                                                               `path:"fc-dscp-map-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_FcDscpMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDscpMap) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Qos_FcDscpMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap) NewFc(FcName NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_FcName_Union) (*NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Qos_FcDscpMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap) RenameFc(oldK, newK NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_FcName_Union) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_FcDscpMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap) GetOrCreateFc(FcName NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Qos_FcDscpMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap) GetFc(FcName NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_FcDscpMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap) DeleteFc(FcName NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_FcName_Union) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Qos_FcDscpMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap) AppendFc(v *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// GetFcDscpMapName retrieves the value of the leaf FcDscpMapName from the NokiaConf_Configure_Groups_Group_Qos_FcDscpMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcDscpMapName is set, it can
// safely use t.GetFcDscpMapName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcDscpMapName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap) GetFcDscpMapName() string {
	if t == nil || t.FcDscpMapName == nil {
		return ""
	}
	return *t.FcDscpMapName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_FcDscpMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_FcDscpMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FcDscpMapName == nil {
		return nil, fmt.Errorf("nil value for key FcDscpMapName")
	}

	return map[string]interface{}{
		"fc-dscp-map-name": *t.FcDscpMapName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_FcDscpMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_FcDscpMap.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDscpMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc represents the /nokia-conf/configure/groups/group/qos/fc-dscp-map/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc struct {
	Dscp   *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_Dscp        `path:"dscp" module:"nokia-conf"`
	FcName NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_FcName_Union `path:"fc-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc) IsYANGGoStruct() {}

// GetOrCreateDscp retrieves the value of the Dscp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc) GetOrCreateDscp() *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_Dscp {
	if t.Dscp != nil {
		return t.Dscp
	}
	t.Dscp = &NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_Dscp{}
	return t.Dscp
}

// GetDscp returns the value of the Dscp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc. If the receiver or the field Dscp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc) GetDscp() *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_Dscp {
	if t != nil && t.Dscp != nil {
		return t.Dscp
	}
	return nil
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc) GetFcName() NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_FcName_Union {
	if t == nil || t.FcName == nil {
		return nil
	}
	return t.FcName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dscp.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_Dscp represents the /nokia-conf/configure/groups/group/qos/fc-dscp-map/fc/dscp YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_Dscp struct {
	InProfile  E_NokiaTypesQos_DscpName `path:"in-profile" module:"nokia-conf"`
	OutProfile E_NokiaTypesQos_DscpName `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_Dscp) IsYANGGoStruct() {}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_Dscp) GetInProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.InProfile == 0 {
		return 0
	}
	return t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_Dscp) GetOutProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.OutProfile == 0 {
		return 0
	}
	return t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_Dscp.
func (*NokiaConf_Configure_Groups_Group_Qos_FcDscpMap_Fc_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap represents the /nokia-conf/configure/groups/group/qos/fc-lsp-exp-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap struct {
	Fc              map[NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc `path:"fc" module:"nokia-conf"`
	FcLspExpMapName *string                                                                                                                   `path:"fc-lsp-exp-map-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap) NewFc(FcName NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_FcName_Union) (*NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap) RenameFc(oldK, newK NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_FcName_Union) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap) GetOrCreateFc(FcName NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap) GetFc(FcName NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap) DeleteFc(FcName NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_FcName_Union) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap) AppendFc(v *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// GetFcLspExpMapName retrieves the value of the leaf FcLspExpMapName from the NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcLspExpMapName is set, it can
// safely use t.GetFcLspExpMapName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcLspExpMapName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap) GetFcLspExpMapName() string {
	if t == nil || t.FcLspExpMapName == nil {
		return ""
	}
	return *t.FcLspExpMapName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FcLspExpMapName == nil {
		return nil, fmt.Errorf("nil value for key FcLspExpMapName")
	}

	return map[string]interface{}{
		"fc-lsp-exp-map-name": *t.FcLspExpMapName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap.
func (*NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc represents the /nokia-conf/configure/groups/group/qos/fc-lsp-exp-map/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc struct {
	FcName NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_FcName_Union `path:"fc-name" module:"nokia-conf"`
	LspExp *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_LspExp      `path:"lsp-exp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc) IsYANGGoStruct() {}

// GetOrCreateLspExp retrieves the value of the LspExp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc) GetOrCreateLspExp() *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_LspExp {
	if t.LspExp != nil {
		return t.LspExp
	}
	t.LspExp = &NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_LspExp{}
	return t.LspExp
}

// GetLspExp returns the value of the LspExp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc. If the receiver or the field LspExp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc) GetLspExp() *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_LspExp {
	if t != nil && t.LspExp != nil {
		return t.LspExp
	}
	return nil
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc) GetFcName() NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_FcName_Union {
	if t == nil || t.FcName == nil {
		return nil
	}
	return t.FcName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LspExp.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc.
func (*NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_LspExp represents the /nokia-conf/configure/groups/group/qos/fc-lsp-exp-map/fc/lsp-exp YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_LspExp struct {
	InProfile  *int32 `path:"in-profile" module:"nokia-conf"`
	OutProfile *int32 `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_LspExp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_LspExp) IsYANGGoStruct() {}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_LspExp) GetInProfile() int32 {
	if t == nil || t.InProfile == nil {
		return 0
	}
	return *t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_LspExp) GetOutProfile() int32 {
	if t == nil || t.OutProfile == nil {
		return 0
	}
	return *t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_LspExp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_LspExp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_LspExp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_LspExp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_LspExp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_LspExp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_LspExp.
func (*NokiaConf_Configure_Groups_Group_Qos_FcLspExpMap_Fc_LspExp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy represents the /nokia-conf/configure/groups/group/qos/fp-resource-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy struct {
	AggregateShapers     *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers `path:"aggregate-shapers" module:"nokia-conf"`
	Description          *string                                                                 `path:"description" module:"nokia-conf"`
	FpResourcePolicyName *string                                                                 `path:"fp-resource-policy-name" module:"nokia-conf"`
	Ports                *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports            `path:"ports" module:"nokia-conf"`
	Queues               *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Queues           `path:"queues" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy) IsYANGGoStruct() {}

// GetOrCreateAggregateShapers retrieves the value of the AggregateShapers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy) GetOrCreateAggregateShapers() *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers {
	if t.AggregateShapers != nil {
		return t.AggregateShapers
	}
	t.AggregateShapers = &NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers{}
	return t.AggregateShapers
}

// GetOrCreatePorts retrieves the value of the Ports field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy) GetOrCreatePorts() *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports {
	if t.Ports != nil {
		return t.Ports
	}
	t.Ports = &NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports{}
	return t.Ports
}

// GetOrCreateQueues retrieves the value of the Queues field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy) GetOrCreateQueues() *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Queues {
	if t.Queues != nil {
		return t.Queues
	}
	t.Queues = &NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Queues{}
	return t.Queues
}

// GetAggregateShapers returns the value of the AggregateShapers struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy. If the receiver or the field AggregateShapers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy) GetAggregateShapers() *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers {
	if t != nil && t.AggregateShapers != nil {
		return t.AggregateShapers
	}
	return nil
}

// GetPorts returns the value of the Ports struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy. If the receiver or the field Ports is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy) GetPorts() *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports {
	if t != nil && t.Ports != nil {
		return t.Ports
	}
	return nil
}

// GetQueues returns the value of the Queues struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy. If the receiver or the field Queues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy) GetQueues() *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Queues {
	if t != nil && t.Queues != nil {
		return t.Queues
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFpResourcePolicyName retrieves the value of the leaf FpResourcePolicyName from the NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpResourcePolicyName is set, it can
// safely use t.GetFpResourcePolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpResourcePolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy) GetFpResourcePolicyName() string {
	if t == nil || t.FpResourcePolicyName == nil {
		return ""
	}
	return *t.FpResourcePolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AggregateShapers.PopulateDefaults()
	t.Ports.PopulateDefaults()
	t.Queues.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FpResourcePolicyName == nil {
		return nil, fmt.Errorf("nil value for key FpResourcePolicyName")
	}

	return map[string]interface{}{
		"fp-resource-policy-name": *t.FpResourcePolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy.
func (*NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers represents the /nokia-conf/configure/groups/group/qos/fp-resource-policy/aggregate-shapers YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers struct {
	AutoCreation *bool                                                                                `path:"auto-creation" module:"nokia-conf"`
	HwAggShapers *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers `path:"hw-agg-shapers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers) IsYANGGoStruct() {}

// GetOrCreateHwAggShapers retrieves the value of the HwAggShapers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers) GetOrCreateHwAggShapers() *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers {
	if t.HwAggShapers != nil {
		return t.HwAggShapers
	}
	t.HwAggShapers = &NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers{}
	return t.HwAggShapers
}

// GetHwAggShapers returns the value of the HwAggShapers struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers. If the receiver or the field HwAggShapers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers) GetHwAggShapers() *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers {
	if t != nil && t.HwAggShapers != nil {
		return t.HwAggShapers
	}
	return nil
}

// GetAutoCreation retrieves the value of the leaf AutoCreation from the NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoCreation is set, it can
// safely use t.GetAutoCreation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoCreation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers) GetAutoCreation() bool {
	if t == nil || t.AutoCreation == nil {
		return false
	}
	return *t.AutoCreation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoCreation == nil {
		var v bool = false
		t.AutoCreation = &v
	}
	t.HwAggShapers.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers.
func (*NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers represents the /nokia-conf/configure/groups/group/qos/fp-resource-policy/aggregate-shapers/hw-agg-shapers YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers struct {
	Subscribers *bool `path:"subscribers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers) IsYANGGoStruct() {
}

// GetSubscribers retrieves the value of the leaf Subscribers from the NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subscribers is set, it can
// safely use t.GetSubscribers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subscribers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers) GetSubscribers() bool {
	if t == nil || t.Subscribers == nil {
		return false
	}
	return *t.Subscribers
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Subscribers == nil {
		var v bool = false
		t.Subscribers = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers.
func (*NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports represents the /nokia-conf/configure/groups/group/qos/fp-resource-policy/ports YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports struct {
	HqosMode E_NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports_HqosMode `path:"hqos-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports) IsYANGGoStruct() {}

// GetHqosMode retrieves the value of the leaf HqosMode from the NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HqosMode is set, it can
// safely use t.GetHqosMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HqosMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports) GetHqosMode() E_NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports_HqosMode {
	if t == nil || t.HqosMode == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports_HqosMode_port_scheduler
	}
	return t.HqosMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HqosMode == 0 {
		t.HqosMode = NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports_HqosMode_port_scheduler
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports.
func (*NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Ports) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Queues represents the /nokia-conf/configure/groups/group/qos/fp-resource-policy/queues YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Queues struct {
	IngressPercentOfTotal *float64 `path:"ingress-percent-of-total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Queues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Queues) IsYANGGoStruct() {}

// GetIngressPercentOfTotal retrieves the value of the leaf IngressPercentOfTotal from the NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Queues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressPercentOfTotal is set, it can
// safely use t.GetIngressPercentOfTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressPercentOfTotal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Queues) GetIngressPercentOfTotal() float64 {
	if t == nil || t.IngressPercentOfTotal == nil {
		return 50.00
	}
	return *t.IngressPercentOfTotal
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Queues
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Queues) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IngressPercentOfTotal == nil {
		var v float64 = 50.00
		t.IngressPercentOfTotal = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Queues) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Queues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Queues) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Queues) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Queues.
func (*NokiaConf_Configure_Groups_Group_Qos_FpResourcePolicy_Queues) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy represents the /nokia-conf/configure/groups/group/qos/hs-attachment-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy struct {
	Description      *string                                                                                                                                                 `path:"description" module:"nokia-conf"`
	LowBurstMaxClass *uint32                                                                                                                                                 `path:"low-burst-max-class" module:"nokia-conf"`
	Name             *string                                                                                                                                                 `path:"name" module:"nokia-conf"`
	Queue            map[NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue          `path:"queue" module:"nokia-conf"`
	WrrGroup         map[NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup_WrrGroupId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup `path:"wrr-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) AppendQueue(v *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// NewWrrGroup creates a new entry in the WrrGroup list of the
// NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) NewWrrGroup(WrrGroupId NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup_WrrGroupId_Union) (*NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.WrrGroup == nil {
		t.WrrGroup = make(map[NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup_WrrGroupId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup)
	}

	key := WrrGroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.WrrGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list WrrGroup", key)
	}

	t.WrrGroup[key] = &NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup{
		WrrGroupId: WrrGroupId,
	}

	return t.WrrGroup[key], nil
}

// RenameWrrGroup renames an entry in the list WrrGroup within
// the NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) RenameWrrGroup(oldK, newK NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup_WrrGroupId_Union) error {
	if _, ok := t.WrrGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in WrrGroup", newK)
	}

	e, ok := t.WrrGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in WrrGroup", oldK)
	}
	e.WrrGroupId = newK

	t.WrrGroup[newK] = e
	delete(t.WrrGroup, oldK)
	return nil
}

// GetOrCreateWrrGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) GetOrCreateWrrGroup(WrrGroupId NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup_WrrGroupId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup {

	key := WrrGroupId

	if v, ok := t.WrrGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewWrrGroup(WrrGroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateWrrGroup got unexpected error: %v", err))
	}
	return v
}

// GetWrrGroup retrieves the value with the specified key from
// the WrrGroup map field of NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) GetWrrGroup(WrrGroupId NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup_WrrGroupId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup {

	if t == nil {
		return nil
	}

	key := WrrGroupId

	if lm, ok := t.WrrGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteWrrGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) DeleteWrrGroup(WrrGroupId NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup_WrrGroupId_Union) {
	key := WrrGroupId

	delete(t.WrrGroup, key)
}

// AppendWrrGroup appends the supplied NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup struct to the
// list WrrGroup of NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) AppendWrrGroup(v *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup) error {
	key := v.WrrGroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.WrrGroup == nil {
		t.WrrGroup = make(map[NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup_WrrGroupId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup)
	}

	if _, ok := t.WrrGroup[key]; ok {
		return fmt.Errorf("duplicate key for list WrrGroup %v", key)
	}

	t.WrrGroup[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLowBurstMaxClass retrieves the value of the leaf LowBurstMaxClass from the NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowBurstMaxClass is set, it can
// safely use t.GetLowBurstMaxClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowBurstMaxClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) GetLowBurstMaxClass() uint32 {
	if t == nil || t.LowBurstMaxClass == nil {
		return 6
	}
	return *t.LowBurstMaxClass
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LowBurstMaxClass == nil {
		var v uint32 = 6
		t.LowBurstMaxClass = &v
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
	for _, e := range t.WrrGroup {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy.
func (*NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue represents the /nokia-conf/configure/groups/group/qos/hs-attachment-policy/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue struct {
	QueueId    NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue_QueueId_Union `path:"queue-id" module:"nokia-conf"`
	SchedClass *int32                                                                      `path:"sched-class" module:"nokia-conf"`
	Unattached YANGEmpty                                                                   `path:"unattached" module:"nokia-conf"`
	WrrGroup   *int32                                                                      `path:"wrr-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue) IsYANGGoStruct() {}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// GetSchedClass retrieves the value of the leaf SchedClass from the NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedClass is set, it can
// safely use t.GetSchedClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue) GetSchedClass() int32 {
	if t == nil || t.SchedClass == nil {
		return 0
	}
	return *t.SchedClass
}

// GetUnattached retrieves the value of the leaf Unattached from the NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Unattached is set, it can
// safely use t.GetUnattached() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Unattached == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue) GetUnattached() YANGEmpty {
	if t == nil || t.Unattached == false {
		return false
	}
	return t.Unattached
}

// GetWrrGroup retrieves the value of the leaf WrrGroup from the NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrGroup is set, it can
// safely use t.GetWrrGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue) GetWrrGroup() int32 {
	if t == nil || t.WrrGroup == nil {
		return 0
	}
	return *t.WrrGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue.
func (*NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup represents the /nokia-conf/configure/groups/group/qos/hs-attachment-policy/wrr-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup struct {
	SchedClass *int32                                                                            `path:"sched-class" module:"nokia-conf"`
	Unattached YANGEmpty                                                                         `path:"unattached" module:"nokia-conf"`
	WrrGroupId NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup_WrrGroupId_Union `path:"wrr-group-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup) IsYANGGoStruct() {}

// GetSchedClass retrieves the value of the leaf SchedClass from the NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedClass is set, it can
// safely use t.GetSchedClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup) GetSchedClass() int32 {
	if t == nil || t.SchedClass == nil {
		return 0
	}
	return *t.SchedClass
}

// GetUnattached retrieves the value of the leaf Unattached from the NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Unattached is set, it can
// safely use t.GetUnattached() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Unattached == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup) GetUnattached() YANGEmpty {
	if t == nil || t.Unattached == false {
		return false
	}
	return t.Unattached
}

// GetWrrGroupId retrieves the value of the leaf WrrGroupId from the NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrGroupId is set, it can
// safely use t.GetWrrGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrGroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup) GetWrrGroupId() NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup_WrrGroupId_Union {
	if t == nil || t.WrrGroupId == nil {
		return nil
	}
	return t.WrrGroupId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"wrr-group-id": t.WrrGroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup.
func (*NokiaConf_Configure_Groups_Group_Qos_HsAttachmentPolicy_WrrGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy represents the /nokia-conf/configure/groups/group/qos/hs-pool-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy struct {
	Description   *string                                                     `path:"description" module:"nokia-conf"`
	MidTier       *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier  `path:"mid-tier" module:"nokia-conf"`
	Name          *string                                                     `path:"name" module:"nokia-conf"`
	RootTier      *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier `path:"root-tier" module:"nokia-conf"`
	SystemReserve *float64                                                    `path:"system-reserve" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy) IsYANGGoStruct() {}

// GetOrCreateMidTier retrieves the value of the MidTier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy) GetOrCreateMidTier() *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier {
	if t.MidTier != nil {
		return t.MidTier
	}
	t.MidTier = &NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier{}
	return t.MidTier
}

// GetOrCreateRootTier retrieves the value of the RootTier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy) GetOrCreateRootTier() *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier {
	if t.RootTier != nil {
		return t.RootTier
	}
	t.RootTier = &NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier{}
	return t.RootTier
}

// GetMidTier returns the value of the MidTier struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy. If the receiver or the field MidTier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy) GetMidTier() *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier {
	if t != nil && t.MidTier != nil {
		return t.MidTier
	}
	return nil
}

// GetRootTier returns the value of the RootTier struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy. If the receiver or the field RootTier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy) GetRootTier() *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier {
	if t != nil && t.RootTier != nil {
		return t.RootTier
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSystemReserve retrieves the value of the leaf SystemReserve from the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemReserve is set, it can
// safely use t.GetSystemReserve() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemReserve == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy) GetSystemReserve() float64 {
	if t == nil || t.SystemReserve == nil {
		return 5.00
	}
	return *t.SystemReserve
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SystemReserve == nil {
		var v float64 = 5.00
		t.SystemReserve = &v
	}
	t.MidTier.PopulateDefaults()
	t.RootTier.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier represents the /nokia-conf/configure/groups/group/qos/hs-pool-policy/mid-tier YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier struct {
	MidPool map[NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_MidPoolId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool `path:"mid-pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier) IsYANGGoStruct() {}

// NewMidPool creates a new entry in the MidPool list of the
// NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier) NewMidPool(MidPoolId NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_MidPoolId_Union) (*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MidPool == nil {
		t.MidPool = make(map[NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_MidPoolId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool)
	}

	key := MidPoolId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MidPool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MidPool", key)
	}

	t.MidPool[key] = &NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool{
		MidPoolId: MidPoolId,
	}

	return t.MidPool[key], nil
}

// RenameMidPool renames an entry in the list MidPool within
// the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier) RenameMidPool(oldK, newK NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_MidPoolId_Union) error {
	if _, ok := t.MidPool[newK]; ok {
		return fmt.Errorf("key %v already exists in MidPool", newK)
	}

	e, ok := t.MidPool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MidPool", oldK)
	}
	e.MidPoolId = newK

	t.MidPool[newK] = e
	delete(t.MidPool, oldK)
	return nil
}

// GetOrCreateMidPool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier) GetOrCreateMidPool(MidPoolId NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_MidPoolId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool {

	key := MidPoolId

	if v, ok := t.MidPool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMidPool(MidPoolId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMidPool got unexpected error: %v", err))
	}
	return v
}

// GetMidPool retrieves the value with the specified key from
// the MidPool map field of NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier) GetMidPool(MidPoolId NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_MidPoolId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool {

	if t == nil {
		return nil
	}

	key := MidPoolId

	if lm, ok := t.MidPool[key]; ok {
		return lm
	}
	return nil
}

// DeleteMidPool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier) DeleteMidPool(MidPoolId NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_MidPoolId_Union) {
	key := MidPoolId

	delete(t.MidPool, key)
}

// AppendMidPool appends the supplied NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool struct to the
// list MidPool of NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier) AppendMidPool(v *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool) error {
	key := v.MidPoolId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MidPool == nil {
		t.MidPool = make(map[NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_MidPoolId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool)
	}

	if _, ok := t.MidPool[key]; ok {
		return fmt.Errorf("duplicate key for list MidPool %v", key)
	}

	t.MidPool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MidPool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool represents the /nokia-conf/configure/groups/group/qos/hs-pool-policy/mid-tier/mid-pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool struct {
	AllocationPercent            *float64                                                                          `path:"allocation-percent" module:"nokia-conf"`
	MidPoolId                    NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_MidPoolId_Union `path:"mid-pool-id" module:"nokia-conf"`
	ParentRootPool               *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool `path:"parent-root-pool" module:"nokia-conf"`
	PortBwOversubscriptionFactor *uint32                                                                           `path:"port-bw-oversubscription-factor" module:"nokia-conf"`
	SlopePolicy                  *string                                                                           `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool) IsYANGGoStruct() {}

// GetOrCreateParentRootPool retrieves the value of the ParentRootPool field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool) GetOrCreateParentRootPool() *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool {
	if t.ParentRootPool != nil {
		return t.ParentRootPool
	}
	t.ParentRootPool = &NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool{}
	return t.ParentRootPool
}

// GetParentRootPool returns the value of the ParentRootPool struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool. If the receiver or the field ParentRootPool is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool) GetParentRootPool() *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool {
	if t != nil && t.ParentRootPool != nil {
		return t.ParentRootPool
	}
	return nil
}

// GetAllocationPercent retrieves the value of the leaf AllocationPercent from the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllocationPercent is set, it can
// safely use t.GetAllocationPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllocationPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool) GetAllocationPercent() float64 {
	if t == nil || t.AllocationPercent == nil {
		return 0.0
	}
	return *t.AllocationPercent
}

// GetMidPoolId retrieves the value of the leaf MidPoolId from the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MidPoolId is set, it can
// safely use t.GetMidPoolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MidPoolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool) GetMidPoolId() NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_MidPoolId_Union {
	if t == nil || t.MidPoolId == nil {
		return nil
	}
	return t.MidPoolId
}

// GetPortBwOversubscriptionFactor retrieves the value of the leaf PortBwOversubscriptionFactor from the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortBwOversubscriptionFactor is set, it can
// safely use t.GetPortBwOversubscriptionFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortBwOversubscriptionFactor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool) GetPortBwOversubscriptionFactor() uint32 {
	if t == nil || t.PortBwOversubscriptionFactor == nil {
		return 1
	}
	return *t.PortBwOversubscriptionFactor
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortBwOversubscriptionFactor == nil {
		var v uint32 = 1
		t.PortBwOversubscriptionFactor = &v
	}
	t.ParentRootPool.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"mid-pool-id": t.MidPoolId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool represents the /nokia-conf/configure/groups/group/qos/hs-pool-policy/mid-tier/mid-pool/parent-root-pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool struct {
	None   YANGEmpty `path:"none" module:"nokia-conf"`
	PoolId *uint32   `path:"pool-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool) IsYANGGoStruct() {
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// GetPoolId retrieves the value of the leaf PoolId from the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolId is set, it can
// safely use t.GetPoolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool) GetPoolId() uint32 {
	if t == nil || t.PoolId == nil {
		return 0
	}
	return *t.PoolId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier represents the /nokia-conf/configure/groups/group/qos/hs-pool-policy/root-tier YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier struct {
	RootPool map[NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool_RootPoolId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool `path:"root-pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier) IsYANGGoStruct() {}

// NewRootPool creates a new entry in the RootPool list of the
// NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier) NewRootPool(RootPoolId NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool_RootPoolId_Union) (*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RootPool == nil {
		t.RootPool = make(map[NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool_RootPoolId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool)
	}

	key := RootPoolId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RootPool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RootPool", key)
	}

	t.RootPool[key] = &NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool{
		RootPoolId: RootPoolId,
	}

	return t.RootPool[key], nil
}

// RenameRootPool renames an entry in the list RootPool within
// the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier) RenameRootPool(oldK, newK NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool_RootPoolId_Union) error {
	if _, ok := t.RootPool[newK]; ok {
		return fmt.Errorf("key %v already exists in RootPool", newK)
	}

	e, ok := t.RootPool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RootPool", oldK)
	}
	e.RootPoolId = newK

	t.RootPool[newK] = e
	delete(t.RootPool, oldK)
	return nil
}

// GetOrCreateRootPool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier) GetOrCreateRootPool(RootPoolId NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool_RootPoolId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool {

	key := RootPoolId

	if v, ok := t.RootPool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRootPool(RootPoolId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRootPool got unexpected error: %v", err))
	}
	return v
}

// GetRootPool retrieves the value with the specified key from
// the RootPool map field of NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier) GetRootPool(RootPoolId NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool_RootPoolId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool {

	if t == nil {
		return nil
	}

	key := RootPoolId

	if lm, ok := t.RootPool[key]; ok {
		return lm
	}
	return nil
}

// DeleteRootPool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier) DeleteRootPool(RootPoolId NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool_RootPoolId_Union) {
	key := RootPoolId

	delete(t.RootPool, key)
}

// AppendRootPool appends the supplied NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool struct to the
// list RootPool of NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier) AppendRootPool(v *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool) error {
	key := v.RootPoolId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RootPool == nil {
		t.RootPool = make(map[NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool_RootPoolId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool)
	}

	if _, ok := t.RootPool[key]; ok {
		return fmt.Errorf("duplicate key for list RootPool %v", key)
	}

	t.RootPool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.RootPool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool represents the /nokia-conf/configure/groups/group/qos/hs-pool-policy/root-tier/root-pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool struct {
	AllocationWeight *uint32                                                                              `path:"allocation-weight" module:"nokia-conf"`
	RootPoolId       NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool_RootPoolId_Union `path:"root-pool-id" module:"nokia-conf"`
	SlopePolicy      *string                                                                              `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool) IsYANGGoStruct() {}

// GetAllocationWeight retrieves the value of the leaf AllocationWeight from the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllocationWeight is set, it can
// safely use t.GetAllocationWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllocationWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool) GetAllocationWeight() uint32 {
	if t == nil || t.AllocationWeight == nil {
		return 0
	}
	return *t.AllocationWeight
}

// GetRootPoolId retrieves the value of the leaf RootPoolId from the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootPoolId is set, it can
// safely use t.GetRootPoolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootPoolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool) GetRootPoolId() NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool_RootPoolId_Union {
	if t == nil || t.RootPoolId == nil {
		return nil
	}
	return t.RootPoolId
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"root-pool-id": t.RootPoolId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPoolPolicy_RootTier_RootPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy represents the /nokia-conf/configure/groups/group/qos/hs-port-pool-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy struct {
	AltPortClassPools *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools `path:"alt-port-class-pools" module:"nokia-conf"`
	Description       *string                                                                  `path:"description" module:"nokia-conf"`
	Name              *string                                                                  `path:"name" module:"nokia-conf"`
	StdPortClassPools *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools `path:"std-port-class-pools" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy) IsYANGGoStruct() {}

// GetOrCreateAltPortClassPools retrieves the value of the AltPortClassPools field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy) GetOrCreateAltPortClassPools() *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools {
	if t.AltPortClassPools != nil {
		return t.AltPortClassPools
	}
	t.AltPortClassPools = &NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools{}
	return t.AltPortClassPools
}

// GetOrCreateStdPortClassPools retrieves the value of the StdPortClassPools field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy) GetOrCreateStdPortClassPools() *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools {
	if t.StdPortClassPools != nil {
		return t.StdPortClassPools
	}
	t.StdPortClassPools = &NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools{}
	return t.StdPortClassPools
}

// GetAltPortClassPools returns the value of the AltPortClassPools struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy. If the receiver or the field AltPortClassPools is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy) GetAltPortClassPools() *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools {
	if t != nil && t.AltPortClassPools != nil {
		return t.AltPortClassPools
	}
	return nil
}

// GetStdPortClassPools returns the value of the StdPortClassPools struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy. If the receiver or the field StdPortClassPools is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy) GetStdPortClassPools() *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools {
	if t != nil && t.StdPortClassPools != nil {
		return t.StdPortClassPools
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AltPortClassPools.PopulateDefaults()
	t.StdPortClassPools.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools represents the /nokia-conf/configure/groups/group/qos/hs-port-pool-policy/alt-port-class-pools YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools struct {
	ClassPool map[NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_AltClassPoolId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool `path:"class-pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools) IsYANGGoStruct() {}

// NewClassPool creates a new entry in the ClassPool list of the
// NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools) NewClassPool(AltClassPoolId NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_AltClassPoolId_Union) (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClassPool == nil {
		t.ClassPool = make(map[NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_AltClassPoolId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool)
	}

	key := AltClassPoolId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ClassPool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ClassPool", key)
	}

	t.ClassPool[key] = &NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool{
		AltClassPoolId: AltClassPoolId,
	}

	return t.ClassPool[key], nil
}

// RenameClassPool renames an entry in the list ClassPool within
// the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools) RenameClassPool(oldK, newK NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_AltClassPoolId_Union) error {
	if _, ok := t.ClassPool[newK]; ok {
		return fmt.Errorf("key %v already exists in ClassPool", newK)
	}

	e, ok := t.ClassPool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ClassPool", oldK)
	}
	e.AltClassPoolId = newK

	t.ClassPool[newK] = e
	delete(t.ClassPool, oldK)
	return nil
}

// GetOrCreateClassPool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools) GetOrCreateClassPool(AltClassPoolId NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_AltClassPoolId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool {

	key := AltClassPoolId

	if v, ok := t.ClassPool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassPool(AltClassPoolId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassPool got unexpected error: %v", err))
	}
	return v
}

// GetClassPool retrieves the value with the specified key from
// the ClassPool map field of NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools) GetClassPool(AltClassPoolId NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_AltClassPoolId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool {

	if t == nil {
		return nil
	}

	key := AltClassPoolId

	if lm, ok := t.ClassPool[key]; ok {
		return lm
	}
	return nil
}

// DeleteClassPool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools) DeleteClassPool(AltClassPoolId NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_AltClassPoolId_Union) {
	key := AltClassPoolId

	delete(t.ClassPool, key)
}

// AppendClassPool appends the supplied NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool struct to the
// list ClassPool of NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools) AppendClassPool(v *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) error {
	key := v.AltClassPoolId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClassPool == nil {
		t.ClassPool = make(map[NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_AltClassPoolId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool)
	}

	if _, ok := t.ClassPool[key]; ok {
		return fmt.Errorf("duplicate key for list ClassPool %v", key)
	}

	t.ClassPool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ClassPool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool represents the /nokia-conf/configure/groups/group/qos/hs-port-pool-policy/alt-port-class-pools/class-pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool struct {
	Allocation     *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation          `path:"allocation" module:"nokia-conf"`
	AltClassPoolId NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_AltClassPoolId_Union `path:"alt-class-pool-id" module:"nokia-conf"`
	ParentMidPool  *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool       `path:"parent-mid-pool" module:"nokia-conf"`
	SlopePolicy    *string                                                                                                `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) IsYANGGoStruct() {
}

// GetOrCreateAllocation retrieves the value of the Allocation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) GetOrCreateAllocation() *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation {
	if t.Allocation != nil {
		return t.Allocation
	}
	t.Allocation = &NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation{}
	return t.Allocation
}

// GetOrCreateParentMidPool retrieves the value of the ParentMidPool field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) GetOrCreateParentMidPool() *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool {
	if t.ParentMidPool != nil {
		return t.ParentMidPool
	}
	t.ParentMidPool = &NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool{}
	return t.ParentMidPool
}

// GetAllocation returns the value of the Allocation struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool. If the receiver or the field Allocation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) GetAllocation() *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation {
	if t != nil && t.Allocation != nil {
		return t.Allocation
	}
	return nil
}

// GetParentMidPool returns the value of the ParentMidPool struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool. If the receiver or the field ParentMidPool is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) GetParentMidPool() *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool {
	if t != nil && t.ParentMidPool != nil {
		return t.ParentMidPool
	}
	return nil
}

// GetAltClassPoolId retrieves the value of the leaf AltClassPoolId from the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AltClassPoolId is set, it can
// safely use t.GetAltClassPoolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AltClassPoolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) GetAltClassPoolId() NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_AltClassPoolId_Union {
	if t == nil || t.AltClassPoolId == nil {
		return nil
	}
	return t.AltClassPoolId
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Allocation.PopulateDefaults()
	t.ParentMidPool.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"alt-class-pool-id": t.AltClassPoolId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation represents the /nokia-conf/configure/groups/group/qos/hs-port-pool-policy/alt-port-class-pools/class-pool/allocation YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation struct {
	ExplicitPercent *float64 `path:"explicit-percent" module:"nokia-conf"`
	PortBwWeight    *uint32  `path:"port-bw-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation) IsYANGGoStruct() {
}

// GetExplicitPercent retrieves the value of the leaf ExplicitPercent from the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitPercent is set, it can
// safely use t.GetExplicitPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation) GetExplicitPercent() float64 {
	if t == nil || t.ExplicitPercent == nil {
		return 0.0
	}
	return *t.ExplicitPercent
}

// GetPortBwWeight retrieves the value of the leaf PortBwWeight from the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortBwWeight is set, it can
// safely use t.GetPortBwWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortBwWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation) GetPortBwWeight() uint32 {
	if t == nil || t.PortBwWeight == nil {
		return 1
	}
	return *t.PortBwWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortBwWeight == nil {
		var v uint32 = 1
		t.PortBwWeight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool represents the /nokia-conf/configure/groups/group/qos/hs-port-pool-policy/alt-port-class-pools/class-pool/parent-mid-pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool struct {
	None   YANGEmpty `path:"none" module:"nokia-conf"`
	PoolId *uint32   `path:"pool-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool) IsYANGGoStruct() {
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// GetPoolId retrieves the value of the leaf PoolId from the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolId is set, it can
// safely use t.GetPoolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool) GetPoolId() uint32 {
	if t == nil || t.PoolId == nil {
		return 0
	}
	return *t.PoolId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools represents the /nokia-conf/configure/groups/group/qos/hs-port-pool-policy/std-port-class-pools YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools struct {
	ClassPool map[NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_StdClassPoolId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool `path:"class-pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools) IsYANGGoStruct() {}

// NewClassPool creates a new entry in the ClassPool list of the
// NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools) NewClassPool(StdClassPoolId NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_StdClassPoolId_Union) (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClassPool == nil {
		t.ClassPool = make(map[NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_StdClassPoolId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool)
	}

	key := StdClassPoolId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ClassPool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ClassPool", key)
	}

	t.ClassPool[key] = &NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool{
		StdClassPoolId: StdClassPoolId,
	}

	return t.ClassPool[key], nil
}

// RenameClassPool renames an entry in the list ClassPool within
// the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools) RenameClassPool(oldK, newK NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_StdClassPoolId_Union) error {
	if _, ok := t.ClassPool[newK]; ok {
		return fmt.Errorf("key %v already exists in ClassPool", newK)
	}

	e, ok := t.ClassPool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ClassPool", oldK)
	}
	e.StdClassPoolId = newK

	t.ClassPool[newK] = e
	delete(t.ClassPool, oldK)
	return nil
}

// GetOrCreateClassPool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools) GetOrCreateClassPool(StdClassPoolId NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_StdClassPoolId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool {

	key := StdClassPoolId

	if v, ok := t.ClassPool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassPool(StdClassPoolId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassPool got unexpected error: %v", err))
	}
	return v
}

// GetClassPool retrieves the value with the specified key from
// the ClassPool map field of NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools) GetClassPool(StdClassPoolId NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_StdClassPoolId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool {

	if t == nil {
		return nil
	}

	key := StdClassPoolId

	if lm, ok := t.ClassPool[key]; ok {
		return lm
	}
	return nil
}

// DeleteClassPool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools) DeleteClassPool(StdClassPoolId NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_StdClassPoolId_Union) {
	key := StdClassPoolId

	delete(t.ClassPool, key)
}

// AppendClassPool appends the supplied NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool struct to the
// list ClassPool of NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools) AppendClassPool(v *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) error {
	key := v.StdClassPoolId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClassPool == nil {
		t.ClassPool = make(map[NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_StdClassPoolId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool)
	}

	if _, ok := t.ClassPool[key]; ok {
		return fmt.Errorf("duplicate key for list ClassPool %v", key)
	}

	t.ClassPool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ClassPool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool represents the /nokia-conf/configure/groups/group/qos/hs-port-pool-policy/std-port-class-pools/class-pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool struct {
	Allocation     *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation          `path:"allocation" module:"nokia-conf"`
	ParentMidPool  *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool       `path:"parent-mid-pool" module:"nokia-conf"`
	SlopePolicy    *string                                                                                                `path:"slope-policy" module:"nokia-conf"`
	StdClassPoolId NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_StdClassPoolId_Union `path:"std-class-pool-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) IsYANGGoStruct() {
}

// GetOrCreateAllocation retrieves the value of the Allocation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) GetOrCreateAllocation() *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation {
	if t.Allocation != nil {
		return t.Allocation
	}
	t.Allocation = &NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation{}
	return t.Allocation
}

// GetOrCreateParentMidPool retrieves the value of the ParentMidPool field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) GetOrCreateParentMidPool() *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool {
	if t.ParentMidPool != nil {
		return t.ParentMidPool
	}
	t.ParentMidPool = &NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool{}
	return t.ParentMidPool
}

// GetAllocation returns the value of the Allocation struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool. If the receiver or the field Allocation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) GetAllocation() *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation {
	if t != nil && t.Allocation != nil {
		return t.Allocation
	}
	return nil
}

// GetParentMidPool returns the value of the ParentMidPool struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool. If the receiver or the field ParentMidPool is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) GetParentMidPool() *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool {
	if t != nil && t.ParentMidPool != nil {
		return t.ParentMidPool
	}
	return nil
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// GetStdClassPoolId retrieves the value of the leaf StdClassPoolId from the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StdClassPoolId is set, it can
// safely use t.GetStdClassPoolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StdClassPoolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) GetStdClassPoolId() NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_StdClassPoolId_Union {
	if t == nil || t.StdClassPoolId == nil {
		return nil
	}
	return t.StdClassPoolId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Allocation.PopulateDefaults()
	t.ParentMidPool.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"std-class-pool-id": t.StdClassPoolId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation represents the /nokia-conf/configure/groups/group/qos/hs-port-pool-policy/std-port-class-pools/class-pool/allocation YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation struct {
	ExplicitPercent *float64 `path:"explicit-percent" module:"nokia-conf"`
	PortBwWeight    *uint32  `path:"port-bw-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation) IsYANGGoStruct() {
}

// GetExplicitPercent retrieves the value of the leaf ExplicitPercent from the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitPercent is set, it can
// safely use t.GetExplicitPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation) GetExplicitPercent() float64 {
	if t == nil || t.ExplicitPercent == nil {
		return 0.0
	}
	return *t.ExplicitPercent
}

// GetPortBwWeight retrieves the value of the leaf PortBwWeight from the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortBwWeight is set, it can
// safely use t.GetPortBwWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortBwWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation) GetPortBwWeight() uint32 {
	if t == nil || t.PortBwWeight == nil {
		return 1
	}
	return *t.PortBwWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortBwWeight == nil {
		var v uint32 = 1
		t.PortBwWeight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool represents the /nokia-conf/configure/groups/group/qos/hs-port-pool-policy/std-port-class-pools/class-pool/parent-mid-pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool struct {
	None   YANGEmpty `path:"none" module:"nokia-conf"`
	PoolId *uint32   `path:"pool-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool) IsYANGGoStruct() {
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// GetPoolId retrieves the value of the leaf PoolId from the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolId is set, it can
// safely use t.GetPoolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool) GetPoolId() uint32 {
	if t == nil || t.PoolId == nil {
		return 0
	}
	return *t.PoolId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool.
func (*NokiaConf_Configure_Groups_Group_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy represents the /nokia-conf/configure/groups/group/qos/hs-scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy struct {
	Description     *string                                                                                                                                                          `path:"description" module:"nokia-conf"`
	Group           map[NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group_GroupId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group                     `path:"group" module:"nokia-conf"`
	MaxRate         NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_MaxRate_Union                                                                                             `path:"max-rate" module:"nokia-conf"`
	Name            *string                                                                                                                                                          `path:"name" module:"nokia-conf"`
	SchedulingClass map[NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass `path:"scheduling-class" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) NewGroup(GroupId NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group_GroupId_Union) (*NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group_GroupId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group{
		GroupId: GroupId,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) RenameGroup(oldK, newK NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group_GroupId_Union) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupId = newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) GetOrCreateGroup(GroupId NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group_GroupId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group {

	key := GroupId

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) GetGroup(GroupId NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group_GroupId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) DeleteGroup(GroupId NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group_GroupId_Union) {
	key := GroupId

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) AppendGroup(v *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group) error {
	key := v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group_GroupId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewSchedulingClass creates a new entry in the SchedulingClass list of the
// NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) NewSchedulingClass(ClassId NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_ClassId_Union) (*NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulingClass == nil {
		t.SchedulingClass = make(map[NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass)
	}

	key := ClassId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SchedulingClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SchedulingClass", key)
	}

	t.SchedulingClass[key] = &NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass{
		ClassId: ClassId,
	}

	return t.SchedulingClass[key], nil
}

// RenameSchedulingClass renames an entry in the list SchedulingClass within
// the NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) RenameSchedulingClass(oldK, newK NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_ClassId_Union) error {
	if _, ok := t.SchedulingClass[newK]; ok {
		return fmt.Errorf("key %v already exists in SchedulingClass", newK)
	}

	e, ok := t.SchedulingClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SchedulingClass", oldK)
	}
	e.ClassId = newK

	t.SchedulingClass[newK] = e
	delete(t.SchedulingClass, oldK)
	return nil
}

// GetOrCreateSchedulingClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) GetOrCreateSchedulingClass(ClassId NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_ClassId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass {

	key := ClassId

	if v, ok := t.SchedulingClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSchedulingClass(ClassId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSchedulingClass got unexpected error: %v", err))
	}
	return v
}

// GetSchedulingClass retrieves the value with the specified key from
// the SchedulingClass map field of NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) GetSchedulingClass(ClassId NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_ClassId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass {

	if t == nil {
		return nil
	}

	key := ClassId

	if lm, ok := t.SchedulingClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteSchedulingClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) DeleteSchedulingClass(ClassId NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_ClassId_Union) {
	key := ClassId

	delete(t.SchedulingClass, key)
}

// AppendSchedulingClass appends the supplied NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass struct to the
// list SchedulingClass of NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) AppendSchedulingClass(v *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass) error {
	key := v.ClassId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulingClass == nil {
		t.SchedulingClass = make(map[NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass)
	}

	if _, ok := t.SchedulingClass[key]; ok {
		return fmt.Errorf("duplicate key for list SchedulingClass %v", key)
	}

	t.SchedulingClass[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) GetMaxRate() NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_MaxRate_Enum_max
	}
	return t.MaxRate
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxRate == nil {
		t.MaxRate = NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_MaxRate_Enum_max
	}
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.SchedulingClass {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}
